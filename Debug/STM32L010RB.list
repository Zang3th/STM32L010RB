
STM32L010RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004120  08004120  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004120  08004120  00014120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004128  08004128  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  080041a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080041a0  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff7a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002189  00000000  00000000  00030012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  000321a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  00032d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012f26  00000000  00000000  000337e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d00a  00000000  00000000  0004670e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ff75  00000000  00000000  00053718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c368d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca8  00000000  00000000  000c36e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f48 	.word	0x08003f48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003f48 	.word	0x08003f48

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <DHT22_PinAsOutput>:
#define DATA GPIOA, GPIO_PIN_6

// ----- Private functions ----- 

static void DHT22_PinAsOutput()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	0018      	movs	r0, r3
 80004ca:	2314      	movs	r3, #20
 80004cc:	001a      	movs	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f003 f90a 	bl	80036e8 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2240      	movs	r2, #64	; 0x40
 80004d8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2201      	movs	r2, #1
 80004de:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2202      	movs	r2, #2
 80004e4:	60da      	str	r2, [r3, #12]
	
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	1d3a      	adds	r2, r7, #4
 80004e8:	23a0      	movs	r3, #160	; 0xa0
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	0011      	movs	r1, r2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 f89c 	bl	800162c <HAL_GPIO_Init>
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b006      	add	sp, #24
 80004fa:	bd80      	pop	{r7, pc}

080004fc <DHT22_PinAsInput>:

static void DHT22_PinAsInput()
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	0018      	movs	r0, r3
 8000506:	2314      	movs	r3, #20
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f003 f8ec 	bl	80036e8 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_6;	
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2240      	movs	r2, #64	; 0x40
 8000514:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL; //Pullup?
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000522:	1d3a      	adds	r2, r7, #4
 8000524:	23a0      	movs	r3, #160	; 0xa0
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f001 f87e 	bl	800162c <HAL_GPIO_Init>
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b006      	add	sp, #24
 8000536:	bd80      	pop	{r7, pc}

08000538 <DHT22_StartTransmission>:

// ----- Public Functions -----

void DHT22_StartTransmission()
{		
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
    DHT22_PinAsOutput();            //Set pin as output
 800053c:	f7ff ffc0 	bl	80004c0 <DHT22_PinAsOutput>
	HAL_GPIO_WritePin(DATA, 0);     //Set pin low	
 8000540:	23a0      	movs	r3, #160	; 0xa0
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	2200      	movs	r2, #0
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	0018      	movs	r0, r3
 800054a:	f001 fa0a 	bl	8001962 <HAL_GPIO_WritePin>
    HAL_Delay(10);	                //Wait 18ms
 800054e:	200a      	movs	r0, #10
 8000550:	f000 ff6a 	bl	8001428 <HAL_Delay>
	HAL_GPIO_WritePin(DATA, 1);    //Set pin high	
 8000554:	23a0      	movs	r3, #160	; 0xa0
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	2201      	movs	r2, #1
 800055a:	2140      	movs	r1, #64	; 0x40
 800055c:	0018      	movs	r0, r3
 800055e:	f001 fa00 	bl	8001962 <HAL_GPIO_WritePin>
	UT_Delay_MicroSeconds(20);      //Wait 20us
 8000562:	2014      	movs	r0, #20
 8000564:	f000 fe94 	bl	8001290 <UT_Delay_MicroSeconds>
    DHT22_PinAsInput();             //Set pin as input
 8000568:	f7ff ffc8 	bl	80004fc <DHT22_PinAsInput>
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <DHT22_CheckResponse>:

int8_t DHT22_CheckResponse()
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
    int8_t response = 0;
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	UT_Delay_MicroSeconds(50);      //Wait 50us
 800057e:	2032      	movs	r0, #50	; 0x32
 8000580:	f000 fe86 	bl	8001290 <UT_Delay_MicroSeconds>

	if(!(HAL_GPIO_ReadPin(DATA)))   //If the pin is low
 8000584:	23a0      	movs	r3, #160	; 0xa0
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	2140      	movs	r1, #64	; 0x40
 800058a:	0018      	movs	r0, r3
 800058c:	f001 f9cc 	bl	8001928 <HAL_GPIO_ReadPin>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d111      	bne.n	80005b8 <DHT22_CheckResponse+0x46>
	{
		UT_Delay_MicroSeconds(100);  //Wait 100us
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f000 fe7b 	bl	8001290 <UT_Delay_MicroSeconds>

		if((HAL_GPIO_ReadPin(DATA))) //If the pin is high -> response is ok
 800059a:	23a0      	movs	r3, #160	; 0xa0
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	2140      	movs	r1, #64	; 0x40
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 f9c1 	bl	8001928 <HAL_GPIO_ReadPin>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d003      	beq.n	80005b2 <DHT22_CheckResponse+0x40>
		{
			response = 1;
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
 80005b0:	e002      	b.n	80005b8 <DHT22_CheckResponse+0x46>
		}			
		else
		{
			response = -1;
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	22ff      	movs	r2, #255	; 0xff
 80005b6:	701a      	strb	r2, [r3, #0]
		}
	}

	while(HAL_GPIO_ReadPin(DATA));  //Wait for pin to go low
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	23a0      	movs	r3, #160	; 0xa0
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 f9b1 	bl	8001928 <HAL_GPIO_ReadPin>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d1f7      	bne.n	80005ba <DHT22_CheckResponse+0x48>

	return response;
 80005ca:	1dfb      	adds	r3, r7, #7
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b25b      	sxtb	r3, r3
}
 80005d0:	0018      	movs	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b002      	add	sp, #8
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <set_RS>:
static char byteBuffer[8];

// ----- Private functions ----- 

static void set_RS(int state)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS, state);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	23a0      	movs	r3, #160	; 0xa0
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	2101      	movs	r1, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 f9b9 	bl	8001962 <HAL_GPIO_WritePin>
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b002      	add	sp, #8
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <set_RW>:
static void set_RW(int state)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RW, state);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	23a0      	movs	r3, #160	; 0xa0
 8000606:	05db      	lsls	r3, r3, #23
 8000608:	2102      	movs	r1, #2
 800060a:	0018      	movs	r0, r3
 800060c:	f001 f9a9 	bl	8001962 <HAL_GPIO_WritePin>
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}

08000618 <set_E>:
static void set_E(int state)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(E, state);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	b2da      	uxtb	r2, r3
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <set_E+0x20>)
 800062a:	0019      	movs	r1, r3
 800062c:	f001 f999 	bl	8001962 <HAL_GPIO_WritePin>
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bd80      	pop	{r7, pc}
 8000638:	50000400 	.word	0x50000400

0800063c <set_DB7>:
static void set_DB7(int state)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB7, state);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <set_DB7+0x20>)
 800064a:	001a      	movs	r2, r3
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	f001 f988 	bl	8001962 <HAL_GPIO_WritePin>
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b002      	add	sp, #8
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	50000400 	.word	0x50000400

08000660 <set_DB6>:
static void set_DB6(int state)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB6, state);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <set_DB6+0x20>)
 800066e:	001a      	movs	r2, r3
 8000670:	2140      	movs	r1, #64	; 0x40
 8000672:	f001 f976 	bl	8001962 <HAL_GPIO_WritePin>
}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b002      	add	sp, #8
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	50000400 	.word	0x50000400

08000684 <set_DB5>:
static void set_DB5(int state)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB5, state);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <set_DB5+0x20>)
 8000692:	001a      	movs	r2, r3
 8000694:	2120      	movs	r1, #32
 8000696:	f001 f964 	bl	8001962 <HAL_GPIO_WritePin>
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	50000400 	.word	0x50000400

080006a8 <set_DB4>:
static void set_DB4(int state)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB4, state);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <set_DB4+0x20>)
 80006b6:	001a      	movs	r2, r3
 80006b8:	2110      	movs	r1, #16
 80006ba:	f001 f952 	bl	8001962 <HAL_GPIO_WritePin>
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	50000400 	.word	0x50000400

080006cc <set_DB3>:
static void set_DB3(int state)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB3, state);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <set_DB3+0x20>)
 80006da:	001a      	movs	r2, r3
 80006dc:	2108      	movs	r1, #8
 80006de:	f001 f940 	bl	8001962 <HAL_GPIO_WritePin>
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	50000400 	.word	0x50000400

080006f0 <set_DB2>:
static void set_DB2(int state)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB2, state);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <set_DB2+0x20>)
 80006fe:	001a      	movs	r2, r3
 8000700:	2104      	movs	r1, #4
 8000702:	f001 f92e 	bl	8001962 <HAL_GPIO_WritePin>
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b002      	add	sp, #8
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	50000400 	.word	0x50000400

08000714 <set_DB1>:
static void set_DB1(int state)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB1, state);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <set_DB1+0x20>)
 8000722:	001a      	movs	r2, r3
 8000724:	2102      	movs	r1, #2
 8000726:	f001 f91c 	bl	8001962 <HAL_GPIO_WritePin>
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	50000400 	.word	0x50000400

08000738 <set_DB0>:
static void set_DB0(int state)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB0, state);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <set_DB0+0x20>)
 8000746:	001a      	movs	r2, r3
 8000748:	2101      	movs	r1, #1
 800074a:	f001 f90a 	bl	8001962 <HAL_GPIO_WritePin>
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	50000400 	.word	0x50000400

0800075c <get_DB7>:

static int get_DB7()
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
    GPIO_PinState state = HAL_GPIO_ReadPin(DB7);
 8000762:	1dfc      	adds	r4, r7, #7
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <get_DB7+0x2c>)
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	0018      	movs	r0, r3
 800076a:	f001 f8dd 	bl	8001928 <HAL_GPIO_ReadPin>
 800076e:	0003      	movs	r3, r0
 8000770:	7023      	strb	r3, [r4, #0]
    if(state == GPIO_PIN_SET)
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d101      	bne.n	800077e <get_DB7+0x22>
        return 1;
 800077a:	2301      	movs	r3, #1
 800077c:	e000      	b.n	8000780 <get_DB7+0x24>
    else
        return 0;
 800077e:	2300      	movs	r3, #0
}
 8000780:	0018      	movs	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	b003      	add	sp, #12
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	50000400 	.word	0x50000400

0800078c <sendEnable>:

static void sendEnable()
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
    set_E(1);
 8000792:	2001      	movs	r0, #1
 8000794:	f7ff ff40 	bl	8000618 <set_E>

    //Wait atleast 2 ticks
    uint32_t tick_start = HAL_GetTick();
 8000798:	f000 fe3c 	bl	8001414 <HAL_GetTick>
 800079c:	0003      	movs	r3, r0
 800079e:	607b      	str	r3, [r7, #4]
    while((HAL_GetTick() - tick_start) <= 2){}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	f000 fe37 	bl	8001414 <HAL_GetTick>
 80007a6:	0002      	movs	r2, r0
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d9f8      	bls.n	80007a2 <sendEnable+0x16>

    set_E(0);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff ff31 	bl	8000618 <set_E>
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}

080007be <waitForBusyFlag>:
static void waitForBusyFlag()
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
    set_RS(0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff ff07 	bl	80005d8 <set_RS>
    set_RW(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f7ff ff14 	bl	80005f8 <set_RW>
    sendEnable();    
 80007d0:	f7ff ffdc 	bl	800078c <sendEnable>

    int val = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
    while(val != 0)
 80007d8:	e003      	b.n	80007e2 <waitForBusyFlag+0x24>
    {
        val = get_DB7(); //Get busy flag
 80007da:	f7ff ffbf 	bl	800075c <get_DB7>
 80007de:	0003      	movs	r3, r0
 80007e0:	607b      	str	r3, [r7, #4]
    while(val != 0)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1f8      	bne.n	80007da <waitForBusyFlag+0x1c>
    }
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <sendCommand>:
static void sendCommand()
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
    sendEnable();
 80007f6:	f7ff ffc9 	bl	800078c <sendEnable>
    waitForBusyFlag();
 80007fa:	f7ff ffe0 	bl	80007be <waitForBusyFlag>
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <charToByteBuffer>:
static void charToByteBuffer(char c)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	0002      	movs	r2, r0
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 8000810:	230f      	movs	r3, #15
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	e017      	b.n	800084a <charToByteBuffer+0x46>
    {
        char val = (c >> i) & 0x01;
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	200f      	movs	r0, #15
 8000820:	183b      	adds	r3, r7, r0
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	411a      	asrs	r2, r3
 8000826:	0013      	movs	r3, r2
 8000828:	b2da      	uxtb	r2, r3
 800082a:	240e      	movs	r4, #14
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2101      	movs	r1, #1
 8000830:	400a      	ands	r2, r1
 8000832:	701a      	strb	r2, [r3, #0]
        byteBuffer[i] = val;
 8000834:	183b      	adds	r3, r7, r0
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4a09      	ldr	r2, [pc, #36]	; (8000860 <charToByteBuffer+0x5c>)
 800083a:	1939      	adds	r1, r7, r4
 800083c:	7809      	ldrb	r1, [r1, #0]
 800083e:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0; i < 8; i++)
 8000840:	183b      	adds	r3, r7, r0
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	183b      	adds	r3, r7, r0
 8000846:	3201      	adds	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	230f      	movs	r3, #15
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b07      	cmp	r3, #7
 8000852:	d9e2      	bls.n	800081a <charToByteBuffer+0x16>
    }
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b005      	add	sp, #20
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	2000008c 	.word	0x2000008c

08000864 <sendByteBuffer>:
static void sendByteBuffer()
{    
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
    //Write data
    set_RS(1);
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff feb4 	bl	80005d8 <set_RS>
    set_RW(0);
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff fec1 	bl	80005f8 <set_RW>

    //Address to write to correct pin
    uint16_t address = 0x0001;
 8000876:	1dbb      	adds	r3, r7, #6
 8000878:	2201      	movs	r2, #1
 800087a:	801a      	strh	r2, [r3, #0]

    for(uint8_t i = 0; i < 8; i++)
 800087c:	1d7b      	adds	r3, r7, #5
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e017      	b.n	80008b4 <sendByteBuffer+0x50>
    {        
        char val = byteBuffer[i];
 8000884:	1d7b      	adds	r3, r7, #5
 8000886:	781a      	ldrb	r2, [r3, #0]
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	490f      	ldr	r1, [pc, #60]	; (80008c8 <sendByteBuffer+0x64>)
 800088c:	5c8a      	ldrb	r2, [r1, r2]
 800088e:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, address, (int)val); 
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	1dbb      	adds	r3, r7, #6
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <sendByteBuffer+0x68>)
 800089a:	0019      	movs	r1, r3
 800089c:	f001 f861 	bl	8001962 <HAL_GPIO_WritePin>
        address = address << 1; //Go to next pin
 80008a0:	1dba      	adds	r2, r7, #6
 80008a2:	1dbb      	adds	r3, r7, #6
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	18db      	adds	r3, r3, r3
 80008a8:	8013      	strh	r3, [r2, #0]
    for(uint8_t i = 0; i < 8; i++)
 80008aa:	1d7b      	adds	r3, r7, #5
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	1d7b      	adds	r3, r7, #5
 80008b0:	3201      	adds	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	1d7b      	adds	r3, r7, #5
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b07      	cmp	r3, #7
 80008ba:	d9e3      	bls.n	8000884 <sendByteBuffer+0x20>
    }
    sendCommand();
 80008bc:	f7ff ff99 	bl	80007f2 <sendCommand>
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	50000400 	.word	0x50000400

080008d0 <LCD_Init>:

// ----- Public Functions ----- 

void LCD_Init()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
    //Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	0018      	movs	r0, r3
 80008da:	2314      	movs	r3, #20
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f002 ff02 	bl	80036e8 <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2203      	movs	r2, #3
 80008e8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2201      	movs	r2, #1
 80008ee:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2201      	movs	r2, #1
 80008fa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	1d3a      	adds	r2, r7, #4
 80008fe:	23a0      	movs	r3, #160	; 0xa0
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	0011      	movs	r1, r2
 8000904:	0018      	movs	r0, r3
 8000906:	f000 fe91 	bl	800162c <HAL_GPIO_Init>

	//Initialize all Output-Pins of Port B
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <LCD_Init+0xac>)
 800090e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2201      	movs	r2, #1
 8000914:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2201      	movs	r2, #1
 8000920:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4a16      	ldr	r2, [pc, #88]	; (8000980 <LCD_Init+0xb0>)
 8000926:	0019      	movs	r1, r3
 8000928:	0010      	movs	r0, r2
 800092a:	f000 fe7f 	bl	800162c <HAL_GPIO_Init>

    //Wait after startup
    HAL_Delay(16);
 800092e:	2010      	movs	r0, #16
 8000930:	f000 fd7a 	bl	8001428 <HAL_Delay>

    //Reset everything
    set_RS(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fe4f 	bl	80005d8 <set_RS>
    set_RW(0);
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff fe5c 	bl	80005f8 <set_RW>
    set_DB7(0);
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fe7b 	bl	800063c <set_DB7>
    set_DB6(0);
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fe8a 	bl	8000660 <set_DB6>
    set_DB5(0);
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff fe99 	bl	8000684 <set_DB5>
    set_DB4(0);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff fea8 	bl	80006a8 <set_DB4>
    set_DB3(0);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff feb7 	bl	80006cc <set_DB3>
    set_DB2(0);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff fec6 	bl	80006f0 <set_DB2>
    set_DB1(0);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fed5 	bl	8000714 <set_DB1>
    set_DB0(0);
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fee4 	bl	8000738 <set_DB0>

    sendCommand();
 8000970:	f7ff ff3f 	bl	80007f2 <sendCommand>
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b006      	add	sp, #24
 800097a:	bd80      	pop	{r7, pc}
 800097c:	000001ff 	.word	0x000001ff
 8000980:	50000400 	.word	0x50000400

08000984 <LCD_Set8BitMode>:

void LCD_Set8BitMode()
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
    set_RS(0);
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fe25 	bl	80005d8 <set_RS>
    set_RW(0);
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff fe32 	bl	80005f8 <set_RW>

    set_DB7(0);
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff fe51 	bl	800063c <set_DB7>
    set_DB6(0);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fe60 	bl	8000660 <set_DB6>
    set_DB5(1); //Configure Function Set
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff fe6f 	bl	8000684 <set_DB5>
    set_DB4(1); //8-Bit or 4-Bit
 80009a6:	2001      	movs	r0, #1
 80009a8:	f7ff fe7e 	bl	80006a8 <set_DB4>
    set_DB3(1); //2 Lines or 1 Line
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff fe8d 	bl	80006cc <set_DB3>
    set_DB2(0); //5x11 or 5x8 Pixel
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fe9c 	bl	80006f0 <set_DB2>
    set_DB1(0);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff feab 	bl	8000714 <set_DB1>
    set_DB0(0);
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff feba 	bl	8000738 <set_DB0>

    sendCommand();
 80009c4:	f7ff ff15 	bl	80007f2 <sendCommand>
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <LCD_ClearDisplay>:

void LCD_ClearDisplay()
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
    set_RS(0);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fe00 	bl	80005d8 <set_RS>
    set_RW(0);
 80009d8:	2000      	movs	r0, #0
 80009da:	f7ff fe0d 	bl	80005f8 <set_RW>

    set_DB7(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff fe2c 	bl	800063c <set_DB7>
    set_DB6(0);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff fe3b 	bl	8000660 <set_DB6>
    set_DB5(0);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff fe4a 	bl	8000684 <set_DB5>
    set_DB4(0);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff fe59 	bl	80006a8 <set_DB4>
    set_DB3(0);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff fe68 	bl	80006cc <set_DB3>
    set_DB2(0);
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fe77 	bl	80006f0 <set_DB2>
    set_DB1(0);
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff fe86 	bl	8000714 <set_DB1>
    set_DB0(1);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fe95 	bl	8000738 <set_DB0>

    sendCommand();
 8000a0e:	f7ff fef0 	bl	80007f2 <sendCommand>
}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <LCD_ReturnHome>:

void LCD_ReturnHome()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    set_RS(0);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fddb 	bl	80005d8 <set_RS>
    set_RW(0);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff fde8 	bl	80005f8 <set_RW>

    set_DB7(0);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f7ff fe07 	bl	800063c <set_DB7>
    set_DB6(0);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff fe16 	bl	8000660 <set_DB6>
    set_DB5(0);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fe25 	bl	8000684 <set_DB5>
    set_DB4(0);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff fe34 	bl	80006a8 <set_DB4>
    set_DB3(0);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff fe43 	bl	80006cc <set_DB3>
    set_DB2(0);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fe52 	bl	80006f0 <set_DB2>
    set_DB1(1);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff fe61 	bl	8000714 <set_DB1>
    set_DB0(0);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f7ff fe70 	bl	8000738 <set_DB0>

    sendCommand();
 8000a58:	f7ff fecb 	bl	80007f2 <sendCommand>
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <LCD_TurnDisplayOn>:

void LCD_TurnDisplayOn()
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
    set_RS(0);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff fdb6 	bl	80005d8 <set_RS>
    set_RW(0);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff fdc3 	bl	80005f8 <set_RW>

    set_DB7(0);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f7ff fde2 	bl	800063c <set_DB7>
    set_DB6(0);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fdf1 	bl	8000660 <set_DB6>
    set_DB5(0);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff fe00 	bl	8000684 <set_DB5>
    set_DB4(0);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fe0f 	bl	80006a8 <set_DB4>
    set_DB3(1); //Configure Display
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff fe1e 	bl	80006cc <set_DB3>
    set_DB2(1); //Turn On/Off
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff fe2d 	bl	80006f0 <set_DB2>
    set_DB1(0); //Cursor settings
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff fe3c 	bl	8000714 <set_DB1>
    set_DB0(0); //Cursor settings
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff fe4b 	bl	8000738 <set_DB0>

    sendCommand();
 8000aa2:	f7ff fea6 	bl	80007f2 <sendCommand>
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <LCD_Print>:
    charToByteBuffer(c);
    sendByteBuffer();
}

void LCD_Print(const char* string)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    //Iterate over every character     
    for(int i = 0; i < strlen(string); i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	e00b      	b.n	8000ad2 <LCD_Print+0x26>
    {
        charToByteBuffer(string[i]); //Get binary representation of the character
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	18d3      	adds	r3, r2, r3
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff fe9e 	bl	8000804 <charToByteBuffer>
        sendByteBuffer(); //Set pins accordingly
 8000ac8:	f7ff fecc 	bl	8000864 <sendByteBuffer>
    for(int i = 0; i < strlen(string); i++)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff fb17 	bl	8000108 <strlen>
 8000ada:	0002      	movs	r2, r0
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d8eb      	bhi.n	8000aba <LCD_Print+0xe>
    }    
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b004      	add	sp, #16
 8000aea:	bd80      	pop	{r7, pc}

08000aec <LCD_printf>:

void LCD_printf(const char* format, ...)
{
 8000aec:	b40f      	push	{r0, r1, r2, r3}
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b0c2      	sub	sp, #264	; 0x108
 8000af2:	af00      	add	r7, sp, #0
	va_list args;
	char buffer[256];	
	memset(buffer, 0, 256);
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	005a      	lsls	r2, r3, #1
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2100      	movs	r1, #0
 8000afc:	0018      	movs	r0, r3
 8000afe:	f002 fdf3 	bl	80036e8 <memset>

	va_start(args, format);	
 8000b02:	238a      	movs	r3, #138	; 0x8a
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	1d7a      	adds	r2, r7, #5
 8000b0a:	32ff      	adds	r2, #255	; 0xff
 8000b0c:	6013      	str	r3, [r2, #0]
	vsprintf(buffer, format, args);
 8000b0e:	1d7b      	adds	r3, r7, #5
 8000b10:	33ff      	adds	r3, #255	; 0xff
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	2388      	movs	r3, #136	; 0x88
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	6819      	ldr	r1, [r3, #0]
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f002 fe00 	bl	8003724 <vsiprintf>
	LCD_Print(buffer);
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff ffc0 	bl	8000aac <LCD_Print>
	va_end(args);
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b042      	add	sp, #264	; 0x108
 8000b32:	bc80      	pop	{r7}
 8000b34:	bc08      	pop	{r3}
 8000b36:	b004      	add	sp, #16
 8000b38:	4718      	bx	r3
	...

08000b3c <SystemClock_Config>:
UART_HandleTypeDef huart2;

// ----- Functions ----- 

static void SystemClock_Config(void)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b093      	sub	sp, #76	; 0x4c
 8000b40:	af00      	add	r7, sp, #0
  	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	2414      	movs	r4, #20
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	0018      	movs	r0, r3
 8000b48:	2334      	movs	r3, #52	; 0x34
 8000b4a:	001a      	movs	r2, r3
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f002 fdcb 	bl	80036e8 <memset>
  	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b52:	003b      	movs	r3, r7
 8000b54:	0018      	movs	r0, r3
 8000b56:	2314      	movs	r3, #20
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f002 fdc4 	bl	80036e8 <memset>

  	//Configure the main internal regulator output voltage
  	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b60:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <SystemClock_Config+0xa8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <SystemClock_Config+0xac>)
 8000b66:	401a      	ands	r2, r3
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <SystemClock_Config+0xa8>)
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	0109      	lsls	r1, r1, #4
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]

  	//Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure
  	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b72:	0021      	movs	r1, r4
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2210      	movs	r2, #16
 8000b78:	601a      	str	r2, [r3, #0]
  	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	619a      	str	r2, [r3, #24]
  	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	22a0      	movs	r2, #160	; 0xa0
 8000b8a:	0212      	lsls	r2, r2, #8
 8000b8c:	621a      	str	r2, [r3, #32]
  	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24
  	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 ff1c 	bl	80019d4 <HAL_RCC_OscConfig>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d003      	beq.n	8000ba8 <SystemClock_Config+0x6c>
  	{
  	 	UT_Error_Handler("HAL_RCC_OscConfig failed!");
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <SystemClock_Config+0xb0>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 fb68 	bl	8001278 <UT_Error_Handler>
  	}
	
  	//Initializes the CPU, AHB and APB buses clocks
  	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ba8:	003b      	movs	r3, r7
 8000baa:	220f      	movs	r2, #15
 8000bac:	601a      	str	r2, [r3, #0]
  	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bae:	003b      	movs	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	605a      	str	r2, [r3, #4]
  	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb4:	003b      	movs	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bba:	003b      	movs	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	003b      	movs	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]

  	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bc6:	003b      	movs	r3, r7
 8000bc8:	2100      	movs	r1, #0
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f001 fa7e 	bl	80020cc <HAL_RCC_ClockConfig>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d003      	beq.n	8000bdc <SystemClock_Config+0xa0>
  	{
  	  	UT_Error_Handler("HAL_RCC_ClockConfig failed!");
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemClock_Config+0xb4>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fb4e 	bl	8001278 <UT_Error_Handler>
  	}
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b013      	add	sp, #76	; 0x4c
 8000be2:	bd90      	pop	{r4, r7, pc}
 8000be4:	40007000 	.word	0x40007000
 8000be8:	ffffe7ff 	.word	0xffffe7ff
 8000bec:	08003f60 	.word	0x08003f60
 8000bf0:	08003f7c 	.word	0x08003f7c

08000bf4 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000bfa:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <MX_USART2_UART_Init+0x60>)
 8000bfc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000c00:	22e1      	movs	r2, #225	; 0xe1
 8000c02:	0252      	lsls	r2, r2, #9
 8000c04:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_USART2_UART_Init+0x5c>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f002 f853 	bl	8002ce4 <HAL_UART_Init>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d003      	beq.n	8000c4a <MX_USART2_UART_Init+0x56>
	{
		UT_Error_Handler("HAL_UART_Init failed!");
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <MX_USART2_UART_Init+0x64>)
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 fb17 	bl	8001278 <UT_Error_Handler>
	}
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200000e4 	.word	0x200000e4
 8000c54:	40004400 	.word	0x40004400
 8000c58:	08003f98 	.word	0x08003f98

08000c5c <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	2308      	movs	r3, #8
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	0018      	movs	r0, r3
 8000c68:	2310      	movs	r3, #16
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f002 fd3b 	bl	80036e8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c72:	003b      	movs	r3, r7
 8000c74:	0018      	movs	r0, r3
 8000c76:	2308      	movs	r3, #8
 8000c78:	001a      	movs	r2, r3
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	f002 fd34 	bl	80036e8 <memset>

	//Configure timer 2
	htim2.Instance = TIM2;
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <MX_TIM2_Init+0xb4>)
 8000c82:	2280      	movs	r2, #128	; 0x80
 8000c84:	05d2      	lsls	r2, r2, #23
 8000c86:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 209; //2.097 MHZ divided by 209 results in 10000 oscillations per second
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_TIM2_Init+0xb4>)
 8000c8a:	22d1      	movs	r2, #209	; 0xd1
 8000c8c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <MX_TIM2_Init+0xb4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100; //Counter goes up to 100, then starts anew. This results in 100 counter restarts per second (every 10ms)
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_TIM2_Init+0xb4>)
 8000c96:	2264      	movs	r2, #100	; 0x64
 8000c98:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_TIM2_Init+0xb4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_TIM2_Init+0xb4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_TIM2_Init+0xb4>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f001 fc33 	bl	8002514 <HAL_TIM_Base_Init>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d003      	beq.n	8000cba <MX_TIM2_Init+0x5e>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_TIM2_Init+0xb8>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f000 fadf 	bl	8001278 <UT_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; //Use internal clock as a clock source (at 2 MHZ, max. 32 MHZ)
 8000cba:	2108      	movs	r1, #8
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	0152      	lsls	r2, r2, #5
 8000cc2:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cc4:	187a      	adds	r2, r7, r1
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_TIM2_Init+0xb4>)
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f001 fdda 	bl	8002884 <HAL_TIM_ConfigClockSource>
 8000cd0:	1e03      	subs	r3, r0, #0
 8000cd2:	d003      	beq.n	8000cdc <MX_TIM2_Init+0x80>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_TIM2_Init+0xbc>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 face 	bl	8001278 <UT_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	003b      	movs	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce2:	003b      	movs	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce8:	003a      	movs	r2, r7
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_TIM2_Init+0xb4>)
 8000cec:	0011      	movs	r1, r2
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 ffa0 	bl	8002c34 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d003      	beq.n	8000d00 <MX_TIM2_Init+0xa4>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_TIM2_Init+0xc0>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fabc 	bl	8001278 <UT_Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim2);
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <MX_TIM2_Init+0xb4>)
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 f9b0 	bl	8001068 <HAL_TIM_MspPostInit>
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b006      	add	sp, #24
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000a4 	.word	0x200000a4
 8000d14:	08003fb0 	.word	0x08003fb0
 8000d18:	08003fcc 	.word	0x08003fcc
 8000d1c:	08003ff0 	.word	0x08003ff0

08000d20 <MX_TIM21_Init>:

static void MX_TIM21_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	2308      	movs	r3, #8
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	001a      	movs	r2, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	f002 fcd9 	bl	80036e8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	003b      	movs	r3, r7
 8000d38:	0018      	movs	r0, r3
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f002 fcd2 	bl	80036e8 <memset>

	//Configure timer 21
	htim21.Instance = TIM21;
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <MX_TIM21_Init+0xac>)
 8000d46:	4a22      	ldr	r2, [pc, #136]	; (8000dd0 <MX_TIM21_Init+0xb0>)
 8000d48:	601a      	str	r2, [r3, #0]
	htim21.Init.Prescaler = 2;
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <MX_TIM21_Init+0xac>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	605a      	str	r2, [r3, #4]
	htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_TIM21_Init+0xac>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
	htim21.Init.Period = 65535;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_TIM21_Init+0xac>)
 8000d58:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <MX_TIM21_Init+0xb4>)
 8000d5a:	60da      	str	r2, [r3, #12]
	htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_TIM21_Init+0xac>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
	htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_TIM21_Init+0xac>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_TIM21_Init+0xac>)
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f001 fbd2 	bl	8002514 <HAL_TIM_Base_Init>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d003      	beq.n	8000d7c <MX_TIM21_Init+0x5c>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_TIM21_Init+0xb8>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 fa7e 	bl	8001278 <UT_Error_Handler>
	}	

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	0152      	lsls	r2, r2, #5
 8000d84:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000d86:	187a      	adds	r2, r7, r1
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_TIM21_Init+0xac>)
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f001 fd79 	bl	8002884 <HAL_TIM_ConfigClockSource>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d003      	beq.n	8000d9e <MX_TIM21_Init+0x7e>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_TIM21_Init+0xbc>)
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f000 fa6d 	bl	8001278 <UT_Error_Handler>
	}	

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	003b      	movs	r3, r7
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	003b      	movs	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000daa:	003a      	movs	r2, r7
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <MX_TIM21_Init+0xac>)
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f001 ff3f 	bl	8002c34 <HAL_TIMEx_MasterConfigSynchronization>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d003      	beq.n	8000dc2 <MX_TIM21_Init+0xa2>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_TIM21_Init+0xc0>)
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 fa5b 	bl	8001278 <UT_Error_Handler>
	}
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b006      	add	sp, #24
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	20000168 	.word	0x20000168
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	0000ffff 	.word	0x0000ffff
 8000dd8:	08003fb0 	.word	0x08003fb0
 8000ddc:	08003fcc 	.word	0x08003fcc
 8000de0:	08003ff0 	.word	0x08003ff0

08000de4 <Port_Init>:

static void Port_Init(void)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b08b      	sub	sp, #44	; 0x2c
 8000de8:	af00      	add	r7, sp, #0
	//Enable GPIO Ports Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <Port_Init+0xcc>)
 8000dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dee:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <Port_Init+0xcc>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	430a      	orrs	r2, r1
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df6:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Port_Init+0xcc>)
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <Port_Init+0xcc>)
 8000e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <Port_Init+0xcc>)
 8000e08:	2102      	movs	r1, #2
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <Port_Init+0xcc>)
 8000e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e12:	2202      	movs	r2, #2
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <Port_Init+0xcc>)
 8000e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <Port_Init+0xcc>)
 8000e20:	2104      	movs	r1, #4
 8000e22:	430a      	orrs	r2, r1
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Port_Init+0xcc>)
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <Port_Init+0xcc>)
 8000e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <Port_Init+0xcc>)
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <Port_Init+0xcc>)
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	4013      	ands	r3, r2
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

	//Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	2414      	movs	r4, #20
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	0018      	movs	r0, r3
 8000e50:	2314      	movs	r3, #20
 8000e52:	001a      	movs	r2, r3
 8000e54:	2100      	movs	r1, #0
 8000e56:	f002 fc47 	bl	80036e8 <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	2201      	movs	r2, #1
 8000e64:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2201      	movs	r2, #1
 8000e70:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	193a      	adds	r2, r7, r4
 8000e74:	23a0      	movs	r3, #160	; 0xa0
 8000e76:	05db      	lsls	r3, r3, #23
 8000e78:	0011      	movs	r1, r2
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 fbd6 	bl	800162c <HAL_GPIO_Init>

	//Initialize all Output-Pins of Port C
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e80:	0021      	movs	r1, r4
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	0192      	lsls	r2, r2, #6
 8000e88:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <Port_Init+0xd0>)
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	0010      	movs	r0, r2
 8000ea4:	f000 fbc2 	bl	800162c <HAL_GPIO_Init>
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b00b      	add	sp, #44	; 0x2c
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	50000800 	.word	0x50000800

08000eb8 <HAL_TIM_PeriodElapsedCallback>:

//Timed interupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{	
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	//Variables to keep track of the time
	static unsigned int elapsedTime = 0;
	
	//Check if 1 sec. elapsed
	if((elapsedTime % 1000) == 0)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	22fa      	movs	r2, #250	; 0xfa
 8000ec6:	0091      	lsls	r1, r2, #2
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff f9b5 	bl	8000238 <__aeabi_uidivmod>
 8000ece:	1e0b      	subs	r3, r1, #0
 8000ed0:	d105      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		//Toggle Onboard-LED (1 sec. on and 1 sec. off)
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	
 8000ed2:	23a0      	movs	r3, #160	; 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 fd5f 	bl	800199c <HAL_GPIO_TogglePin>
	}

	//Increment elapsed time
	elapsedTime += 10;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	330a      	adds	r3, #10
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ee8:	601a      	str	r2, [r3, #0]

	if(elapsedTime > 1000)
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	23fa      	movs	r3, #250	; 0xfa
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d905      	bls.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x4a>
		elapsedTime -= 1000;
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000efc:	189a      	adds	r2, r3, r2
 8000efe:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f00:	601a      	str	r2, [r3, #0]
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	20000094 	.word	0x20000094
 8000f10:	fffffc18 	.word	0xfffffc18

08000f14 <main>:

int main(void)
{		
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
	//Init stuff
	HAL_Init();
 8000f1a:	f000 fa15 	bl	8001348 <HAL_Init>
	SystemClock_Config();
 8000f1e:	f7ff fe0d 	bl	8000b3c <SystemClock_Config>
	Port_Init();
 8000f22:	f7ff ff5f 	bl	8000de4 <Port_Init>
	MX_TIM2_Init();
 8000f26:	f7ff fe99 	bl	8000c5c <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);	
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <main+0xb8>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f001 fb75 	bl	800261c <HAL_TIM_Base_Start_IT>
	MX_USART2_UART_Init();
 8000f32:	f7ff fe5f 	bl	8000bf4 <MX_USART2_UART_Init>
	MX_TIM21_Init();
 8000f36:	f7ff fef3 	bl	8000d20 <MX_TIM21_Init>
	HAL_TIM_Base_Start(&htim21);
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <main+0xbc>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 fb29 	bl	8002594 <HAL_TIM_Base_Start>

	//LCD stuff
	LCD_Init();
 8000f42:	f7ff fcc5 	bl	80008d0 <LCD_Init>
	LCD_Set8BitMode();
 8000f46:	f7ff fd1d 	bl	8000984 <LCD_Set8BitMode>
	LCD_ClearDisplay();
 8000f4a:	f7ff fd40 	bl	80009ce <LCD_ClearDisplay>
	LCD_ReturnHome();
 8000f4e:	f7ff fd63 	bl	8000a18 <LCD_ReturnHome>
	LCD_TurnDisplayOn();
 8000f52:	f7ff fd86 	bl	8000a62 <LCD_TurnDisplayOn>
	LCD_printf("Value = %d", 9999);
 8000f56:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <main+0xc0>)
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <main+0xc4>)
 8000f5a:	0011      	movs	r1, r2
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff fdc5 	bl	8000aec <LCD_printf>

	int8_t response = 0;
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
	uint16_t humRaw = 0;
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	801a      	strh	r2, [r3, #0]

	HAL_Delay(2000);
 8000f6e:	23fa      	movs	r3, #250	; 0xfa
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 fa58 	bl	8001428 <HAL_Delay>

	while (1)
	{		
		//Reading DHT
		//humRaw = 0;
		DHT22_StartTransmission();
 8000f78:	f7ff fade 	bl	8000538 <DHT22_StartTransmission>
		response = DHT22_CheckResponse();	 
 8000f7c:	1dfc      	adds	r4, r7, #7
 8000f7e:	f7ff faf8 	bl	8000572 <DHT22_CheckResponse>
 8000f82:	0003      	movs	r3, r0
 8000f84:	7023      	strb	r3, [r4, #0]

		if(response == 0)
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d104      	bne.n	8000f9a <main+0x86>
		{
			UT_printf("\n\rSensor war nicht low nach 50us!\n\r");
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <main+0xc8>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 f952 	bl	800123c <UT_printf>
 8000f98:	e012      	b.n	8000fc0 <main+0xac>
		}
		else if(response == 1)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d104      	bne.n	8000fae <main+0x9a>
		{
			UT_printf("\n\rOK!\n\r");
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <main+0xcc>)
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 f948 	bl	800123c <UT_printf>
 8000fac:	e008      	b.n	8000fc0 <main+0xac>
			//humRaw = DHT22_Read_2Byte();
		}			
		else if(response == -1)
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	d103      	bne.n	8000fc0 <main+0xac>
		{
			UT_printf("\n\rSensor war nicht high nach 150us!\n\r");
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <main+0xd0>)
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 f93e 	bl	800123c <UT_printf>
		}	

		//UT_printf("\n\rHumidity: %d%%", humRaw / 10);	

		HAL_Delay(2000);	
 8000fc0:	23fa      	movs	r3, #250	; 0xfa
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f000 fa2f 	bl	8001428 <HAL_Delay>
		DHT22_StartTransmission();
 8000fca:	e7d5      	b.n	8000f78 <main+0x64>
 8000fcc:	200000a4 	.word	0x200000a4
 8000fd0:	20000168 	.word	0x20000168
 8000fd4:	0000270f 	.word	0x0000270f
 8000fd8:	08004020 	.word	0x08004020
 8000fdc:	0800402c 	.word	0x0800402c
 8000fe0:	08004050 	.word	0x08004050
 8000fe4:	08004058 	.word	0x08004058

08000fe8 <HAL_MspInit>:
#include "main.h"

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void HAL_MspInit(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_MspInit+0x24>)
 8000fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MspInit+0x24>)
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_MspInit+0x24>)
 8000ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_MspInit+0x24>)
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	0549      	lsls	r1, r1, #21
 8001002:	430a      	orrs	r2, r1
 8001004:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000

08001010 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	05db      	lsls	r3, r3, #23
 8001020:	429a      	cmp	r2, r3
 8001022:	d10e      	bne.n	8001042 <HAL_TIM_Base_MspInit+0x32>
  {
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_TIM_Base_MspInit+0x50>)
 8001026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_TIM_Base_MspInit+0x50>)
 800102a:	2101      	movs	r1, #1
 800102c:	430a      	orrs	r2, r1
 800102e:	639a      	str	r2, [r3, #56]	; 0x38

    //TIM2 interrupt Init
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	200f      	movs	r0, #15
 8001036:	f000 fac7 	bl	80015c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800103a:	200f      	movs	r0, #15
 800103c:	f000 fad9 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM21)
  {
    //Peripheral clock enable
    __HAL_RCC_TIM21_CLK_ENABLE();
  }
}
 8001040:	e00a      	b.n	8001058 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_TIM_Base_MspInit+0x54>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d105      	bne.n	8001058 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <HAL_TIM_Base_MspInit+0x50>)
 800104e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_TIM_Base_MspInit+0x50>)
 8001052:	2104      	movs	r1, #4
 8001054:	430a      	orrs	r2, r1
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b002      	add	sp, #8
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	40010800 	.word	0x40010800

08001068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	240c      	movs	r4, #12
 8001072:	193b      	adds	r3, r7, r4
 8001074:	0018      	movs	r0, r3
 8001076:	2314      	movs	r3, #20
 8001078:	001a      	movs	r2, r3
 800107a:	2100      	movs	r1, #0
 800107c:	f002 fb34 	bl	80036e8 <memset>
  if(htim->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	05db      	lsls	r3, r3, #23
 8001088:	429a      	cmp	r2, r3
 800108a:	d123      	bne.n	80010d4 <HAL_TIM_MspPostInit+0x6c>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_TIM_MspPostInit+0x74>)
 800108e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_TIM_MspPostInit+0x74>)
 8001092:	2101      	movs	r1, #1
 8001094:	430a      	orrs	r2, r1
 8001096:	62da      	str	r2, [r3, #44]	; 0x2c
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_TIM_MspPostInit+0x74>)
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	2201      	movs	r2, #1
 800109e:	4013      	ands	r3, r2
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]

    //TIM2 GPIO Configuration - PA15 ------> TIM2_CH1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010a4:	193b      	adds	r3, r7, r4
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	0212      	lsls	r2, r2, #8
 80010aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	0021      	movs	r1, r4
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2202      	movs	r2, #2
 80010b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2205      	movs	r2, #5
 80010c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	187a      	adds	r2, r7, r1
 80010c8:	23a0      	movs	r3, #160	; 0xa0
 80010ca:	05db      	lsls	r3, r3, #23
 80010cc:	0011      	movs	r1, r2
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 faac 	bl	800162c <HAL_GPIO_Init>
  }
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b009      	add	sp, #36	; 0x24
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_UART_MspInit>:
    __HAL_RCC_TIM21_CLK_DISABLE();
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	240c      	movs	r4, #12
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	0018      	movs	r0, r3
 80010ee:	2314      	movs	r3, #20
 80010f0:	001a      	movs	r2, r3
 80010f2:	2100      	movs	r1, #0
 80010f4:	f002 faf8 	bl	80036e8 <memset>
  if(huart->Instance==USART2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a12      	ldr	r2, [pc, #72]	; (8001148 <HAL_UART_MspInit+0x68>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d11d      	bne.n	800113e <HAL_UART_MspInit+0x5e>
  {
    __HAL_RCC_USART2_CLK_ENABLE();
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_UART_MspInit+0x6c>)
 8001104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_UART_MspInit+0x6c>)
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	0289      	lsls	r1, r1, #10
 800110c:	430a      	orrs	r2, r1
 800110e:	639a      	str	r2, [r3, #56]	; 0x38

    //USART2 GPIO Configuration
    //PA2     ------> USART2_TX
    //PA3     ------> USART2_RX
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001110:	0021      	movs	r1, r4
 8001112:	187b      	adds	r3, r7, r1
 8001114:	220c      	movs	r2, #12
 8001116:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2202      	movs	r2, #2
 800111c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2203      	movs	r2, #3
 8001128:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2204      	movs	r2, #4
 800112e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	187a      	adds	r2, r7, r1
 8001132:	23a0      	movs	r3, #160	; 0xa0
 8001134:	05db      	lsls	r3, r3, #23
 8001136:	0011      	movs	r1, r2
 8001138:	0018      	movs	r0, r3
 800113a:	f000 fa77 	bl	800162c <HAL_GPIO_Init>
  }
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b009      	add	sp, #36	; 0x24
 8001144:	bd90      	pop	{r4, r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	40004400 	.word	0x40004400
 800114c:	40021000 	.word	0x40021000

08001150 <NMI_Handler>:
#include "stm32l0xx_it.h"

extern TIM_HandleTypeDef htim2;

void NMI_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x4>

08001156 <HardFault_Handler>:

  }
}

void HardFault_Handler(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <PendSV_Handler>:


void PendSV_Handler(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0

}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001174:	f000 f93c 	bl	80013f0 <HAL_IncTick>
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <TIM2_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l0xx.s).                    */
/******************************************************************************/

void TIM2_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <TIM2_IRQHandler+0x14>)
 8001186:	0018      	movs	r0, r3
 8001188:	f001 fa94 	bl	80026b4 <HAL_TIM_IRQHandler>
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	200000a4 	.word	0x200000a4

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	18d3      	adds	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f002 fa64 	bl	8003694 <__errno>
 80011cc:	0003      	movs	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	2301      	movs	r3, #1
 80011d4:	425b      	negs	r3, r3
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	18d2      	adds	r2, r2, r3
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <_sbrk+0x64>)
 80011e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b006      	add	sp, #24
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20005000 	.word	0x20005000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	20000098 	.word	0x20000098
 8001200:	200001c0 	.word	0x200001c0

08001204 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <send_to_UART>:
#include "utility.h"

void send_to_UART(char* msg)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	0018      	movs	r0, r3
 800121c:	f7fe ff74 	bl	8000108 <strlen>
 8001220:	0003      	movs	r3, r0
 8001222:	b29a      	uxth	r2, r3
 8001224:	2301      	movs	r3, #1
 8001226:	425b      	negs	r3, r3
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4803      	ldr	r0, [pc, #12]	; (8001238 <send_to_UART+0x28>)
 800122c:	f001 fdae 	bl	8002d8c <HAL_UART_Transmit>
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200000e4 	.word	0x200000e4

0800123c <UT_printf>:

void UT_printf(const char* format, ...)
{
 800123c:	b40f      	push	{r0, r1, r2, r3}
 800123e:	b580      	push	{r7, lr}
 8001240:	b08a      	sub	sp, #40	; 0x28
 8001242:	af00      	add	r7, sp, #0
	va_list args;
	char buffer[32];	
	memset(buffer, 0, 32);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2220      	movs	r2, #32
 8001248:	2100      	movs	r1, #0
 800124a:	0018      	movs	r0, r3
 800124c:	f002 fa4c 	bl	80036e8 <memset>

	va_start(args, format);	
 8001250:	2334      	movs	r3, #52	; 0x34
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
	vsprintf(buffer, format, args);
 8001256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	0018      	movs	r0, r3
 800125e:	f002 fa61 	bl	8003724 <vsiprintf>
	send_to_UART(buffer);
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff ffd3 	bl	8001210 <send_to_UART>
	va_end(args);
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b00a      	add	sp, #40	; 0x28
 8001270:	bc80      	pop	{r7}
 8001272:	bc08      	pop	{r3}
 8001274:	b004      	add	sp, #16
 8001276:	4718      	bx	r3

08001278 <UT_Error_Handler>:

void UT_Error_Handler(char* err_msg)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	46c0      	nop			; (mov r8, r8)
    __disable_irq();
    while (1)
	{
    	send_to_UART(err_msg);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff ffc2 	bl	8001210 <send_to_UART>
 800128c:	e7fa      	b.n	8001284 <UT_Error_Handler+0xc>
	...

08001290 <UT_Delay_MicroSeconds>:
	}
}

void UT_Delay_MicroSeconds(uint16_t uSec)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	0002      	movs	r2, r0
 8001298:	1dbb      	adds	r3, r7, #6
 800129a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim21, 0);
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <UT_Delay_MicroSeconds+0x30>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2200      	movs	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim21) < uSec);
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <UT_Delay_MicroSeconds+0x30>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ac:	1dbb      	adds	r3, r7, #6
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3f8      	bcc.n	80012a6 <UT_Delay_MicroSeconds+0x16>
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b002      	add	sp, #8
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	20000168 	.word	0x20000168

080012c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80012c4:	4813      	ldr	r0, [pc, #76]	; (8001314 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80012c6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <LoopForever+0x6>)
    LDR R1, [R0]
 80012ca:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80012cc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <LoopForever+0xa>)
    CMP R1, R2
 80012d0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80012d2:	d105      	bne.n	80012e0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80012d4:	4812      	ldr	r0, [pc, #72]	; (8001320 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80012d6:	4913      	ldr	r1, [pc, #76]	; (8001324 <LoopForever+0x12>)
    STR R1, [R0]
 80012d8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80012da:	4813      	ldr	r0, [pc, #76]	; (8001328 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80012dc:	4913      	ldr	r1, [pc, #76]	; (800132c <LoopForever+0x1a>)
    STR R1, [R0]
 80012de:	6001      	str	r1, [r0, #0]

080012e0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	4813      	ldr	r0, [pc, #76]	; (8001330 <LoopForever+0x1e>)
  ldr r1, =_edata
 80012e2:	4914      	ldr	r1, [pc, #80]	; (8001334 <LoopForever+0x22>)
  ldr r2, =_sidata
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <LoopForever+0x26>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a11      	ldr	r2, [pc, #68]	; (800133c <LoopForever+0x2a>)
  ldr r4, =_ebss
 80012f8:	4c11      	ldr	r4, [pc, #68]	; (8001340 <LoopForever+0x2e>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001306:	f7ff ff7d 	bl	8001204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130a:	f002 f9c9 	bl	80036a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130e:	f7ff fe01 	bl	8000f14 <main>

08001312 <LoopForever>:

LoopForever:
    b LoopForever
 8001312:	e7fe      	b.n	8001312 <LoopForever>
   ldr   r0, =_estack
 8001314:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8001318:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800131c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001320:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001324:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001328:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800132c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001338:	08004130 	.word	0x08004130
  ldr r2, =_sbss
 800133c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001340:	200001bc 	.word	0x200001bc

08001344 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_IRQHandler>
	...

08001348 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_Init+0x3c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_Init+0x3c>)
 800135a:	2140      	movs	r1, #64	; 0x40
 800135c:	430a      	orrs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001360:	2000      	movs	r0, #0
 8001362:	f000 f811 	bl	8001388 <HAL_InitTick>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d003      	beq.n	8001372 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	e001      	b.n	8001376 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001372:	f7ff fe39 	bl	8000fe8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	781b      	ldrb	r3, [r3, #0]
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	40022000 	.word	0x40022000

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <HAL_InitTick+0x5c>)
 8001392:	681c      	ldr	r4, [r3, #0]
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_InitTick+0x60>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	0019      	movs	r1, r3
 800139a:	23fa      	movs	r3, #250	; 0xfa
 800139c:	0098      	lsls	r0, r3, #2
 800139e:	f7fe fec5 	bl	800012c <__udivsi3>
 80013a2:	0003      	movs	r3, r0
 80013a4:	0019      	movs	r1, r3
 80013a6:	0020      	movs	r0, r4
 80013a8:	f7fe fec0 	bl	800012c <__udivsi3>
 80013ac:	0003      	movs	r3, r0
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 f92f 	bl	8001612 <HAL_SYSTICK_Config>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e00f      	b.n	80013dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d80b      	bhi.n	80013da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	2301      	movs	r3, #1
 80013c6:	425b      	negs	r3, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 f8fc 	bl	80015c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_InitTick+0x64>)
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b003      	add	sp, #12
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x1c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	001a      	movs	r2, r3
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x20>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	18d2      	adds	r2, r2, r3
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_IncTick+0x20>)
 8001402:	601a      	str	r2, [r3, #0]
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	20000008 	.word	0x20000008
 8001410:	200001a8 	.word	0x200001a8

08001414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b02      	ldr	r3, [pc, #8]	; (8001424 <HAL_GetTick+0x10>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	200001a8 	.word	0x200001a8

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff fff0 	bl	8001414 <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3301      	adds	r3, #1
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_Delay+0x44>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	001a      	movs	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	189b      	adds	r3, r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	f7ff ffe0 	bl	8001414 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b004      	add	sp, #16
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	20000008 	.word	0x20000008

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	0002      	movs	r2, r0
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800147c:	1dfb      	adds	r3, r7, #7
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b7f      	cmp	r3, #127	; 0x7f
 8001482:	d809      	bhi.n	8001498 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	001a      	movs	r2, r3
 800148a:	231f      	movs	r3, #31
 800148c:	401a      	ands	r2, r3
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_EnableIRQ+0x30>)
 8001490:	2101      	movs	r1, #1
 8001492:	4091      	lsls	r1, r2
 8001494:	000a      	movs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
  }
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	0002      	movs	r2, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	1dfb      	adds	r3, r7, #7
 80014b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b7f      	cmp	r3, #127	; 0x7f
 80014b8:	d828      	bhi.n	800150c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ba:	4a2f      	ldr	r2, [pc, #188]	; (8001578 <__NVIC_SetPriority+0xd4>)
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	33c0      	adds	r3, #192	; 0xc0
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	589b      	ldr	r3, [r3, r2]
 80014ca:	1dfa      	adds	r2, r7, #7
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	0011      	movs	r1, r2
 80014d0:	2203      	movs	r2, #3
 80014d2:	400a      	ands	r2, r1
 80014d4:	00d2      	lsls	r2, r2, #3
 80014d6:	21ff      	movs	r1, #255	; 0xff
 80014d8:	4091      	lsls	r1, r2
 80014da:	000a      	movs	r2, r1
 80014dc:	43d2      	mvns	r2, r2
 80014de:	401a      	ands	r2, r3
 80014e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	019b      	lsls	r3, r3, #6
 80014e6:	22ff      	movs	r2, #255	; 0xff
 80014e8:	401a      	ands	r2, r3
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	0018      	movs	r0, r3
 80014f0:	2303      	movs	r3, #3
 80014f2:	4003      	ands	r3, r0
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f8:	481f      	ldr	r0, [pc, #124]	; (8001578 <__NVIC_SetPriority+0xd4>)
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	430a      	orrs	r2, r1
 8001504:	33c0      	adds	r3, #192	; 0xc0
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800150a:	e031      	b.n	8001570 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <__NVIC_SetPriority+0xd8>)
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	0019      	movs	r1, r3
 8001514:	230f      	movs	r3, #15
 8001516:	400b      	ands	r3, r1
 8001518:	3b08      	subs	r3, #8
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3306      	adds	r3, #6
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	18d3      	adds	r3, r2, r3
 8001522:	3304      	adds	r3, #4
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	1dfa      	adds	r2, r7, #7
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	0011      	movs	r1, r2
 800152c:	2203      	movs	r2, #3
 800152e:	400a      	ands	r2, r1
 8001530:	00d2      	lsls	r2, r2, #3
 8001532:	21ff      	movs	r1, #255	; 0xff
 8001534:	4091      	lsls	r1, r2
 8001536:	000a      	movs	r2, r1
 8001538:	43d2      	mvns	r2, r2
 800153a:	401a      	ands	r2, r3
 800153c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	019b      	lsls	r3, r3, #6
 8001542:	22ff      	movs	r2, #255	; 0xff
 8001544:	401a      	ands	r2, r3
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	0018      	movs	r0, r3
 800154c:	2303      	movs	r3, #3
 800154e:	4003      	ands	r3, r0
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001554:	4809      	ldr	r0, [pc, #36]	; (800157c <__NVIC_SetPriority+0xd8>)
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	001c      	movs	r4, r3
 800155c:	230f      	movs	r3, #15
 800155e:	4023      	ands	r3, r4
 8001560:	3b08      	subs	r3, #8
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	430a      	orrs	r2, r1
 8001566:	3306      	adds	r3, #6
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	18c3      	adds	r3, r0, r3
 800156c:	3304      	adds	r3, #4
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b003      	add	sp, #12
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	045b      	lsls	r3, r3, #17
 8001590:	429a      	cmp	r2, r3
 8001592:	d301      	bcc.n	8001598 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001594:	2301      	movs	r3, #1
 8001596:	e010      	b.n	80015ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <SysTick_Config+0x44>)
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	3a01      	subs	r2, #1
 800159e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a0:	2301      	movs	r3, #1
 80015a2:	425b      	negs	r3, r3
 80015a4:	2103      	movs	r1, #3
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7ff ff7c 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SysTick_Config+0x44>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SysTick_Config+0x44>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	0018      	movs	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	210f      	movs	r1, #15
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	1c02      	adds	r2, r0, #0
 80015d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b004      	add	sp, #16
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	0002      	movs	r2, r0
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b25b      	sxtb	r3, r3
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff ff33 	bl	8001470 <__NVIC_EnableIRQ>
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff ffaf 	bl	8001580 <SysTick_Config>
 8001622:	0003      	movs	r3, r0
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001642:	e155      	b.n	80018f0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2101      	movs	r1, #1
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4091      	lsls	r1, r2
 800164e:	000a      	movs	r2, r1
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d100      	bne.n	800165c <HAL_GPIO_Init+0x30>
 800165a:	e146      	b.n	80018ea <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d00b      	beq.n	800167c <HAL_GPIO_Init+0x50>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d007      	beq.n	800167c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001670:	2b11      	cmp	r3, #17
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b12      	cmp	r3, #18
 800167a:	d130      	bne.n	80016de <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	409a      	lsls	r2, r3
 800168a:	0013      	movs	r3, r2
 800168c:	43da      	mvns	r2, r3
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	409a      	lsls	r2, r3
 800169e:	0013      	movs	r3, r2
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b2:	2201      	movs	r2, #1
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
 80016b8:	0013      	movs	r3, r2
 80016ba:	43da      	mvns	r2, r3
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	2201      	movs	r2, #1
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	409a      	lsls	r2, r3
 80016ec:	0013      	movs	r3, r2
 80016ee:	43da      	mvns	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0xf2>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b12      	cmp	r3, #18
 800171c:	d123      	bne.n	8001766 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3208      	adds	r2, #8
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	58d3      	ldr	r3, [r2, r3]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2207      	movs	r2, #7
 8001730:	4013      	ands	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	409a      	lsls	r2, r3
 8001738:	0013      	movs	r3, r2
 800173a:	43da      	mvns	r2, r3
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2107      	movs	r1, #7
 800174a:	400b      	ands	r3, r1
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	409a      	lsls	r2, r3
 8001750:	0013      	movs	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	08da      	lsrs	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	6939      	ldr	r1, [r7, #16]
 8001764:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	409a      	lsls	r2, r3
 8001774:	0013      	movs	r3, r2
 8001776:	43da      	mvns	r2, r3
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2203      	movs	r2, #3
 8001784:	401a      	ands	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	409a      	lsls	r2, r3
 800178c:	0013      	movs	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	055b      	lsls	r3, r3, #21
 80017a2:	4013      	ands	r3, r2
 80017a4:	d100      	bne.n	80017a8 <HAL_GPIO_Init+0x17c>
 80017a6:	e0a0      	b.n	80018ea <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a8:	4b57      	ldr	r3, [pc, #348]	; (8001908 <HAL_GPIO_Init+0x2dc>)
 80017aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ac:	4b56      	ldr	r3, [pc, #344]	; (8001908 <HAL_GPIO_Init+0x2dc>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	430a      	orrs	r2, r1
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80017b4:	4a55      	ldr	r2, [pc, #340]	; (800190c <HAL_GPIO_Init+0x2e0>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	589b      	ldr	r3, [r3, r2]
 80017c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2203      	movs	r2, #3
 80017c6:	4013      	ands	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	43da      	mvns	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	23a0      	movs	r3, #160	; 0xa0
 80017dc:	05db      	lsls	r3, r3, #23
 80017de:	429a      	cmp	r2, r3
 80017e0:	d01f      	beq.n	8001822 <HAL_GPIO_Init+0x1f6>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4a      	ldr	r2, [pc, #296]	; (8001910 <HAL_GPIO_Init+0x2e4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d019      	beq.n	800181e <HAL_GPIO_Init+0x1f2>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a49      	ldr	r2, [pc, #292]	; (8001914 <HAL_GPIO_Init+0x2e8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_Init+0x1ee>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a48      	ldr	r2, [pc, #288]	; (8001918 <HAL_GPIO_Init+0x2ec>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00d      	beq.n	8001816 <HAL_GPIO_Init+0x1ea>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a47      	ldr	r2, [pc, #284]	; (800191c <HAL_GPIO_Init+0x2f0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d007      	beq.n	8001812 <HAL_GPIO_Init+0x1e6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_GPIO_Init+0x2f4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_GPIO_Init+0x1e2>
 800180a:	2305      	movs	r3, #5
 800180c:	e00a      	b.n	8001824 <HAL_GPIO_Init+0x1f8>
 800180e:	2306      	movs	r3, #6
 8001810:	e008      	b.n	8001824 <HAL_GPIO_Init+0x1f8>
 8001812:	2304      	movs	r3, #4
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x1f8>
 8001816:	2303      	movs	r3, #3
 8001818:	e004      	b.n	8001824 <HAL_GPIO_Init+0x1f8>
 800181a:	2302      	movs	r3, #2
 800181c:	e002      	b.n	8001824 <HAL_GPIO_Init+0x1f8>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_GPIO_Init+0x1f8>
 8001822:	2300      	movs	r3, #0
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	2103      	movs	r1, #3
 8001828:	400a      	ands	r2, r1
 800182a:	0092      	lsls	r2, r2, #2
 800182c:	4093      	lsls	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001834:	4935      	ldr	r1, [pc, #212]	; (800190c <HAL_GPIO_Init+0x2e0>)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001842:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_GPIO_Init+0x2f8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43da      	mvns	r2, r3
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	025b      	lsls	r3, r3, #9
 800185a:	4013      	ands	r3, r2
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001866:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <HAL_GPIO_Init+0x2f8>)
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_GPIO_Init+0x2f8>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43da      	mvns	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	029b      	lsls	r3, r3, #10
 8001884:	4013      	ands	r3, r2
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_GPIO_Init+0x2f8>)
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_GPIO_Init+0x2f8>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43da      	mvns	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	035b      	lsls	r3, r3, #13
 80018ae:	4013      	ands	r3, r2
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_GPIO_Init+0x2f8>)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_GPIO_Init+0x2f8>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43da      	mvns	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	039b      	lsls	r3, r3, #14
 80018d8:	4013      	ands	r3, r2
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_GPIO_Init+0x2f8>)
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	40da      	lsrs	r2, r3
 80018f8:	1e13      	subs	r3, r2, #0
 80018fa:	d000      	beq.n	80018fe <HAL_GPIO_Init+0x2d2>
 80018fc:	e6a2      	b.n	8001644 <HAL_GPIO_Init+0x18>
  }
}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b006      	add	sp, #24
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	40010000 	.word	0x40010000
 8001910:	50000400 	.word	0x50000400
 8001914:	50000800 	.word	0x50000800
 8001918:	50000c00 	.word	0x50000c00
 800191c:	50001000 	.word	0x50001000
 8001920:	50001c00 	.word	0x50001c00
 8001924:	40010400 	.word	0x40010400

08001928 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	000a      	movs	r2, r1
 8001932:	1cbb      	adds	r3, r7, #2
 8001934:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	1cba      	adds	r2, r7, #2
 800193c:	8812      	ldrh	r2, [r2, #0]
 800193e:	4013      	ands	r3, r2
 8001940:	d004      	beq.n	800194c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001942:	230f      	movs	r3, #15
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e003      	b.n	8001954 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800194c:	230f      	movs	r3, #15
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001954:	230f      	movs	r3, #15
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	781b      	ldrb	r3, [r3, #0]
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b004      	add	sp, #16
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	0008      	movs	r0, r1
 800196c:	0011      	movs	r1, r2
 800196e:	1cbb      	adds	r3, r7, #2
 8001970:	1c02      	adds	r2, r0, #0
 8001972:	801a      	strh	r2, [r3, #0]
 8001974:	1c7b      	adds	r3, r7, #1
 8001976:	1c0a      	adds	r2, r1, #0
 8001978:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197a:	1c7b      	adds	r3, r7, #1
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d004      	beq.n	800198c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001982:	1cbb      	adds	r3, r7, #2
 8001984:	881a      	ldrh	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800198a:	e003      	b.n	8001994 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800198c:	1cbb      	adds	r3, r7, #2
 800198e:	881a      	ldrh	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b002      	add	sp, #8
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	000a      	movs	r2, r1
 80019a6:	1cbb      	adds	r3, r7, #2
 80019a8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b0:	1cbb      	adds	r3, r7, #2
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	041a      	lsls	r2, r3, #16
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	1cb9      	adds	r1, r7, #2
 80019c0:	8809      	ldrh	r1, [r1, #0]
 80019c2:	400b      	ands	r3, r1
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	619a      	str	r2, [r3, #24]
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b004      	add	sp, #16
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b5b0      	push	{r4, r5, r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	f000 fb6c 	bl	80020c0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e8:	4bc8      	ldr	r3, [pc, #800]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	220c      	movs	r2, #12
 80019ee:	4013      	ands	r3, r2
 80019f0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f2:	4bc6      	ldr	r3, [pc, #792]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	025b      	lsls	r3, r3, #9
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	4013      	ands	r3, r2
 8001a06:	d100      	bne.n	8001a0a <HAL_RCC_OscConfig+0x36>
 8001a08:	e07d      	b.n	8001b06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d007      	beq.n	8001a20 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	d112      	bne.n	8001a3c <HAL_RCC_OscConfig+0x68>
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	025b      	lsls	r3, r3, #9
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d10d      	bne.n	8001a3c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	4bba      	ldr	r3, [pc, #744]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	029b      	lsls	r3, r3, #10
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d100      	bne.n	8001a2e <HAL_RCC_OscConfig+0x5a>
 8001a2c:	e06a      	b.n	8001b04 <HAL_RCC_OscConfig+0x130>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d166      	bne.n	8001b04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f000 fb42 	bl	80020c0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	025b      	lsls	r3, r3, #9
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_OscConfig+0x84>
 8001a48:	4bb0      	ldr	r3, [pc, #704]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4baf      	ldr	r3, [pc, #700]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	0249      	lsls	r1, r1, #9
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	e027      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	23a0      	movs	r3, #160	; 0xa0
 8001a5e:	02db      	lsls	r3, r3, #11
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d10e      	bne.n	8001a82 <HAL_RCC_OscConfig+0xae>
 8001a64:	4ba9      	ldr	r3, [pc, #676]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4ba8      	ldr	r3, [pc, #672]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001a6a:	2180      	movs	r1, #128	; 0x80
 8001a6c:	02c9      	lsls	r1, r1, #11
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	4ba6      	ldr	r3, [pc, #664]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4ba5      	ldr	r3, [pc, #660]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001a78:	2180      	movs	r1, #128	; 0x80
 8001a7a:	0249      	lsls	r1, r1, #9
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e012      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a82:	4ba2      	ldr	r3, [pc, #648]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4ba1      	ldr	r3, [pc, #644]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001a88:	49a1      	ldr	r1, [pc, #644]	; (8001d10 <HAL_RCC_OscConfig+0x33c>)
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	4b9f      	ldr	r3, [pc, #636]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	4013      	ands	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4b9b      	ldr	r3, [pc, #620]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b9a      	ldr	r3, [pc, #616]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001aa2:	499c      	ldr	r1, [pc, #624]	; (8001d14 <HAL_RCC_OscConfig+0x340>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d014      	beq.n	8001ada <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fcb0 	bl	8001414 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aba:	f7ff fcab 	bl	8001414 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b64      	cmp	r3, #100	; 0x64
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e2f9      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001acc:	4b8f      	ldr	r3, [pc, #572]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	029b      	lsls	r3, r3, #10
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0xe6>
 8001ad8:	e015      	b.n	8001b06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7ff fc9b 	bl	8001414 <HAL_GetTick>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fc96 	bl	8001414 <HAL_GetTick>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e2e4      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001af6:	4b85      	ldr	r3, [pc, #532]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	029b      	lsls	r3, r3, #10
 8001afe:	4013      	ands	r3, r2
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x110>
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d100      	bne.n	8001b12 <HAL_RCC_OscConfig+0x13e>
 8001b10:	e099      	b.n	8001c46 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d009      	beq.n	8001b34 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001b20:	4b7a      	ldr	r3, [pc, #488]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b79      	ldr	r3, [pc, #484]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001b26:	2120      	movs	r1, #32
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	2220      	movs	r2, #32
 8001b30:	4393      	bics	r3, r2
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	2b0c      	cmp	r3, #12
 8001b3e:	d13e      	bne.n	8001bbe <HAL_RCC_OscConfig+0x1ea>
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d13b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001b46:	4b71      	ldr	r3, [pc, #452]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d004      	beq.n	8001b5a <HAL_RCC_OscConfig+0x186>
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e2b2      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b6c      	ldr	r3, [pc, #432]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4a6e      	ldr	r2, [pc, #440]	; (8001d18 <HAL_RCC_OscConfig+0x344>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	0019      	movs	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	021a      	lsls	r2, r3, #8
 8001b6a:	4b68      	ldr	r3, [pc, #416]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b70:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2209      	movs	r2, #9
 8001b76:	4393      	bics	r3, r2
 8001b78:	0019      	movs	r1, r3
 8001b7a:	4b64      	ldr	r3, [pc, #400]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b82:	f000 fbeb 	bl	800235c <HAL_RCC_GetSysClockFreq>
 8001b86:	0001      	movs	r1, r0
 8001b88:	4b60      	ldr	r3, [pc, #384]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	220f      	movs	r2, #15
 8001b90:	4013      	ands	r3, r2
 8001b92:	4a62      	ldr	r2, [pc, #392]	; (8001d1c <HAL_RCC_OscConfig+0x348>)
 8001b94:	5cd3      	ldrb	r3, [r2, r3]
 8001b96:	000a      	movs	r2, r1
 8001b98:	40da      	lsrs	r2, r3
 8001b9a:	4b61      	ldr	r3, [pc, #388]	; (8001d20 <HAL_RCC_OscConfig+0x34c>)
 8001b9c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001b9e:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <HAL_RCC_OscConfig+0x350>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2513      	movs	r5, #19
 8001ba4:	197c      	adds	r4, r7, r5
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f7ff fbee 	bl	8001388 <HAL_InitTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001bb0:	197b      	adds	r3, r7, r5
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d046      	beq.n	8001c46 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001bb8:	197b      	adds	r3, r7, r5
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	e280      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d027      	beq.n	8001c14 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bc4:	4b51      	ldr	r3, [pc, #324]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2209      	movs	r2, #9
 8001bca:	4393      	bics	r3, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	4b4f      	ldr	r3, [pc, #316]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fc1d 	bl	8001414 <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be0:	f7ff fc18 	bl	8001414 <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e266      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bf2:	4b46      	ldr	r3, [pc, #280]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d0f1      	beq.n	8001be0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a45      	ldr	r2, [pc, #276]	; (8001d18 <HAL_RCC_OscConfig+0x344>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	021a      	lsls	r2, r3, #8
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	e018      	b.n	8001c46 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c14:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b3c      	ldr	r3, [pc, #240]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fbf8 	bl	8001414 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fbf3 	bl	8001414 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e241      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c3c:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2204      	movs	r2, #4
 8001c42:	4013      	ands	r3, r2
 8001c44:	d1f1      	bne.n	8001c2a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d100      	bne.n	8001c52 <HAL_RCC_OscConfig+0x27e>
 8001c50:	e0a1      	b.n	8001d96 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d140      	bne.n	8001cda <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c58:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_OscConfig+0x29c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e227      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c70:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a2c      	ldr	r2, [pc, #176]	; (8001d28 <HAL_RCC_OscConfig+0x354>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	0019      	movs	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1a      	ldr	r2, [r3, #32]
 8001c7e:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001c80:	430a      	orrs	r2, r1
 8001c82:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	0a19      	lsrs	r1, r3, #8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	061a      	lsls	r2, r3, #24
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001c94:	430a      	orrs	r2, r1
 8001c96:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	0b5b      	lsrs	r3, r3, #13
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	0212      	lsls	r2, r2, #8
 8001ca4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	210f      	movs	r1, #15
 8001cae:	400b      	ands	r3, r1
 8001cb0:	491a      	ldr	r1, [pc, #104]	; (8001d1c <HAL_RCC_OscConfig+0x348>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_RCC_OscConfig+0x34c>)
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_RCC_OscConfig+0x350>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2513      	movs	r5, #19
 8001cc0:	197c      	adds	r4, r7, r5
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7ff fb60 	bl	8001388 <HAL_InitTick>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ccc:	197b      	adds	r3, r7, r5
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d060      	beq.n	8001d96 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001cd4:	197b      	adds	r3, r7, r5
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	e1f2      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d03f      	beq.n	8001d62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	0049      	lsls	r1, r1, #1
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fb90 	bl	8001414 <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cf8:	e018      	b.n	8001d2c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fb8b 	bl	8001414 <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d911      	bls.n	8001d2c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e1d9      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	fffeffff 	.word	0xfffeffff
 8001d14:	fffbffff 	.word	0xfffbffff
 8001d18:	ffffe0ff 	.word	0xffffe0ff
 8001d1c:	08004080 	.word	0x08004080
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000004 	.word	0x20000004
 8001d28:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d2c:	4bc9      	ldr	r3, [pc, #804]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4013      	ands	r3, r2
 8001d36:	d0e0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d38:	4bc6      	ldr	r3, [pc, #792]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4ac6      	ldr	r2, [pc, #792]	; (8002058 <HAL_RCC_OscConfig+0x684>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1a      	ldr	r2, [r3, #32]
 8001d46:	4bc3      	ldr	r3, [pc, #780]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d4c:	4bc1      	ldr	r3, [pc, #772]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	0a19      	lsrs	r1, r3, #8
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	061a      	lsls	r2, r3, #24
 8001d5a:	4bbe      	ldr	r3, [pc, #760]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	e019      	b.n	8001d96 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d62:	4bbc      	ldr	r3, [pc, #752]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4bbb      	ldr	r3, [pc, #748]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001d68:	49bc      	ldr	r1, [pc, #752]	; (800205c <HAL_RCC_OscConfig+0x688>)
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fb51 	bl	8001414 <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d78:	f7ff fb4c 	bl	8001414 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e19a      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d8a:	4bb2      	ldr	r3, [pc, #712]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4013      	ands	r3, r2
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d036      	beq.n	8001e0e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d019      	beq.n	8001ddc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da8:	4baa      	ldr	r3, [pc, #680]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001daa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dac:	4ba9      	ldr	r3, [pc, #676]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001dae:	2101      	movs	r1, #1
 8001db0:	430a      	orrs	r2, r1
 8001db2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff fb2e 	bl	8001414 <HAL_GetTick>
 8001db8:	0003      	movs	r3, r0
 8001dba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fb29 	bl	8001414 <HAL_GetTick>
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e177      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dd0:	4ba0      	ldr	r3, [pc, #640]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d0f1      	beq.n	8001dbe <HAL_RCC_OscConfig+0x3ea>
 8001dda:	e018      	b.n	8001e0e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ddc:	4b9d      	ldr	r3, [pc, #628]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de0:	4b9c      	ldr	r3, [pc, #624]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001de2:	2101      	movs	r1, #1
 8001de4:	438a      	bics	r2, r1
 8001de6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff fb14 	bl	8001414 <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df2:	f7ff fb0f 	bl	8001414 <HAL_GetTick>
 8001df6:	0002      	movs	r2, r0
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e15d      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e04:	4b93      	ldr	r3, [pc, #588]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e08:	2202      	movs	r2, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d1f1      	bne.n	8001df2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2204      	movs	r2, #4
 8001e14:	4013      	ands	r3, r2
 8001e16:	d100      	bne.n	8001e1a <HAL_RCC_OscConfig+0x446>
 8001e18:	e0ae      	b.n	8001f78 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1a:	2023      	movs	r0, #35	; 0x23
 8001e1c:	183b      	adds	r3, r7, r0
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e22:	4b8c      	ldr	r3, [pc, #560]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	055b      	lsls	r3, r3, #21
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d109      	bne.n	8001e42 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b89      	ldr	r3, [pc, #548]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e32:	4b88      	ldr	r3, [pc, #544]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	0549      	lsls	r1, r1, #21
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e3c:	183b      	adds	r3, r7, r0
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e42:	4b87      	ldr	r3, [pc, #540]	; (8002060 <HAL_RCC_OscConfig+0x68c>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d11a      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e4e:	4b84      	ldr	r3, [pc, #528]	; (8002060 <HAL_RCC_OscConfig+0x68c>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4b83      	ldr	r3, [pc, #524]	; (8002060 <HAL_RCC_OscConfig+0x68c>)
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	0049      	lsls	r1, r1, #1
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fada 	bl	8001414 <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e66:	f7ff fad5 	bl	8001414 <HAL_GetTick>
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b64      	cmp	r3, #100	; 0x64
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e123      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	4b79      	ldr	r3, [pc, #484]	; (8002060 <HAL_RCC_OscConfig+0x68c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4013      	ands	r3, r2
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4cc>
 8001e90:	4b70      	ldr	r3, [pc, #448]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001e92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e94:	4b6f      	ldr	r3, [pc, #444]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001e96:	2180      	movs	r1, #128	; 0x80
 8001e98:	0049      	lsls	r1, r1, #1
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	651a      	str	r2, [r3, #80]	; 0x50
 8001e9e:	e031      	b.n	8001f04 <HAL_RCC_OscConfig+0x530>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x4ee>
 8001ea8:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001eaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eac:	4b69      	ldr	r3, [pc, #420]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001eae:	496b      	ldr	r1, [pc, #428]	; (800205c <HAL_RCC_OscConfig+0x688>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	651a      	str	r2, [r3, #80]	; 0x50
 8001eb4:	4b67      	ldr	r3, [pc, #412]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001eb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eb8:	4b66      	ldr	r3, [pc, #408]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001eba:	496a      	ldr	r1, [pc, #424]	; (8002064 <HAL_RCC_OscConfig+0x690>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	651a      	str	r2, [r3, #80]	; 0x50
 8001ec0:	e020      	b.n	8001f04 <HAL_RCC_OscConfig+0x530>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	23a0      	movs	r3, #160	; 0xa0
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d10e      	bne.n	8001eec <HAL_RCC_OscConfig+0x518>
 8001ece:	4b61      	ldr	r3, [pc, #388]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ed2:	4b60      	ldr	r3, [pc, #384]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	00c9      	lsls	r1, r1, #3
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	651a      	str	r2, [r3, #80]	; 0x50
 8001edc:	4b5d      	ldr	r3, [pc, #372]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee0:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	0049      	lsls	r1, r1, #1
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	651a      	str	r2, [r3, #80]	; 0x50
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0x530>
 8001eec:	4b59      	ldr	r3, [pc, #356]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001eee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ef0:	4b58      	ldr	r3, [pc, #352]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001ef2:	495a      	ldr	r1, [pc, #360]	; (800205c <HAL_RCC_OscConfig+0x688>)
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ef8:	4b56      	ldr	r3, [pc, #344]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001efa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001efc:	4b55      	ldr	r3, [pc, #340]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001efe:	4959      	ldr	r1, [pc, #356]	; (8002064 <HAL_RCC_OscConfig+0x690>)
 8001f00:	400a      	ands	r2, r1
 8001f02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d015      	beq.n	8001f38 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fa82 	bl	8001414 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f14:	e009      	b.n	8001f2a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff fa7d 	bl	8001414 <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	4a51      	ldr	r2, [pc, #324]	; (8002068 <HAL_RCC_OscConfig+0x694>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e0ca      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001f2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4013      	ands	r3, r2
 8001f34:	d0ef      	beq.n	8001f16 <HAL_RCC_OscConfig+0x542>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7ff fa6c 	bl	8001414 <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f40:	e009      	b.n	8001f56 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff fa67 	bl	8001414 <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	4a46      	ldr	r2, [pc, #280]	; (8002068 <HAL_RCC_OscConfig+0x694>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e0b4      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f56:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d1ef      	bne.n	8001f42 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f62:	2323      	movs	r3, #35	; 0x23
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6c:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f70:	4b38      	ldr	r3, [pc, #224]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001f72:	493e      	ldr	r1, [pc, #248]	; (800206c <HAL_RCC_OscConfig+0x698>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d100      	bne.n	8001f82 <HAL_RCC_OscConfig+0x5ae>
 8001f80:	e09d      	b.n	80020be <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d100      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5b6>
 8001f88:	e076      	b.n	8002078 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d145      	bne.n	800201e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b30      	ldr	r3, [pc, #192]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001f98:	4935      	ldr	r1, [pc, #212]	; (8002070 <HAL_RCC_OscConfig+0x69c>)
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fa39 	bl	8001414 <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff fa34 	bl	8001414 <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e082      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	049b      	lsls	r3, r3, #18
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc6:	4b23      	ldr	r3, [pc, #140]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	4a2a      	ldr	r2, [pc, #168]	; (8002074 <HAL_RCC_OscConfig+0x6a0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8001fec:	2180      	movs	r1, #128	; 0x80
 8001fee:	0449      	lsls	r1, r1, #17
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fa0e 	bl	8001414 <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7ff fa09 	bl	8001414 <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e057      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	049b      	lsls	r3, r3, #18
 8002018:	4013      	ands	r3, r2
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x62a>
 800201c:	e04f      	b.n	80020be <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8002024:	4912      	ldr	r1, [pc, #72]	; (8002070 <HAL_RCC_OscConfig+0x69c>)
 8002026:	400a      	ands	r2, r1
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff f9f3 	bl	8001414 <HAL_GetTick>
 800202e:	0003      	movs	r3, r0
 8002030:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff f9ee 	bl	8001414 <HAL_GetTick>
 8002038:	0002      	movs	r2, r0
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e03c      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002046:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_RCC_OscConfig+0x680>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	049b      	lsls	r3, r3, #18
 800204e:	4013      	ands	r3, r2
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x660>
 8002052:	e034      	b.n	80020be <HAL_RCC_OscConfig+0x6ea>
 8002054:	40021000 	.word	0x40021000
 8002058:	ffff1fff 	.word	0xffff1fff
 800205c:	fffffeff 	.word	0xfffffeff
 8002060:	40007000 	.word	0x40007000
 8002064:	fffffbff 	.word	0xfffffbff
 8002068:	00001388 	.word	0x00001388
 800206c:	efffffff 	.word	0xefffffff
 8002070:	feffffff 	.word	0xfeffffff
 8002074:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e01d      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_RCC_OscConfig+0x6f4>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	025b      	lsls	r3, r3, #9
 8002090:	401a      	ands	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	429a      	cmp	r2, r3
 8002098:	d10f      	bne.n	80020ba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	23f0      	movs	r3, #240	; 0xf0
 800209e:	039b      	lsls	r3, r3, #14
 80020a0:	401a      	ands	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	23c0      	movs	r3, #192	; 0xc0
 80020ae:	041b      	lsls	r3, r3, #16
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b00a      	add	sp, #40	; 0x28
 80020c6:	bdb0      	pop	{r4, r5, r7, pc}
 80020c8:	40021000 	.word	0x40021000

080020cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020cc:	b5b0      	push	{r4, r5, r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e128      	b.n	8002332 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e0:	4b96      	ldr	r3, [pc, #600]	; (800233c <HAL_RCC_ClockConfig+0x270>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2201      	movs	r2, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d91e      	bls.n	800212c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b93      	ldr	r3, [pc, #588]	; (800233c <HAL_RCC_ClockConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2201      	movs	r2, #1
 80020f4:	4393      	bics	r3, r2
 80020f6:	0019      	movs	r1, r3
 80020f8:	4b90      	ldr	r3, [pc, #576]	; (800233c <HAL_RCC_ClockConfig+0x270>)
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002100:	f7ff f988 	bl	8001414 <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002108:	e009      	b.n	800211e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210a:	f7ff f983 	bl	8001414 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	4a8a      	ldr	r2, [pc, #552]	; (8002340 <HAL_RCC_ClockConfig+0x274>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e109      	b.n	8002332 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b87      	ldr	r3, [pc, #540]	; (800233c <HAL_RCC_ClockConfig+0x270>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	4013      	ands	r3, r2
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d1ee      	bne.n	800210a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2202      	movs	r2, #2
 8002132:	4013      	ands	r3, r2
 8002134:	d009      	beq.n	800214a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002136:	4b83      	ldr	r3, [pc, #524]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	22f0      	movs	r2, #240	; 0xf0
 800213c:	4393      	bics	r3, r2
 800213e:	0019      	movs	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	4b7f      	ldr	r3, [pc, #508]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 8002146:	430a      	orrs	r2, r1
 8002148:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2201      	movs	r2, #1
 8002150:	4013      	ands	r3, r2
 8002152:	d100      	bne.n	8002156 <HAL_RCC_ClockConfig+0x8a>
 8002154:	e089      	b.n	800226a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800215e:	4b79      	ldr	r3, [pc, #484]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	029b      	lsls	r3, r3, #10
 8002166:	4013      	ands	r3, r2
 8002168:	d120      	bne.n	80021ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0e1      	b.n	8002332 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002176:	4b73      	ldr	r3, [pc, #460]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	049b      	lsls	r3, r3, #18
 800217e:	4013      	ands	r3, r2
 8002180:	d114      	bne.n	80021ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0d5      	b.n	8002332 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d106      	bne.n	800219c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800218e:	4b6d      	ldr	r3, [pc, #436]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2204      	movs	r2, #4
 8002194:	4013      	ands	r3, r2
 8002196:	d109      	bne.n	80021ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0ca      	b.n	8002332 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800219c:	4b69      	ldr	r3, [pc, #420]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0c2      	b.n	8002332 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ac:	4b65      	ldr	r3, [pc, #404]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2203      	movs	r2, #3
 80021b2:	4393      	bics	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4b62      	ldr	r3, [pc, #392]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c0:	f7ff f928 	bl	8001414 <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d111      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d0:	e009      	b.n	80021e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d2:	f7ff f91f 	bl	8001414 <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	4a58      	ldr	r2, [pc, #352]	; (8002340 <HAL_RCC_ClockConfig+0x274>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0a5      	b.n	8002332 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021e6:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	220c      	movs	r2, #12
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d1ef      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x106>
 80021f2:	e03a      	b.n	800226a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d111      	bne.n	8002220 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021fc:	e009      	b.n	8002212 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fe:	f7ff f909 	bl	8001414 <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4a4d      	ldr	r2, [pc, #308]	; (8002340 <HAL_RCC_ClockConfig+0x274>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e08f      	b.n	8002332 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002212:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	220c      	movs	r2, #12
 8002218:	4013      	ands	r3, r2
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d1ef      	bne.n	80021fe <HAL_RCC_ClockConfig+0x132>
 800221e:	e024      	b.n	800226a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d11b      	bne.n	8002260 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002228:	e009      	b.n	800223e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222a:	f7ff f8f3 	bl	8001414 <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	4a42      	ldr	r2, [pc, #264]	; (8002340 <HAL_RCC_ClockConfig+0x274>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e079      	b.n	8002332 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800223e:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	220c      	movs	r2, #12
 8002244:	4013      	ands	r3, r2
 8002246:	2b04      	cmp	r3, #4
 8002248:	d1ef      	bne.n	800222a <HAL_RCC_ClockConfig+0x15e>
 800224a:	e00e      	b.n	800226a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224c:	f7ff f8e2 	bl	8001414 <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	4a3a      	ldr	r2, [pc, #232]	; (8002340 <HAL_RCC_ClockConfig+0x274>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e068      	b.n	8002332 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002260:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	220c      	movs	r2, #12
 8002266:	4013      	ands	r3, r2
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800226a:	4b34      	ldr	r3, [pc, #208]	; (800233c <HAL_RCC_ClockConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2201      	movs	r2, #1
 8002270:	4013      	ands	r3, r2
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d21e      	bcs.n	80022b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002278:	4b30      	ldr	r3, [pc, #192]	; (800233c <HAL_RCC_ClockConfig+0x270>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2201      	movs	r2, #1
 800227e:	4393      	bics	r3, r2
 8002280:	0019      	movs	r1, r3
 8002282:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_RCC_ClockConfig+0x270>)
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800228a:	f7ff f8c3 	bl	8001414 <HAL_GetTick>
 800228e:	0003      	movs	r3, r0
 8002290:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	e009      	b.n	80022a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002294:	f7ff f8be 	bl	8001414 <HAL_GetTick>
 8002298:	0002      	movs	r2, r0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	4a28      	ldr	r2, [pc, #160]	; (8002340 <HAL_RCC_ClockConfig+0x274>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e044      	b.n	8002332 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_ClockConfig+0x270>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2201      	movs	r2, #1
 80022ae:	4013      	ands	r3, r2
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d1ee      	bne.n	8002294 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2204      	movs	r2, #4
 80022bc:	4013      	ands	r3, r2
 80022be:	d009      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a20      	ldr	r2, [pc, #128]	; (8002348 <HAL_RCC_ClockConfig+0x27c>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2208      	movs	r2, #8
 80022da:	4013      	ands	r3, r2
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4a1a      	ldr	r2, [pc, #104]	; (800234c <HAL_RCC_ClockConfig+0x280>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	0019      	movs	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	00da      	lsls	r2, r3, #3
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 80022f0:	430a      	orrs	r2, r1
 80022f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022f4:	f000 f832 	bl	800235c <HAL_RCC_GetSysClockFreq>
 80022f8:	0001      	movs	r1, r0
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_RCC_ClockConfig+0x278>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	220f      	movs	r2, #15
 8002302:	4013      	ands	r3, r2
 8002304:	4a12      	ldr	r2, [pc, #72]	; (8002350 <HAL_RCC_ClockConfig+0x284>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	000a      	movs	r2, r1
 800230a:	40da      	lsrs	r2, r3
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_RCC_ClockConfig+0x288>)
 800230e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_RCC_ClockConfig+0x28c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	250b      	movs	r5, #11
 8002316:	197c      	adds	r4, r7, r5
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff f835 	bl	8001388 <HAL_InitTick>
 800231e:	0003      	movs	r3, r0
 8002320:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002322:	197b      	adds	r3, r7, r5
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800232a:	197b      	adds	r3, r7, r5
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	e000      	b.n	8002332 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b004      	add	sp, #16
 8002338:	bdb0      	pop	{r4, r5, r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	40022000 	.word	0x40022000
 8002340:	00001388 	.word	0x00001388
 8002344:	40021000 	.word	0x40021000
 8002348:	fffff8ff 	.word	0xfffff8ff
 800234c:	ffffc7ff 	.word	0xffffc7ff
 8002350:	08004080 	.word	0x08004080
 8002354:	20000000 	.word	0x20000000
 8002358:	20000004 	.word	0x20000004

0800235c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800235c:	b5b0      	push	{r4, r5, r7, lr}
 800235e:	b08e      	sub	sp, #56	; 0x38
 8002360:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002362:	4b4c      	ldr	r3, [pc, #304]	; (8002494 <HAL_RCC_GetSysClockFreq+0x138>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800236a:	230c      	movs	r3, #12
 800236c:	4013      	ands	r3, r2
 800236e:	2b0c      	cmp	r3, #12
 8002370:	d014      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x40>
 8002372:	d900      	bls.n	8002376 <HAL_RCC_GetSysClockFreq+0x1a>
 8002374:	e07b      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x112>
 8002376:	2b04      	cmp	r3, #4
 8002378:	d002      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x24>
 800237a:	2b08      	cmp	r3, #8
 800237c:	d00b      	beq.n	8002396 <HAL_RCC_GetSysClockFreq+0x3a>
 800237e:	e076      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002380:	4b44      	ldr	r3, [pc, #272]	; (8002494 <HAL_RCC_GetSysClockFreq+0x138>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2210      	movs	r2, #16
 8002386:	4013      	ands	r3, r2
 8002388:	d002      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800238a:	4b43      	ldr	r3, [pc, #268]	; (8002498 <HAL_RCC_GetSysClockFreq+0x13c>)
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800238e:	e07c      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002390:	4b42      	ldr	r3, [pc, #264]	; (800249c <HAL_RCC_GetSysClockFreq+0x140>)
 8002392:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002394:	e079      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002396:	4b42      	ldr	r3, [pc, #264]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800239a:	e076      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	0c9a      	lsrs	r2, r3, #18
 80023a0:	230f      	movs	r3, #15
 80023a2:	401a      	ands	r2, r3
 80023a4:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x148>)
 80023a6:	5c9b      	ldrb	r3, [r3, r2]
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	0d9a      	lsrs	r2, r3, #22
 80023ae:	2303      	movs	r3, #3
 80023b0:	4013      	ands	r3, r2
 80023b2:	3301      	adds	r3, #1
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023b6:	4b37      	ldr	r3, [pc, #220]	; (8002494 <HAL_RCC_GetSysClockFreq+0x138>)
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	025b      	lsls	r3, r3, #9
 80023be:	4013      	ands	r3, r2
 80023c0:	d01a      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	4a35      	ldr	r2, [pc, #212]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x144>)
 80023cc:	2300      	movs	r3, #0
 80023ce:	69b8      	ldr	r0, [r7, #24]
 80023d0:	69f9      	ldr	r1, [r7, #28]
 80023d2:	f7fd ff57 	bl	8000284 <__aeabi_lmul>
 80023d6:	0002      	movs	r2, r0
 80023d8:	000b      	movs	r3, r1
 80023da:	0010      	movs	r0, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f7fd ff2b 	bl	8000244 <__aeabi_uldivmod>
 80023ee:	0002      	movs	r2, r0
 80023f0:	000b      	movs	r3, r1
 80023f2:	0013      	movs	r3, r2
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
 80023f6:	e037      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80023f8:	4b26      	ldr	r3, [pc, #152]	; (8002494 <HAL_RCC_GetSysClockFreq+0x138>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2210      	movs	r2, #16
 80023fe:	4013      	ands	r3, r2
 8002400:	d01a      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4a23      	ldr	r2, [pc, #140]	; (8002498 <HAL_RCC_GetSysClockFreq+0x13c>)
 800240c:	2300      	movs	r3, #0
 800240e:	68b8      	ldr	r0, [r7, #8]
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	f7fd ff37 	bl	8000284 <__aeabi_lmul>
 8002416:	0002      	movs	r2, r0
 8002418:	000b      	movs	r3, r1
 800241a:	0010      	movs	r0, r2
 800241c:	0019      	movs	r1, r3
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f7fd ff0b 	bl	8000244 <__aeabi_uldivmod>
 800242e:	0002      	movs	r2, r0
 8002430:	000b      	movs	r3, r1
 8002432:	0013      	movs	r3, r2
 8002434:	637b      	str	r3, [r7, #52]	; 0x34
 8002436:	e017      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	0018      	movs	r0, r3
 800243c:	2300      	movs	r3, #0
 800243e:	0019      	movs	r1, r3
 8002440:	4a16      	ldr	r2, [pc, #88]	; (800249c <HAL_RCC_GetSysClockFreq+0x140>)
 8002442:	2300      	movs	r3, #0
 8002444:	f7fd ff1e 	bl	8000284 <__aeabi_lmul>
 8002448:	0002      	movs	r2, r0
 800244a:	000b      	movs	r3, r1
 800244c:	0010      	movs	r0, r2
 800244e:	0019      	movs	r1, r3
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	001c      	movs	r4, r3
 8002454:	2300      	movs	r3, #0
 8002456:	001d      	movs	r5, r3
 8002458:	0022      	movs	r2, r4
 800245a:	002b      	movs	r3, r5
 800245c:	f7fd fef2 	bl	8000244 <__aeabi_uldivmod>
 8002460:	0002      	movs	r2, r0
 8002462:	000b      	movs	r3, r1
 8002464:	0013      	movs	r3, r2
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800246c:	e00d      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCC_GetSysClockFreq+0x138>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	0b5b      	lsrs	r3, r3, #13
 8002474:	2207      	movs	r2, #7
 8002476:	4013      	ands	r3, r2
 8002478:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	3301      	adds	r3, #1
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	0212      	lsls	r2, r2, #8
 8002482:	409a      	lsls	r2, r3
 8002484:	0013      	movs	r3, r2
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002488:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800248c:	0018      	movs	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	b00e      	add	sp, #56	; 0x38
 8002492:	bdb0      	pop	{r4, r5, r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	003d0900 	.word	0x003d0900
 800249c:	00f42400 	.word	0x00f42400
 80024a0:	007a1200 	.word	0x007a1200
 80024a4:	08004098 	.word	0x08004098

080024a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ac:	4b02      	ldr	r3, [pc, #8]	; (80024b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	20000000 	.word	0x20000000

080024bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024c0:	f7ff fff2 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024c4:	0001      	movs	r1, r0
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	2207      	movs	r2, #7
 80024ce:	4013      	ands	r3, r2
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	40d9      	lsrs	r1, r3
 80024d6:	000b      	movs	r3, r1
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08004090 	.word	0x08004090

080024e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024ec:	f7ff ffdc 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024f0:	0001      	movs	r1, r0
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	0adb      	lsrs	r3, r3, #11
 80024f8:	2207      	movs	r2, #7
 80024fa:	4013      	ands	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	40d9      	lsrs	r1, r3
 8002502:	000b      	movs	r3, r1
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	40021000 	.word	0x40021000
 8002510:	08004090 	.word	0x08004090

08002514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e032      	b.n	800258c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2239      	movs	r2, #57	; 0x39
 800252a:	5c9b      	ldrb	r3, [r3, r2]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2238      	movs	r2, #56	; 0x38
 8002536:	2100      	movs	r1, #0
 8002538:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	0018      	movs	r0, r3
 800253e:	f7fe fd67 	bl	8001010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2239      	movs	r2, #57	; 0x39
 8002546:	2102      	movs	r1, #2
 8002548:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3304      	adds	r3, #4
 8002552:	0019      	movs	r1, r3
 8002554:	0010      	movs	r0, r2
 8002556:	f000 fa7f 	bl	8002a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	223e      	movs	r2, #62	; 0x3e
 800255e:	2101      	movs	r1, #1
 8002560:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	223a      	movs	r2, #58	; 0x3a
 8002566:	2101      	movs	r1, #1
 8002568:	5499      	strb	r1, [r3, r2]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	223b      	movs	r2, #59	; 0x3b
 800256e:	2101      	movs	r1, #1
 8002570:	5499      	strb	r1, [r3, r2]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	223c      	movs	r2, #60	; 0x3c
 8002576:	2101      	movs	r1, #1
 8002578:	5499      	strb	r1, [r3, r2]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	223d      	movs	r2, #61	; 0x3d
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2239      	movs	r2, #57	; 0x39
 8002586:	2101      	movs	r1, #1
 8002588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2239      	movs	r2, #57	; 0x39
 80025a0:	5c9b      	ldrb	r3, [r3, r2]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d001      	beq.n	80025ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e02e      	b.n	800260a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2239      	movs	r2, #57	; 0x39
 80025b0:	2102      	movs	r1, #2
 80025b2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	05db      	lsls	r3, r3, #23
 80025bc:	429a      	cmp	r2, r3
 80025be:	d009      	beq.n	80025d4 <HAL_TIM_Base_Start+0x40>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a13      	ldr	r2, [pc, #76]	; (8002614 <HAL_TIM_Base_Start+0x80>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_TIM_Base_Start+0x40>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <HAL_TIM_Base_Start+0x84>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d111      	bne.n	80025f8 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2207      	movs	r2, #7
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d010      	beq.n	8002608 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f6:	e007      	b.n	8002608 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	0018      	movs	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	b004      	add	sp, #16
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	40010800 	.word	0x40010800
 8002618:	40011400 	.word	0x40011400

0800261c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2239      	movs	r2, #57	; 0x39
 8002628:	5c9b      	ldrb	r3, [r3, r2]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d001      	beq.n	8002634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e036      	b.n	80026a2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2239      	movs	r2, #57	; 0x39
 8002638:	2102      	movs	r1, #2
 800263a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2101      	movs	r1, #1
 8002648:	430a      	orrs	r2, r1
 800264a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	05db      	lsls	r3, r3, #23
 8002654:	429a      	cmp	r2, r3
 8002656:	d009      	beq.n	800266c <HAL_TIM_Base_Start_IT+0x50>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a13      	ldr	r2, [pc, #76]	; (80026ac <HAL_TIM_Base_Start_IT+0x90>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d004      	beq.n	800266c <HAL_TIM_Base_Start_IT+0x50>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <HAL_TIM_Base_Start_IT+0x94>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d111      	bne.n	8002690 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2207      	movs	r2, #7
 8002674:	4013      	ands	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b06      	cmp	r3, #6
 800267c:	d010      	beq.n	80026a0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2101      	movs	r1, #1
 800268a:	430a      	orrs	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268e:	e007      	b.n	80026a0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2101      	movs	r1, #1
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b004      	add	sp, #16
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	40010800 	.word	0x40010800
 80026b0:	40011400 	.word	0x40011400

080026b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2202      	movs	r2, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d124      	bne.n	8002714 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2202      	movs	r2, #2
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d11d      	bne.n	8002714 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2203      	movs	r2, #3
 80026de:	4252      	negs	r2, r2
 80026e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2203      	movs	r2, #3
 80026f0:	4013      	ands	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 f996 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e007      	b.n	800270e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0018      	movs	r0, r3
 8002702:	f000 f989 	bl	8002a18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f995 	bl	8002a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2204      	movs	r2, #4
 800271c:	4013      	ands	r3, r2
 800271e:	2b04      	cmp	r3, #4
 8002720:	d125      	bne.n	800276e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2204      	movs	r2, #4
 800272a:	4013      	ands	r3, r2
 800272c:	2b04      	cmp	r3, #4
 800272e:	d11e      	bne.n	800276e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2205      	movs	r2, #5
 8002736:	4252      	negs	r2, r2
 8002738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	23c0      	movs	r3, #192	; 0xc0
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4013      	ands	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	0018      	movs	r0, r3
 8002752:	f000 f969 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 8002756:	e007      	b.n	8002768 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	0018      	movs	r0, r3
 800275c:	f000 f95c 	bl	8002a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	0018      	movs	r0, r3
 8002764:	f000 f968 	bl	8002a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2208      	movs	r2, #8
 8002776:	4013      	ands	r3, r2
 8002778:	2b08      	cmp	r3, #8
 800277a:	d124      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2208      	movs	r2, #8
 8002784:	4013      	ands	r3, r2
 8002786:	2b08      	cmp	r3, #8
 8002788:	d11d      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2209      	movs	r2, #9
 8002790:	4252      	negs	r2, r2
 8002792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2204      	movs	r2, #4
 8002798:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	2203      	movs	r2, #3
 80027a2:	4013      	ands	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 f93d 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 80027ae:	e007      	b.n	80027c0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f930 	bl	8002a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 f93c 	bl	8002a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2210      	movs	r2, #16
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d125      	bne.n	8002820 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2210      	movs	r2, #16
 80027dc:	4013      	ands	r3, r2
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d11e      	bne.n	8002820 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2211      	movs	r2, #17
 80027e8:	4252      	negs	r2, r2
 80027ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2208      	movs	r2, #8
 80027f0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	23c0      	movs	r3, #192	; 0xc0
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4013      	ands	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	0018      	movs	r0, r3
 8002804:	f000 f910 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 8002808:	e007      	b.n	800281a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 f903 	bl	8002a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0018      	movs	r0, r3
 8002816:	f000 f90f 	bl	8002a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2201      	movs	r2, #1
 8002828:	4013      	ands	r3, r2
 800282a:	2b01      	cmp	r3, #1
 800282c:	d10f      	bne.n	800284e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	4013      	ands	r3, r2
 8002838:	2b01      	cmp	r3, #1
 800283a:	d108      	bne.n	800284e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2202      	movs	r2, #2
 8002842:	4252      	negs	r2, r2
 8002844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	0018      	movs	r0, r3
 800284a:	f7fe fb35 	bl	8000eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2240      	movs	r2, #64	; 0x40
 8002856:	4013      	ands	r3, r2
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d10f      	bne.n	800287c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2240      	movs	r2, #64	; 0x40
 8002864:	4013      	ands	r3, r2
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	d108      	bne.n	800287c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2241      	movs	r2, #65	; 0x41
 8002870:	4252      	negs	r2, r2
 8002872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f8e6 	bl	8002a48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800287c:	46c0      	nop			; (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	b002      	add	sp, #8
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2238      	movs	r2, #56	; 0x38
 8002892:	5c9b      	ldrb	r3, [r3, r2]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_TIM_ConfigClockSource+0x18>
 8002898:	2302      	movs	r3, #2
 800289a:	e0b7      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x188>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2238      	movs	r2, #56	; 0x38
 80028a0:	2101      	movs	r1, #1
 80028a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2239      	movs	r2, #57	; 0x39
 80028a8:	2102      	movs	r1, #2
 80028aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2277      	movs	r2, #119	; 0x77
 80028b8:	4393      	bics	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a55      	ldr	r2, [pc, #340]	; (8002a14 <HAL_TIM_ConfigClockSource+0x190>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2280      	movs	r2, #128	; 0x80
 80028d2:	0192      	lsls	r2, r2, #6
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d040      	beq.n	800295a <HAL_TIM_ConfigClockSource+0xd6>
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0192      	lsls	r2, r2, #6
 80028dc:	4293      	cmp	r3, r2
 80028de:	d900      	bls.n	80028e2 <HAL_TIM_ConfigClockSource+0x5e>
 80028e0:	e088      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	0152      	lsls	r2, r2, #5
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d100      	bne.n	80028ec <HAL_TIM_ConfigClockSource+0x68>
 80028ea:	e085      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x174>
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	0152      	lsls	r2, r2, #5
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d900      	bls.n	80028f6 <HAL_TIM_ConfigClockSource+0x72>
 80028f4:	e07e      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 80028f6:	2b70      	cmp	r3, #112	; 0x70
 80028f8:	d018      	beq.n	800292c <HAL_TIM_ConfigClockSource+0xa8>
 80028fa:	d900      	bls.n	80028fe <HAL_TIM_ConfigClockSource+0x7a>
 80028fc:	e07a      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 80028fe:	2b60      	cmp	r3, #96	; 0x60
 8002900:	d04f      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x11e>
 8002902:	d900      	bls.n	8002906 <HAL_TIM_ConfigClockSource+0x82>
 8002904:	e076      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 8002906:	2b50      	cmp	r3, #80	; 0x50
 8002908:	d03b      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0xfe>
 800290a:	d900      	bls.n	800290e <HAL_TIM_ConfigClockSource+0x8a>
 800290c:	e072      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d057      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x13e>
 8002912:	d900      	bls.n	8002916 <HAL_TIM_ConfigClockSource+0x92>
 8002914:	e06e      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 8002916:	2b30      	cmp	r3, #48	; 0x30
 8002918:	d063      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15e>
 800291a:	d86b      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 800291c:	2b20      	cmp	r3, #32
 800291e:	d060      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15e>
 8002920:	d868      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 8002922:	2b00      	cmp	r3, #0
 8002924:	d05d      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15e>
 8002926:	2b10      	cmp	r3, #16
 8002928:	d05b      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800292a:	e063      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f000 f95a 	bl	8002bf4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2277      	movs	r2, #119	; 0x77
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	609a      	str	r2, [r3, #8]
      break;
 8002958:	e04f      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f000 f943 	bl	8002bf4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	01c9      	lsls	r1, r1, #7
 800297c:	430a      	orrs	r2, r1
 800297e:	609a      	str	r2, [r3, #8]
      break;
 8002980:	e03b      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	001a      	movs	r2, r3
 8002990:	f000 f8b6 	bl	8002b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2150      	movs	r1, #80	; 0x50
 800299a:	0018      	movs	r0, r3
 800299c:	f000 f910 	bl	8002bc0 <TIM_ITRx_SetConfig>
      break;
 80029a0:	e02b      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	001a      	movs	r2, r3
 80029b0:	f000 f8d4 	bl	8002b5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2160      	movs	r1, #96	; 0x60
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f900 	bl	8002bc0 <TIM_ITRx_SetConfig>
      break;
 80029c0:	e01b      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	001a      	movs	r2, r3
 80029d0:	f000 f896 	bl	8002b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2140      	movs	r1, #64	; 0x40
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f8f0 	bl	8002bc0 <TIM_ITRx_SetConfig>
      break;
 80029e0:	e00b      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0019      	movs	r1, r3
 80029ec:	0010      	movs	r0, r2
 80029ee:	f000 f8e7 	bl	8002bc0 <TIM_ITRx_SetConfig>
        break;
 80029f2:	e002      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x176>
      break;
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	e000      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x176>
      break;
 80029f8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2239      	movs	r2, #57	; 0x39
 80029fe:	2101      	movs	r1, #1
 8002a00:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2238      	movs	r2, #56	; 0x38
 8002a06:	2100      	movs	r1, #0
 8002a08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b004      	add	sp, #16
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	ffff00ff 	.word	0xffff00ff

08002a18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b002      	add	sp, #8
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b002      	add	sp, #8
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	05db      	lsls	r3, r3, #23
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d007      	beq.n	8002a82 <TIM_Base_SetConfig+0x2a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <TIM_Base_SetConfig+0x9c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d003      	beq.n	8002a82 <TIM_Base_SetConfig+0x2a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <TIM_Base_SetConfig+0xa0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d108      	bne.n	8002a94 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2270      	movs	r2, #112	; 0x70
 8002a86:	4393      	bics	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	05db      	lsls	r3, r3, #23
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d007      	beq.n	8002aae <TIM_Base_SetConfig+0x56>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <TIM_Base_SetConfig+0x9c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d003      	beq.n	8002aae <TIM_Base_SetConfig+0x56>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <TIM_Base_SetConfig+0xa0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d108      	bne.n	8002ac0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a12      	ldr	r2, [pc, #72]	; (8002afc <TIM_Base_SetConfig+0xa4>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	4393      	bics	r3, r2
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	615a      	str	r2, [r3, #20]
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b004      	add	sp, #16
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40010800 	.word	0x40010800
 8002af8:	40011400 	.word	0x40011400
 8002afc:	fffffcff 	.word	0xfffffcff

08002b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	2201      	movs	r2, #1
 8002b18:	4393      	bics	r3, r2
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	22f0      	movs	r2, #240	; 0xf0
 8002b2a:	4393      	bics	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	220a      	movs	r2, #10
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	621a      	str	r2, [r3, #32]
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b006      	add	sp, #24
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	4393      	bics	r3, r2
 8002b70:	001a      	movs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <TIM_TI2_ConfigInputStage+0x60>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	031b      	lsls	r3, r3, #12
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	22a0      	movs	r2, #160	; 0xa0
 8002b98:	4393      	bics	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	621a      	str	r2, [r3, #32]
}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b006      	add	sp, #24
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	ffff0fff 	.word	0xffff0fff

08002bc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2270      	movs	r2, #112	; 0x70
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	2207      	movs	r2, #7
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	609a      	str	r2, [r3, #8]
}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b004      	add	sp, #16
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	4a09      	ldr	r2, [pc, #36]	; (8002c30 <TIM_ETR_SetConfig+0x3c>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	021a      	lsls	r2, r3, #8
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	609a      	str	r2, [r3, #8]
}
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b006      	add	sp, #24
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	ffff00ff 	.word	0xffff00ff

08002c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2238      	movs	r2, #56	; 0x38
 8002c42:	5c9b      	ldrb	r3, [r3, r2]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e042      	b.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2238      	movs	r2, #56	; 0x38
 8002c50:	2101      	movs	r1, #1
 8002c52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2239      	movs	r2, #57	; 0x39
 8002c58:	2102      	movs	r1, #2
 8002c5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2270      	movs	r2, #112	; 0x70
 8002c70:	4393      	bics	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	05db      	lsls	r3, r3, #23
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d009      	beq.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d004      	beq.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0f      	ldr	r2, [pc, #60]	; (8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2280      	movs	r2, #128	; 0x80
 8002caa:	4393      	bics	r3, r2
 8002cac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2239      	movs	r2, #57	; 0x39
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2238      	movs	r2, #56	; 0x38
 8002ccc:	2100      	movs	r1, #0
 8002cce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b004      	add	sp, #16
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	40010800 	.word	0x40010800
 8002ce0:	40011400 	.word	0x40011400

08002ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e044      	b.n	8002d80 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d107      	bne.n	8002d0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2274      	movs	r2, #116	; 0x74
 8002d02:	2100      	movs	r1, #0
 8002d04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7fe f9e9 	bl	80010e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2224      	movs	r2, #36	; 0x24
 8002d12:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2101      	movs	r1, #1
 8002d20:	438a      	bics	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 f8d8 	bl	8002edc <UART_SetConfig>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e024      	b.n	8002d80 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 fb2d 	bl	80033a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	490d      	ldr	r1, [pc, #52]	; (8002d88 <HAL_UART_Init+0xa4>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	212a      	movs	r1, #42	; 0x2a
 8002d62:	438a      	bics	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 fbc5 	bl	8003508 <UART_CheckIdleState>
 8002d7e:	0003      	movs	r3, r0
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b002      	add	sp, #8
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	ffffb7ff 	.word	0xffffb7ff

08002d8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	1dbb      	adds	r3, r7, #6
 8002d9a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d000      	beq.n	8002da6 <HAL_UART_Transmit+0x1a>
 8002da4:	e095      	b.n	8002ed2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_UART_Transmit+0x28>
 8002dac:	1dbb      	adds	r3, r7, #6
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e08d      	b.n	8002ed4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	015b      	lsls	r3, r3, #5
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d109      	bne.n	8002dd8 <HAL_UART_Transmit+0x4c>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d001      	beq.n	8002dd8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e07d      	b.n	8002ed4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2274      	movs	r2, #116	; 0x74
 8002ddc:	5c9b      	ldrb	r3, [r3, r2]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_UART_Transmit+0x5a>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e076      	b.n	8002ed4 <HAL_UART_Transmit+0x148>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2274      	movs	r2, #116	; 0x74
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	2100      	movs	r1, #0
 8002df4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2221      	movs	r2, #33	; 0x21
 8002dfa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fb0a 	bl	8001414 <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1dba      	adds	r2, r7, #6
 8002e08:	2150      	movs	r1, #80	; 0x50
 8002e0a:	8812      	ldrh	r2, [r2, #0]
 8002e0c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1dba      	adds	r2, r7, #6
 8002e12:	2152      	movs	r1, #82	; 0x52
 8002e14:	8812      	ldrh	r2, [r2, #0]
 8002e16:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	015b      	lsls	r3, r3, #5
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d108      	bne.n	8002e36 <HAL_UART_Transmit+0xaa>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d104      	bne.n	8002e36 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	e003      	b.n	8002e3e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2274      	movs	r2, #116	; 0x74
 8002e42:	2100      	movs	r1, #0
 8002e44:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002e46:	e02c      	b.n	8002ea2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	0013      	movs	r3, r2
 8002e52:	2200      	movs	r2, #0
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	f000 fb9f 	bl	8003598 <UART_WaitOnFlagUntilTimeout>
 8002e5a:	1e03      	subs	r3, r0, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e038      	b.n	8002ed4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	001a      	movs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	05d2      	lsls	r2, r2, #23
 8002e74:	0dd2      	lsrs	r2, r2, #23
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	e007      	b.n	8002e90 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2252      	movs	r2, #82	; 0x52
 8002e94:	5a9b      	ldrh	r3, [r3, r2]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b299      	uxth	r1, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2252      	movs	r2, #82	; 0x52
 8002ea0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2252      	movs	r2, #82	; 0x52
 8002ea6:	5a9b      	ldrh	r3, [r3, r2]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1cc      	bne.n	8002e48 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	0013      	movs	r3, r2
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2140      	movs	r1, #64	; 0x40
 8002ebc:	f000 fb6c 	bl	8003598 <UART_WaitOnFlagUntilTimeout>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e005      	b.n	8002ed4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	e000      	b.n	8002ed4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
  }
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b008      	add	sp, #32
 8002eda:	bd80      	pop	{r7, pc}

08002edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002edc:	b5b0      	push	{r4, r5, r7, lr}
 8002ede:	b08e      	sub	sp, #56	; 0x38
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ee4:	231a      	movs	r3, #26
 8002ee6:	2218      	movs	r2, #24
 8002ee8:	4694      	mov	ip, r2
 8002eea:	44bc      	add	ip, r7
 8002eec:	4463      	add	r3, ip
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4abc      	ldr	r2, [pc, #752]	; (8003204 <UART_SetConfig+0x328>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4ab8      	ldr	r2, [pc, #736]	; (8003208 <UART_SetConfig+0x32c>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4ab2      	ldr	r2, [pc, #712]	; (800320c <UART_SetConfig+0x330>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4aad      	ldr	r2, [pc, #692]	; (8003210 <UART_SetConfig+0x334>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f64:	430a      	orrs	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4aa9      	ldr	r2, [pc, #676]	; (8003214 <UART_SetConfig+0x338>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d136      	bne.n	8002fe0 <UART_SetConfig+0x104>
 8002f72:	4ba9      	ldr	r3, [pc, #676]	; (8003218 <UART_SetConfig+0x33c>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	220c      	movs	r2, #12
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d020      	beq.n	8002fc0 <UART_SetConfig+0xe4>
 8002f7e:	d827      	bhi.n	8002fd0 <UART_SetConfig+0xf4>
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d00d      	beq.n	8002fa0 <UART_SetConfig+0xc4>
 8002f84:	d824      	bhi.n	8002fd0 <UART_SetConfig+0xf4>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <UART_SetConfig+0xb4>
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d010      	beq.n	8002fb0 <UART_SetConfig+0xd4>
 8002f8e:	e01f      	b.n	8002fd0 <UART_SetConfig+0xf4>
 8002f90:	231b      	movs	r3, #27
 8002f92:	2218      	movs	r2, #24
 8002f94:	4694      	mov	ip, r2
 8002f96:	44bc      	add	ip, r7
 8002f98:	4463      	add	r3, ip
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e06f      	b.n	8003080 <UART_SetConfig+0x1a4>
 8002fa0:	231b      	movs	r3, #27
 8002fa2:	2218      	movs	r2, #24
 8002fa4:	4694      	mov	ip, r2
 8002fa6:	44bc      	add	ip, r7
 8002fa8:	4463      	add	r3, ip
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	e067      	b.n	8003080 <UART_SetConfig+0x1a4>
 8002fb0:	231b      	movs	r3, #27
 8002fb2:	2218      	movs	r2, #24
 8002fb4:	4694      	mov	ip, r2
 8002fb6:	44bc      	add	ip, r7
 8002fb8:	4463      	add	r3, ip
 8002fba:	2204      	movs	r2, #4
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	e05f      	b.n	8003080 <UART_SetConfig+0x1a4>
 8002fc0:	231b      	movs	r3, #27
 8002fc2:	2218      	movs	r2, #24
 8002fc4:	4694      	mov	ip, r2
 8002fc6:	44bc      	add	ip, r7
 8002fc8:	4463      	add	r3, ip
 8002fca:	2208      	movs	r2, #8
 8002fcc:	701a      	strb	r2, [r3, #0]
 8002fce:	e057      	b.n	8003080 <UART_SetConfig+0x1a4>
 8002fd0:	231b      	movs	r3, #27
 8002fd2:	2218      	movs	r2, #24
 8002fd4:	4694      	mov	ip, r2
 8002fd6:	44bc      	add	ip, r7
 8002fd8:	4463      	add	r3, ip
 8002fda:	2210      	movs	r2, #16
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e04f      	b.n	8003080 <UART_SetConfig+0x1a4>
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a89      	ldr	r2, [pc, #548]	; (800320c <UART_SetConfig+0x330>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d143      	bne.n	8003072 <UART_SetConfig+0x196>
 8002fea:	4b8b      	ldr	r3, [pc, #556]	; (8003218 <UART_SetConfig+0x33c>)
 8002fec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fee:	23c0      	movs	r3, #192	; 0xc0
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	22c0      	movs	r2, #192	; 0xc0
 8002ff6:	0112      	lsls	r2, r2, #4
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d02a      	beq.n	8003052 <UART_SetConfig+0x176>
 8002ffc:	22c0      	movs	r2, #192	; 0xc0
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	4293      	cmp	r3, r2
 8003002:	d82e      	bhi.n	8003062 <UART_SetConfig+0x186>
 8003004:	2280      	movs	r2, #128	; 0x80
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	4293      	cmp	r3, r2
 800300a:	d012      	beq.n	8003032 <UART_SetConfig+0x156>
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	4293      	cmp	r3, r2
 8003012:	d826      	bhi.n	8003062 <UART_SetConfig+0x186>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d004      	beq.n	8003022 <UART_SetConfig+0x146>
 8003018:	2280      	movs	r2, #128	; 0x80
 800301a:	00d2      	lsls	r2, r2, #3
 800301c:	4293      	cmp	r3, r2
 800301e:	d010      	beq.n	8003042 <UART_SetConfig+0x166>
 8003020:	e01f      	b.n	8003062 <UART_SetConfig+0x186>
 8003022:	231b      	movs	r3, #27
 8003024:	2218      	movs	r2, #24
 8003026:	4694      	mov	ip, r2
 8003028:	44bc      	add	ip, r7
 800302a:	4463      	add	r3, ip
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e026      	b.n	8003080 <UART_SetConfig+0x1a4>
 8003032:	231b      	movs	r3, #27
 8003034:	2218      	movs	r2, #24
 8003036:	4694      	mov	ip, r2
 8003038:	44bc      	add	ip, r7
 800303a:	4463      	add	r3, ip
 800303c:	2202      	movs	r2, #2
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e01e      	b.n	8003080 <UART_SetConfig+0x1a4>
 8003042:	231b      	movs	r3, #27
 8003044:	2218      	movs	r2, #24
 8003046:	4694      	mov	ip, r2
 8003048:	44bc      	add	ip, r7
 800304a:	4463      	add	r3, ip
 800304c:	2204      	movs	r2, #4
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e016      	b.n	8003080 <UART_SetConfig+0x1a4>
 8003052:	231b      	movs	r3, #27
 8003054:	2218      	movs	r2, #24
 8003056:	4694      	mov	ip, r2
 8003058:	44bc      	add	ip, r7
 800305a:	4463      	add	r3, ip
 800305c:	2208      	movs	r2, #8
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e00e      	b.n	8003080 <UART_SetConfig+0x1a4>
 8003062:	231b      	movs	r3, #27
 8003064:	2218      	movs	r2, #24
 8003066:	4694      	mov	ip, r2
 8003068:	44bc      	add	ip, r7
 800306a:	4463      	add	r3, ip
 800306c:	2210      	movs	r2, #16
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e006      	b.n	8003080 <UART_SetConfig+0x1a4>
 8003072:	231b      	movs	r3, #27
 8003074:	2218      	movs	r2, #24
 8003076:	4694      	mov	ip, r2
 8003078:	44bc      	add	ip, r7
 800307a:	4463      	add	r3, ip
 800307c:	2210      	movs	r2, #16
 800307e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a61      	ldr	r2, [pc, #388]	; (800320c <UART_SetConfig+0x330>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d000      	beq.n	800308c <UART_SetConfig+0x1b0>
 800308a:	e088      	b.n	800319e <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800308c:	231b      	movs	r3, #27
 800308e:	2218      	movs	r2, #24
 8003090:	4694      	mov	ip, r2
 8003092:	44bc      	add	ip, r7
 8003094:	4463      	add	r3, ip
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d01d      	beq.n	80030d8 <UART_SetConfig+0x1fc>
 800309c:	dc20      	bgt.n	80030e0 <UART_SetConfig+0x204>
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d015      	beq.n	80030ce <UART_SetConfig+0x1f2>
 80030a2:	dc1d      	bgt.n	80030e0 <UART_SetConfig+0x204>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <UART_SetConfig+0x1d2>
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d005      	beq.n	80030b8 <UART_SetConfig+0x1dc>
 80030ac:	e018      	b.n	80030e0 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ae:	f7ff fa05 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 80030b2:	0003      	movs	r3, r0
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030b6:	e01d      	b.n	80030f4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030b8:	4b57      	ldr	r3, [pc, #348]	; (8003218 <UART_SetConfig+0x33c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2210      	movs	r2, #16
 80030be:	4013      	ands	r3, r2
 80030c0:	d002      	beq.n	80030c8 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030c2:	4b56      	ldr	r3, [pc, #344]	; (800321c <UART_SetConfig+0x340>)
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80030c6:	e015      	b.n	80030f4 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80030c8:	4b55      	ldr	r3, [pc, #340]	; (8003220 <UART_SetConfig+0x344>)
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030cc:	e012      	b.n	80030f4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ce:	f7ff f945 	bl	800235c <HAL_RCC_GetSysClockFreq>
 80030d2:	0003      	movs	r3, r0
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030d6:	e00d      	b.n	80030f4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030de:	e009      	b.n	80030f4 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80030e4:	231a      	movs	r3, #26
 80030e6:	2218      	movs	r2, #24
 80030e8:	4694      	mov	ip, r2
 80030ea:	44bc      	add	ip, r7
 80030ec:	4463      	add	r3, ip
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
        break;
 80030f2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d100      	bne.n	80030fc <UART_SetConfig+0x220>
 80030fa:	e139      	b.n	8003370 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	0013      	movs	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	189b      	adds	r3, r3, r2
 8003106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003108:	429a      	cmp	r2, r3
 800310a:	d305      	bcc.n	8003118 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003114:	429a      	cmp	r2, r3
 8003116:	d907      	bls.n	8003128 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8003118:	231a      	movs	r3, #26
 800311a:	2218      	movs	r2, #24
 800311c:	4694      	mov	ip, r2
 800311e:	44bc      	add	ip, r7
 8003120:	4463      	add	r3, ip
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e123      	b.n	8003370 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	6939      	ldr	r1, [r7, #16]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	000b      	movs	r3, r1
 8003136:	0e1b      	lsrs	r3, r3, #24
 8003138:	0010      	movs	r0, r2
 800313a:	0205      	lsls	r5, r0, #8
 800313c:	431d      	orrs	r5, r3
 800313e:	000b      	movs	r3, r1
 8003140:	021c      	lsls	r4, r3, #8
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	085b      	lsrs	r3, r3, #1
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68b8      	ldr	r0, [r7, #8]
 8003150:	68f9      	ldr	r1, [r7, #12]
 8003152:	1900      	adds	r0, r0, r4
 8003154:	4169      	adcs	r1, r5
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	2300      	movs	r3, #0
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f7fd f86e 	bl	8000244 <__aeabi_uldivmod>
 8003168:	0002      	movs	r2, r0
 800316a:	000b      	movs	r3, r1
 800316c:	0013      	movs	r3, r2
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003172:	23c0      	movs	r3, #192	; 0xc0
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	429a      	cmp	r2, r3
 8003178:	d309      	bcc.n	800318e <UART_SetConfig+0x2b2>
 800317a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	035b      	lsls	r3, r3, #13
 8003180:	429a      	cmp	r2, r3
 8003182:	d204      	bcs.n	800318e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800318a:	60da      	str	r2, [r3, #12]
 800318c:	e0f0      	b.n	8003370 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800318e:	231a      	movs	r3, #26
 8003190:	2218      	movs	r2, #24
 8003192:	4694      	mov	ip, r2
 8003194:	44bc      	add	ip, r7
 8003196:	4463      	add	r3, ip
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	e0e8      	b.n	8003370 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d000      	beq.n	80031ac <UART_SetConfig+0x2d0>
 80031aa:	e087      	b.n	80032bc <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 80031ac:	231b      	movs	r3, #27
 80031ae:	2218      	movs	r2, #24
 80031b0:	4694      	mov	ip, r2
 80031b2:	44bc      	add	ip, r7
 80031b4:	4463      	add	r3, ip
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d835      	bhi.n	8003228 <UART_SetConfig+0x34c>
 80031bc:	009a      	lsls	r2, r3, #2
 80031be:	4b19      	ldr	r3, [pc, #100]	; (8003224 <UART_SetConfig+0x348>)
 80031c0:	18d3      	adds	r3, r2, r3
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c6:	f7ff f979 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 80031ca:	0003      	movs	r3, r0
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031ce:	e035      	b.n	800323c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d0:	f7ff f98a 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 80031d4:	0003      	movs	r3, r0
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031d8:	e030      	b.n	800323c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031da:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <UART_SetConfig+0x33c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2210      	movs	r2, #16
 80031e0:	4013      	ands	r3, r2
 80031e2:	d002      	beq.n	80031ea <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80031e4:	4b0d      	ldr	r3, [pc, #52]	; (800321c <UART_SetConfig+0x340>)
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80031e8:	e028      	b.n	800323c <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <UART_SetConfig+0x344>)
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031ee:	e025      	b.n	800323c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031f0:	f7ff f8b4 	bl	800235c <HAL_RCC_GetSysClockFreq>
 80031f4:	0003      	movs	r3, r0
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031f8:	e020      	b.n	800323c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003200:	e01c      	b.n	800323c <UART_SetConfig+0x360>
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	efff69f3 	.word	0xefff69f3
 8003208:	ffffcfff 	.word	0xffffcfff
 800320c:	40004800 	.word	0x40004800
 8003210:	fffff4ff 	.word	0xfffff4ff
 8003214:	40004400 	.word	0x40004400
 8003218:	40021000 	.word	0x40021000
 800321c:	003d0900 	.word	0x003d0900
 8003220:	00f42400 	.word	0x00f42400
 8003224:	080040a4 	.word	0x080040a4
      default:
        pclk = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800322c:	231a      	movs	r3, #26
 800322e:	2218      	movs	r2, #24
 8003230:	4694      	mov	ip, r2
 8003232:	44bc      	add	ip, r7
 8003234:	4463      	add	r3, ip
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
        break;
 800323a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d100      	bne.n	8003244 <UART_SetConfig+0x368>
 8003242:	e095      	b.n	8003370 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003246:	005a      	lsls	r2, r3, #1
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	18d2      	adds	r2, r2, r3
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0019      	movs	r1, r3
 8003256:	0010      	movs	r0, r2
 8003258:	f7fc ff68 	bl	800012c <__udivsi3>
 800325c:	0003      	movs	r3, r0
 800325e:	b29b      	uxth	r3, r3
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	2b0f      	cmp	r3, #15
 8003266:	d921      	bls.n	80032ac <UART_SetConfig+0x3d0>
 8003268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	025b      	lsls	r3, r3, #9
 800326e:	429a      	cmp	r2, r3
 8003270:	d21c      	bcs.n	80032ac <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	b29a      	uxth	r2, r3
 8003276:	200e      	movs	r0, #14
 8003278:	2418      	movs	r4, #24
 800327a:	193b      	adds	r3, r7, r4
 800327c:	181b      	adds	r3, r3, r0
 800327e:	210f      	movs	r1, #15
 8003280:	438a      	bics	r2, r1
 8003282:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	b29b      	uxth	r3, r3
 800328a:	2207      	movs	r2, #7
 800328c:	4013      	ands	r3, r2
 800328e:	b299      	uxth	r1, r3
 8003290:	193b      	adds	r3, r7, r4
 8003292:	181b      	adds	r3, r3, r0
 8003294:	193a      	adds	r2, r7, r4
 8003296:	1812      	adds	r2, r2, r0
 8003298:	8812      	ldrh	r2, [r2, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	193a      	adds	r2, r7, r4
 80032a4:	1812      	adds	r2, r2, r0
 80032a6:	8812      	ldrh	r2, [r2, #0]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	e061      	b.n	8003370 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80032ac:	231a      	movs	r3, #26
 80032ae:	2218      	movs	r2, #24
 80032b0:	4694      	mov	ip, r2
 80032b2:	44bc      	add	ip, r7
 80032b4:	4463      	add	r3, ip
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e059      	b.n	8003370 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032bc:	231b      	movs	r3, #27
 80032be:	2218      	movs	r2, #24
 80032c0:	4694      	mov	ip, r2
 80032c2:	44bc      	add	ip, r7
 80032c4:	4463      	add	r3, ip
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d822      	bhi.n	8003312 <UART_SetConfig+0x436>
 80032cc:	009a      	lsls	r2, r3, #2
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <UART_SetConfig+0x4b4>)
 80032d0:	18d3      	adds	r3, r2, r3
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d6:	f7ff f8f1 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 80032da:	0003      	movs	r3, r0
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032de:	e022      	b.n	8003326 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e0:	f7ff f902 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 80032e4:	0003      	movs	r3, r0
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032e8:	e01d      	b.n	8003326 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <UART_SetConfig+0x4b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2210      	movs	r2, #16
 80032f0:	4013      	ands	r3, r2
 80032f2:	d002      	beq.n	80032fa <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80032f4:	4b28      	ldr	r3, [pc, #160]	; (8003398 <UART_SetConfig+0x4bc>)
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80032f8:	e015      	b.n	8003326 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 80032fa:	4b28      	ldr	r3, [pc, #160]	; (800339c <UART_SetConfig+0x4c0>)
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032fe:	e012      	b.n	8003326 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003300:	f7ff f82c 	bl	800235c <HAL_RCC_GetSysClockFreq>
 8003304:	0003      	movs	r3, r0
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003308:	e00d      	b.n	8003326 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003310:	e009      	b.n	8003326 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003316:	231a      	movs	r3, #26
 8003318:	2218      	movs	r2, #24
 800331a:	4694      	mov	ip, r2
 800331c:	44bc      	add	ip, r7
 800331e:	4463      	add	r3, ip
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
        break;
 8003324:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d021      	beq.n	8003370 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	085a      	lsrs	r2, r3, #1
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	18d2      	adds	r2, r2, r3
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	0019      	movs	r1, r3
 800333c:	0010      	movs	r0, r2
 800333e:	f7fc fef5 	bl	800012c <__udivsi3>
 8003342:	0003      	movs	r3, r0
 8003344:	b29b      	uxth	r3, r3
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	2b0f      	cmp	r3, #15
 800334c:	d909      	bls.n	8003362 <UART_SetConfig+0x486>
 800334e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	025b      	lsls	r3, r3, #9
 8003354:	429a      	cmp	r2, r3
 8003356:	d204      	bcs.n	8003362 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	e006      	b.n	8003370 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003362:	231a      	movs	r3, #26
 8003364:	2218      	movs	r2, #24
 8003366:	4694      	mov	ip, r2
 8003368:	44bc      	add	ip, r7
 800336a:	4463      	add	r3, ip
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2200      	movs	r2, #0
 8003374:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	2200      	movs	r2, #0
 800337a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800337c:	231a      	movs	r3, #26
 800337e:	2218      	movs	r2, #24
 8003380:	4694      	mov	ip, r2
 8003382:	44bc      	add	ip, r7
 8003384:	4463      	add	r3, ip
 8003386:	781b      	ldrb	r3, [r3, #0]
}
 8003388:	0018      	movs	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	b00e      	add	sp, #56	; 0x38
 800338e:	bdb0      	pop	{r4, r5, r7, pc}
 8003390:	080040c8 	.word	0x080040c8
 8003394:	40021000 	.word	0x40021000
 8003398:	003d0900 	.word	0x003d0900
 800339c:	00f42400 	.word	0x00f42400

080033a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	2201      	movs	r2, #1
 80033ae:	4013      	ands	r3, r2
 80033b0:	d00b      	beq.n	80033ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	4a4a      	ldr	r2, [pc, #296]	; (80034e4 <UART_AdvFeatureConfig+0x144>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	0019      	movs	r1, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	2202      	movs	r2, #2
 80033d0:	4013      	ands	r3, r2
 80033d2:	d00b      	beq.n	80033ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4a43      	ldr	r2, [pc, #268]	; (80034e8 <UART_AdvFeatureConfig+0x148>)
 80033dc:	4013      	ands	r3, r2
 80033de:	0019      	movs	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	2204      	movs	r2, #4
 80033f2:	4013      	ands	r3, r2
 80033f4:	d00b      	beq.n	800340e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a3b      	ldr	r2, [pc, #236]	; (80034ec <UART_AdvFeatureConfig+0x14c>)
 80033fe:	4013      	ands	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	2208      	movs	r2, #8
 8003414:	4013      	ands	r3, r2
 8003416:	d00b      	beq.n	8003430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <UART_AdvFeatureConfig+0x150>)
 8003420:	4013      	ands	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	2210      	movs	r2, #16
 8003436:	4013      	ands	r3, r2
 8003438:	d00b      	beq.n	8003452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a2c      	ldr	r2, [pc, #176]	; (80034f4 <UART_AdvFeatureConfig+0x154>)
 8003442:	4013      	ands	r3, r2
 8003444:	0019      	movs	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2220      	movs	r2, #32
 8003458:	4013      	ands	r3, r2
 800345a:	d00b      	beq.n	8003474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	4a25      	ldr	r2, [pc, #148]	; (80034f8 <UART_AdvFeatureConfig+0x158>)
 8003464:	4013      	ands	r3, r2
 8003466:	0019      	movs	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	2240      	movs	r2, #64	; 0x40
 800347a:	4013      	ands	r3, r2
 800347c:	d01d      	beq.n	80034ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <UART_AdvFeatureConfig+0x15c>)
 8003486:	4013      	ands	r3, r2
 8003488:	0019      	movs	r1, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	035b      	lsls	r3, r3, #13
 800349e:	429a      	cmp	r2, r3
 80034a0:	d10b      	bne.n	80034ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a15      	ldr	r2, [pc, #84]	; (8003500 <UART_AdvFeatureConfig+0x160>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	4013      	ands	r3, r2
 80034c2:	d00b      	beq.n	80034dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <UART_AdvFeatureConfig+0x164>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	0019      	movs	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	605a      	str	r2, [r3, #4]
  }
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b002      	add	sp, #8
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	fffdffff 	.word	0xfffdffff
 80034e8:	fffeffff 	.word	0xfffeffff
 80034ec:	fffbffff 	.word	0xfffbffff
 80034f0:	ffff7fff 	.word	0xffff7fff
 80034f4:	ffffefff 	.word	0xffffefff
 80034f8:	ffffdfff 	.word	0xffffdfff
 80034fc:	ffefffff 	.word	0xffefffff
 8003500:	ff9fffff 	.word	0xff9fffff
 8003504:	fff7ffff 	.word	0xfff7ffff

08003508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af02      	add	r7, sp, #8
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	2100      	movs	r1, #0
 8003516:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003518:	f7fd ff7c 	bl	8001414 <HAL_GetTick>
 800351c:	0003      	movs	r3, r0
 800351e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2208      	movs	r2, #8
 8003528:	4013      	ands	r3, r2
 800352a:	2b08      	cmp	r3, #8
 800352c:	d10c      	bne.n	8003548 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2280      	movs	r2, #128	; 0x80
 8003532:	0391      	lsls	r1, r2, #14
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <UART_CheckIdleState+0x8c>)
 8003538:	9200      	str	r2, [sp, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	f000 f82c 	bl	8003598 <UART_WaitOnFlagUntilTimeout>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d001      	beq.n	8003548 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e021      	b.n	800358c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2204      	movs	r2, #4
 8003550:	4013      	ands	r3, r2
 8003552:	2b04      	cmp	r3, #4
 8003554:	d10c      	bne.n	8003570 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2280      	movs	r2, #128	; 0x80
 800355a:	03d1      	lsls	r1, r2, #15
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <UART_CheckIdleState+0x8c>)
 8003560:	9200      	str	r2, [sp, #0]
 8003562:	2200      	movs	r2, #0
 8003564:	f000 f818 	bl	8003598 <UART_WaitOnFlagUntilTimeout>
 8003568:	1e03      	subs	r3, r0, #0
 800356a:	d001      	beq.n	8003570 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e00d      	b.n	800358c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2274      	movs	r2, #116	; 0x74
 8003586:	2100      	movs	r1, #0
 8003588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b004      	add	sp, #16
 8003592:	bd80      	pop	{r7, pc}
 8003594:	01ffffff 	.word	0x01ffffff

08003598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	1dfb      	adds	r3, r7, #7
 80035a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a8:	e05e      	b.n	8003668 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	3301      	adds	r3, #1
 80035ae:	d05b      	beq.n	8003668 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b0:	f7fd ff30 	bl	8001414 <HAL_GetTick>
 80035b4:	0002      	movs	r2, r0
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d302      	bcc.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d11b      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	492f      	ldr	r1, [pc, #188]	; (8003690 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80035d2:	400a      	ands	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	438a      	bics	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2274      	movs	r2, #116	; 0x74
 80035f6:	2100      	movs	r1, #0
 80035f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e044      	b.n	8003688 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2204      	movs	r2, #4
 8003606:	4013      	ands	r3, r2
 8003608:	d02e      	beq.n	8003668 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	401a      	ands	r2, r3
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	429a      	cmp	r2, r3
 800361c:	d124      	bne.n	8003668 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2280      	movs	r2, #128	; 0x80
 8003624:	0112      	lsls	r2, r2, #4
 8003626:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4917      	ldr	r1, [pc, #92]	; (8003690 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003634:	400a      	ands	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2101      	movs	r1, #1
 8003644:	438a      	bics	r2, r1
 8003646:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	2120      	movs	r1, #32
 800365a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2274      	movs	r2, #116	; 0x74
 8003660:	2100      	movs	r1, #0
 8003662:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e00f      	b.n	8003688 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	4013      	ands	r3, r2
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	425a      	negs	r2, r3
 8003678:	4153      	adcs	r3, r2
 800367a:	b2db      	uxtb	r3, r3
 800367c:	001a      	movs	r2, r3
 800367e:	1dfb      	adds	r3, r7, #7
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d091      	beq.n	80035aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b004      	add	sp, #16
 800368e:	bd80      	pop	{r7, pc}
 8003690:	fffffe5f 	.word	0xfffffe5f

08003694 <__errno>:
 8003694:	4b01      	ldr	r3, [pc, #4]	; (800369c <__errno+0x8>)
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	4770      	bx	lr
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	2000000c 	.word	0x2000000c

080036a0 <__libc_init_array>:
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	2600      	movs	r6, #0
 80036a4:	4d0c      	ldr	r5, [pc, #48]	; (80036d8 <__libc_init_array+0x38>)
 80036a6:	4c0d      	ldr	r4, [pc, #52]	; (80036dc <__libc_init_array+0x3c>)
 80036a8:	1b64      	subs	r4, r4, r5
 80036aa:	10a4      	asrs	r4, r4, #2
 80036ac:	42a6      	cmp	r6, r4
 80036ae:	d109      	bne.n	80036c4 <__libc_init_array+0x24>
 80036b0:	2600      	movs	r6, #0
 80036b2:	f000 fc49 	bl	8003f48 <_init>
 80036b6:	4d0a      	ldr	r5, [pc, #40]	; (80036e0 <__libc_init_array+0x40>)
 80036b8:	4c0a      	ldr	r4, [pc, #40]	; (80036e4 <__libc_init_array+0x44>)
 80036ba:	1b64      	subs	r4, r4, r5
 80036bc:	10a4      	asrs	r4, r4, #2
 80036be:	42a6      	cmp	r6, r4
 80036c0:	d105      	bne.n	80036ce <__libc_init_array+0x2e>
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
 80036c4:	00b3      	lsls	r3, r6, #2
 80036c6:	58eb      	ldr	r3, [r5, r3]
 80036c8:	4798      	blx	r3
 80036ca:	3601      	adds	r6, #1
 80036cc:	e7ee      	b.n	80036ac <__libc_init_array+0xc>
 80036ce:	00b3      	lsls	r3, r6, #2
 80036d0:	58eb      	ldr	r3, [r5, r3]
 80036d2:	4798      	blx	r3
 80036d4:	3601      	adds	r6, #1
 80036d6:	e7f2      	b.n	80036be <__libc_init_array+0x1e>
 80036d8:	08004128 	.word	0x08004128
 80036dc:	08004128 	.word	0x08004128
 80036e0:	08004128 	.word	0x08004128
 80036e4:	0800412c 	.word	0x0800412c

080036e8 <memset>:
 80036e8:	0003      	movs	r3, r0
 80036ea:	1882      	adds	r2, r0, r2
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d100      	bne.n	80036f2 <memset+0xa>
 80036f0:	4770      	bx	lr
 80036f2:	7019      	strb	r1, [r3, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	e7f9      	b.n	80036ec <memset+0x4>

080036f8 <_vsiprintf_r>:
 80036f8:	b500      	push	{lr}
 80036fa:	b09b      	sub	sp, #108	; 0x6c
 80036fc:	9100      	str	r1, [sp, #0]
 80036fe:	9104      	str	r1, [sp, #16]
 8003700:	4906      	ldr	r1, [pc, #24]	; (800371c <_vsiprintf_r+0x24>)
 8003702:	9105      	str	r1, [sp, #20]
 8003704:	9102      	str	r1, [sp, #8]
 8003706:	4906      	ldr	r1, [pc, #24]	; (8003720 <_vsiprintf_r+0x28>)
 8003708:	9103      	str	r1, [sp, #12]
 800370a:	4669      	mov	r1, sp
 800370c:	f000 f878 	bl	8003800 <_svfiprintf_r>
 8003710:	2300      	movs	r3, #0
 8003712:	9a00      	ldr	r2, [sp, #0]
 8003714:	7013      	strb	r3, [r2, #0]
 8003716:	b01b      	add	sp, #108	; 0x6c
 8003718:	bd00      	pop	{pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	7fffffff 	.word	0x7fffffff
 8003720:	ffff0208 	.word	0xffff0208

08003724 <vsiprintf>:
 8003724:	b510      	push	{r4, lr}
 8003726:	0013      	movs	r3, r2
 8003728:	000a      	movs	r2, r1
 800372a:	0001      	movs	r1, r0
 800372c:	4802      	ldr	r0, [pc, #8]	; (8003738 <vsiprintf+0x14>)
 800372e:	6800      	ldr	r0, [r0, #0]
 8003730:	f7ff ffe2 	bl	80036f8 <_vsiprintf_r>
 8003734:	bd10      	pop	{r4, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	2000000c 	.word	0x2000000c

0800373c <__ssputs_r>:
 800373c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373e:	688e      	ldr	r6, [r1, #8]
 8003740:	b085      	sub	sp, #20
 8003742:	0007      	movs	r7, r0
 8003744:	000c      	movs	r4, r1
 8003746:	9203      	str	r2, [sp, #12]
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	429e      	cmp	r6, r3
 800374c:	d83c      	bhi.n	80037c8 <__ssputs_r+0x8c>
 800374e:	2390      	movs	r3, #144	; 0x90
 8003750:	898a      	ldrh	r2, [r1, #12]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	421a      	tst	r2, r3
 8003756:	d034      	beq.n	80037c2 <__ssputs_r+0x86>
 8003758:	2503      	movs	r5, #3
 800375a:	6909      	ldr	r1, [r1, #16]
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	1a5b      	subs	r3, r3, r1
 8003760:	9302      	str	r3, [sp, #8]
 8003762:	6963      	ldr	r3, [r4, #20]
 8003764:	9802      	ldr	r0, [sp, #8]
 8003766:	435d      	muls	r5, r3
 8003768:	0feb      	lsrs	r3, r5, #31
 800376a:	195d      	adds	r5, r3, r5
 800376c:	9b01      	ldr	r3, [sp, #4]
 800376e:	106d      	asrs	r5, r5, #1
 8003770:	3301      	adds	r3, #1
 8003772:	181b      	adds	r3, r3, r0
 8003774:	42ab      	cmp	r3, r5
 8003776:	d900      	bls.n	800377a <__ssputs_r+0x3e>
 8003778:	001d      	movs	r5, r3
 800377a:	0553      	lsls	r3, r2, #21
 800377c:	d532      	bpl.n	80037e4 <__ssputs_r+0xa8>
 800377e:	0029      	movs	r1, r5
 8003780:	0038      	movs	r0, r7
 8003782:	f000 fb31 	bl	8003de8 <_malloc_r>
 8003786:	1e06      	subs	r6, r0, #0
 8003788:	d109      	bne.n	800379e <__ssputs_r+0x62>
 800378a:	230c      	movs	r3, #12
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	2340      	movs	r3, #64	; 0x40
 8003790:	2001      	movs	r0, #1
 8003792:	89a2      	ldrh	r2, [r4, #12]
 8003794:	4240      	negs	r0, r0
 8003796:	4313      	orrs	r3, r2
 8003798:	81a3      	strh	r3, [r4, #12]
 800379a:	b005      	add	sp, #20
 800379c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800379e:	9a02      	ldr	r2, [sp, #8]
 80037a0:	6921      	ldr	r1, [r4, #16]
 80037a2:	f000 faba 	bl	8003d1a <memcpy>
 80037a6:	89a3      	ldrh	r3, [r4, #12]
 80037a8:	4a14      	ldr	r2, [pc, #80]	; (80037fc <__ssputs_r+0xc0>)
 80037aa:	401a      	ands	r2, r3
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	4313      	orrs	r3, r2
 80037b0:	81a3      	strh	r3, [r4, #12]
 80037b2:	9b02      	ldr	r3, [sp, #8]
 80037b4:	6126      	str	r6, [r4, #16]
 80037b6:	18f6      	adds	r6, r6, r3
 80037b8:	6026      	str	r6, [r4, #0]
 80037ba:	6165      	str	r5, [r4, #20]
 80037bc:	9e01      	ldr	r6, [sp, #4]
 80037be:	1aed      	subs	r5, r5, r3
 80037c0:	60a5      	str	r5, [r4, #8]
 80037c2:	9b01      	ldr	r3, [sp, #4]
 80037c4:	429e      	cmp	r6, r3
 80037c6:	d900      	bls.n	80037ca <__ssputs_r+0x8e>
 80037c8:	9e01      	ldr	r6, [sp, #4]
 80037ca:	0032      	movs	r2, r6
 80037cc:	9903      	ldr	r1, [sp, #12]
 80037ce:	6820      	ldr	r0, [r4, #0]
 80037d0:	f000 faac 	bl	8003d2c <memmove>
 80037d4:	68a3      	ldr	r3, [r4, #8]
 80037d6:	2000      	movs	r0, #0
 80037d8:	1b9b      	subs	r3, r3, r6
 80037da:	60a3      	str	r3, [r4, #8]
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	199e      	adds	r6, r3, r6
 80037e0:	6026      	str	r6, [r4, #0]
 80037e2:	e7da      	b.n	800379a <__ssputs_r+0x5e>
 80037e4:	002a      	movs	r2, r5
 80037e6:	0038      	movs	r0, r7
 80037e8:	f000 fb5c 	bl	8003ea4 <_realloc_r>
 80037ec:	1e06      	subs	r6, r0, #0
 80037ee:	d1e0      	bne.n	80037b2 <__ssputs_r+0x76>
 80037f0:	0038      	movs	r0, r7
 80037f2:	6921      	ldr	r1, [r4, #16]
 80037f4:	f000 faae 	bl	8003d54 <_free_r>
 80037f8:	e7c7      	b.n	800378a <__ssputs_r+0x4e>
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	fffffb7f 	.word	0xfffffb7f

08003800 <_svfiprintf_r>:
 8003800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003802:	b0a1      	sub	sp, #132	; 0x84
 8003804:	9003      	str	r0, [sp, #12]
 8003806:	001d      	movs	r5, r3
 8003808:	898b      	ldrh	r3, [r1, #12]
 800380a:	000f      	movs	r7, r1
 800380c:	0016      	movs	r6, r2
 800380e:	061b      	lsls	r3, r3, #24
 8003810:	d511      	bpl.n	8003836 <_svfiprintf_r+0x36>
 8003812:	690b      	ldr	r3, [r1, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10e      	bne.n	8003836 <_svfiprintf_r+0x36>
 8003818:	2140      	movs	r1, #64	; 0x40
 800381a:	f000 fae5 	bl	8003de8 <_malloc_r>
 800381e:	6038      	str	r0, [r7, #0]
 8003820:	6138      	str	r0, [r7, #16]
 8003822:	2800      	cmp	r0, #0
 8003824:	d105      	bne.n	8003832 <_svfiprintf_r+0x32>
 8003826:	230c      	movs	r3, #12
 8003828:	9a03      	ldr	r2, [sp, #12]
 800382a:	3801      	subs	r0, #1
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	b021      	add	sp, #132	; 0x84
 8003830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003832:	2340      	movs	r3, #64	; 0x40
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	2300      	movs	r3, #0
 8003838:	ac08      	add	r4, sp, #32
 800383a:	6163      	str	r3, [r4, #20]
 800383c:	3320      	adds	r3, #32
 800383e:	7663      	strb	r3, [r4, #25]
 8003840:	3310      	adds	r3, #16
 8003842:	76a3      	strb	r3, [r4, #26]
 8003844:	9507      	str	r5, [sp, #28]
 8003846:	0035      	movs	r5, r6
 8003848:	782b      	ldrb	r3, [r5, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <_svfiprintf_r+0x52>
 800384e:	2b25      	cmp	r3, #37	; 0x25
 8003850:	d147      	bne.n	80038e2 <_svfiprintf_r+0xe2>
 8003852:	1bab      	subs	r3, r5, r6
 8003854:	9305      	str	r3, [sp, #20]
 8003856:	42b5      	cmp	r5, r6
 8003858:	d00c      	beq.n	8003874 <_svfiprintf_r+0x74>
 800385a:	0032      	movs	r2, r6
 800385c:	0039      	movs	r1, r7
 800385e:	9803      	ldr	r0, [sp, #12]
 8003860:	f7ff ff6c 	bl	800373c <__ssputs_r>
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	d100      	bne.n	800386a <_svfiprintf_r+0x6a>
 8003868:	e0ae      	b.n	80039c8 <_svfiprintf_r+0x1c8>
 800386a:	6962      	ldr	r2, [r4, #20]
 800386c:	9b05      	ldr	r3, [sp, #20]
 800386e:	4694      	mov	ip, r2
 8003870:	4463      	add	r3, ip
 8003872:	6163      	str	r3, [r4, #20]
 8003874:	782b      	ldrb	r3, [r5, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d100      	bne.n	800387c <_svfiprintf_r+0x7c>
 800387a:	e0a5      	b.n	80039c8 <_svfiprintf_r+0x1c8>
 800387c:	2201      	movs	r2, #1
 800387e:	2300      	movs	r3, #0
 8003880:	4252      	negs	r2, r2
 8003882:	6062      	str	r2, [r4, #4]
 8003884:	a904      	add	r1, sp, #16
 8003886:	3254      	adds	r2, #84	; 0x54
 8003888:	1852      	adds	r2, r2, r1
 800388a:	1c6e      	adds	r6, r5, #1
 800388c:	6023      	str	r3, [r4, #0]
 800388e:	60e3      	str	r3, [r4, #12]
 8003890:	60a3      	str	r3, [r4, #8]
 8003892:	7013      	strb	r3, [r2, #0]
 8003894:	65a3      	str	r3, [r4, #88]	; 0x58
 8003896:	2205      	movs	r2, #5
 8003898:	7831      	ldrb	r1, [r6, #0]
 800389a:	4854      	ldr	r0, [pc, #336]	; (80039ec <_svfiprintf_r+0x1ec>)
 800389c:	f000 fa32 	bl	8003d04 <memchr>
 80038a0:	1c75      	adds	r5, r6, #1
 80038a2:	2800      	cmp	r0, #0
 80038a4:	d11f      	bne.n	80038e6 <_svfiprintf_r+0xe6>
 80038a6:	6822      	ldr	r2, [r4, #0]
 80038a8:	06d3      	lsls	r3, r2, #27
 80038aa:	d504      	bpl.n	80038b6 <_svfiprintf_r+0xb6>
 80038ac:	2353      	movs	r3, #83	; 0x53
 80038ae:	a904      	add	r1, sp, #16
 80038b0:	185b      	adds	r3, r3, r1
 80038b2:	2120      	movs	r1, #32
 80038b4:	7019      	strb	r1, [r3, #0]
 80038b6:	0713      	lsls	r3, r2, #28
 80038b8:	d504      	bpl.n	80038c4 <_svfiprintf_r+0xc4>
 80038ba:	2353      	movs	r3, #83	; 0x53
 80038bc:	a904      	add	r1, sp, #16
 80038be:	185b      	adds	r3, r3, r1
 80038c0:	212b      	movs	r1, #43	; 0x2b
 80038c2:	7019      	strb	r1, [r3, #0]
 80038c4:	7833      	ldrb	r3, [r6, #0]
 80038c6:	2b2a      	cmp	r3, #42	; 0x2a
 80038c8:	d016      	beq.n	80038f8 <_svfiprintf_r+0xf8>
 80038ca:	0035      	movs	r5, r6
 80038cc:	2100      	movs	r1, #0
 80038ce:	200a      	movs	r0, #10
 80038d0:	68e3      	ldr	r3, [r4, #12]
 80038d2:	782a      	ldrb	r2, [r5, #0]
 80038d4:	1c6e      	adds	r6, r5, #1
 80038d6:	3a30      	subs	r2, #48	; 0x30
 80038d8:	2a09      	cmp	r2, #9
 80038da:	d94e      	bls.n	800397a <_svfiprintf_r+0x17a>
 80038dc:	2900      	cmp	r1, #0
 80038de:	d111      	bne.n	8003904 <_svfiprintf_r+0x104>
 80038e0:	e017      	b.n	8003912 <_svfiprintf_r+0x112>
 80038e2:	3501      	adds	r5, #1
 80038e4:	e7b0      	b.n	8003848 <_svfiprintf_r+0x48>
 80038e6:	4b41      	ldr	r3, [pc, #260]	; (80039ec <_svfiprintf_r+0x1ec>)
 80038e8:	6822      	ldr	r2, [r4, #0]
 80038ea:	1ac0      	subs	r0, r0, r3
 80038ec:	2301      	movs	r3, #1
 80038ee:	4083      	lsls	r3, r0
 80038f0:	4313      	orrs	r3, r2
 80038f2:	002e      	movs	r6, r5
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	e7ce      	b.n	8003896 <_svfiprintf_r+0x96>
 80038f8:	9b07      	ldr	r3, [sp, #28]
 80038fa:	1d19      	adds	r1, r3, #4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	9107      	str	r1, [sp, #28]
 8003900:	2b00      	cmp	r3, #0
 8003902:	db01      	blt.n	8003908 <_svfiprintf_r+0x108>
 8003904:	930b      	str	r3, [sp, #44]	; 0x2c
 8003906:	e004      	b.n	8003912 <_svfiprintf_r+0x112>
 8003908:	425b      	negs	r3, r3
 800390a:	60e3      	str	r3, [r4, #12]
 800390c:	2302      	movs	r3, #2
 800390e:	4313      	orrs	r3, r2
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	782b      	ldrb	r3, [r5, #0]
 8003914:	2b2e      	cmp	r3, #46	; 0x2e
 8003916:	d10a      	bne.n	800392e <_svfiprintf_r+0x12e>
 8003918:	786b      	ldrb	r3, [r5, #1]
 800391a:	2b2a      	cmp	r3, #42	; 0x2a
 800391c:	d135      	bne.n	800398a <_svfiprintf_r+0x18a>
 800391e:	9b07      	ldr	r3, [sp, #28]
 8003920:	3502      	adds	r5, #2
 8003922:	1d1a      	adds	r2, r3, #4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	9207      	str	r2, [sp, #28]
 8003928:	2b00      	cmp	r3, #0
 800392a:	db2b      	blt.n	8003984 <_svfiprintf_r+0x184>
 800392c:	9309      	str	r3, [sp, #36]	; 0x24
 800392e:	4e30      	ldr	r6, [pc, #192]	; (80039f0 <_svfiprintf_r+0x1f0>)
 8003930:	2203      	movs	r2, #3
 8003932:	0030      	movs	r0, r6
 8003934:	7829      	ldrb	r1, [r5, #0]
 8003936:	f000 f9e5 	bl	8003d04 <memchr>
 800393a:	2800      	cmp	r0, #0
 800393c:	d006      	beq.n	800394c <_svfiprintf_r+0x14c>
 800393e:	2340      	movs	r3, #64	; 0x40
 8003940:	1b80      	subs	r0, r0, r6
 8003942:	4083      	lsls	r3, r0
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	3501      	adds	r5, #1
 8003948:	4313      	orrs	r3, r2
 800394a:	6023      	str	r3, [r4, #0]
 800394c:	7829      	ldrb	r1, [r5, #0]
 800394e:	2206      	movs	r2, #6
 8003950:	4828      	ldr	r0, [pc, #160]	; (80039f4 <_svfiprintf_r+0x1f4>)
 8003952:	1c6e      	adds	r6, r5, #1
 8003954:	7621      	strb	r1, [r4, #24]
 8003956:	f000 f9d5 	bl	8003d04 <memchr>
 800395a:	2800      	cmp	r0, #0
 800395c:	d03c      	beq.n	80039d8 <_svfiprintf_r+0x1d8>
 800395e:	4b26      	ldr	r3, [pc, #152]	; (80039f8 <_svfiprintf_r+0x1f8>)
 8003960:	2b00      	cmp	r3, #0
 8003962:	d125      	bne.n	80039b0 <_svfiprintf_r+0x1b0>
 8003964:	2207      	movs	r2, #7
 8003966:	9b07      	ldr	r3, [sp, #28]
 8003968:	3307      	adds	r3, #7
 800396a:	4393      	bics	r3, r2
 800396c:	3308      	adds	r3, #8
 800396e:	9307      	str	r3, [sp, #28]
 8003970:	6963      	ldr	r3, [r4, #20]
 8003972:	9a04      	ldr	r2, [sp, #16]
 8003974:	189b      	adds	r3, r3, r2
 8003976:	6163      	str	r3, [r4, #20]
 8003978:	e765      	b.n	8003846 <_svfiprintf_r+0x46>
 800397a:	4343      	muls	r3, r0
 800397c:	0035      	movs	r5, r6
 800397e:	2101      	movs	r1, #1
 8003980:	189b      	adds	r3, r3, r2
 8003982:	e7a6      	b.n	80038d2 <_svfiprintf_r+0xd2>
 8003984:	2301      	movs	r3, #1
 8003986:	425b      	negs	r3, r3
 8003988:	e7d0      	b.n	800392c <_svfiprintf_r+0x12c>
 800398a:	2300      	movs	r3, #0
 800398c:	200a      	movs	r0, #10
 800398e:	001a      	movs	r2, r3
 8003990:	3501      	adds	r5, #1
 8003992:	6063      	str	r3, [r4, #4]
 8003994:	7829      	ldrb	r1, [r5, #0]
 8003996:	1c6e      	adds	r6, r5, #1
 8003998:	3930      	subs	r1, #48	; 0x30
 800399a:	2909      	cmp	r1, #9
 800399c:	d903      	bls.n	80039a6 <_svfiprintf_r+0x1a6>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0c5      	beq.n	800392e <_svfiprintf_r+0x12e>
 80039a2:	9209      	str	r2, [sp, #36]	; 0x24
 80039a4:	e7c3      	b.n	800392e <_svfiprintf_r+0x12e>
 80039a6:	4342      	muls	r2, r0
 80039a8:	0035      	movs	r5, r6
 80039aa:	2301      	movs	r3, #1
 80039ac:	1852      	adds	r2, r2, r1
 80039ae:	e7f1      	b.n	8003994 <_svfiprintf_r+0x194>
 80039b0:	ab07      	add	r3, sp, #28
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	003a      	movs	r2, r7
 80039b6:	0021      	movs	r1, r4
 80039b8:	4b10      	ldr	r3, [pc, #64]	; (80039fc <_svfiprintf_r+0x1fc>)
 80039ba:	9803      	ldr	r0, [sp, #12]
 80039bc:	e000      	b.n	80039c0 <_svfiprintf_r+0x1c0>
 80039be:	bf00      	nop
 80039c0:	9004      	str	r0, [sp, #16]
 80039c2:	9b04      	ldr	r3, [sp, #16]
 80039c4:	3301      	adds	r3, #1
 80039c6:	d1d3      	bne.n	8003970 <_svfiprintf_r+0x170>
 80039c8:	89bb      	ldrh	r3, [r7, #12]
 80039ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80039cc:	065b      	lsls	r3, r3, #25
 80039ce:	d400      	bmi.n	80039d2 <_svfiprintf_r+0x1d2>
 80039d0:	e72d      	b.n	800382e <_svfiprintf_r+0x2e>
 80039d2:	2001      	movs	r0, #1
 80039d4:	4240      	negs	r0, r0
 80039d6:	e72a      	b.n	800382e <_svfiprintf_r+0x2e>
 80039d8:	ab07      	add	r3, sp, #28
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	003a      	movs	r2, r7
 80039de:	0021      	movs	r1, r4
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <_svfiprintf_r+0x1fc>)
 80039e2:	9803      	ldr	r0, [sp, #12]
 80039e4:	f000 f87c 	bl	8003ae0 <_printf_i>
 80039e8:	e7ea      	b.n	80039c0 <_svfiprintf_r+0x1c0>
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	080040ec 	.word	0x080040ec
 80039f0:	080040f2 	.word	0x080040f2
 80039f4:	080040f6 	.word	0x080040f6
 80039f8:	00000000 	.word	0x00000000
 80039fc:	0800373d 	.word	0x0800373d

08003a00 <_printf_common>:
 8003a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a02:	0015      	movs	r5, r2
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	688a      	ldr	r2, [r1, #8]
 8003a08:	690b      	ldr	r3, [r1, #16]
 8003a0a:	000c      	movs	r4, r1
 8003a0c:	9000      	str	r0, [sp, #0]
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	da00      	bge.n	8003a14 <_printf_common+0x14>
 8003a12:	0013      	movs	r3, r2
 8003a14:	0022      	movs	r2, r4
 8003a16:	602b      	str	r3, [r5, #0]
 8003a18:	3243      	adds	r2, #67	; 0x43
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	2a00      	cmp	r2, #0
 8003a1e:	d001      	beq.n	8003a24 <_printf_common+0x24>
 8003a20:	3301      	adds	r3, #1
 8003a22:	602b      	str	r3, [r5, #0]
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	069b      	lsls	r3, r3, #26
 8003a28:	d502      	bpl.n	8003a30 <_printf_common+0x30>
 8003a2a:	682b      	ldr	r3, [r5, #0]
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	6822      	ldr	r2, [r4, #0]
 8003a32:	2306      	movs	r3, #6
 8003a34:	0017      	movs	r7, r2
 8003a36:	401f      	ands	r7, r3
 8003a38:	421a      	tst	r2, r3
 8003a3a:	d027      	beq.n	8003a8c <_printf_common+0x8c>
 8003a3c:	0023      	movs	r3, r4
 8003a3e:	3343      	adds	r3, #67	; 0x43
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	1e5a      	subs	r2, r3, #1
 8003a44:	4193      	sbcs	r3, r2
 8003a46:	6822      	ldr	r2, [r4, #0]
 8003a48:	0692      	lsls	r2, r2, #26
 8003a4a:	d430      	bmi.n	8003aae <_printf_common+0xae>
 8003a4c:	0022      	movs	r2, r4
 8003a4e:	9901      	ldr	r1, [sp, #4]
 8003a50:	9800      	ldr	r0, [sp, #0]
 8003a52:	9e08      	ldr	r6, [sp, #32]
 8003a54:	3243      	adds	r2, #67	; 0x43
 8003a56:	47b0      	blx	r6
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d025      	beq.n	8003aa8 <_printf_common+0xa8>
 8003a5c:	2306      	movs	r3, #6
 8003a5e:	6820      	ldr	r0, [r4, #0]
 8003a60:	682a      	ldr	r2, [r5, #0]
 8003a62:	68e1      	ldr	r1, [r4, #12]
 8003a64:	2500      	movs	r5, #0
 8003a66:	4003      	ands	r3, r0
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d103      	bne.n	8003a74 <_printf_common+0x74>
 8003a6c:	1a8d      	subs	r5, r1, r2
 8003a6e:	43eb      	mvns	r3, r5
 8003a70:	17db      	asrs	r3, r3, #31
 8003a72:	401d      	ands	r5, r3
 8003a74:	68a3      	ldr	r3, [r4, #8]
 8003a76:	6922      	ldr	r2, [r4, #16]
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	dd01      	ble.n	8003a80 <_printf_common+0x80>
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	18ed      	adds	r5, r5, r3
 8003a80:	2700      	movs	r7, #0
 8003a82:	42bd      	cmp	r5, r7
 8003a84:	d120      	bne.n	8003ac8 <_printf_common+0xc8>
 8003a86:	2000      	movs	r0, #0
 8003a88:	e010      	b.n	8003aac <_printf_common+0xac>
 8003a8a:	3701      	adds	r7, #1
 8003a8c:	68e3      	ldr	r3, [r4, #12]
 8003a8e:	682a      	ldr	r2, [r5, #0]
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	42bb      	cmp	r3, r7
 8003a94:	ddd2      	ble.n	8003a3c <_printf_common+0x3c>
 8003a96:	0022      	movs	r2, r4
 8003a98:	2301      	movs	r3, #1
 8003a9a:	9901      	ldr	r1, [sp, #4]
 8003a9c:	9800      	ldr	r0, [sp, #0]
 8003a9e:	9e08      	ldr	r6, [sp, #32]
 8003aa0:	3219      	adds	r2, #25
 8003aa2:	47b0      	blx	r6
 8003aa4:	1c43      	adds	r3, r0, #1
 8003aa6:	d1f0      	bne.n	8003a8a <_printf_common+0x8a>
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	4240      	negs	r0, r0
 8003aac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003aae:	2030      	movs	r0, #48	; 0x30
 8003ab0:	18e1      	adds	r1, r4, r3
 8003ab2:	3143      	adds	r1, #67	; 0x43
 8003ab4:	7008      	strb	r0, [r1, #0]
 8003ab6:	0021      	movs	r1, r4
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	3145      	adds	r1, #69	; 0x45
 8003abc:	7809      	ldrb	r1, [r1, #0]
 8003abe:	18a2      	adds	r2, r4, r2
 8003ac0:	3243      	adds	r2, #67	; 0x43
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	7011      	strb	r1, [r2, #0]
 8003ac6:	e7c1      	b.n	8003a4c <_printf_common+0x4c>
 8003ac8:	0022      	movs	r2, r4
 8003aca:	2301      	movs	r3, #1
 8003acc:	9901      	ldr	r1, [sp, #4]
 8003ace:	9800      	ldr	r0, [sp, #0]
 8003ad0:	9e08      	ldr	r6, [sp, #32]
 8003ad2:	321a      	adds	r2, #26
 8003ad4:	47b0      	blx	r6
 8003ad6:	1c43      	adds	r3, r0, #1
 8003ad8:	d0e6      	beq.n	8003aa8 <_printf_common+0xa8>
 8003ada:	3701      	adds	r7, #1
 8003adc:	e7d1      	b.n	8003a82 <_printf_common+0x82>
	...

08003ae0 <_printf_i>:
 8003ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae2:	b08b      	sub	sp, #44	; 0x2c
 8003ae4:	9206      	str	r2, [sp, #24]
 8003ae6:	000a      	movs	r2, r1
 8003ae8:	3243      	adds	r2, #67	; 0x43
 8003aea:	9307      	str	r3, [sp, #28]
 8003aec:	9005      	str	r0, [sp, #20]
 8003aee:	9204      	str	r2, [sp, #16]
 8003af0:	7e0a      	ldrb	r2, [r1, #24]
 8003af2:	000c      	movs	r4, r1
 8003af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003af6:	2a78      	cmp	r2, #120	; 0x78
 8003af8:	d806      	bhi.n	8003b08 <_printf_i+0x28>
 8003afa:	2a62      	cmp	r2, #98	; 0x62
 8003afc:	d808      	bhi.n	8003b10 <_printf_i+0x30>
 8003afe:	2a00      	cmp	r2, #0
 8003b00:	d100      	bne.n	8003b04 <_printf_i+0x24>
 8003b02:	e0c0      	b.n	8003c86 <_printf_i+0x1a6>
 8003b04:	2a58      	cmp	r2, #88	; 0x58
 8003b06:	d052      	beq.n	8003bae <_printf_i+0xce>
 8003b08:	0026      	movs	r6, r4
 8003b0a:	3642      	adds	r6, #66	; 0x42
 8003b0c:	7032      	strb	r2, [r6, #0]
 8003b0e:	e022      	b.n	8003b56 <_printf_i+0x76>
 8003b10:	0010      	movs	r0, r2
 8003b12:	3863      	subs	r0, #99	; 0x63
 8003b14:	2815      	cmp	r0, #21
 8003b16:	d8f7      	bhi.n	8003b08 <_printf_i+0x28>
 8003b18:	f7fc fafe 	bl	8000118 <__gnu_thumb1_case_shi>
 8003b1c:	001f0016 	.word	0x001f0016
 8003b20:	fff6fff6 	.word	0xfff6fff6
 8003b24:	fff6fff6 	.word	0xfff6fff6
 8003b28:	fff6001f 	.word	0xfff6001f
 8003b2c:	fff6fff6 	.word	0xfff6fff6
 8003b30:	00a8fff6 	.word	0x00a8fff6
 8003b34:	009a0036 	.word	0x009a0036
 8003b38:	fff6fff6 	.word	0xfff6fff6
 8003b3c:	fff600b9 	.word	0xfff600b9
 8003b40:	fff60036 	.word	0xfff60036
 8003b44:	009efff6 	.word	0x009efff6
 8003b48:	0026      	movs	r6, r4
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	3642      	adds	r6, #66	; 0x42
 8003b4e:	1d11      	adds	r1, r2, #4
 8003b50:	6019      	str	r1, [r3, #0]
 8003b52:	6813      	ldr	r3, [r2, #0]
 8003b54:	7033      	strb	r3, [r6, #0]
 8003b56:	2301      	movs	r3, #1
 8003b58:	e0a7      	b.n	8003caa <_printf_i+0x1ca>
 8003b5a:	6808      	ldr	r0, [r1, #0]
 8003b5c:	6819      	ldr	r1, [r3, #0]
 8003b5e:	1d0a      	adds	r2, r1, #4
 8003b60:	0605      	lsls	r5, r0, #24
 8003b62:	d50b      	bpl.n	8003b7c <_printf_i+0x9c>
 8003b64:	680d      	ldr	r5, [r1, #0]
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	2d00      	cmp	r5, #0
 8003b6a:	da03      	bge.n	8003b74 <_printf_i+0x94>
 8003b6c:	232d      	movs	r3, #45	; 0x2d
 8003b6e:	9a04      	ldr	r2, [sp, #16]
 8003b70:	426d      	negs	r5, r5
 8003b72:	7013      	strb	r3, [r2, #0]
 8003b74:	4b61      	ldr	r3, [pc, #388]	; (8003cfc <_printf_i+0x21c>)
 8003b76:	270a      	movs	r7, #10
 8003b78:	9303      	str	r3, [sp, #12]
 8003b7a:	e032      	b.n	8003be2 <_printf_i+0x102>
 8003b7c:	680d      	ldr	r5, [r1, #0]
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	0641      	lsls	r1, r0, #25
 8003b82:	d5f1      	bpl.n	8003b68 <_printf_i+0x88>
 8003b84:	b22d      	sxth	r5, r5
 8003b86:	e7ef      	b.n	8003b68 <_printf_i+0x88>
 8003b88:	680d      	ldr	r5, [r1, #0]
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	1d08      	adds	r0, r1, #4
 8003b8e:	6018      	str	r0, [r3, #0]
 8003b90:	062e      	lsls	r6, r5, #24
 8003b92:	d501      	bpl.n	8003b98 <_printf_i+0xb8>
 8003b94:	680d      	ldr	r5, [r1, #0]
 8003b96:	e003      	b.n	8003ba0 <_printf_i+0xc0>
 8003b98:	066d      	lsls	r5, r5, #25
 8003b9a:	d5fb      	bpl.n	8003b94 <_printf_i+0xb4>
 8003b9c:	680d      	ldr	r5, [r1, #0]
 8003b9e:	b2ad      	uxth	r5, r5
 8003ba0:	4b56      	ldr	r3, [pc, #344]	; (8003cfc <_printf_i+0x21c>)
 8003ba2:	270a      	movs	r7, #10
 8003ba4:	9303      	str	r3, [sp, #12]
 8003ba6:	2a6f      	cmp	r2, #111	; 0x6f
 8003ba8:	d117      	bne.n	8003bda <_printf_i+0xfa>
 8003baa:	2708      	movs	r7, #8
 8003bac:	e015      	b.n	8003bda <_printf_i+0xfa>
 8003bae:	3145      	adds	r1, #69	; 0x45
 8003bb0:	700a      	strb	r2, [r1, #0]
 8003bb2:	4a52      	ldr	r2, [pc, #328]	; (8003cfc <_printf_i+0x21c>)
 8003bb4:	9203      	str	r2, [sp, #12]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	6821      	ldr	r1, [r4, #0]
 8003bba:	ca20      	ldmia	r2!, {r5}
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	0608      	lsls	r0, r1, #24
 8003bc0:	d550      	bpl.n	8003c64 <_printf_i+0x184>
 8003bc2:	07cb      	lsls	r3, r1, #31
 8003bc4:	d502      	bpl.n	8003bcc <_printf_i+0xec>
 8003bc6:	2320      	movs	r3, #32
 8003bc8:	4319      	orrs	r1, r3
 8003bca:	6021      	str	r1, [r4, #0]
 8003bcc:	2710      	movs	r7, #16
 8003bce:	2d00      	cmp	r5, #0
 8003bd0:	d103      	bne.n	8003bda <_printf_i+0xfa>
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	6822      	ldr	r2, [r4, #0]
 8003bd6:	439a      	bics	r2, r3
 8003bd8:	6022      	str	r2, [r4, #0]
 8003bda:	0023      	movs	r3, r4
 8003bdc:	2200      	movs	r2, #0
 8003bde:	3343      	adds	r3, #67	; 0x43
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	6863      	ldr	r3, [r4, #4]
 8003be4:	60a3      	str	r3, [r4, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db03      	blt.n	8003bf2 <_printf_i+0x112>
 8003bea:	2204      	movs	r2, #4
 8003bec:	6821      	ldr	r1, [r4, #0]
 8003bee:	4391      	bics	r1, r2
 8003bf0:	6021      	str	r1, [r4, #0]
 8003bf2:	2d00      	cmp	r5, #0
 8003bf4:	d102      	bne.n	8003bfc <_printf_i+0x11c>
 8003bf6:	9e04      	ldr	r6, [sp, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00c      	beq.n	8003c16 <_printf_i+0x136>
 8003bfc:	9e04      	ldr	r6, [sp, #16]
 8003bfe:	0028      	movs	r0, r5
 8003c00:	0039      	movs	r1, r7
 8003c02:	f7fc fb19 	bl	8000238 <__aeabi_uidivmod>
 8003c06:	9b03      	ldr	r3, [sp, #12]
 8003c08:	3e01      	subs	r6, #1
 8003c0a:	5c5b      	ldrb	r3, [r3, r1]
 8003c0c:	7033      	strb	r3, [r6, #0]
 8003c0e:	002b      	movs	r3, r5
 8003c10:	0005      	movs	r5, r0
 8003c12:	429f      	cmp	r7, r3
 8003c14:	d9f3      	bls.n	8003bfe <_printf_i+0x11e>
 8003c16:	2f08      	cmp	r7, #8
 8003c18:	d109      	bne.n	8003c2e <_printf_i+0x14e>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	07db      	lsls	r3, r3, #31
 8003c1e:	d506      	bpl.n	8003c2e <_printf_i+0x14e>
 8003c20:	6863      	ldr	r3, [r4, #4]
 8003c22:	6922      	ldr	r2, [r4, #16]
 8003c24:	4293      	cmp	r3, r2
 8003c26:	dc02      	bgt.n	8003c2e <_printf_i+0x14e>
 8003c28:	2330      	movs	r3, #48	; 0x30
 8003c2a:	3e01      	subs	r6, #1
 8003c2c:	7033      	strb	r3, [r6, #0]
 8003c2e:	9b04      	ldr	r3, [sp, #16]
 8003c30:	1b9b      	subs	r3, r3, r6
 8003c32:	6123      	str	r3, [r4, #16]
 8003c34:	9b07      	ldr	r3, [sp, #28]
 8003c36:	0021      	movs	r1, r4
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	9805      	ldr	r0, [sp, #20]
 8003c3c:	9b06      	ldr	r3, [sp, #24]
 8003c3e:	aa09      	add	r2, sp, #36	; 0x24
 8003c40:	f7ff fede 	bl	8003a00 <_printf_common>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d135      	bne.n	8003cb4 <_printf_i+0x1d4>
 8003c48:	2001      	movs	r0, #1
 8003c4a:	4240      	negs	r0, r0
 8003c4c:	b00b      	add	sp, #44	; 0x2c
 8003c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c50:	2220      	movs	r2, #32
 8003c52:	6809      	ldr	r1, [r1, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	6022      	str	r2, [r4, #0]
 8003c58:	0022      	movs	r2, r4
 8003c5a:	2178      	movs	r1, #120	; 0x78
 8003c5c:	3245      	adds	r2, #69	; 0x45
 8003c5e:	7011      	strb	r1, [r2, #0]
 8003c60:	4a27      	ldr	r2, [pc, #156]	; (8003d00 <_printf_i+0x220>)
 8003c62:	e7a7      	b.n	8003bb4 <_printf_i+0xd4>
 8003c64:	0648      	lsls	r0, r1, #25
 8003c66:	d5ac      	bpl.n	8003bc2 <_printf_i+0xe2>
 8003c68:	b2ad      	uxth	r5, r5
 8003c6a:	e7aa      	b.n	8003bc2 <_printf_i+0xe2>
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	680d      	ldr	r5, [r1, #0]
 8003c70:	1d10      	adds	r0, r2, #4
 8003c72:	6949      	ldr	r1, [r1, #20]
 8003c74:	6018      	str	r0, [r3, #0]
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	062e      	lsls	r6, r5, #24
 8003c7a:	d501      	bpl.n	8003c80 <_printf_i+0x1a0>
 8003c7c:	6019      	str	r1, [r3, #0]
 8003c7e:	e002      	b.n	8003c86 <_printf_i+0x1a6>
 8003c80:	066d      	lsls	r5, r5, #25
 8003c82:	d5fb      	bpl.n	8003c7c <_printf_i+0x19c>
 8003c84:	8019      	strh	r1, [r3, #0]
 8003c86:	2300      	movs	r3, #0
 8003c88:	9e04      	ldr	r6, [sp, #16]
 8003c8a:	6123      	str	r3, [r4, #16]
 8003c8c:	e7d2      	b.n	8003c34 <_printf_i+0x154>
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	1d11      	adds	r1, r2, #4
 8003c92:	6019      	str	r1, [r3, #0]
 8003c94:	6816      	ldr	r6, [r2, #0]
 8003c96:	2100      	movs	r1, #0
 8003c98:	0030      	movs	r0, r6
 8003c9a:	6862      	ldr	r2, [r4, #4]
 8003c9c:	f000 f832 	bl	8003d04 <memchr>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d001      	beq.n	8003ca8 <_printf_i+0x1c8>
 8003ca4:	1b80      	subs	r0, r0, r6
 8003ca6:	6060      	str	r0, [r4, #4]
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	6123      	str	r3, [r4, #16]
 8003cac:	2300      	movs	r3, #0
 8003cae:	9a04      	ldr	r2, [sp, #16]
 8003cb0:	7013      	strb	r3, [r2, #0]
 8003cb2:	e7bf      	b.n	8003c34 <_printf_i+0x154>
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	0032      	movs	r2, r6
 8003cb8:	9906      	ldr	r1, [sp, #24]
 8003cba:	9805      	ldr	r0, [sp, #20]
 8003cbc:	9d07      	ldr	r5, [sp, #28]
 8003cbe:	47a8      	blx	r5
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	d0c1      	beq.n	8003c48 <_printf_i+0x168>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	079b      	lsls	r3, r3, #30
 8003cc8:	d415      	bmi.n	8003cf6 <_printf_i+0x216>
 8003cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ccc:	68e0      	ldr	r0, [r4, #12]
 8003cce:	4298      	cmp	r0, r3
 8003cd0:	dabc      	bge.n	8003c4c <_printf_i+0x16c>
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	e7ba      	b.n	8003c4c <_printf_i+0x16c>
 8003cd6:	0022      	movs	r2, r4
 8003cd8:	2301      	movs	r3, #1
 8003cda:	9906      	ldr	r1, [sp, #24]
 8003cdc:	9805      	ldr	r0, [sp, #20]
 8003cde:	9e07      	ldr	r6, [sp, #28]
 8003ce0:	3219      	adds	r2, #25
 8003ce2:	47b0      	blx	r6
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d0af      	beq.n	8003c48 <_printf_i+0x168>
 8003ce8:	3501      	adds	r5, #1
 8003cea:	68e3      	ldr	r3, [r4, #12]
 8003cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	42ab      	cmp	r3, r5
 8003cf2:	dcf0      	bgt.n	8003cd6 <_printf_i+0x1f6>
 8003cf4:	e7e9      	b.n	8003cca <_printf_i+0x1ea>
 8003cf6:	2500      	movs	r5, #0
 8003cf8:	e7f7      	b.n	8003cea <_printf_i+0x20a>
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	080040fd 	.word	0x080040fd
 8003d00:	0800410e 	.word	0x0800410e

08003d04 <memchr>:
 8003d04:	b2c9      	uxtb	r1, r1
 8003d06:	1882      	adds	r2, r0, r2
 8003d08:	4290      	cmp	r0, r2
 8003d0a:	d101      	bne.n	8003d10 <memchr+0xc>
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	4770      	bx	lr
 8003d10:	7803      	ldrb	r3, [r0, #0]
 8003d12:	428b      	cmp	r3, r1
 8003d14:	d0fb      	beq.n	8003d0e <memchr+0xa>
 8003d16:	3001      	adds	r0, #1
 8003d18:	e7f6      	b.n	8003d08 <memchr+0x4>

08003d1a <memcpy>:
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	b510      	push	{r4, lr}
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d100      	bne.n	8003d24 <memcpy+0xa>
 8003d22:	bd10      	pop	{r4, pc}
 8003d24:	5ccc      	ldrb	r4, [r1, r3]
 8003d26:	54c4      	strb	r4, [r0, r3]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	e7f8      	b.n	8003d1e <memcpy+0x4>

08003d2c <memmove>:
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	4288      	cmp	r0, r1
 8003d30:	d902      	bls.n	8003d38 <memmove+0xc>
 8003d32:	188b      	adds	r3, r1, r2
 8003d34:	4298      	cmp	r0, r3
 8003d36:	d303      	bcc.n	8003d40 <memmove+0x14>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e007      	b.n	8003d4c <memmove+0x20>
 8003d3c:	5c8b      	ldrb	r3, [r1, r2]
 8003d3e:	5483      	strb	r3, [r0, r2]
 8003d40:	3a01      	subs	r2, #1
 8003d42:	d2fb      	bcs.n	8003d3c <memmove+0x10>
 8003d44:	bd10      	pop	{r4, pc}
 8003d46:	5ccc      	ldrb	r4, [r1, r3]
 8003d48:	54c4      	strb	r4, [r0, r3]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d1fa      	bne.n	8003d46 <memmove+0x1a>
 8003d50:	e7f8      	b.n	8003d44 <memmove+0x18>
	...

08003d54 <_free_r>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	0005      	movs	r5, r0
 8003d58:	2900      	cmp	r1, #0
 8003d5a:	d010      	beq.n	8003d7e <_free_r+0x2a>
 8003d5c:	1f0c      	subs	r4, r1, #4
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	da00      	bge.n	8003d66 <_free_r+0x12>
 8003d64:	18e4      	adds	r4, r4, r3
 8003d66:	0028      	movs	r0, r5
 8003d68:	f000 f8d4 	bl	8003f14 <__malloc_lock>
 8003d6c:	4a1d      	ldr	r2, [pc, #116]	; (8003de4 <_free_r+0x90>)
 8003d6e:	6813      	ldr	r3, [r2, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d105      	bne.n	8003d80 <_free_r+0x2c>
 8003d74:	6063      	str	r3, [r4, #4]
 8003d76:	6014      	str	r4, [r2, #0]
 8003d78:	0028      	movs	r0, r5
 8003d7a:	f000 f8d3 	bl	8003f24 <__malloc_unlock>
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}
 8003d80:	42a3      	cmp	r3, r4
 8003d82:	d908      	bls.n	8003d96 <_free_r+0x42>
 8003d84:	6821      	ldr	r1, [r4, #0]
 8003d86:	1860      	adds	r0, r4, r1
 8003d88:	4283      	cmp	r3, r0
 8003d8a:	d1f3      	bne.n	8003d74 <_free_r+0x20>
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	1841      	adds	r1, r0, r1
 8003d92:	6021      	str	r1, [r4, #0]
 8003d94:	e7ee      	b.n	8003d74 <_free_r+0x20>
 8003d96:	001a      	movs	r2, r3
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <_free_r+0x4e>
 8003d9e:	42a3      	cmp	r3, r4
 8003da0:	d9f9      	bls.n	8003d96 <_free_r+0x42>
 8003da2:	6811      	ldr	r1, [r2, #0]
 8003da4:	1850      	adds	r0, r2, r1
 8003da6:	42a0      	cmp	r0, r4
 8003da8:	d10b      	bne.n	8003dc2 <_free_r+0x6e>
 8003daa:	6820      	ldr	r0, [r4, #0]
 8003dac:	1809      	adds	r1, r1, r0
 8003dae:	1850      	adds	r0, r2, r1
 8003db0:	6011      	str	r1, [r2, #0]
 8003db2:	4283      	cmp	r3, r0
 8003db4:	d1e0      	bne.n	8003d78 <_free_r+0x24>
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	1841      	adds	r1, r0, r1
 8003dbc:	6011      	str	r1, [r2, #0]
 8003dbe:	6053      	str	r3, [r2, #4]
 8003dc0:	e7da      	b.n	8003d78 <_free_r+0x24>
 8003dc2:	42a0      	cmp	r0, r4
 8003dc4:	d902      	bls.n	8003dcc <_free_r+0x78>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	602b      	str	r3, [r5, #0]
 8003dca:	e7d5      	b.n	8003d78 <_free_r+0x24>
 8003dcc:	6821      	ldr	r1, [r4, #0]
 8003dce:	1860      	adds	r0, r4, r1
 8003dd0:	4283      	cmp	r3, r0
 8003dd2:	d103      	bne.n	8003ddc <_free_r+0x88>
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	1841      	adds	r1, r0, r1
 8003dda:	6021      	str	r1, [r4, #0]
 8003ddc:	6063      	str	r3, [r4, #4]
 8003dde:	6054      	str	r4, [r2, #4]
 8003de0:	e7ca      	b.n	8003d78 <_free_r+0x24>
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	2000009c 	.word	0x2000009c

08003de8 <_malloc_r>:
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dea:	2303      	movs	r3, #3
 8003dec:	1ccd      	adds	r5, r1, #3
 8003dee:	439d      	bics	r5, r3
 8003df0:	3508      	adds	r5, #8
 8003df2:	0006      	movs	r6, r0
 8003df4:	2d0c      	cmp	r5, #12
 8003df6:	d21f      	bcs.n	8003e38 <_malloc_r+0x50>
 8003df8:	250c      	movs	r5, #12
 8003dfa:	42a9      	cmp	r1, r5
 8003dfc:	d81e      	bhi.n	8003e3c <_malloc_r+0x54>
 8003dfe:	0030      	movs	r0, r6
 8003e00:	f000 f888 	bl	8003f14 <__malloc_lock>
 8003e04:	4925      	ldr	r1, [pc, #148]	; (8003e9c <_malloc_r+0xb4>)
 8003e06:	680a      	ldr	r2, [r1, #0]
 8003e08:	0014      	movs	r4, r2
 8003e0a:	2c00      	cmp	r4, #0
 8003e0c:	d11a      	bne.n	8003e44 <_malloc_r+0x5c>
 8003e0e:	4f24      	ldr	r7, [pc, #144]	; (8003ea0 <_malloc_r+0xb8>)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d104      	bne.n	8003e20 <_malloc_r+0x38>
 8003e16:	0021      	movs	r1, r4
 8003e18:	0030      	movs	r0, r6
 8003e1a:	f000 f869 	bl	8003ef0 <_sbrk_r>
 8003e1e:	6038      	str	r0, [r7, #0]
 8003e20:	0029      	movs	r1, r5
 8003e22:	0030      	movs	r0, r6
 8003e24:	f000 f864 	bl	8003ef0 <_sbrk_r>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d12b      	bne.n	8003e84 <_malloc_r+0x9c>
 8003e2c:	230c      	movs	r3, #12
 8003e2e:	0030      	movs	r0, r6
 8003e30:	6033      	str	r3, [r6, #0]
 8003e32:	f000 f877 	bl	8003f24 <__malloc_unlock>
 8003e36:	e003      	b.n	8003e40 <_malloc_r+0x58>
 8003e38:	2d00      	cmp	r5, #0
 8003e3a:	dade      	bge.n	8003dfa <_malloc_r+0x12>
 8003e3c:	230c      	movs	r3, #12
 8003e3e:	6033      	str	r3, [r6, #0]
 8003e40:	2000      	movs	r0, #0
 8003e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	1b5b      	subs	r3, r3, r5
 8003e48:	d419      	bmi.n	8003e7e <_malloc_r+0x96>
 8003e4a:	2b0b      	cmp	r3, #11
 8003e4c:	d903      	bls.n	8003e56 <_malloc_r+0x6e>
 8003e4e:	6023      	str	r3, [r4, #0]
 8003e50:	18e4      	adds	r4, r4, r3
 8003e52:	6025      	str	r5, [r4, #0]
 8003e54:	e003      	b.n	8003e5e <_malloc_r+0x76>
 8003e56:	6863      	ldr	r3, [r4, #4]
 8003e58:	42a2      	cmp	r2, r4
 8003e5a:	d10e      	bne.n	8003e7a <_malloc_r+0x92>
 8003e5c:	600b      	str	r3, [r1, #0]
 8003e5e:	0030      	movs	r0, r6
 8003e60:	f000 f860 	bl	8003f24 <__malloc_unlock>
 8003e64:	0020      	movs	r0, r4
 8003e66:	2207      	movs	r2, #7
 8003e68:	300b      	adds	r0, #11
 8003e6a:	1d23      	adds	r3, r4, #4
 8003e6c:	4390      	bics	r0, r2
 8003e6e:	1ac2      	subs	r2, r0, r3
 8003e70:	4298      	cmp	r0, r3
 8003e72:	d0e6      	beq.n	8003e42 <_malloc_r+0x5a>
 8003e74:	1a1b      	subs	r3, r3, r0
 8003e76:	50a3      	str	r3, [r4, r2]
 8003e78:	e7e3      	b.n	8003e42 <_malloc_r+0x5a>
 8003e7a:	6053      	str	r3, [r2, #4]
 8003e7c:	e7ef      	b.n	8003e5e <_malloc_r+0x76>
 8003e7e:	0022      	movs	r2, r4
 8003e80:	6864      	ldr	r4, [r4, #4]
 8003e82:	e7c2      	b.n	8003e0a <_malloc_r+0x22>
 8003e84:	2303      	movs	r3, #3
 8003e86:	1cc4      	adds	r4, r0, #3
 8003e88:	439c      	bics	r4, r3
 8003e8a:	42a0      	cmp	r0, r4
 8003e8c:	d0e1      	beq.n	8003e52 <_malloc_r+0x6a>
 8003e8e:	1a21      	subs	r1, r4, r0
 8003e90:	0030      	movs	r0, r6
 8003e92:	f000 f82d 	bl	8003ef0 <_sbrk_r>
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d1db      	bne.n	8003e52 <_malloc_r+0x6a>
 8003e9a:	e7c7      	b.n	8003e2c <_malloc_r+0x44>
 8003e9c:	2000009c 	.word	0x2000009c
 8003ea0:	200000a0 	.word	0x200000a0

08003ea4 <_realloc_r>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	0007      	movs	r7, r0
 8003ea8:	000d      	movs	r5, r1
 8003eaa:	0016      	movs	r6, r2
 8003eac:	2900      	cmp	r1, #0
 8003eae:	d105      	bne.n	8003ebc <_realloc_r+0x18>
 8003eb0:	0011      	movs	r1, r2
 8003eb2:	f7ff ff99 	bl	8003de8 <_malloc_r>
 8003eb6:	0004      	movs	r4, r0
 8003eb8:	0020      	movs	r0, r4
 8003eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ebc:	2a00      	cmp	r2, #0
 8003ebe:	d103      	bne.n	8003ec8 <_realloc_r+0x24>
 8003ec0:	f7ff ff48 	bl	8003d54 <_free_r>
 8003ec4:	0034      	movs	r4, r6
 8003ec6:	e7f7      	b.n	8003eb8 <_realloc_r+0x14>
 8003ec8:	f000 f834 	bl	8003f34 <_malloc_usable_size_r>
 8003ecc:	002c      	movs	r4, r5
 8003ece:	42b0      	cmp	r0, r6
 8003ed0:	d2f2      	bcs.n	8003eb8 <_realloc_r+0x14>
 8003ed2:	0031      	movs	r1, r6
 8003ed4:	0038      	movs	r0, r7
 8003ed6:	f7ff ff87 	bl	8003de8 <_malloc_r>
 8003eda:	1e04      	subs	r4, r0, #0
 8003edc:	d0ec      	beq.n	8003eb8 <_realloc_r+0x14>
 8003ede:	0029      	movs	r1, r5
 8003ee0:	0032      	movs	r2, r6
 8003ee2:	f7ff ff1a 	bl	8003d1a <memcpy>
 8003ee6:	0029      	movs	r1, r5
 8003ee8:	0038      	movs	r0, r7
 8003eea:	f7ff ff33 	bl	8003d54 <_free_r>
 8003eee:	e7e3      	b.n	8003eb8 <_realloc_r+0x14>

08003ef0 <_sbrk_r>:
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	b570      	push	{r4, r5, r6, lr}
 8003ef4:	4d06      	ldr	r5, [pc, #24]	; (8003f10 <_sbrk_r+0x20>)
 8003ef6:	0004      	movs	r4, r0
 8003ef8:	0008      	movs	r0, r1
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	f7fd f94c 	bl	8001198 <_sbrk>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d103      	bne.n	8003f0c <_sbrk_r+0x1c>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d000      	beq.n	8003f0c <_sbrk_r+0x1c>
 8003f0a:	6023      	str	r3, [r4, #0]
 8003f0c:	bd70      	pop	{r4, r5, r6, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	200001ac 	.word	0x200001ac

08003f14 <__malloc_lock>:
 8003f14:	b510      	push	{r4, lr}
 8003f16:	4802      	ldr	r0, [pc, #8]	; (8003f20 <__malloc_lock+0xc>)
 8003f18:	f000 f814 	bl	8003f44 <__retarget_lock_acquire_recursive>
 8003f1c:	bd10      	pop	{r4, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	200001b4 	.word	0x200001b4

08003f24 <__malloc_unlock>:
 8003f24:	b510      	push	{r4, lr}
 8003f26:	4802      	ldr	r0, [pc, #8]	; (8003f30 <__malloc_unlock+0xc>)
 8003f28:	f000 f80d 	bl	8003f46 <__retarget_lock_release_recursive>
 8003f2c:	bd10      	pop	{r4, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	200001b4 	.word	0x200001b4

08003f34 <_malloc_usable_size_r>:
 8003f34:	1f0b      	subs	r3, r1, #4
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	1f18      	subs	r0, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	da01      	bge.n	8003f42 <_malloc_usable_size_r+0xe>
 8003f3e:	580b      	ldr	r3, [r1, r0]
 8003f40:	18c0      	adds	r0, r0, r3
 8003f42:	4770      	bx	lr

08003f44 <__retarget_lock_acquire_recursive>:
 8003f44:	4770      	bx	lr

08003f46 <__retarget_lock_release_recursive>:
 8003f46:	4770      	bx	lr

08003f48 <_init>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr

08003f54 <_fini>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr
