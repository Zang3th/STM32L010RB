
STM32L010RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005024  08005024  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005024  08005024  00015024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800502c  0800502c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  080050a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  080050a4  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124ba  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027fa  00000000  00000000  00032552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00034d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00035a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000136cc  00000000  00000000  000365d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f02d  00000000  00000000  00049c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070453  00000000  00000000  00058cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c911c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000309c  00000000  00000000  000c9170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d50 	.word	0x08004d50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004d50 	.word	0x08004d50

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <DHT_PinAsOutput>:
#include "dht.h"

// ----- Private functions ----- 

static void DHT_PinAsOutput(dht_t* dht)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b089      	sub	sp, #36	; 0x24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	240c      	movs	r4, #12
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	0018      	movs	r0, r3
 80004ce:	2314      	movs	r3, #20
 80004d0:	001a      	movs	r2, r3
 80004d2:	2100      	movs	r1, #0
 80004d4:	f003 ffd8 	bl	8004488 <memset>
	GPIO_InitStruct.Pin = dht->pin;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	889b      	ldrh	r3, [r3, #4]
 80004dc:	001a      	movs	r2, r3
 80004de:	0021      	movs	r1, r4
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;	
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2201      	movs	r2, #1
 80004e8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;	
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2203      	movs	r2, #3
 80004f4:	60da      	str	r2, [r3, #12]
	
	HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	187a      	adds	r2, r7, r1
 80004fc:	0011      	movs	r1, r2
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 fe22 	bl	8002148 <HAL_GPIO_Init>
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b009      	add	sp, #36	; 0x24
 800050a:	bd90      	pop	{r4, r7, pc}

0800050c <DHT_PinAsInput>:

static void DHT_PinAsInput(dht_t* dht)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b089      	sub	sp, #36	; 0x24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	240c      	movs	r4, #12
 8000516:	193b      	adds	r3, r7, r4
 8000518:	0018      	movs	r0, r3
 800051a:	2314      	movs	r3, #20
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f003 ffb2 	bl	8004488 <memset>
	GPIO_InitStruct.Pin = dht->pin;	
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	889b      	ldrh	r3, [r3, #4]
 8000528:	001a      	movs	r2, r3
 800052a:	0021      	movs	r1, r4
 800052c:	187b      	adds	r3, r7, r1
 800052e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2203      	movs	r2, #3
 8000540:	60da      	str	r2, [r3, #12]

	HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	187a      	adds	r2, r7, r1
 8000548:	0011      	movs	r1, r2
 800054a:	0018      	movs	r0, r3
 800054c:	f001 fdfc 	bl	8002148 <HAL_GPIO_Init>
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b009      	add	sp, #36	; 0x24
 8000556:	bd90      	pop	{r4, r7, pc}

08000558 <DHT_WritePin>:

static void DHT_WritePin(dht_t* dht, GPIO_PinState state)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	000a      	movs	r2, r1
 8000562:	1cfb      	adds	r3, r7, #3
 8000564:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(dht->port, dht->pin, state);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6818      	ldr	r0, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	8899      	ldrh	r1, [r3, #4]
 800056e:	1cfb      	adds	r3, r7, #3
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	001a      	movs	r2, r3
 8000574:	f001 ff83 	bl	800247e <HAL_GPIO_WritePin>
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b002      	add	sp, #8
 800057e:	bd80      	pop	{r7, pc}

08000580 <DHT_ReadPin>:

static GPIO_PinState DHT_ReadPin(dht_t* dht)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(dht->port, dht->pin);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	889b      	ldrh	r3, [r3, #4]
 8000590:	0019      	movs	r1, r3
 8000592:	0010      	movs	r0, r2
 8000594:	f001 ff56 	bl	8002444 <HAL_GPIO_ReadPin>
 8000598:	0003      	movs	r3, r0
}
 800059a:	0018      	movs	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <DHT_Read_Byte>:

static uint8_t DHT_Read_Byte(dht_t* dht)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
    uint8_t val = 0, j;
 80005aa:	230f      	movs	r3, #15
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < 8; j++)
 80005b2:	230e      	movs	r3, #14
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
 80005ba:	e041      	b.n	8000640 <DHT_Read_Byte+0x9e>
	{
		while(!(DHT_ReadPin(dht)));  		//Wait for pin to go high
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0018      	movs	r0, r3
 80005c2:	f7ff ffdd 	bl	8000580 <DHT_ReadPin>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d0f9      	beq.n	80005be <DHT_Read_Byte+0x1c>
		UT_Delay_MicroSeconds(50);         	//Wait 50 us
 80005ca:	2032      	movs	r0, #50	; 0x32
 80005cc:	f001 fbee 	bl	8001dac <UT_Delay_MicroSeconds>
		if (!(DHT_ReadPin(dht)))     		//If the pin is low
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	0018      	movs	r0, r3
 80005d4:	f7ff ffd4 	bl	8000580 <DHT_ReadPin>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d113      	bne.n	8000604 <DHT_Read_Byte+0x62>
		{
			val &= ~(1 << (7 - j));  		//Write 0
 80005dc:	230e      	movs	r3, #14
 80005de:	18fb      	adds	r3, r7, r3
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2207      	movs	r2, #7
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	409a      	lsls	r2, r3
 80005ea:	0013      	movs	r3, r2
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	43db      	mvns	r3, r3
 80005f0:	b25b      	sxtb	r3, r3
 80005f2:	210f      	movs	r1, #15
 80005f4:	187a      	adds	r2, r7, r1
 80005f6:	7812      	ldrb	r2, [r2, #0]
 80005f8:	b252      	sxtb	r2, r2
 80005fa:	4013      	ands	r3, r2
 80005fc:	b25a      	sxtb	r2, r3
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	701a      	strb	r2, [r3, #0]
 8000602:	e017      	b.n	8000634 <DHT_Read_Byte+0x92>
		}
		else 
        {
            val |= (1 << (7 - j));    		//Write 1
 8000604:	230e      	movs	r3, #14
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2207      	movs	r2, #7
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	2201      	movs	r2, #1
 8000610:	409a      	lsls	r2, r3
 8000612:	0013      	movs	r3, r2
 8000614:	b25a      	sxtb	r2, r3
 8000616:	210f      	movs	r1, #15
 8000618:	187b      	adds	r3, r7, r1
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b25b      	sxtb	r3, r3
 800061e:	4313      	orrs	r3, r2
 8000620:	b25a      	sxtb	r2, r3
 8000622:	187b      	adds	r3, r7, r1
 8000624:	701a      	strb	r2, [r3, #0]
		    while ((DHT_ReadPin(dht)));  	//Wait for the pin to go low
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	0018      	movs	r0, r3
 800062c:	f7ff ffa8 	bl	8000580 <DHT_ReadPin>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d1f9      	bne.n	8000628 <DHT_Read_Byte+0x86>
	for(j = 0; j < 8; j++)
 8000634:	210e      	movs	r1, #14
 8000636:	187b      	adds	r3, r7, r1
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	187b      	adds	r3, r7, r1
 800063c:	3201      	adds	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	230e      	movs	r3, #14
 8000642:	18fb      	adds	r3, r7, r3
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b07      	cmp	r3, #7
 8000648:	d9b8      	bls.n	80005bc <DHT_Read_Byte+0x1a>
        }
    }
	return val;
 800064a:	230f      	movs	r3, #15
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	781b      	ldrb	r3, [r3, #0]
}
 8000650:	0018      	movs	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	b004      	add	sp, #16
 8000656:	bd80      	pop	{r7, pc}

08000658 <DHT_StartTransmission>:
}

// ----- Public Functions -----

void DHT_StartTransmission(dht_t* dht)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    DHT_PinAsOutput(dht);          	//Set pin as output
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff ff2c 	bl	80004c0 <DHT_PinAsOutput>
	DHT_WritePin(dht, 0);   	    //Set pin low	
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2100      	movs	r1, #0
 800066c:	0018      	movs	r0, r3
 800066e:	f7ff ff73 	bl	8000558 <DHT_WritePin>
    UT_Delay_MicroSeconds(2000);   	//Wait 2ms
 8000672:	23fa      	movs	r3, #250	; 0xfa
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	0018      	movs	r0, r3
 8000678:	f001 fb98 	bl	8001dac <UT_Delay_MicroSeconds>
    DHT_PinAsInput(dht);            //Set pin as input
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff ff44 	bl	800050c <DHT_PinAsInput>
	UT_Delay_MicroSeconds(20);      //Wait 20us
 8000684:	2014      	movs	r0, #20
 8000686:	f001 fb91 	bl	8001dac <UT_Delay_MicroSeconds>
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}

08000692 <DHT_CheckResponse>:

uint8_t DHT_CheckResponse(dht_t* dht)
{
 8000692:	b590      	push	{r4, r7, lr}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
    uint8_t response = 1;
 800069a:	240f      	movs	r4, #15
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
	UT_Delay_MicroSeconds(40);      	//Wait 40us
 80006a2:	2028      	movs	r0, #40	; 0x28
 80006a4:	f001 fb82 	bl	8001dac <UT_Delay_MicroSeconds>

	if(!(DHT_ReadPin(dht)))   	        //If the pin is low
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	0018      	movs	r0, r3
 80006ac:	f7ff ff68 	bl	8000580 <DHT_ReadPin>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d110      	bne.n	80006d6 <DHT_CheckResponse+0x44>
	{
		UT_Delay_MicroSeconds(80); 		//Wait 80us
 80006b4:	2050      	movs	r0, #80	; 0x50
 80006b6:	f001 fb79 	bl	8001dac <UT_Delay_MicroSeconds>
		 
		if((DHT_ReadPin(dht))) 	        //If the pin is high -> response is ok
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff ff5f 	bl	8000580 <DHT_ReadPin>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d003      	beq.n	80006ce <DHT_CheckResponse+0x3c>
		{
			response = 0;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	e003      	b.n	80006d6 <DHT_CheckResponse+0x44>
		}			
		else
		{
			response = 2;
 80006ce:	230f      	movs	r3, #15
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	2202      	movs	r2, #2
 80006d4:	701a      	strb	r2, [r3, #0]
		}
	} 

	while(DHT_ReadPin(dht));  	//Wait for pin to go low
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff ff50 	bl	8000580 <DHT_ReadPin>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d1f9      	bne.n	80006d8 <DHT_CheckResponse+0x46>
	return response;
 80006e4:	230f      	movs	r3, #15
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	781b      	ldrb	r3, [r3, #0]
}
 80006ea:	0018      	movs	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b005      	add	sp, #20
 80006f0:	bd90      	pop	{r4, r7, pc}

080006f2 <DHT_ReadData>:

uint8_t DHT_ReadData(dht_t* dht, uint16_t* humidity, uint16_t* temperature)
{
 80006f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f4:	b087      	sub	sp, #28
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	60f8      	str	r0, [r7, #12]
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
    uint8_t h1, h2, t1, t2, cs;

	//Read raw binary data
	h1 = DHT_Read_Byte(dht);
 80006fe:	2517      	movs	r5, #23
 8000700:	197c      	adds	r4, r7, r5
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	0018      	movs	r0, r3
 8000706:	f7ff ff4c 	bl	80005a2 <DHT_Read_Byte>
 800070a:	0003      	movs	r3, r0
 800070c:	7023      	strb	r3, [r4, #0]
	h2 = DHT_Read_Byte(dht);
 800070e:	2616      	movs	r6, #22
 8000710:	19bc      	adds	r4, r7, r6
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff ff44 	bl	80005a2 <DHT_Read_Byte>
 800071a:	0003      	movs	r3, r0
 800071c:	7023      	strb	r3, [r4, #0]
	t1 = DHT_Read_Byte(dht);
 800071e:	2315      	movs	r3, #21
 8000720:	18fc      	adds	r4, r7, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	0018      	movs	r0, r3
 8000726:	f7ff ff3c 	bl	80005a2 <DHT_Read_Byte>
 800072a:	0003      	movs	r3, r0
 800072c:	7023      	strb	r3, [r4, #0]
	t2 = DHT_Read_Byte(dht);
 800072e:	2214      	movs	r2, #20
 8000730:	18bc      	adds	r4, r7, r2
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	0018      	movs	r0, r3
 8000736:	f7ff ff34 	bl	80005a2 <DHT_Read_Byte>
 800073a:	0003      	movs	r3, r0
 800073c:	7023      	strb	r3, [r4, #0]
	cs = DHT_Read_Byte(dht);
 800073e:	2113      	movs	r1, #19
 8000740:	187c      	adds	r4, r7, r1
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff2c 	bl	80005a2 <DHT_Read_Byte>
 800074a:	0003      	movs	r3, r0
 800074c:	7023      	strb	r3, [r4, #0]

	//Calculate checksum
	uint8_t myChecksum = h1 + h2 + t1 + t2;
 800074e:	0028      	movs	r0, r5
 8000750:	183a      	adds	r2, r7, r0
 8000752:	0034      	movs	r4, r6
 8000754:	193b      	adds	r3, r7, r4
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	18d3      	adds	r3, r2, r3
 800075c:	b2da      	uxtb	r2, r3
 800075e:	2515      	movs	r5, #21
 8000760:	197b      	adds	r3, r7, r5
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	b2d9      	uxtb	r1, r3
 8000768:	2312      	movs	r3, #18
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	2614      	movs	r6, #20
 800076e:	19ba      	adds	r2, r7, r6
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	188a      	adds	r2, r1, r2
 8000774:	701a      	strb	r2, [r3, #0]

	if(myChecksum == cs)
 8000776:	2312      	movs	r3, #18
 8000778:	18fa      	adds	r2, r7, r3
 800077a:	2113      	movs	r1, #19
 800077c:	187b      	adds	r3, r7, r1
 800077e:	7812      	ldrb	r2, [r2, #0]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	429a      	cmp	r2, r3
 8000784:	d119      	bne.n	80007ba <DHT_ReadData+0xc8>
	{
		//Combine data to uint16_t
		*humidity = (h1 << 8) | h2;
 8000786:	183b      	adds	r3, r7, r0
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	b21a      	sxth	r2, r3
 800078e:	193b      	adds	r3, r7, r4
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b21b      	sxth	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b21b      	sxth	r3, r3
 8000798:	b29a      	uxth	r2, r3
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	801a      	strh	r2, [r3, #0]
		*temperature = (t1 << 8) | t2;
 800079e:	197b      	adds	r3, r7, r5
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	19bb      	adds	r3, r7, r6
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	4313      	orrs	r3, r2
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	801a      	strh	r2, [r3, #0]

		return 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e000      	b.n	80007bc <DHT_ReadData+0xca>
	}

	return 1;
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	b007      	add	sp, #28
 80007c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007c4 <IR_ReadPin>:
#include "irReceive.h"

// ----- Private functions ----- 

static GPIO_PinState IR_ReadPin(irReceiver_t* ir)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(ir->port, ir->pin);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	889b      	ldrh	r3, [r3, #4]
 80007d4:	0019      	movs	r1, r3
 80007d6:	0010      	movs	r0, r2
 80007d8:	f001 fe34 	bl	8002444 <HAL_GPIO_ReadPin>
 80007dc:	0003      	movs	r3, r0
}
 80007de:	0018      	movs	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <IR_Init>:

// ----- Public Functions -----

void IR_Init(irReceiver_t* ir)
{
 80007e6:	b590      	push	{r4, r7, lr}
 80007e8:	b089      	sub	sp, #36	; 0x24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
    //Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	240c      	movs	r4, #12
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	2314      	movs	r3, #20
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f003 fe45 	bl	8004488 <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = ir->pin;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	889b      	ldrh	r3, [r3, #4]
 8000802:	001a      	movs	r2, r3
 8000804:	0021      	movs	r1, r4
 8000806:	187b      	adds	r3, r7, r1
 8000808:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2202      	movs	r2, #2
 800081a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(ir->port, &GPIO_InitStruct);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	187a      	adds	r2, r7, r1
 8000822:	0011      	movs	r1, r2
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fc8f 	bl	8002148 <HAL_GPIO_Init>
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b009      	add	sp, #36	; 0x24
 8000830:	bd90      	pop	{r4, r7, pc}

08000832 <IR_CheckForTransmission>:

uint8_t IR_CheckForTransmission(irReceiver_t* ir)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
    uint8_t response = 1;
 800083a:	230f      	movs	r3, #15
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
 
    if(!(IR_ReadPin(ir)))           //If the pin is low
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff ffbd 	bl	80007c4 <IR_ReadPin>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d111      	bne.n	8000872 <IR_CheckForTransmission+0x40>
    {
        while(!(IR_ReadPin(ir)));   //Wait for pin to go high        
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff ffb6 	bl	80007c4 <IR_ReadPin>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d0f9      	beq.n	8000850 <IR_CheckForTransmission+0x1e>
        while(IR_ReadPin(ir));      //Wait for pin to go low
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	0018      	movs	r0, r3
 8000862:	f7ff ffaf 	bl	80007c4 <IR_ReadPin>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d1f9      	bne.n	800085e <IR_CheckForTransmission+0x2c>

        response = 0;               //Response ok
 800086a:	230f      	movs	r3, #15
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
    }

    return response;
 8000872:	230f      	movs	r3, #15
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	781b      	ldrb	r3, [r3, #0]
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	b004      	add	sp, #16
 800087e:	bd80      	pop	{r7, pc}

08000880 <IR_ReceiveSignal>:

uint32_t IR_ReceiveSignal(irReceiver_t* ir)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    uint32_t data = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
    uint8_t count = 0;
 800088c:	2313      	movs	r3, #19
 800088e:	18fb      	adds	r3, r7, r3
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 32; i++)
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e034      	b.n	8000904 <IR_ReceiveSignal+0x84>
    {
        count = 0;
 800089a:	2313      	movs	r3, #19
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
        while(!(IR_ReadPin(ir)));           //Wait for pin to go high
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	0018      	movs	r0, r3
 80008a8:	f7ff ff8c 	bl	80007c4 <IR_ReadPin>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d0f9      	beq.n	80008a4 <IR_ReceiveSignal+0x24>

        while((IR_ReadPin(ir)))             //Count the space length while the pin is high
 80008b0:	e008      	b.n	80008c4 <IR_ReceiveSignal+0x44>
        {
            count++;
 80008b2:	2113      	movs	r1, #19
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	3201      	adds	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
            UT_Delay_MicroSeconds(100);
 80008be:	2064      	movs	r0, #100	; 0x64
 80008c0:	f001 fa74 	bl	8001dac <UT_Delay_MicroSeconds>
        while((IR_ReadPin(ir)))             //Count the space length while the pin is high
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	0018      	movs	r0, r3
 80008c8:	f7ff ff7c 	bl	80007c4 <IR_ReadPin>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d1f0      	bne.n	80008b2 <IR_ReceiveSignal+0x32>
        }

        if(count > 10)                      //If the space is more than 1ms
 80008d0:	2313      	movs	r3, #19
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b0a      	cmp	r3, #10
 80008d8:	d908      	bls.n	80008ec <IR_ReceiveSignal+0x6c>
        {
            data |= (1UL << (31 - i));      //Write 1
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	061a      	lsls	r2, r3, #24
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	40da      	lsrs	r2, r3
 80008e2:	0013      	movs	r3, r2
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	e008      	b.n	80008fe <IR_ReceiveSignal+0x7e>
        }

        else
        {
            data &= ~(1UL << (31 - i));     //Write 0
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	061a      	lsls	r2, r3, #24
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	40da      	lsrs	r2, r3
 80008f4:	0013      	movs	r3, r2
 80008f6:	43da      	mvns	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	4013      	ands	r3, r2
 80008fc:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 32; i++)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b1f      	cmp	r3, #31
 8000908:	ddc7      	ble.n	800089a <IR_ReceiveSignal+0x1a>
        }            
    }

    return data;
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	b006      	add	sp, #24
 8000912:	bd80      	pop	{r7, pc}

08000914 <set_RS>:
static char byteBuffer[8];

// ----- Private functions ----- 

static void set_RS(int state)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS, state);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	23a0      	movs	r3, #160	; 0xa0
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	2101      	movs	r1, #1
 8000926:	0018      	movs	r0, r3
 8000928:	f001 fda9 	bl	800247e <HAL_GPIO_WritePin>
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b002      	add	sp, #8
 8000932:	bd80      	pop	{r7, pc}

08000934 <set_RW>:
static void set_RW(int state)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RW, state);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	2102      	movs	r1, #2
 8000946:	0018      	movs	r0, r3
 8000948:	f001 fd99 	bl	800247e <HAL_GPIO_WritePin>
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}

08000954 <set_E>:
static void set_E(int state)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(E, state);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <set_E+0x20>)
 8000966:	0019      	movs	r1, r3
 8000968:	f001 fd89 	bl	800247e <HAL_GPIO_WritePin>
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}
 8000974:	50000400 	.word	0x50000400

08000978 <set_DB7>:
static void set_DB7(int state)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB7, state);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <set_DB7+0x20>)
 8000986:	001a      	movs	r2, r3
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	f001 fd78 	bl	800247e <HAL_GPIO_WritePin>
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	50000400 	.word	0x50000400

0800099c <set_DB6>:
static void set_DB6(int state)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB6, state);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <set_DB6+0x20>)
 80009aa:	001a      	movs	r2, r3
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	f001 fd66 	bl	800247e <HAL_GPIO_WritePin>
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	50000400 	.word	0x50000400

080009c0 <set_DB5>:
static void set_DB5(int state)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB5, state);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <set_DB5+0x20>)
 80009ce:	001a      	movs	r2, r3
 80009d0:	2120      	movs	r1, #32
 80009d2:	f001 fd54 	bl	800247e <HAL_GPIO_WritePin>
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	50000400 	.word	0x50000400

080009e4 <set_DB4>:
static void set_DB4(int state)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB4, state);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <set_DB4+0x20>)
 80009f2:	001a      	movs	r2, r3
 80009f4:	2110      	movs	r1, #16
 80009f6:	f001 fd42 	bl	800247e <HAL_GPIO_WritePin>
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	50000400 	.word	0x50000400

08000a08 <set_DB3>:
static void set_DB3(int state)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB3, state);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <set_DB3+0x20>)
 8000a16:	001a      	movs	r2, r3
 8000a18:	2108      	movs	r1, #8
 8000a1a:	f001 fd30 	bl	800247e <HAL_GPIO_WritePin>
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b002      	add	sp, #8
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	50000400 	.word	0x50000400

08000a2c <set_DB2>:
static void set_DB2(int state)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB2, state);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <set_DB2+0x20>)
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	f001 fd1e 	bl	800247e <HAL_GPIO_WritePin>
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b002      	add	sp, #8
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	50000400 	.word	0x50000400

08000a50 <set_DB1>:
static void set_DB1(int state)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB1, state);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <set_DB1+0x20>)
 8000a5e:	001a      	movs	r2, r3
 8000a60:	2102      	movs	r1, #2
 8000a62:	f001 fd0c 	bl	800247e <HAL_GPIO_WritePin>
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b002      	add	sp, #8
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	50000400 	.word	0x50000400

08000a74 <set_DB0>:
static void set_DB0(int state)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB0, state);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <set_DB0+0x20>)
 8000a82:	001a      	movs	r2, r3
 8000a84:	2101      	movs	r1, #1
 8000a86:	f001 fcfa 	bl	800247e <HAL_GPIO_WritePin>
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	50000400 	.word	0x50000400

08000a98 <get_DB7>:

static int get_DB7()
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
    GPIO_PinState state = HAL_GPIO_ReadPin(DB7);
 8000a9e:	1dfc      	adds	r4, r7, #7
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <get_DB7+0x2c>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 fccd 	bl	8002444 <HAL_GPIO_ReadPin>
 8000aaa:	0003      	movs	r3, r0
 8000aac:	7023      	strb	r3, [r4, #0]
    if(state == GPIO_PIN_SET)
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d101      	bne.n	8000aba <get_DB7+0x22>
        return 1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <get_DB7+0x24>
    else
        return 0;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b003      	add	sp, #12
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	50000400 	.word	0x50000400

08000ac8 <sendEnable>:

static void sendEnable()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
    set_E(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff ff41 	bl	8000954 <set_E>

    //Wait atleast 1000us
    UT_Delay_MicroSeconds(1000);
 8000ad2:	23fa      	movs	r3, #250	; 0xfa
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f001 f968 	bl	8001dac <UT_Delay_MicroSeconds>

    set_E(0);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff ff39 	bl	8000954 <set_E>
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <waitForBusyFlag>:
static void waitForBusyFlag()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
    set_RS(0);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff ff10 	bl	8000914 <set_RS>
    set_RW(1);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff ff1d 	bl	8000934 <set_RW>
    sendEnable();    
 8000afa:	f7ff ffe5 	bl	8000ac8 <sendEnable>

    int val = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
    while(val != 0)
 8000b02:	e003      	b.n	8000b0c <waitForBusyFlag+0x24>
    {
        val = get_DB7(); //Get busy flag
 8000b04:	f7ff ffc8 	bl	8000a98 <get_DB7>
 8000b08:	0003      	movs	r3, r0
 8000b0a:	607b      	str	r3, [r7, #4]
    while(val != 0)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f8      	bne.n	8000b04 <waitForBusyFlag+0x1c>
    }
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <sendCommand>:
static void sendCommand()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
    sendEnable();
 8000b20:	f7ff ffd2 	bl	8000ac8 <sendEnable>
    waitForBusyFlag();
 8000b24:	f7ff ffe0 	bl	8000ae8 <waitForBusyFlag>
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <charToByteBuffer>:

static void charToByteBuffer(char c)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	0002      	movs	r2, r0
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	e017      	b.n	8000b76 <charToByteBuffer+0x46>
    {
        char val = (c >> i) & 0x01;
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	183b      	adds	r3, r7, r0
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	411a      	asrs	r2, r3
 8000b52:	0013      	movs	r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	240e      	movs	r4, #14
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	701a      	strb	r2, [r3, #0]
        byteBuffer[i] = val;
 8000b60:	183b      	adds	r3, r7, r0
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <charToByteBuffer+0x5c>)
 8000b66:	1939      	adds	r1, r7, r4
 8000b68:	7809      	ldrb	r1, [r1, #0]
 8000b6a:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0; i < 8; i++)
 8000b6c:	183b      	adds	r3, r7, r0
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	183b      	adds	r3, r7, r0
 8000b72:	3201      	adds	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	230f      	movs	r3, #15
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b07      	cmp	r3, #7
 8000b7e:	d9e2      	bls.n	8000b46 <charToByteBuffer+0x16>
    }
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b005      	add	sp, #20
 8000b88:	bd90      	pop	{r4, r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	2000008c 	.word	0x2000008c

08000b90 <sendByteBuffer>:
static void sendByteBuffer()
{    
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
    //Write data
    set_RS(1);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff febc 	bl	8000914 <set_RS>
    set_RW(0);
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff fec9 	bl	8000934 <set_RW>

    //Address to write to correct pin
    uint16_t address = 0x0001;
 8000ba2:	1dbb      	adds	r3, r7, #6
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	801a      	strh	r2, [r3, #0]

    for(uint8_t i = 0; i < 8; i++)
 8000ba8:	1d7b      	adds	r3, r7, #5
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	e017      	b.n	8000be0 <sendByteBuffer+0x50>
    {        
        char val = byteBuffer[i];
 8000bb0:	1d7b      	adds	r3, r7, #5
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	490f      	ldr	r1, [pc, #60]	; (8000bf4 <sendByteBuffer+0x64>)
 8000bb8:	5c8a      	ldrb	r2, [r1, r2]
 8000bba:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, address, (int)val); 
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	1dbb      	adds	r3, r7, #6
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <sendByteBuffer+0x68>)
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	f001 fc59 	bl	800247e <HAL_GPIO_WritePin>
        address = address << 1; //Go to next pin
 8000bcc:	1dba      	adds	r2, r7, #6
 8000bce:	1dbb      	adds	r3, r7, #6
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	18db      	adds	r3, r3, r3
 8000bd4:	8013      	strh	r3, [r2, #0]
    for(uint8_t i = 0; i < 8; i++)
 8000bd6:	1d7b      	adds	r3, r7, #5
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	1d7b      	adds	r3, r7, #5
 8000bdc:	3201      	adds	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	1d7b      	adds	r3, r7, #5
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	d9e3      	bls.n	8000bb0 <sendByteBuffer+0x20>
    }
    sendCommand();
 8000be8:	f7ff ff98 	bl	8000b1c <sendCommand>
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b002      	add	sp, #8
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000008c 	.word	0x2000008c
 8000bf8:	50000400 	.word	0x50000400

08000bfc <LCD_InitPins>:

// ----- Public Functions ----- 

void LCD_InitPins()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
    //Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	0018      	movs	r0, r3
 8000c06:	2314      	movs	r3, #20
 8000c08:	001a      	movs	r2, r3
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	f003 fc3c 	bl	8004488 <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2203      	movs	r2, #3
 8000c14:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2201      	movs	r2, #1
 8000c1a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	1d3a      	adds	r2, r7, #4
 8000c2a:	23a0      	movs	r3, #160	; 0xa0
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f001 fa89 	bl	8002148 <HAL_GPIO_Init>

	//Initialize all Output-Pins of Port B
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <LCD_InitPins+0xa8>)
 8000c3a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2201      	movs	r2, #1
 8000c40:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <LCD_InitPins+0xac>)
 8000c52:	0019      	movs	r1, r3
 8000c54:	0010      	movs	r0, r2
 8000c56:	f001 fa77 	bl	8002148 <HAL_GPIO_Init>

    //Reset everything
    set_RS(0);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fe5a 	bl	8000914 <set_RS>
    set_RW(0);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff fe67 	bl	8000934 <set_RW>
    set_DB7(0);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fe86 	bl	8000978 <set_DB7>
    set_DB6(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fe95 	bl	800099c <set_DB6>
    set_DB5(0);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fea4 	bl	80009c0 <set_DB5>
    set_DB4(0);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff feb3 	bl	80009e4 <set_DB4>
    set_DB3(0);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff fec2 	bl	8000a08 <set_DB3>
    set_DB2(0);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff fed1 	bl	8000a2c <set_DB2>
    set_DB1(0);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fee0 	bl	8000a50 <set_DB1>
    set_DB0(0);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff feef 	bl	8000a74 <set_DB0>

    sendCommand();
 8000c96:	f7ff ff41 	bl	8000b1c <sendCommand>
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b006      	add	sp, #24
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	000001ff 	.word	0x000001ff
 8000ca8:	50000400 	.word	0x50000400

08000cac <LCD_Set8BitMode>:

void LCD_Set8BitMode()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    set_RS(0);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fe2f 	bl	8000914 <set_RS>
    set_RW(0);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff fe3c 	bl	8000934 <set_RW>

    set_DB7(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fe5b 	bl	8000978 <set_DB7>
    set_DB6(0);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff fe6a 	bl	800099c <set_DB6>
    set_DB5(1); //Configure Function Set
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f7ff fe79 	bl	80009c0 <set_DB5>
    set_DB4(1); //8-Bit or 4-Bit
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff fe88 	bl	80009e4 <set_DB4>
    set_DB3(1); //2 Lines or 1 Line
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fe97 	bl	8000a08 <set_DB3>
    set_DB2(0); //5x11 or 5x8 Pixel
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff fea6 	bl	8000a2c <set_DB2>
    set_DB1(0);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff feb5 	bl	8000a50 <set_DB1>
    set_DB0(0);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fec4 	bl	8000a74 <set_DB0>

    sendCommand();
 8000cec:	f7ff ff16 	bl	8000b1c <sendCommand>
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <LCD_ClearDisplay>:

void LCD_ClearDisplay()
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
    set_RS(0);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fe0a 	bl	8000914 <set_RS>
    set_RW(0);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fe17 	bl	8000934 <set_RW>

    set_DB7(0);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fe36 	bl	8000978 <set_DB7>
    set_DB6(0);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff fe45 	bl	800099c <set_DB6>
    set_DB5(0);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fe54 	bl	80009c0 <set_DB5>
    set_DB4(0);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fe63 	bl	80009e4 <set_DB4>
    set_DB3(0);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff fe72 	bl	8000a08 <set_DB3>
    set_DB2(0);
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fe81 	bl	8000a2c <set_DB2>
    set_DB1(0);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff fe90 	bl	8000a50 <set_DB1>
    set_DB0(1);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff fe9f 	bl	8000a74 <set_DB0>

    sendCommand();
 8000d36:	f7ff fef1 	bl	8000b1c <sendCommand>
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <LCD_ReturnHome>:

void LCD_ReturnHome()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
    set_RS(0);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fde5 	bl	8000914 <set_RS>
    set_RW(0);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fdf2 	bl	8000934 <set_RW>

    set_DB7(0);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fe11 	bl	8000978 <set_DB7>
    set_DB6(0);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fe20 	bl	800099c <set_DB6>
    set_DB5(0);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff fe2f 	bl	80009c0 <set_DB5>
    set_DB4(0);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff fe3e 	bl	80009e4 <set_DB4>
    set_DB3(0);
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff fe4d 	bl	8000a08 <set_DB3>
    set_DB2(0);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff fe5c 	bl	8000a2c <set_DB2>
    set_DB1(1);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fe6b 	bl	8000a50 <set_DB1>
    set_DB0(0);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff fe7a 	bl	8000a74 <set_DB0>

    sendCommand();
 8000d80:	f7ff fecc 	bl	8000b1c <sendCommand>
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <LCD_TurnDisplayOn>:

void LCD_TurnDisplayOn()
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
    set_RS(0);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fdc0 	bl	8000914 <set_RS>
    set_RW(0);
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff fdcd 	bl	8000934 <set_RW>

    set_DB7(0);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff fdec 	bl	8000978 <set_DB7>
    set_DB6(0);
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fdfb 	bl	800099c <set_DB6>
    set_DB5(0);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff fe0a 	bl	80009c0 <set_DB5>
    set_DB4(0);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff fe19 	bl	80009e4 <set_DB4>
    set_DB3(1); //Configure Display
 8000db2:	2001      	movs	r0, #1
 8000db4:	f7ff fe28 	bl	8000a08 <set_DB3>
    set_DB2(1); //Turn On/Off
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff fe37 	bl	8000a2c <set_DB2>
    set_DB1(0); //Cursor settings
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fe46 	bl	8000a50 <set_DB1>
    set_DB0(0); //Cursor settings
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f7ff fe55 	bl	8000a74 <set_DB0>

    sendCommand();
 8000dca:	f7ff fea7 	bl	8000b1c <sendCommand>
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <LCD_Print>:
    charToByteBuffer(c);
    sendByteBuffer();
}

void LCD_Print(const char* string)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    int8_t chars = strlen(string);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff f992 	bl	8000108 <strlen>
 8000de4:	0002      	movs	r2, r0
 8000de6:	210f      	movs	r1, #15
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	701a      	strb	r2, [r3, #0]
    if(chars < 17)
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	2b10      	cmp	r3, #16
 8000df4:	dc2b      	bgt.n	8000e4e <LCD_Print+0x7a>
    {
        //Iterate over every character     
        for(int i = 0; i < strlen(string); i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e00b      	b.n	8000e14 <LCD_Print+0x40>
        {
            charToByteBuffer(string[i]); //Get binary representation of the character
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	18d3      	adds	r3, r2, r3
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff fe93 	bl	8000b30 <charToByteBuffer>
            sendByteBuffer(); //Set pins accordingly
 8000e0a:	f7ff fec1 	bl	8000b90 <sendByteBuffer>
        for(int i = 0; i < strlen(string); i++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff f976 	bl	8000108 <strlen>
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8eb      	bhi.n	8000dfc <LCD_Print+0x28>
        }   

        //Iterate to fill up the line    
        for(int i = 0; i < 40 - chars; i++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	e007      	b.n	8000e3a <LCD_Print+0x66>
        {
            charToByteBuffer(' '); //Get binary representation of a space
 8000e2a:	2020      	movs	r0, #32
 8000e2c:	f7ff fe80 	bl	8000b30 <charToByteBuffer>
            sendByteBuffer(); //Set pins accordingly
 8000e30:	f7ff feae 	bl	8000b90 <sendByteBuffer>
        for(int i = 0; i < 40 - chars; i++)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	3301      	adds	r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	2228      	movs	r2, #40	; 0x28
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	dbee      	blt.n	8000e2a <LCD_Print+0x56>
    }
    else
    {   
        LCD_Print("String too long");
    }
}
 8000e4c:	e003      	b.n	8000e56 <LCD_Print+0x82>
        LCD_Print("String too long");
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <LCD_Print+0x8c>)
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff ffbf 	bl	8000dd4 <LCD_Print>
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b006      	add	sp, #24
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	08004d68 	.word	0x08004d68

08000e64 <LCD_printf>:

void LCD_printf(const char* format, ...)
{
 8000e64:	b40f      	push	{r0, r1, r2, r3}
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b0c2      	sub	sp, #264	; 0x108
 8000e6a:	af00      	add	r7, sp, #0
	va_list args;
	char buffer[256];	
	memset(buffer, 0, 256);
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	005a      	lsls	r2, r3, #1
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2100      	movs	r1, #0
 8000e74:	0018      	movs	r0, r3
 8000e76:	f003 fb07 	bl	8004488 <memset>

	va_start(args, format);	
 8000e7a:	238a      	movs	r3, #138	; 0x8a
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	1d7a      	adds	r2, r7, #5
 8000e82:	32ff      	adds	r2, #255	; 0xff
 8000e84:	6013      	str	r3, [r2, #0]
	vsprintf(buffer, format, args);
 8000e86:	1d7b      	adds	r3, r7, #5
 8000e88:	33ff      	adds	r3, #255	; 0xff
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	2388      	movs	r3, #136	; 0x88
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	6819      	ldr	r1, [r3, #0]
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	0018      	movs	r0, r3
 8000e98:	f003 fb48 	bl	800452c <vsiprintf>
	LCD_Print(buffer);
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff ff98 	bl	8000dd4 <LCD_Print>
	va_end(args);
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b042      	add	sp, #264	; 0x108
 8000eaa:	bc80      	pop	{r7}
 8000eac:	bc08      	pop	{r3}
 8000eae:	b004      	add	sp, #16
 8000eb0:	4718      	bx	r3
	...

08000eb4 <SystemClock_Config>:
static uint8_t pendingEXTI = 0;

// ----- Functions ----- 

static void SystemClock_Config(void)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b099      	sub	sp, #100	; 0x64
 8000eb8:	af00      	add	r7, sp, #0
  	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	242c      	movs	r4, #44	; 0x2c
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	2334      	movs	r3, #52	; 0x34
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f003 fadf 	bl	8004488 <memset>
  	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eca:	2318      	movs	r3, #24
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	0018      	movs	r0, r3
 8000ed0:	2314      	movs	r3, #20
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	f003 fad7 	bl	8004488 <memset>
  	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eda:	003b      	movs	r3, r7
 8000edc:	0018      	movs	r0, r3
 8000ede:	2318      	movs	r3, #24
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f003 fad0 	bl	8004488 <memset>

  	//Configure the main internal regulator output voltage
  	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee8:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <SystemClock_Config+0xe8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <SystemClock_Config+0xec>)
 8000eee:	401a      	ands	r2, r3
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <SystemClock_Config+0xe8>)
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	0109      	lsls	r1, r1, #4
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]

  	//Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure
  	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000efa:	0021      	movs	r1, r4
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2202      	movs	r2, #2
 8000f00:	601a      	str	r2, [r3, #0]
  	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2201      	movs	r2, #1
 8000f06:	60da      	str	r2, [r3, #12]
  	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2210      	movs	r2, #16
 8000f0c:	611a      	str	r2, [r3, #16]
  	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2202      	movs	r2, #2
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24
  	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2200      	movs	r2, #0
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
  	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	02d2      	lsls	r2, r2, #11
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
  	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	03d2      	lsls	r2, r2, #15
 8000f28:	631a      	str	r2, [r3, #48]	; 0x30
  	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f001 fafb 	bl	8002528 <HAL_RCC_OscConfig>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d003      	beq.n	8000f3e <SystemClock_Config+0x8a>
  	{
  	  	UT_Error_Handler("HAL_RCC_OscConfig failed!");
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <SystemClock_Config+0xf0>)
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f000 ff2b 	bl	8001d94 <UT_Error_Handler>
  	}

  	//Initializes the CPU, AHB and APB buses clocks
  	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f3e:	2118      	movs	r1, #24
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	220f      	movs	r2, #15
 8000f44:	601a      	str	r2, [r3, #0]
  	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	605a      	str	r2, [r3, #4]
  	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2101      	movs	r1, #1
 8000f62:	0018      	movs	r0, r3
 8000f64:	f001 fe5c 	bl	8002c20 <HAL_RCC_ClockConfig>
 8000f68:	1e03      	subs	r3, r0, #0
 8000f6a:	d003      	beq.n	8000f74 <SystemClock_Config+0xc0>
  	{
  	  	UT_Error_Handler("HAL_RCC_ClockConfig failed!");
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <SystemClock_Config+0xf4>)
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f000 ff10 	bl	8001d94 <UT_Error_Handler>
  	}

  	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f74:	003b      	movs	r3, r7
 8000f76:	2202      	movs	r2, #2
 8000f78:	601a      	str	r2, [r3, #0]
  	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	003b      	movs	r3, r7
 8000f82:	0018      	movs	r0, r3
 8000f84:	f002 f870 	bl	8003068 <HAL_RCCEx_PeriphCLKConfig>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d003      	beq.n	8000f94 <SystemClock_Config+0xe0>
  	{
  	  	UT_Error_Handler("HAL_RCCEx_PeriphCLKConfig failed!");
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <SystemClock_Config+0xf8>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f000 ff00 	bl	8001d94 <UT_Error_Handler>
  	}
}
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b019      	add	sp, #100	; 0x64
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	40007000 	.word	0x40007000
 8000fa0:	ffffe7ff 	.word	0xffffe7ff
 8000fa4:	08004d78 	.word	0x08004d78
 8000fa8:	08004d94 	.word	0x08004d94
 8000fac:	08004db0 	.word	0x08004db0

08000fb0 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fb6:	4a16      	ldr	r2, [pc, #88]	; (8001010 <MX_USART2_UART_Init+0x60>)
 8000fb8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fbc:	22e1      	movs	r2, #225	; 0xe1
 8000fbe:	0252      	lsls	r2, r2, #9
 8000fc0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f002 fd45 	bl	8003a84 <HAL_UART_Init>
 8000ffa:	1e03      	subs	r3, r0, #0
 8000ffc:	d003      	beq.n	8001006 <MX_USART2_UART_Init+0x56>
	{
		UT_Error_Handler("HAL_UART_Init failed!");
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <MX_USART2_UART_Init+0x64>)
 8001000:	0018      	movs	r0, r3
 8001002:	f000 fec7 	bl	8001d94 <UT_Error_Handler>
	}
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000108 	.word	0x20000108
 8001010:	40004400 	.word	0x40004400
 8001014:	08004dd4 	.word	0x08004dd4

08001018 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	2308      	movs	r3, #8
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	0018      	movs	r0, r3
 8001024:	2310      	movs	r3, #16
 8001026:	001a      	movs	r2, r3
 8001028:	2100      	movs	r1, #0
 800102a:	f003 fa2d 	bl	8004488 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102e:	003b      	movs	r3, r7
 8001030:	0018      	movs	r0, r3
 8001032:	2308      	movs	r3, #8
 8001034:	001a      	movs	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	f003 fa26 	bl	8004488 <memset>

	//Configure timer 2
	htim2.Instance = TIM2;
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_TIM2_Init+0xb8>)
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	05d2      	lsls	r2, r2, #23
 8001042:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3200; //32MHZ divided by 3200. This results in 10000 oscillations per second
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_TIM2_Init+0xb8>)
 8001046:	22c8      	movs	r2, #200	; 0xc8
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MX_TIM2_Init+0xb8>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000; //Counter goes up to 10000, then starts anew. This results in 1 counter restarts every second
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_TIM2_Init+0xb8>)
 8001054:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <MX_TIM2_Init+0xbc>)
 8001056:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_TIM2_Init+0xb8>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_TIM2_Init+0xb8>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_TIM2_Init+0xb8>)
 8001066:	0018      	movs	r0, r3
 8001068:	f002 f924 	bl	80032b4 <HAL_TIM_Base_Init>
 800106c:	1e03      	subs	r3, r0, #0
 800106e:	d003      	beq.n	8001078 <MX_TIM2_Init+0x60>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_TIM2_Init+0xc0>)
 8001072:	0018      	movs	r0, r3
 8001074:	f000 fe8e 	bl	8001d94 <UT_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; //Use internal clock as a clock source
 8001078:	2108      	movs	r1, #8
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	0152      	lsls	r2, r2, #5
 8001080:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001082:	187a      	adds	r2, r7, r1
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_TIM2_Init+0xb8>)
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f002 facb 	bl	8003624 <HAL_TIM_ConfigClockSource>
 800108e:	1e03      	subs	r3, r0, #0
 8001090:	d003      	beq.n	800109a <MX_TIM2_Init+0x82>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_TIM2_Init+0xc4>)
 8001094:	0018      	movs	r0, r3
 8001096:	f000 fe7d 	bl	8001d94 <UT_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109a:	003b      	movs	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a0:	003b      	movs	r3, r7
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a6:	003a      	movs	r2, r7
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_TIM2_Init+0xb8>)
 80010aa:	0011      	movs	r1, r2
 80010ac:	0018      	movs	r0, r3
 80010ae:	f002 fc91 	bl	80039d4 <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	1e03      	subs	r3, r0, #0
 80010b4:	d003      	beq.n	80010be <MX_TIM2_Init+0xa6>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_TIM2_Init+0xc8>)
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 fe6b 	bl	8001d94 <UT_Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim2);
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <MX_TIM2_Init+0xb8>)
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 fd55 	bl	8001b70 <HAL_TIM_MspPostInit>
}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b006      	add	sp, #24
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	200000c8 	.word	0x200000c8
 80010d4:	00002710 	.word	0x00002710
 80010d8:	08004dec 	.word	0x08004dec
 80010dc:	08004e08 	.word	0x08004e08
 80010e0:	08004e2c 	.word	0x08004e2c

080010e4 <MX_TIM21_Init>:

static void MX_TIM21_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	2308      	movs	r3, #8
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	0018      	movs	r0, r3
 80010f0:	2310      	movs	r3, #16
 80010f2:	001a      	movs	r2, r3
 80010f4:	2100      	movs	r1, #0
 80010f6:	f003 f9c7 	bl	8004488 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fa:	003b      	movs	r3, r7
 80010fc:	0018      	movs	r0, r3
 80010fe:	2308      	movs	r3, #8
 8001100:	001a      	movs	r2, r3
 8001102:	2100      	movs	r1, #0
 8001104:	f003 f9c0 	bl	8004488 <memset>

	//Configure timer 21
	htim21.Instance = TIM21;
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_TIM21_Init+0xac>)
 800110a:	4a22      	ldr	r2, [pc, #136]	; (8001194 <MX_TIM21_Init+0xb0>)
 800110c:	601a      	str	r2, [r3, #0]
	htim21.Init.Prescaler = 28; //32MHZ divided by 28. High resolution for microsecond-Delay-Function
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <MX_TIM21_Init+0xac>)
 8001110:	221c      	movs	r2, #28
 8001112:	605a      	str	r2, [r3, #4]
	htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_TIM21_Init+0xac>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
	htim21.Init.Period = 65535;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_TIM21_Init+0xac>)
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <MX_TIM21_Init+0xb4>)
 800111e:	60da      	str	r2, [r3, #12]
	htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_TIM21_Init+0xac>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
	htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_TIM21_Init+0xac>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_TIM21_Init+0xac>)
 800112e:	0018      	movs	r0, r3
 8001130:	f002 f8c0 	bl	80032b4 <HAL_TIM_Base_Init>
 8001134:	1e03      	subs	r3, r0, #0
 8001136:	d003      	beq.n	8001140 <MX_TIM21_Init+0x5c>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_TIM21_Init+0xb8>)
 800113a:	0018      	movs	r0, r3
 800113c:	f000 fe2a 	bl	8001d94 <UT_Error_Handler>
	}	

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001140:	2108      	movs	r1, #8
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	0152      	lsls	r2, r2, #5
 8001148:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800114a:	187a      	adds	r2, r7, r1
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_TIM21_Init+0xac>)
 800114e:	0011      	movs	r1, r2
 8001150:	0018      	movs	r0, r3
 8001152:	f002 fa67 	bl	8003624 <HAL_TIM_ConfigClockSource>
 8001156:	1e03      	subs	r3, r0, #0
 8001158:	d003      	beq.n	8001162 <MX_TIM21_Init+0x7e>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_TIM21_Init+0xbc>)
 800115c:	0018      	movs	r0, r3
 800115e:	f000 fe19 	bl	8001d94 <UT_Error_Handler>
	}	

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001162:	003b      	movs	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001168:	003b      	movs	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800116e:	003a      	movs	r2, r7
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <MX_TIM21_Init+0xac>)
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f002 fc2d 	bl	80039d4 <HAL_TIMEx_MasterConfigSynchronization>
 800117a:	1e03      	subs	r3, r0, #0
 800117c:	d003      	beq.n	8001186 <MX_TIM21_Init+0xa2>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_TIM21_Init+0xc0>)
 8001180:	0018      	movs	r0, r3
 8001182:	f000 fe07 	bl	8001d94 <UT_Error_Handler>
	}
}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b006      	add	sp, #24
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	2000018c 	.word	0x2000018c
 8001194:	40010800 	.word	0x40010800
 8001198:	0000ffff 	.word	0x0000ffff
 800119c:	08004dec 	.word	0x08004dec
 80011a0:	08004e08 	.word	0x08004e08
 80011a4:	08004e2c 	.word	0x08004e2c

080011a8 <Port_Init>:

static void Port_Init(void)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b08b      	sub	sp, #44	; 0x2c
 80011ac:	af00      	add	r7, sp, #0
	//Enable GPIO Ports Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b31      	ldr	r3, [pc, #196]	; (8001274 <Port_Init+0xcc>)
 80011b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b2:	4b30      	ldr	r3, [pc, #192]	; (8001274 <Port_Init+0xcc>)
 80011b4:	2101      	movs	r1, #1
 80011b6:	430a      	orrs	r2, r1
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80011ba:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <Port_Init+0xcc>)
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	2201      	movs	r2, #1
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <Port_Init+0xcc>)
 80011c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <Port_Init+0xcc>)
 80011cc:	2102      	movs	r1, #2
 80011ce:	430a      	orrs	r2, r1
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <Port_Init+0xcc>)
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	2202      	movs	r2, #2
 80011d8:	4013      	ands	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	4b25      	ldr	r3, [pc, #148]	; (8001274 <Port_Init+0xcc>)
 80011e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <Port_Init+0xcc>)
 80011e4:	2104      	movs	r1, #4
 80011e6:	430a      	orrs	r2, r1
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <Port_Init+0xcc>)
 80011ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ee:	2204      	movs	r2, #4
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <Port_Init+0xcc>)
 80011f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <Port_Init+0xcc>)
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	430a      	orrs	r2, r1
 8001200:	62da      	str	r2, [r3, #44]	; 0x2c
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <Port_Init+0xcc>)
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	4013      	ands	r3, r2
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

	//Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	2414      	movs	r4, #20
 8001210:	193b      	adds	r3, r7, r4
 8001212:	0018      	movs	r0, r3
 8001214:	2314      	movs	r3, #20
 8001216:	001a      	movs	r2, r3
 8001218:	2100      	movs	r1, #0
 800121a:	f003 f935 	bl	8004488 <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800121e:	193b      	adds	r3, r7, r4
 8001220:	2220      	movs	r2, #32
 8001222:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	193b      	adds	r3, r7, r4
 8001226:	2201      	movs	r2, #1
 8001228:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	193b      	adds	r3, r7, r4
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001230:	193b      	adds	r3, r7, r4
 8001232:	2201      	movs	r2, #1
 8001234:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	193a      	adds	r2, r7, r4
 8001238:	23a0      	movs	r3, #160	; 0xa0
 800123a:	05db      	lsls	r3, r3, #23
 800123c:	0011      	movs	r1, r2
 800123e:	0018      	movs	r0, r3
 8001240:	f000 ff82 	bl	8002148 <HAL_GPIO_Init>

	//Initialize all Output-Pins of Port C
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001244:	0021      	movs	r1, r4
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	0192      	lsls	r2, r2, #6
 800124c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	187b      	adds	r3, r7, r1
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001260:	187b      	adds	r3, r7, r1
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <Port_Init+0xd0>)
 8001264:	0019      	movs	r1, r3
 8001266:	0010      	movs	r0, r2
 8001268:	f000 ff6e 	bl	8002148 <HAL_GPIO_Init>
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b00b      	add	sp, #44	; 0x2c
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	50000800 	.word	0x50000800

0800127c <Port_As_Interrupt_Triggered>:

static void Port_As_Interrupt_Triggered(GPIO_TypeDef* port, uint16_t pin)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	000a      	movs	r2, r1
 8001286:	1cbb      	adds	r3, r7, #2
 8001288:	801a      	strh	r2, [r3, #0]
	//Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	240c      	movs	r4, #12
 800128c:	193b      	adds	r3, r7, r4
 800128e:	0018      	movs	r0, r3
 8001290:	2314      	movs	r3, #20
 8001292:	001a      	movs	r2, r3
 8001294:	2100      	movs	r1, #0
 8001296:	f003 f8f7 	bl	8004488 <memset>

	GPIO_InitStruct.Pin = pin;
 800129a:	1cbb      	adds	r3, r7, #2
 800129c:	881a      	ldrh	r2, [r3, #0]
 800129e:	193b      	adds	r3, r7, r4
 80012a0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a2:	193b      	adds	r3, r7, r4
 80012a4:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <Port_As_Interrupt_Triggered+0x58>)
 80012a6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80012ae:	193a      	adds	r2, r7, r4
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	0011      	movs	r1, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	f000 ff47 	bl	8002148 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2007      	movs	r0, #7
 80012c0:	f000 ff10 	bl	80020e4 <HAL_NVIC_SetPriority>
  	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80012c4:	2007      	movs	r0, #7
 80012c6:	f000 ff22 	bl	800210e <HAL_NVIC_EnableIRQ>
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b009      	add	sp, #36	; 0x24
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	10210000 	.word	0x10210000

080012d8 <RetrieveDHT>:

static void RetrieveDHT(dht_t* dht)
{	
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	b08d      	sub	sp, #52	; 0x34
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	uint16_t humidity = 0, temperature = 0;
 80012e0:	252c      	movs	r5, #44	; 0x2c
 80012e2:	197b      	adds	r3, r7, r5
 80012e4:	2200      	movs	r2, #0
 80012e6:	801a      	strh	r2, [r3, #0]
 80012e8:	262a      	movs	r6, #42	; 0x2a
 80012ea:	19bb      	adds	r3, r7, r6
 80012ec:	2200      	movs	r2, #0
 80012ee:	801a      	strh	r2, [r3, #0]

	DHT_StartTransmission(dht);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7ff f9b0 	bl	8000658 <DHT_StartTransmission>
	uint8_t response = DHT_CheckResponse(dht);	 
 80012f8:	232f      	movs	r3, #47	; 0x2f
 80012fa:	18fc      	adds	r4, r7, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff f9c7 	bl	8000692 <DHT_CheckResponse>
 8001304:	0003      	movs	r3, r0
 8001306:	7023      	strb	r3, [r4, #0]

	if(response == 0)
 8001308:	232f      	movs	r3, #47	; 0x2f
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d000      	beq.n	8001314 <RetrieveDHT+0x3c>
 8001312:	e08f      	b.n	8001434 <RetrieveDHT+0x15c>
	{
		int8_t success = DHT_ReadData(dht, &humidity, &temperature);
 8001314:	19ba      	adds	r2, r7, r6
 8001316:	1979      	adds	r1, r7, r5
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	0018      	movs	r0, r3
 800131c:	f7ff f9e9 	bl	80006f2 <DHT_ReadData>
 8001320:	0003      	movs	r3, r0
 8001322:	001a      	movs	r2, r3
 8001324:	212e      	movs	r1, #46	; 0x2e
 8001326:	187b      	adds	r3, r7, r1
 8001328:	701a      	strb	r2, [r3, #0]
		if(success == 0)
 800132a:	187b      	adds	r3, r7, r1
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b25b      	sxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d165      	bne.n	8001400 <RetrieveDHT+0x128>
		{
			UT_printf("\n\n\r%s:\n\r", dht->name);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	4b5f      	ldr	r3, [pc, #380]	; (80014b8 <RetrieveDHT+0x1e0>)
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f000 fd0b 	bl	8001d58 <UT_printf>
			UT_printf("Humidity: %d.%d%%\n\r", humidity / 10, humidity % 10);
 8001342:	197b      	adds	r3, r7, r5
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	210a      	movs	r1, #10
 8001348:	0018      	movs	r0, r3
 800134a:	f7fe feef 	bl	800012c <__udivsi3>
 800134e:	0003      	movs	r3, r0
 8001350:	b29b      	uxth	r3, r3
 8001352:	001c      	movs	r4, r3
 8001354:	197b      	adds	r3, r7, r5
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	210a      	movs	r1, #10
 800135a:	0018      	movs	r0, r3
 800135c:	f7fe ff6c 	bl	8000238 <__aeabi_uidivmod>
 8001360:	000b      	movs	r3, r1
 8001362:	b29b      	uxth	r3, r3
 8001364:	001a      	movs	r2, r3
 8001366:	4b55      	ldr	r3, [pc, #340]	; (80014bc <RetrieveDHT+0x1e4>)
 8001368:	0021      	movs	r1, r4
 800136a:	0018      	movs	r0, r3
 800136c:	f000 fcf4 	bl	8001d58 <UT_printf>
			UT_printf("Temperature: %d.%d\n\r", temperature / 10, temperature % 10);	
 8001370:	19bb      	adds	r3, r7, r6
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	210a      	movs	r1, #10
 8001376:	0018      	movs	r0, r3
 8001378:	f7fe fed8 	bl	800012c <__udivsi3>
 800137c:	0003      	movs	r3, r0
 800137e:	b29b      	uxth	r3, r3
 8001380:	001c      	movs	r4, r3
 8001382:	19bb      	adds	r3, r7, r6
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	210a      	movs	r1, #10
 8001388:	0018      	movs	r0, r3
 800138a:	f7fe ff55 	bl	8000238 <__aeabi_uidivmod>
 800138e:	000b      	movs	r3, r1
 8001390:	b29b      	uxth	r3, r3
 8001392:	001a      	movs	r2, r3
 8001394:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <RetrieveDHT+0x1e8>)
 8001396:	0021      	movs	r1, r4
 8001398:	0018      	movs	r0, r3
 800139a:	f000 fcdd 	bl	8001d58 <UT_printf>
			LCD_ClearDisplay();
 800139e:	f7ff fcaa 	bl	8000cf6 <LCD_ClearDisplay>
			LCD_printf("Humidity: %d.%d%%", humidity / 10, humidity % 10);
 80013a2:	197b      	adds	r3, r7, r5
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	210a      	movs	r1, #10
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7fe febf 	bl	800012c <__udivsi3>
 80013ae:	0003      	movs	r3, r0
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	001c      	movs	r4, r3
 80013b4:	197b      	adds	r3, r7, r5
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	210a      	movs	r1, #10
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7fe ff3c 	bl	8000238 <__aeabi_uidivmod>
 80013c0:	000b      	movs	r3, r1
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	001a      	movs	r2, r3
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <RetrieveDHT+0x1ec>)
 80013c8:	0021      	movs	r1, r4
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7ff fd4a 	bl	8000e64 <LCD_printf>
			LCD_printf("Temp.: %d.%dC", temperature / 10, temperature % 10);
 80013d0:	19bb      	adds	r3, r7, r6
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	210a      	movs	r1, #10
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7fe fea8 	bl	800012c <__udivsi3>
 80013dc:	0003      	movs	r3, r0
 80013de:	b29b      	uxth	r3, r3
 80013e0:	001c      	movs	r4, r3
 80013e2:	19bb      	adds	r3, r7, r6
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	210a      	movs	r1, #10
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7fe ff25 	bl	8000238 <__aeabi_uidivmod>
 80013ee:	000b      	movs	r3, r1
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	001a      	movs	r2, r3
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <RetrieveDHT+0x1f0>)
 80013f6:	0021      	movs	r1, r4
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff fd33 	bl	8000e64 <LCD_printf>
		UT_PrintMsg(buffer);
		LCD_ClearDisplay();		
		LCD_printf("%s", dht->name);
		LCD_printf("Not high 120us!");
	}
}
 80013fe:	e056      	b.n	80014ae <RetrieveDHT+0x1d6>
			snprintf(buffer, 32, "\n%s checksum wrong!\n", dht->name);				
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4a31      	ldr	r2, [pc, #196]	; (80014cc <RetrieveDHT+0x1f4>)
 8001406:	2408      	movs	r4, #8
 8001408:	1938      	adds	r0, r7, r4
 800140a:	2120      	movs	r1, #32
 800140c:	f003 f844 	bl	8004498 <sniprintf>
			UT_PrintMsg(buffer);
 8001410:	193b      	adds	r3, r7, r4
 8001412:	0018      	movs	r0, r3
 8001414:	f000 fc8a 	bl	8001d2c <UT_PrintMsg>
			LCD_ClearDisplay();	
 8001418:	f7ff fc6d 	bl	8000cf6 <LCD_ClearDisplay>
			LCD_printf("%s", dht->name);			
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <RetrieveDHT+0x1f8>)
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff fd1d 	bl	8000e64 <LCD_printf>
			LCD_printf("Checksum wrong!");
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <RetrieveDHT+0x1fc>)
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff fd19 	bl	8000e64 <LCD_printf>
}
 8001432:	e03c      	b.n	80014ae <RetrieveDHT+0x1d6>
	else if(response == 1)
 8001434:	232f      	movs	r3, #47	; 0x2f
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d119      	bne.n	8001472 <RetrieveDHT+0x19a>
		snprintf(buffer, 32, "\n%s not low 40us!\n", dht->name);				
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	4a25      	ldr	r2, [pc, #148]	; (80014d8 <RetrieveDHT+0x200>)
 8001444:	2408      	movs	r4, #8
 8001446:	1938      	adds	r0, r7, r4
 8001448:	2120      	movs	r1, #32
 800144a:	f003 f825 	bl	8004498 <sniprintf>
		UT_PrintMsg(buffer);
 800144e:	193b      	adds	r3, r7, r4
 8001450:	0018      	movs	r0, r3
 8001452:	f000 fc6b 	bl	8001d2c <UT_PrintMsg>
		LCD_ClearDisplay();	
 8001456:	f7ff fc4e 	bl	8000cf6 <LCD_ClearDisplay>
		LCD_printf("%s", dht->name);		
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <RetrieveDHT+0x1f8>)
 8001460:	0011      	movs	r1, r2
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff fcfe 	bl	8000e64 <LCD_printf>
		LCD_printf("Not low 40us!");				
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <RetrieveDHT+0x204>)
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff fcfa 	bl	8000e64 <LCD_printf>
}
 8001470:	e01d      	b.n	80014ae <RetrieveDHT+0x1d6>
	else if(response == 2)
 8001472:	232f      	movs	r3, #47	; 0x2f
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d118      	bne.n	80014ae <RetrieveDHT+0x1d6>
		snprintf(buffer, 32, "\n%s not high 120us!\n", dht->name);				
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <RetrieveDHT+0x208>)
 8001482:	2408      	movs	r4, #8
 8001484:	1938      	adds	r0, r7, r4
 8001486:	2120      	movs	r1, #32
 8001488:	f003 f806 	bl	8004498 <sniprintf>
		UT_PrintMsg(buffer);
 800148c:	193b      	adds	r3, r7, r4
 800148e:	0018      	movs	r0, r3
 8001490:	f000 fc4c 	bl	8001d2c <UT_PrintMsg>
		LCD_ClearDisplay();		
 8001494:	f7ff fc2f 	bl	8000cf6 <LCD_ClearDisplay>
		LCD_printf("%s", dht->name);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <RetrieveDHT+0x1f8>)
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff fcdf 	bl	8000e64 <LCD_printf>
		LCD_printf("Not high 120us!");
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <RetrieveDHT+0x20c>)
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff fcdb 	bl	8000e64 <LCD_printf>
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b00d      	add	sp, #52	; 0x34
 80014b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	08004e5c 	.word	0x08004e5c
 80014bc:	08004e68 	.word	0x08004e68
 80014c0:	08004e7c 	.word	0x08004e7c
 80014c4:	08004e94 	.word	0x08004e94
 80014c8:	08004ea8 	.word	0x08004ea8
 80014cc:	08004eb8 	.word	0x08004eb8
 80014d0:	08004ed0 	.word	0x08004ed0
 80014d4:	08004ed4 	.word	0x08004ed4
 80014d8:	08004ee4 	.word	0x08004ee4
 80014dc:	08004ef8 	.word	0x08004ef8
 80014e0:	08004f08 	.word	0x08004f08
 80014e4:	08004f20 	.word	0x08004f20

080014e8 <ProcessIRSignal>:
		UT_PrintMsg(buffer);			
	}
}

static void ProcessIRSignal(uint32_t signal)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	UT_printf("\n\r0x%08x\n\r", signal);
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <ProcessIRSignal+0x104>)
 80014f4:	0011      	movs	r1, r2
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 fc2e 	bl	8001d58 <UT_printf>

	switch(signal)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3c      	ldr	r2, [pc, #240]	; (80015f0 <ProcessIRSignal+0x108>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d04e      	beq.n	80015a2 <ProcessIRSignal+0xba>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a3a      	ldr	r2, [pc, #232]	; (80015f0 <ProcessIRSignal+0x108>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d900      	bls.n	800150e <ProcessIRSignal+0x26>
 800150c:	e069      	b.n	80015e2 <ProcessIRSignal+0xfa>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a38      	ldr	r2, [pc, #224]	; (80015f4 <ProcessIRSignal+0x10c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d055      	beq.n	80015c2 <ProcessIRSignal+0xda>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a36      	ldr	r2, [pc, #216]	; (80015f4 <ProcessIRSignal+0x10c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d900      	bls.n	8001520 <ProcessIRSignal+0x38>
 800151e:	e060      	b.n	80015e2 <ProcessIRSignal+0xfa>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a35      	ldr	r2, [pc, #212]	; (80015f8 <ProcessIRSignal+0x110>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d048      	beq.n	80015ba <ProcessIRSignal+0xd2>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a33      	ldr	r2, [pc, #204]	; (80015f8 <ProcessIRSignal+0x110>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d858      	bhi.n	80015e2 <ProcessIRSignal+0xfa>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a32      	ldr	r2, [pc, #200]	; (80015fc <ProcessIRSignal+0x114>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d048      	beq.n	80015ca <ProcessIRSignal+0xe2>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a30      	ldr	r2, [pc, #192]	; (80015fc <ProcessIRSignal+0x114>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d850      	bhi.n	80015e2 <ProcessIRSignal+0xfa>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a2f      	ldr	r2, [pc, #188]	; (8001600 <ProcessIRSignal+0x118>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d024      	beq.n	8001592 <ProcessIRSignal+0xaa>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a2d      	ldr	r2, [pc, #180]	; (8001600 <ProcessIRSignal+0x118>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d848      	bhi.n	80015e2 <ProcessIRSignal+0xfa>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a2c      	ldr	r2, [pc, #176]	; (8001604 <ProcessIRSignal+0x11c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d040      	beq.n	80015da <ProcessIRSignal+0xf2>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a2a      	ldr	r2, [pc, #168]	; (8001604 <ProcessIRSignal+0x11c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d840      	bhi.n	80015e2 <ProcessIRSignal+0xfa>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a29      	ldr	r2, [pc, #164]	; (8001608 <ProcessIRSignal+0x120>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d034      	beq.n	80015d2 <ProcessIRSignal+0xea>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a27      	ldr	r2, [pc, #156]	; (8001608 <ProcessIRSignal+0x120>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d838      	bhi.n	80015e2 <ProcessIRSignal+0xfa>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a26      	ldr	r2, [pc, #152]	; (800160c <ProcessIRSignal+0x124>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d010      	beq.n	800159a <ProcessIRSignal+0xb2>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a24      	ldr	r2, [pc, #144]	; (800160c <ProcessIRSignal+0x124>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d830      	bhi.n	80015e2 <ProcessIRSignal+0xfa>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a23      	ldr	r2, [pc, #140]	; (8001610 <ProcessIRSignal+0x128>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d014      	beq.n	80015b2 <ProcessIRSignal+0xca>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a22      	ldr	r2, [pc, #136]	; (8001614 <ProcessIRSignal+0x12c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d00c      	beq.n	80015aa <ProcessIRSignal+0xc2>
		case (0xFF9867):
			Segment_Display('0');
			break;

		default:
			break;
 8001590:	e027      	b.n	80015e2 <ProcessIRSignal+0xfa>
			Segment_Display('1');
 8001592:	2031      	movs	r0, #49	; 0x31
 8001594:	f000 f960 	bl	8001858 <Segment_Display>
			break;
 8001598:	e024      	b.n	80015e4 <ProcessIRSignal+0xfc>
			Segment_Display('2');
 800159a:	2032      	movs	r0, #50	; 0x32
 800159c:	f000 f95c 	bl	8001858 <Segment_Display>
			break;			
 80015a0:	e020      	b.n	80015e4 <ProcessIRSignal+0xfc>
			Segment_Display('3');
 80015a2:	2033      	movs	r0, #51	; 0x33
 80015a4:	f000 f958 	bl	8001858 <Segment_Display>
			break;
 80015a8:	e01c      	b.n	80015e4 <ProcessIRSignal+0xfc>
			Segment_Display('4');
 80015aa:	2034      	movs	r0, #52	; 0x34
 80015ac:	f000 f954 	bl	8001858 <Segment_Display>
			break;
 80015b0:	e018      	b.n	80015e4 <ProcessIRSignal+0xfc>
			Segment_Display('5');
 80015b2:	2035      	movs	r0, #53	; 0x35
 80015b4:	f000 f950 	bl	8001858 <Segment_Display>
			break;
 80015b8:	e014      	b.n	80015e4 <ProcessIRSignal+0xfc>
			Segment_Display('6');
 80015ba:	2036      	movs	r0, #54	; 0x36
 80015bc:	f000 f94c 	bl	8001858 <Segment_Display>
			break;
 80015c0:	e010      	b.n	80015e4 <ProcessIRSignal+0xfc>
			Segment_Display('7');
 80015c2:	2037      	movs	r0, #55	; 0x37
 80015c4:	f000 f948 	bl	8001858 <Segment_Display>
			break;
 80015c8:	e00c      	b.n	80015e4 <ProcessIRSignal+0xfc>
			Segment_Display('8');
 80015ca:	2038      	movs	r0, #56	; 0x38
 80015cc:	f000 f944 	bl	8001858 <Segment_Display>
			break;
 80015d0:	e008      	b.n	80015e4 <ProcessIRSignal+0xfc>
			Segment_Display('9');
 80015d2:	2039      	movs	r0, #57	; 0x39
 80015d4:	f000 f940 	bl	8001858 <Segment_Display>
			break;
 80015d8:	e004      	b.n	80015e4 <ProcessIRSignal+0xfc>
			Segment_Display('0');
 80015da:	2030      	movs	r0, #48	; 0x30
 80015dc:	f000 f93c 	bl	8001858 <Segment_Display>
			break;
 80015e0:	e000      	b.n	80015e4 <ProcessIRSignal+0xfc>
			break;
 80015e2:	46c0      	nop			; (mov r8, r8)
	}
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	08004f30 	.word	0x08004f30
 80015f0:	00ffe21d 	.word	0x00ffe21d
 80015f4:	00ffe01f 	.word	0x00ffe01f
 80015f8:	00ffc23d 	.word	0x00ffc23d
 80015fc:	00ffa857 	.word	0x00ffa857
 8001600:	00ffa25d 	.word	0x00ffa25d
 8001604:	00ff9867 	.word	0x00ff9867
 8001608:	00ff906f 	.word	0x00ff906f
 800160c:	00ff629d 	.word	0x00ff629d
 8001610:	00ff02fd 	.word	0x00ff02fd
 8001614:	00ff22dd 	.word	0x00ff22dd

08001618 <HAL_TIM_PeriodElapsedCallback>:

//Timed interupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{	
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	//Toggle Onboard-LED (1 sec. on and 1 sec. off)
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001620:	23a0      	movs	r3, #160	; 0xa0
 8001622:	05db      	lsls	r3, r3, #23
 8001624:	2120      	movs	r1, #32
 8001626:	0018      	movs	r0, r3
 8001628:	f000 ff46 	bl	80024b8 <HAL_GPIO_TogglePin>
	
	//Reset external interrupt status
	pendingEXTI = 0;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]

	//If 4 seconds elapsed -> retrieve onBoard-DHT22
	if(irsr_counter == 4)
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b04      	cmp	r3, #4
 8001638:	d103      	bne.n	8001642 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		RetrieveDHT(&dht_OnBoard);
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff fe4b 	bl	80012d8 <RetrieveDHT>
	}		

	//If 8 seconds elapsed -> retrieve extern-DHT22	
	if(irsr_counter == 8)
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b08      	cmp	r3, #8
 8001648:	d106      	bne.n	8001658 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		RetrieveDHT(&dht_Extern);
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff fe43 	bl	80012d8 <RetrieveDHT>
		irsr_counter = 0;
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
	}

	irsr_counter++;	
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001662:	701a      	strb	r2, [r3, #0]
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200000b8 	.word	0x200000b8
 8001670:	200000ac 	.word	0x200000ac
 8001674:	20000094 	.word	0x20000094
 8001678:	200000a0 	.word	0x200000a0

0800167c <HAL_GPIO_EXTI_Callback>:

//External interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	0002      	movs	r2, r0
 8001684:	1dbb      	adds	r3, r7, #6
 8001686:	801a      	strh	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	UNUSED(GPIO_Pin);

	//If there is no pending external interrupt
	if(pendingEXTI == 0)
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_GPIO_EXTI_Callback+0x60>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d118      	bne.n	80016c6 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		//Set pending external interrupt status
		pendingEXTI = 1;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_GPIO_EXTI_Callback+0x60>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]

		uint8_t response = IR_CheckForTransmission(&ir);
 800169a:	250f      	movs	r5, #15
 800169c:	197c      	adds	r4, r7, r5
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x64>)
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff f8c6 	bl	8000832 <IR_CheckForTransmission>
 80016a6:	0003      	movs	r3, r0
 80016a8:	7023      	strb	r3, [r4, #0]
		if(response == 0)
 80016aa:	197b      	adds	r3, r7, r5
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_GPIO_EXTI_Callback+0x4a>
		{
			uint32_t signal = IR_ReceiveSignal(&ir);
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x64>)
 80016b4:	0018      	movs	r0, r3
 80016b6:	f7ff f8e3 	bl	8000880 <IR_ReceiveSignal>
 80016ba:	0003      	movs	r3, r0
 80016bc:	60bb      	str	r3, [r7, #8]
			ProcessIRSignal(signal);
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff ff11 	bl	80014e8 <ProcessIRSignal>
		}		
	}
	UT_Delay_MicroSeconds(10000); //To debounce remote control buttons
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x68>)
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 fb6f 	bl	8001dac <UT_Delay_MicroSeconds>
  __ASM volatile ("cpsie i" : : : "memory");
 80016ce:	b662      	cpsie	i
}
 80016d0:	46c0      	nop			; (mov r8, r8)
	__enable_irq();
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bdb0      	pop	{r4, r5, r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	200000b8 	.word	0x200000b8
 80016e0:	200000b0 	.word	0x200000b0
 80016e4:	00002710 	.word	0x00002710

080016e8 <main>:

int main(void)
{		
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	//Init stuff
	HAL_Init();
 80016ec:	f000 fbba 	bl	8001e64 <HAL_Init>
	SystemClock_Config();
 80016f0:	f7ff fbe0 	bl	8000eb4 <SystemClock_Config>
	Port_Init();
 80016f4:	f7ff fd58 	bl	80011a8 <Port_Init>
	MX_TIM2_Init();
 80016f8:	f7ff fc8e 	bl	8001018 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 80016fc:	f7ff fc58 	bl	8000fb0 <MX_USART2_UART_Init>
	MX_TIM21_Init();	
 8001700:	f7ff fcf0 	bl	80010e4 <MX_TIM21_Init>

	//Start timers
	HAL_TIM_Base_Start_IT(&htim2);	
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <main+0xa0>)
 8001706:	0018      	movs	r0, r3
 8001708:	f001 fe58 	bl	80033bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim21);
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <main+0xa4>)
 800170e:	0018      	movs	r0, r3
 8001710:	f001 fe10 	bl	8003334 <HAL_TIM_Base_Start>

	//LCD stuff
	HAL_Delay(30);
 8001714:	201e      	movs	r0, #30
 8001716:	f000 fc15 	bl	8001f44 <HAL_Delay>
	LCD_InitPins();
 800171a:	f7ff fa6f 	bl	8000bfc <LCD_InitPins>
	LCD_Set8BitMode();
 800171e:	f7ff fac5 	bl	8000cac <LCD_Set8BitMode>
	LCD_TurnDisplayOn();
 8001722:	f7ff fb32 	bl	8000d8a <LCD_TurnDisplayOn>
	LCD_ClearDisplay();
 8001726:	f7ff fae6 	bl	8000cf6 <LCD_ClearDisplay>
	LCD_ReturnHome();
 800172a:	f7ff fb09 	bl	8000d40 <LCD_ReturnHome>
	
	//DHT stuff
	dht_OnBoard.port = GPIOA;
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <main+0xa8>)
 8001730:	22a0      	movs	r2, #160	; 0xa0
 8001732:	05d2      	lsls	r2, r2, #23
 8001734:	601a      	str	r2, [r3, #0]
	dht_OnBoard.pin = GPIO_PIN_6;
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <main+0xa8>)
 8001738:	2240      	movs	r2, #64	; 0x40
 800173a:	809a      	strh	r2, [r3, #4]
	dht_OnBoard.name = "DHT22 - OnBoard";
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <main+0xa8>)
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <main+0xac>)
 8001740:	609a      	str	r2, [r3, #8]

	dht_Extern.port = GPIOA;
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <main+0xb0>)
 8001744:	22a0      	movs	r2, #160	; 0xa0
 8001746:	05d2      	lsls	r2, r2, #23
 8001748:	601a      	str	r2, [r3, #0]
	dht_Extern.pin = GPIO_PIN_7;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <main+0xb0>)
 800174c:	2280      	movs	r2, #128	; 0x80
 800174e:	809a      	strh	r2, [r3, #4]
	dht_Extern.name = "DHT22 - Extern";
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <main+0xb0>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <main+0xb4>)
 8001754:	609a      	str	r2, [r3, #8]

	//IR-Receiver stuff
	ir.port = GPIOA;
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <main+0xb8>)
 8001758:	22a0      	movs	r2, #160	; 0xa0
 800175a:	05d2      	lsls	r2, r2, #23
 800175c:	601a      	str	r2, [r3, #0]
	ir.pin = GPIO_PIN_9;	
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <main+0xb8>)
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	809a      	strh	r2, [r3, #4]
	Port_As_Interrupt_Triggered(GPIOA, GPIO_PIN_8);
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	005a      	lsls	r2, r3, #1
 800176a:	23a0      	movs	r3, #160	; 0xa0
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	0011      	movs	r1, r2
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff fd83 	bl	800127c <Port_As_Interrupt_Triggered>
	IR_Init(&ir);
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <main+0xb8>)
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff f834 	bl	80007e6 <IR_Init>

	//7-Segment stuff
	Segment_Init();
 800177e:	f000 f849 	bl	8001814 <Segment_Init>
	Segment_Reset();
 8001782:	f000 f80f 	bl	80017a4 <Segment_Reset>

	while (1)
 8001786:	e7fe      	b.n	8001786 <main+0x9e>
 8001788:	200000c8 	.word	0x200000c8
 800178c:	2000018c 	.word	0x2000018c
 8001790:	20000094 	.word	0x20000094
 8001794:	08004f3c 	.word	0x08004f3c
 8001798:	200000a0 	.word	0x200000a0
 800179c:	08004f4c 	.word	0x08004f4c
 80017a0:	200000b0 	.word	0x200000b0

080017a4 <Segment_Reset>:
#define SEGMENT_DP GPIOC, GPIO_PIN_7 

// ----- Private functions ----- 

void Segment_Reset()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SEGMENT_A,  GPIO_PIN_SET);
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <Segment_Reset+0x6c>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	2101      	movs	r1, #1
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 fe65 	bl	800247e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEGMENT_B,  GPIO_PIN_SET);
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <Segment_Reset+0x6c>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	2102      	movs	r1, #2
 80017ba:	0018      	movs	r0, r3
 80017bc:	f000 fe5f 	bl	800247e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEGMENT_C,  GPIO_PIN_SET);
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <Segment_Reset+0x6c>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	2104      	movs	r1, #4
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 fe59 	bl	800247e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEGMENT_D,  GPIO_PIN_SET);
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <Segment_Reset+0x6c>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	2108      	movs	r1, #8
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 fe53 	bl	800247e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEGMENT_E,  GPIO_PIN_SET);
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <Segment_Reset+0x6c>)
 80017da:	2201      	movs	r2, #1
 80017dc:	2110      	movs	r1, #16
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 fe4d 	bl	800247e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEGMENT_F,  GPIO_PIN_SET);
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <Segment_Reset+0x6c>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	2120      	movs	r1, #32
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 fe47 	bl	800247e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEGMENT_G,  GPIO_PIN_SET);
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <Segment_Reset+0x6c>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	2140      	movs	r1, #64	; 0x40
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 fe41 	bl	800247e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEGMENT_DP, GPIO_PIN_SET);
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <Segment_Reset+0x6c>)
 80017fe:	2201      	movs	r2, #1
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	0018      	movs	r0, r3
 8001804:	f000 fe3b 	bl	800247e <HAL_GPIO_WritePin>
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	50000800 	.word	0x50000800

08001814 <Segment_Init>:

// ----- Public Functions -----

void Segment_Init()
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
    //Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	0018      	movs	r0, r3
 800181e:	2314      	movs	r3, #20
 8001820:	001a      	movs	r2, r3
 8001822:	2100      	movs	r1, #0
 8001824:	f002 fe30 	bl	8004488 <memset>

    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	22ff      	movs	r2, #255	; 0xff
 800182c:	601a      	str	r2, [r3, #0]
             GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2201      	movs	r2, #1
 8001832:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	4a04      	ldr	r2, [pc, #16]	; (8001854 <Segment_Init+0x40>)
 8001844:	0019      	movs	r1, r3
 8001846:	0010      	movs	r0, r2
 8001848:	f000 fc7e 	bl	8002148 <HAL_GPIO_Init>
}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b006      	add	sp, #24
 8001852:	bd80      	pop	{r7, pc}
 8001854:	50000800 	.word	0x50000800

08001858 <Segment_Display>:

void Segment_Display(char character)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	0002      	movs	r2, r0
 8001860:	1dfb      	adds	r3, r7, #7
 8001862:	701a      	strb	r2, [r3, #0]
    Segment_Reset();
 8001864:	f7ff ff9e 	bl	80017a4 <Segment_Reset>

    switch(character)
 8001868:	1dfb      	adds	r3, r7, #7
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3b30      	subs	r3, #48	; 0x30
 800186e:	2b09      	cmp	r3, #9
 8001870:	d900      	bls.n	8001874 <Segment_Display+0x1c>
 8001872:	e134      	b.n	8001ade <Segment_Display+0x286>
 8001874:	009a      	lsls	r2, r3, #2
 8001876:	4b9c      	ldr	r3, [pc, #624]	; (8001ae8 <Segment_Display+0x290>)
 8001878:	18d3      	adds	r3, r2, r3
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	469f      	mov	pc, r3
	{
		case('1'):
            HAL_GPIO_WritePin(SEGMENT_B,  GPIO_PIN_RESET);
 800187e:	4b9b      	ldr	r3, [pc, #620]	; (8001aec <Segment_Display+0x294>)
 8001880:	2200      	movs	r2, #0
 8001882:	2102      	movs	r1, #2
 8001884:	0018      	movs	r0, r3
 8001886:	f000 fdfa 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_C,  GPIO_PIN_RESET);
 800188a:	4b98      	ldr	r3, [pc, #608]	; (8001aec <Segment_Display+0x294>)
 800188c:	2200      	movs	r2, #0
 800188e:	2104      	movs	r1, #4
 8001890:	0018      	movs	r0, r3
 8001892:	f000 fdf4 	bl	800247e <HAL_GPIO_WritePin>
			break;
 8001896:	e123      	b.n	8001ae0 <Segment_Display+0x288>

        case('2'):
            HAL_GPIO_WritePin(SEGMENT_A,  GPIO_PIN_RESET);
 8001898:	4b94      	ldr	r3, [pc, #592]	; (8001aec <Segment_Display+0x294>)
 800189a:	2200      	movs	r2, #0
 800189c:	2101      	movs	r1, #1
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 fded 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_B,  GPIO_PIN_RESET);
 80018a4:	4b91      	ldr	r3, [pc, #580]	; (8001aec <Segment_Display+0x294>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	2102      	movs	r1, #2
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 fde7 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_D,  GPIO_PIN_RESET);
 80018b0:	4b8e      	ldr	r3, [pc, #568]	; (8001aec <Segment_Display+0x294>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	2108      	movs	r1, #8
 80018b6:	0018      	movs	r0, r3
 80018b8:	f000 fde1 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_E,  GPIO_PIN_RESET);
 80018bc:	4b8b      	ldr	r3, [pc, #556]	; (8001aec <Segment_Display+0x294>)
 80018be:	2200      	movs	r2, #0
 80018c0:	2110      	movs	r1, #16
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 fddb 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_G,  GPIO_PIN_RESET);
 80018c8:	4b88      	ldr	r3, [pc, #544]	; (8001aec <Segment_Display+0x294>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	2140      	movs	r1, #64	; 0x40
 80018ce:	0018      	movs	r0, r3
 80018d0:	f000 fdd5 	bl	800247e <HAL_GPIO_WritePin>
			break;
 80018d4:	e104      	b.n	8001ae0 <Segment_Display+0x288>

        case('3'):
            HAL_GPIO_WritePin(SEGMENT_A,  GPIO_PIN_RESET);
 80018d6:	4b85      	ldr	r3, [pc, #532]	; (8001aec <Segment_Display+0x294>)
 80018d8:	2200      	movs	r2, #0
 80018da:	2101      	movs	r1, #1
 80018dc:	0018      	movs	r0, r3
 80018de:	f000 fdce 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_B,  GPIO_PIN_RESET);
 80018e2:	4b82      	ldr	r3, [pc, #520]	; (8001aec <Segment_Display+0x294>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	2102      	movs	r1, #2
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 fdc8 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_C,  GPIO_PIN_RESET);
 80018ee:	4b7f      	ldr	r3, [pc, #508]	; (8001aec <Segment_Display+0x294>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	2104      	movs	r1, #4
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 fdc2 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_D,  GPIO_PIN_RESET);
 80018fa:	4b7c      	ldr	r3, [pc, #496]	; (8001aec <Segment_Display+0x294>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	2108      	movs	r1, #8
 8001900:	0018      	movs	r0, r3
 8001902:	f000 fdbc 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_G,  GPIO_PIN_RESET);
 8001906:	4b79      	ldr	r3, [pc, #484]	; (8001aec <Segment_Display+0x294>)
 8001908:	2200      	movs	r2, #0
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	0018      	movs	r0, r3
 800190e:	f000 fdb6 	bl	800247e <HAL_GPIO_WritePin>
			break;
 8001912:	e0e5      	b.n	8001ae0 <Segment_Display+0x288>

        case('4'):
            HAL_GPIO_WritePin(SEGMENT_B,  GPIO_PIN_RESET);
 8001914:	4b75      	ldr	r3, [pc, #468]	; (8001aec <Segment_Display+0x294>)
 8001916:	2200      	movs	r2, #0
 8001918:	2102      	movs	r1, #2
 800191a:	0018      	movs	r0, r3
 800191c:	f000 fdaf 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_C,  GPIO_PIN_RESET);
 8001920:	4b72      	ldr	r3, [pc, #456]	; (8001aec <Segment_Display+0x294>)
 8001922:	2200      	movs	r2, #0
 8001924:	2104      	movs	r1, #4
 8001926:	0018      	movs	r0, r3
 8001928:	f000 fda9 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_F,  GPIO_PIN_RESET);
 800192c:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <Segment_Display+0x294>)
 800192e:	2200      	movs	r2, #0
 8001930:	2120      	movs	r1, #32
 8001932:	0018      	movs	r0, r3
 8001934:	f000 fda3 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_G,  GPIO_PIN_RESET);
 8001938:	4b6c      	ldr	r3, [pc, #432]	; (8001aec <Segment_Display+0x294>)
 800193a:	2200      	movs	r2, #0
 800193c:	2140      	movs	r1, #64	; 0x40
 800193e:	0018      	movs	r0, r3
 8001940:	f000 fd9d 	bl	800247e <HAL_GPIO_WritePin>
			break;
 8001944:	e0cc      	b.n	8001ae0 <Segment_Display+0x288>

        case('5'):
            HAL_GPIO_WritePin(SEGMENT_A,  GPIO_PIN_RESET);
 8001946:	4b69      	ldr	r3, [pc, #420]	; (8001aec <Segment_Display+0x294>)
 8001948:	2200      	movs	r2, #0
 800194a:	2101      	movs	r1, #1
 800194c:	0018      	movs	r0, r3
 800194e:	f000 fd96 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_C,  GPIO_PIN_RESET);
 8001952:	4b66      	ldr	r3, [pc, #408]	; (8001aec <Segment_Display+0x294>)
 8001954:	2200      	movs	r2, #0
 8001956:	2104      	movs	r1, #4
 8001958:	0018      	movs	r0, r3
 800195a:	f000 fd90 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_D,  GPIO_PIN_RESET);
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <Segment_Display+0x294>)
 8001960:	2200      	movs	r2, #0
 8001962:	2108      	movs	r1, #8
 8001964:	0018      	movs	r0, r3
 8001966:	f000 fd8a 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_F,  GPIO_PIN_RESET);
 800196a:	4b60      	ldr	r3, [pc, #384]	; (8001aec <Segment_Display+0x294>)
 800196c:	2200      	movs	r2, #0
 800196e:	2120      	movs	r1, #32
 8001970:	0018      	movs	r0, r3
 8001972:	f000 fd84 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_G,  GPIO_PIN_RESET);
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <Segment_Display+0x294>)
 8001978:	2200      	movs	r2, #0
 800197a:	2140      	movs	r1, #64	; 0x40
 800197c:	0018      	movs	r0, r3
 800197e:	f000 fd7e 	bl	800247e <HAL_GPIO_WritePin>
			break;
 8001982:	e0ad      	b.n	8001ae0 <Segment_Display+0x288>

        case('6'):
            HAL_GPIO_WritePin(SEGMENT_A,  GPIO_PIN_RESET);
 8001984:	4b59      	ldr	r3, [pc, #356]	; (8001aec <Segment_Display+0x294>)
 8001986:	2200      	movs	r2, #0
 8001988:	2101      	movs	r1, #1
 800198a:	0018      	movs	r0, r3
 800198c:	f000 fd77 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_C,  GPIO_PIN_RESET);
 8001990:	4b56      	ldr	r3, [pc, #344]	; (8001aec <Segment_Display+0x294>)
 8001992:	2200      	movs	r2, #0
 8001994:	2104      	movs	r1, #4
 8001996:	0018      	movs	r0, r3
 8001998:	f000 fd71 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_D,  GPIO_PIN_RESET);
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <Segment_Display+0x294>)
 800199e:	2200      	movs	r2, #0
 80019a0:	2108      	movs	r1, #8
 80019a2:	0018      	movs	r0, r3
 80019a4:	f000 fd6b 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_E,  GPIO_PIN_RESET);
 80019a8:	4b50      	ldr	r3, [pc, #320]	; (8001aec <Segment_Display+0x294>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	2110      	movs	r1, #16
 80019ae:	0018      	movs	r0, r3
 80019b0:	f000 fd65 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_F,  GPIO_PIN_RESET);
 80019b4:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <Segment_Display+0x294>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	2120      	movs	r1, #32
 80019ba:	0018      	movs	r0, r3
 80019bc:	f000 fd5f 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_G,  GPIO_PIN_RESET);
 80019c0:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <Segment_Display+0x294>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	2140      	movs	r1, #64	; 0x40
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 fd59 	bl	800247e <HAL_GPIO_WritePin>
			break;
 80019cc:	e088      	b.n	8001ae0 <Segment_Display+0x288>

        case('7'):
            HAL_GPIO_WritePin(SEGMENT_A,  GPIO_PIN_RESET);
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <Segment_Display+0x294>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	2101      	movs	r1, #1
 80019d4:	0018      	movs	r0, r3
 80019d6:	f000 fd52 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_B,  GPIO_PIN_RESET);
 80019da:	4b44      	ldr	r3, [pc, #272]	; (8001aec <Segment_Display+0x294>)
 80019dc:	2200      	movs	r2, #0
 80019de:	2102      	movs	r1, #2
 80019e0:	0018      	movs	r0, r3
 80019e2:	f000 fd4c 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_C,  GPIO_PIN_RESET);
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <Segment_Display+0x294>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	2104      	movs	r1, #4
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 fd46 	bl	800247e <HAL_GPIO_WritePin>
			break;
 80019f2:	e075      	b.n	8001ae0 <Segment_Display+0x288>

        case('8'):
            HAL_GPIO_WritePin(SEGMENT_A,  GPIO_PIN_RESET);
 80019f4:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <Segment_Display+0x294>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	2101      	movs	r1, #1
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 fd3f 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_B,  GPIO_PIN_RESET);
 8001a00:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <Segment_Display+0x294>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	2102      	movs	r1, #2
 8001a06:	0018      	movs	r0, r3
 8001a08:	f000 fd39 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_C,  GPIO_PIN_RESET);
 8001a0c:	4b37      	ldr	r3, [pc, #220]	; (8001aec <Segment_Display+0x294>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2104      	movs	r1, #4
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 fd33 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_D,  GPIO_PIN_RESET);
 8001a18:	4b34      	ldr	r3, [pc, #208]	; (8001aec <Segment_Display+0x294>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2108      	movs	r1, #8
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f000 fd2d 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_E,  GPIO_PIN_RESET);
 8001a24:	4b31      	ldr	r3, [pc, #196]	; (8001aec <Segment_Display+0x294>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	2110      	movs	r1, #16
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 fd27 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_F,  GPIO_PIN_RESET);
 8001a30:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <Segment_Display+0x294>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	2120      	movs	r1, #32
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 fd21 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_G,  GPIO_PIN_RESET);
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <Segment_Display+0x294>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2140      	movs	r1, #64	; 0x40
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 fd1b 	bl	800247e <HAL_GPIO_WritePin>
			break;
 8001a48:	e04a      	b.n	8001ae0 <Segment_Display+0x288>

        case('9'):
            HAL_GPIO_WritePin(SEGMENT_A,  GPIO_PIN_RESET);
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <Segment_Display+0x294>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2101      	movs	r1, #1
 8001a50:	0018      	movs	r0, r3
 8001a52:	f000 fd14 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_B,  GPIO_PIN_RESET);
 8001a56:	4b25      	ldr	r3, [pc, #148]	; (8001aec <Segment_Display+0x294>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f000 fd0e 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_C,  GPIO_PIN_RESET);
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <Segment_Display+0x294>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	2104      	movs	r1, #4
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f000 fd08 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_D,  GPIO_PIN_RESET);
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <Segment_Display+0x294>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	2108      	movs	r1, #8
 8001a74:	0018      	movs	r0, r3
 8001a76:	f000 fd02 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_F,  GPIO_PIN_RESET);
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <Segment_Display+0x294>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2120      	movs	r1, #32
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 fcfc 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_G,  GPIO_PIN_RESET);
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <Segment_Display+0x294>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2140      	movs	r1, #64	; 0x40
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f000 fcf6 	bl	800247e <HAL_GPIO_WritePin>
			break;
 8001a92:	e025      	b.n	8001ae0 <Segment_Display+0x288>

        case('0'):
            HAL_GPIO_WritePin(SEGMENT_A,  GPIO_PIN_RESET);
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <Segment_Display+0x294>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	2101      	movs	r1, #1
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 fcef 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_B,  GPIO_PIN_RESET);
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <Segment_Display+0x294>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 fce9 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_C,  GPIO_PIN_RESET);
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <Segment_Display+0x294>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f000 fce3 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_D,  GPIO_PIN_RESET);
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <Segment_Display+0x294>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	2108      	movs	r1, #8
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f000 fcdd 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_E,  GPIO_PIN_RESET);
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <Segment_Display+0x294>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2110      	movs	r1, #16
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 fcd7 	bl	800247e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(SEGMENT_F,  GPIO_PIN_RESET);
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <Segment_Display+0x294>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2120      	movs	r1, #32
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f000 fcd1 	bl	800247e <HAL_GPIO_WritePin>
			break;
 8001adc:	e000      	b.n	8001ae0 <Segment_Display+0x288>

		default:
			break;
 8001ade:	46c0      	nop			; (mov r8, r8)
	}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	08004f5c 	.word	0x08004f5c
 8001aec:	50000800 	.word	0x50000800

08001af0 <HAL_MspInit>:
#include "main.h"

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void HAL_MspInit(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_MspInit+0x24>)
 8001af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_MspInit+0x24>)
 8001afa:	2101      	movs	r1, #1
 8001afc:	430a      	orrs	r2, r1
 8001afe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <HAL_MspInit+0x24>)
 8001b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_MspInit+0x24>)
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0549      	lsls	r1, r1, #21
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000

08001b18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	05db      	lsls	r3, r3, #23
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d10e      	bne.n	8001b4a <HAL_TIM_Base_MspInit+0x32>
  {
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_TIM_Base_MspInit+0x50>)
 8001b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_TIM_Base_MspInit+0x50>)
 8001b32:	2101      	movs	r1, #1
 8001b34:	430a      	orrs	r2, r1
 8001b36:	639a      	str	r2, [r3, #56]	; 0x38

    //TIM2 interrupt Init
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	200f      	movs	r0, #15
 8001b3e:	f000 fad1 	bl	80020e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b42:	200f      	movs	r0, #15
 8001b44:	f000 fae3 	bl	800210e <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM21)
  {
    //Peripheral clock enable
    __HAL_RCC_TIM21_CLK_ENABLE();
  }
}
 8001b48:	e00a      	b.n	8001b60 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <HAL_TIM_Base_MspInit+0x54>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d105      	bne.n	8001b60 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_TIM_Base_MspInit+0x50>)
 8001b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_TIM_Base_MspInit+0x50>)
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010800 	.word	0x40010800

08001b70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	240c      	movs	r4, #12
 8001b7a:	193b      	adds	r3, r7, r4
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	2314      	movs	r3, #20
 8001b80:	001a      	movs	r2, r3
 8001b82:	2100      	movs	r1, #0
 8001b84:	f002 fc80 	bl	8004488 <memset>
  if(htim->Instance==TIM2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	05db      	lsls	r3, r3, #23
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d123      	bne.n	8001bdc <HAL_TIM_MspPostInit+0x6c>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_TIM_MspPostInit+0x74>)
 8001b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_TIM_MspPostInit+0x74>)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_TIM_MspPostInit+0x74>)
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]

    //TIM2 GPIO Configuration - PA15 ------> TIM2_CH1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bac:	193b      	adds	r3, r7, r4
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	0212      	lsls	r2, r2, #8
 8001bb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	0021      	movs	r1, r4
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	2202      	movs	r2, #2
 8001bba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	187b      	adds	r3, r7, r1
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	2205      	movs	r2, #5
 8001bcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	187a      	adds	r2, r7, r1
 8001bd0:	23a0      	movs	r3, #160	; 0xa0
 8001bd2:	05db      	lsls	r3, r3, #23
 8001bd4:	0011      	movs	r1, r2
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f000 fab6 	bl	8002148 <HAL_GPIO_Init>
  }
}
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b009      	add	sp, #36	; 0x24
 8001be2:	bd90      	pop	{r4, r7, pc}
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_UART_MspInit>:
    __HAL_RCC_TIM21_CLK_DISABLE();
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	240c      	movs	r4, #12
 8001bf2:	193b      	adds	r3, r7, r4
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	2314      	movs	r3, #20
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	f002 fc44 	bl	8004488 <memset>
  if(huart->Instance==USART2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <HAL_UART_MspInit+0x68>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d11d      	bne.n	8001c46 <HAL_UART_MspInit+0x5e>
  {
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_UART_MspInit+0x6c>)
 8001c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_UART_MspInit+0x6c>)
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	0289      	lsls	r1, r1, #10
 8001c14:	430a      	orrs	r2, r1
 8001c16:	639a      	str	r2, [r3, #56]	; 0x38

    //USART2 GPIO Configuration
    //PA2     ------> USART2_TX
    //PA3     ------> USART2_RX
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c18:	0021      	movs	r1, r4
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	220c      	movs	r2, #12
 8001c1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	2202      	movs	r2, #2
 8001c24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	2204      	movs	r2, #4
 8001c36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	187a      	adds	r2, r7, r1
 8001c3a:	23a0      	movs	r3, #160	; 0xa0
 8001c3c:	05db      	lsls	r3, r3, #23
 8001c3e:	0011      	movs	r1, r2
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 fa81 	bl	8002148 <HAL_GPIO_Init>
  }
}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b009      	add	sp, #36	; 0x24
 8001c4c:	bd90      	pop	{r4, r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40004400 	.word	0x40004400
 8001c54:	40021000 	.word	0x40021000

08001c58 <NMI_Handler>:
#include "stm32l0xx_it.h"

extern TIM_HandleTypeDef htim2;

void NMI_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <NMI_Handler+0x4>

08001c5e <HardFault_Handler>:

  }
}

void HardFault_Handler(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <HardFault_Handler+0x4>

08001c64 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0

}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <PendSV_Handler>:


void PendSV_Handler(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0

}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001c7c:	f000 f946 	bl	8001f0c <HAL_IncTick>
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <EXTI4_15_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l0xx.s).                    */
/******************************************************************************/

void EXTI4_15_IRQHandler(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f000 fc2e 	bl	80024f0 <HAL_GPIO_EXTI_IRQHandler>
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <TIM2_IRQHandler+0x14>)
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f001 fbd6 	bl	8003454 <HAL_TIM_IRQHandler>
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	200000c8 	.word	0x200000c8

08001cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cbc:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <_sbrk+0x5c>)
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <_sbrk+0x60>)
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <_sbrk+0x64>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <_sbrk+0x68>)
 8001cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	18d3      	adds	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d207      	bcs.n	8001cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce4:	f002 fba6 	bl	8004434 <__errno>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	220c      	movs	r2, #12
 8001cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	425b      	negs	r3, r3
 8001cf2:	e009      	b.n	8001d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	18d2      	adds	r2, r2, r3
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <_sbrk+0x64>)
 8001d04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b006      	add	sp, #24
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20005000 	.word	0x20005000
 8001d14:	00000400 	.word	0x00000400
 8001d18:	200000bc 	.word	0x200000bc
 8001d1c:	200001e0 	.word	0x200001e0

08001d20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <UT_PrintMsg>:
#include "utility.h"

void UT_PrintMsg(char* msg)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7fe f9e6 	bl	8000108 <strlen>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	2301      	movs	r3, #1
 8001d42:	425b      	negs	r3, r3
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <UT_PrintMsg+0x28>)
 8001d48:	f001 fef0 	bl	8003b2c <HAL_UART_Transmit>
}
 8001d4c:	46c0      	nop			; (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000108 	.word	0x20000108

08001d58 <UT_printf>:

void UT_printf(const char* format, ...)
{
 8001d58:	b40f      	push	{r0, r1, r2, r3}
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b08a      	sub	sp, #40	; 0x28
 8001d5e:	af00      	add	r7, sp, #0
	va_list args;
	char buffer[32];	
	memset(buffer, 0, 32);
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	2220      	movs	r2, #32
 8001d64:	2100      	movs	r1, #0
 8001d66:	0018      	movs	r0, r3
 8001d68:	f002 fb8e 	bl	8004488 <memset>

	va_start(args, format);	
 8001d6c:	2334      	movs	r3, #52	; 0x34
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
	vsprintf(buffer, format, args);
 8001d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f002 fbd7 	bl	800452c <vsiprintf>
	UT_PrintMsg(buffer);
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff ffd3 	bl	8001d2c <UT_PrintMsg>
	va_end(args);
}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b00a      	add	sp, #40	; 0x28
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	bc08      	pop	{r3}
 8001d90:	b004      	add	sp, #16
 8001d92:	4718      	bx	r3

08001d94 <UT_Error_Handler>:

void UT_Error_Handler(char* err_msg)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9c:	b672      	cpsid	i
}
 8001d9e:	46c0      	nop			; (mov r8, r8)
    __disable_irq();
    while (1)
	{
    	UT_PrintMsg(err_msg);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7ff ffc2 	bl	8001d2c <UT_PrintMsg>
 8001da8:	e7fa      	b.n	8001da0 <UT_Error_Handler+0xc>
	...

08001dac <UT_Delay_MicroSeconds>:
	}
}

void UT_Delay_MicroSeconds(uint16_t uSec)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	0002      	movs	r2, r0
 8001db4:	1dbb      	adds	r3, r7, #6
 8001db6:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim21, 0);
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <UT_Delay_MicroSeconds+0x30>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim21) < uSec);
 8001dc0:	46c0      	nop			; (mov r8, r8)
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <UT_Delay_MicroSeconds+0x30>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc8:	1dbb      	adds	r3, r7, #6
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d3f8      	bcc.n	8001dc2 <UT_Delay_MicroSeconds+0x16>
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b002      	add	sp, #8
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	2000018c 	.word	0x2000018c

08001de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001de0:	4813      	ldr	r0, [pc, #76]	; (8001e30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001de2:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001de4:	4813      	ldr	r0, [pc, #76]	; (8001e34 <LoopForever+0x6>)
    LDR R1, [R0]
 8001de6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001de8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <LoopForever+0xa>)
    CMP R1, R2
 8001dec:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001dee:	d105      	bne.n	8001dfc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001df0:	4812      	ldr	r0, [pc, #72]	; (8001e3c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001df2:	4913      	ldr	r1, [pc, #76]	; (8001e40 <LoopForever+0x12>)
    STR R1, [R0]
 8001df4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001df6:	4813      	ldr	r0, [pc, #76]	; (8001e44 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001df8:	4913      	ldr	r1, [pc, #76]	; (8001e48 <LoopForever+0x1a>)
    STR R1, [R0]
 8001dfa:	6001      	str	r1, [r0, #0]

08001dfc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dfc:	4813      	ldr	r0, [pc, #76]	; (8001e4c <LoopForever+0x1e>)
  ldr r1, =_edata
 8001dfe:	4914      	ldr	r1, [pc, #80]	; (8001e50 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <LoopForever+0x26>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001e14:	4c11      	ldr	r4, [pc, #68]	; (8001e5c <LoopForever+0x2e>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e22:	f7ff ff7d 	bl	8001d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e26:	f002 fb0b 	bl	8004440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7ff fc5d 	bl	80016e8 <main>

08001e2e <LoopForever>:

LoopForever:
    b LoopForever
 8001e2e:	e7fe      	b.n	8001e2e <LoopForever>
   ldr   r0, =_estack
 8001e30:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8001e34:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001e38:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001e3c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001e40:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001e44:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001e48:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e54:	08005034 	.word	0x08005034
  ldr r2, =_sbss
 8001e58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e5c:	200001e0 	.word	0x200001e0

08001e60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <ADC1_IRQHandler>
	...

08001e64 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_Init+0x3c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_Init+0x3c>)
 8001e76:	2140      	movs	r1, #64	; 0x40
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f000 f811 	bl	8001ea4 <HAL_InitTick>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
 8001e8c:	e001      	b.n	8001e92 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e8e:	f7ff fe2f 	bl	8001af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e92:	1dfb      	adds	r3, r7, #7
 8001e94:	781b      	ldrb	r3, [r3, #0]
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b002      	add	sp, #8
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	40022000 	.word	0x40022000

08001ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_InitTick+0x5c>)
 8001eae:	681c      	ldr	r4, [r3, #0]
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_InitTick+0x60>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	23fa      	movs	r3, #250	; 0xfa
 8001eb8:	0098      	lsls	r0, r3, #2
 8001eba:	f7fe f937 	bl	800012c <__udivsi3>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	0020      	movs	r0, r4
 8001ec4:	f7fe f932 	bl	800012c <__udivsi3>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 f92f 	bl	800212e <HAL_SYSTICK_Config>
 8001ed0:	1e03      	subs	r3, r0, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e00f      	b.n	8001ef8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d80b      	bhi.n	8001ef6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	425b      	negs	r3, r3
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f000 f8fc 	bl	80020e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_InitTick+0x64>)
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b003      	add	sp, #12
 8001efe:	bd90      	pop	{r4, r7, pc}
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000008 	.word	0x20000008
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_IncTick+0x1c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	001a      	movs	r2, r3
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_IncTick+0x20>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	18d2      	adds	r2, r2, r3
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_IncTick+0x20>)
 8001f1e:	601a      	str	r2, [r3, #0]
}
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	200001cc 	.word	0x200001cc

08001f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  return uwTick;
 8001f34:	4b02      	ldr	r3, [pc, #8]	; (8001f40 <HAL_GetTick+0x10>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	200001cc 	.word	0x200001cc

08001f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff fff0 	bl	8001f30 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	d005      	beq.n	8001f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_Delay+0x44>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	001a      	movs	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	189b      	adds	r3, r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	f7ff ffe0 	bl	8001f30 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d8f7      	bhi.n	8001f6c <HAL_Delay+0x28>
  {
  }
}
 8001f7c:	46c0      	nop			; (mov r8, r8)
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b004      	add	sp, #16
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	20000008 	.word	0x20000008

08001f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	0002      	movs	r2, r0
 8001f94:	1dfb      	adds	r3, r7, #7
 8001f96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f9e:	d809      	bhi.n	8001fb4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	001a      	movs	r2, r3
 8001fa6:	231f      	movs	r3, #31
 8001fa8:	401a      	ands	r2, r3
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_EnableIRQ+0x30>)
 8001fac:	2101      	movs	r1, #1
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
  }
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	1dfb      	adds	r3, r7, #7
 8001fcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8001fd4:	d828      	bhi.n	8002028 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd6:	4a2f      	ldr	r2, [pc, #188]	; (8002094 <__NVIC_SetPriority+0xd4>)
 8001fd8:	1dfb      	adds	r3, r7, #7
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b25b      	sxtb	r3, r3
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	33c0      	adds	r3, #192	; 0xc0
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	589b      	ldr	r3, [r3, r2]
 8001fe6:	1dfa      	adds	r2, r7, #7
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	0011      	movs	r1, r2
 8001fec:	2203      	movs	r2, #3
 8001fee:	400a      	ands	r2, r1
 8001ff0:	00d2      	lsls	r2, r2, #3
 8001ff2:	21ff      	movs	r1, #255	; 0xff
 8001ff4:	4091      	lsls	r1, r2
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	43d2      	mvns	r2, r2
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	019b      	lsls	r3, r3, #6
 8002002:	22ff      	movs	r2, #255	; 0xff
 8002004:	401a      	ands	r2, r3
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	0018      	movs	r0, r3
 800200c:	2303      	movs	r3, #3
 800200e:	4003      	ands	r3, r0
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002014:	481f      	ldr	r0, [pc, #124]	; (8002094 <__NVIC_SetPriority+0xd4>)
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b25b      	sxtb	r3, r3
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	430a      	orrs	r2, r1
 8002020:	33c0      	adds	r3, #192	; 0xc0
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002026:	e031      	b.n	800208c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002028:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <__NVIC_SetPriority+0xd8>)
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	0019      	movs	r1, r3
 8002030:	230f      	movs	r3, #15
 8002032:	400b      	ands	r3, r1
 8002034:	3b08      	subs	r3, #8
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3306      	adds	r3, #6
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	18d3      	adds	r3, r2, r3
 800203e:	3304      	adds	r3, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1dfa      	adds	r2, r7, #7
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	0011      	movs	r1, r2
 8002048:	2203      	movs	r2, #3
 800204a:	400a      	ands	r2, r1
 800204c:	00d2      	lsls	r2, r2, #3
 800204e:	21ff      	movs	r1, #255	; 0xff
 8002050:	4091      	lsls	r1, r2
 8002052:	000a      	movs	r2, r1
 8002054:	43d2      	mvns	r2, r2
 8002056:	401a      	ands	r2, r3
 8002058:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	019b      	lsls	r3, r3, #6
 800205e:	22ff      	movs	r2, #255	; 0xff
 8002060:	401a      	ands	r2, r3
 8002062:	1dfb      	adds	r3, r7, #7
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	0018      	movs	r0, r3
 8002068:	2303      	movs	r3, #3
 800206a:	4003      	ands	r3, r0
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <__NVIC_SetPriority+0xd8>)
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	001c      	movs	r4, r3
 8002078:	230f      	movs	r3, #15
 800207a:	4023      	ands	r3, r4
 800207c:	3b08      	subs	r3, #8
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	430a      	orrs	r2, r1
 8002082:	3306      	adds	r3, #6
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	18c3      	adds	r3, r0, r3
 8002088:	3304      	adds	r3, #4
 800208a:	601a      	str	r2, [r3, #0]
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b003      	add	sp, #12
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	1e5a      	subs	r2, r3, #1
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	045b      	lsls	r3, r3, #17
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d301      	bcc.n	80020b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b0:	2301      	movs	r3, #1
 80020b2:	e010      	b.n	80020d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <SysTick_Config+0x44>)
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	3a01      	subs	r2, #1
 80020ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020bc:	2301      	movs	r3, #1
 80020be:	425b      	negs	r3, r3
 80020c0:	2103      	movs	r1, #3
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7ff ff7c 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <SysTick_Config+0x44>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <SysTick_Config+0x44>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	210f      	movs	r1, #15
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	1c02      	adds	r2, r0, #0
 80020f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b25b      	sxtb	r3, r3
 80020fe:	0011      	movs	r1, r2
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff ff5d 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	0002      	movs	r2, r0
 8002116:	1dfb      	adds	r3, r7, #7
 8002118:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b25b      	sxtb	r3, r3
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff ff33 	bl	8001f8c <__NVIC_EnableIRQ>
}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff ffaf 	bl	800209c <SysTick_Config>
 800213e:	0003      	movs	r3, r0
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800215e:	e155      	b.n	800240c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2101      	movs	r1, #1
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4091      	lsls	r1, r2
 800216a:	000a      	movs	r2, r1
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d100      	bne.n	8002178 <HAL_GPIO_Init+0x30>
 8002176:	e146      	b.n	8002406 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d00b      	beq.n	8002198 <HAL_GPIO_Init+0x50>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d007      	beq.n	8002198 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800218c:	2b11      	cmp	r3, #17
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b12      	cmp	r3, #18
 8002196:	d130      	bne.n	80021fa <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	409a      	lsls	r2, r3
 80021a6:	0013      	movs	r3, r2
 80021a8:	43da      	mvns	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	409a      	lsls	r2, r3
 80021ba:	0013      	movs	r3, r2
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ce:	2201      	movs	r2, #1
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	43da      	mvns	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	2201      	movs	r2, #1
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	409a      	lsls	r2, r3
 8002208:	0013      	movs	r3, r2
 800220a:	43da      	mvns	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	409a      	lsls	r2, r3
 800221c:	0013      	movs	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0xf2>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b12      	cmp	r3, #18
 8002238:	d123      	bne.n	8002282 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	08da      	lsrs	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3208      	adds	r2, #8
 8002242:	0092      	lsls	r2, r2, #2
 8002244:	58d3      	ldr	r3, [r2, r3]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2207      	movs	r2, #7
 800224c:	4013      	ands	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	220f      	movs	r2, #15
 8002252:	409a      	lsls	r2, r3
 8002254:	0013      	movs	r3, r2
 8002256:	43da      	mvns	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2107      	movs	r1, #7
 8002266:	400b      	ands	r3, r1
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	409a      	lsls	r2, r3
 800226c:	0013      	movs	r3, r2
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	6939      	ldr	r1, [r7, #16]
 8002280:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	409a      	lsls	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	43da      	mvns	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2203      	movs	r2, #3
 80022a0:	401a      	ands	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	055b      	lsls	r3, r3, #21
 80022be:	4013      	ands	r3, r2
 80022c0:	d100      	bne.n	80022c4 <HAL_GPIO_Init+0x17c>
 80022c2:	e0a0      	b.n	8002406 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c4:	4b57      	ldr	r3, [pc, #348]	; (8002424 <HAL_GPIO_Init+0x2dc>)
 80022c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c8:	4b56      	ldr	r3, [pc, #344]	; (8002424 <HAL_GPIO_Init+0x2dc>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	430a      	orrs	r2, r1
 80022ce:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d0:	4a55      	ldr	r2, [pc, #340]	; (8002428 <HAL_GPIO_Init+0x2e0>)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	589b      	ldr	r3, [r3, r2]
 80022dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2203      	movs	r2, #3
 80022e2:	4013      	ands	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	409a      	lsls	r2, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	43da      	mvns	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	23a0      	movs	r3, #160	; 0xa0
 80022f8:	05db      	lsls	r3, r3, #23
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d01f      	beq.n	800233e <HAL_GPIO_Init+0x1f6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4a      	ldr	r2, [pc, #296]	; (800242c <HAL_GPIO_Init+0x2e4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d019      	beq.n	800233a <HAL_GPIO_Init+0x1f2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a49      	ldr	r2, [pc, #292]	; (8002430 <HAL_GPIO_Init+0x2e8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0x1ee>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a48      	ldr	r2, [pc, #288]	; (8002434 <HAL_GPIO_Init+0x2ec>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00d      	beq.n	8002332 <HAL_GPIO_Init+0x1ea>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a47      	ldr	r2, [pc, #284]	; (8002438 <HAL_GPIO_Init+0x2f0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <HAL_GPIO_Init+0x1e6>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a46      	ldr	r2, [pc, #280]	; (800243c <HAL_GPIO_Init+0x2f4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_GPIO_Init+0x1e2>
 8002326:	2305      	movs	r3, #5
 8002328:	e00a      	b.n	8002340 <HAL_GPIO_Init+0x1f8>
 800232a:	2306      	movs	r3, #6
 800232c:	e008      	b.n	8002340 <HAL_GPIO_Init+0x1f8>
 800232e:	2304      	movs	r3, #4
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x1f8>
 8002332:	2303      	movs	r3, #3
 8002334:	e004      	b.n	8002340 <HAL_GPIO_Init+0x1f8>
 8002336:	2302      	movs	r3, #2
 8002338:	e002      	b.n	8002340 <HAL_GPIO_Init+0x1f8>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x1f8>
 800233e:	2300      	movs	r3, #0
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	2103      	movs	r1, #3
 8002344:	400a      	ands	r2, r1
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	4093      	lsls	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002350:	4935      	ldr	r1, [pc, #212]	; (8002428 <HAL_GPIO_Init+0x2e0>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800235e:	4b38      	ldr	r3, [pc, #224]	; (8002440 <HAL_GPIO_Init+0x2f8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43da      	mvns	r2, r3
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	025b      	lsls	r3, r3, #9
 8002376:	4013      	ands	r3, r2
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002382:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <HAL_GPIO_Init+0x2f8>)
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_GPIO_Init+0x2f8>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	43da      	mvns	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	029b      	lsls	r3, r3, #10
 80023a0:	4013      	ands	r3, r2
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023ac:	4b24      	ldr	r3, [pc, #144]	; (8002440 <HAL_GPIO_Init+0x2f8>)
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b2:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_GPIO_Init+0x2f8>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	43da      	mvns	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	035b      	lsls	r3, r3, #13
 80023ca:	4013      	ands	r3, r2
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_GPIO_Init+0x2f8>)
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80023dc:	4b18      	ldr	r3, [pc, #96]	; (8002440 <HAL_GPIO_Init+0x2f8>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43da      	mvns	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	039b      	lsls	r3, r3, #14
 80023f4:	4013      	ands	r3, r2
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_GPIO_Init+0x2f8>)
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	40da      	lsrs	r2, r3
 8002414:	1e13      	subs	r3, r2, #0
 8002416:	d000      	beq.n	800241a <HAL_GPIO_Init+0x2d2>
 8002418:	e6a2      	b.n	8002160 <HAL_GPIO_Init+0x18>
  }
}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b006      	add	sp, #24
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	40010000 	.word	0x40010000
 800242c:	50000400 	.word	0x50000400
 8002430:	50000800 	.word	0x50000800
 8002434:	50000c00 	.word	0x50000c00
 8002438:	50001000 	.word	0x50001000
 800243c:	50001c00 	.word	0x50001c00
 8002440:	40010400 	.word	0x40010400

08002444 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	000a      	movs	r2, r1
 800244e:	1cbb      	adds	r3, r7, #2
 8002450:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	1cba      	adds	r2, r7, #2
 8002458:	8812      	ldrh	r2, [r2, #0]
 800245a:	4013      	ands	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800245e:	230f      	movs	r3, #15
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	e003      	b.n	8002470 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002468:	230f      	movs	r3, #15
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002470:	230f      	movs	r3, #15
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	781b      	ldrb	r3, [r3, #0]
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b004      	add	sp, #16
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	0008      	movs	r0, r1
 8002488:	0011      	movs	r1, r2
 800248a:	1cbb      	adds	r3, r7, #2
 800248c:	1c02      	adds	r2, r0, #0
 800248e:	801a      	strh	r2, [r3, #0]
 8002490:	1c7b      	adds	r3, r7, #1
 8002492:	1c0a      	adds	r2, r1, #0
 8002494:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002496:	1c7b      	adds	r3, r7, #1
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249e:	1cbb      	adds	r3, r7, #2
 80024a0:	881a      	ldrh	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80024a6:	e003      	b.n	80024b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80024a8:	1cbb      	adds	r3, r7, #2
 80024aa:	881a      	ldrh	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	000a      	movs	r2, r1
 80024c2:	1cbb      	adds	r3, r7, #2
 80024c4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024cc:	1cbb      	adds	r3, r7, #2
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	041a      	lsls	r2, r3, #16
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	1cb9      	adds	r1, r7, #2
 80024dc:	8809      	ldrh	r1, [r1, #0]
 80024de:	400b      	ands	r3, r1
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b004      	add	sp, #16
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	0002      	movs	r2, r0
 80024f8:	1dbb      	adds	r3, r7, #6
 80024fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	1dba      	adds	r2, r7, #6
 8002502:	8812      	ldrh	r2, [r2, #0]
 8002504:	4013      	ands	r3, r2
 8002506:	d008      	beq.n	800251a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800250a:	1dba      	adds	r2, r7, #6
 800250c:	8812      	ldrh	r2, [r2, #0]
 800250e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002510:	1dbb      	adds	r3, r7, #6
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	0018      	movs	r0, r3
 8002516:	f7ff f8b1 	bl	800167c <HAL_GPIO_EXTI_Callback>
  }
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	40010400 	.word	0x40010400

08002528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	f000 fb6c 	bl	8002c14 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253c:	4bc8      	ldr	r3, [pc, #800]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	220c      	movs	r2, #12
 8002542:	4013      	ands	r3, r2
 8002544:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002546:	4bc6      	ldr	r3, [pc, #792]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	025b      	lsls	r3, r3, #9
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2201      	movs	r2, #1
 8002558:	4013      	ands	r3, r2
 800255a:	d100      	bne.n	800255e <HAL_RCC_OscConfig+0x36>
 800255c:	e07d      	b.n	800265a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d007      	beq.n	8002574 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d112      	bne.n	8002590 <HAL_RCC_OscConfig+0x68>
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	025b      	lsls	r3, r3, #9
 8002570:	429a      	cmp	r2, r3
 8002572:	d10d      	bne.n	8002590 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	4bba      	ldr	r3, [pc, #744]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	4013      	ands	r3, r2
 800257e:	d100      	bne.n	8002582 <HAL_RCC_OscConfig+0x5a>
 8002580:	e06a      	b.n	8002658 <HAL_RCC_OscConfig+0x130>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d166      	bne.n	8002658 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	f000 fb42 	bl	8002c14 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	025b      	lsls	r3, r3, #9
 8002598:	429a      	cmp	r2, r3
 800259a:	d107      	bne.n	80025ac <HAL_RCC_OscConfig+0x84>
 800259c:	4bb0      	ldr	r3, [pc, #704]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4baf      	ldr	r3, [pc, #700]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	0249      	lsls	r1, r1, #9
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e027      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	23a0      	movs	r3, #160	; 0xa0
 80025b2:	02db      	lsls	r3, r3, #11
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d10e      	bne.n	80025d6 <HAL_RCC_OscConfig+0xae>
 80025b8:	4ba9      	ldr	r3, [pc, #676]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4ba8      	ldr	r3, [pc, #672]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80025be:	2180      	movs	r1, #128	; 0x80
 80025c0:	02c9      	lsls	r1, r1, #11
 80025c2:	430a      	orrs	r2, r1
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	4ba6      	ldr	r3, [pc, #664]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4ba5      	ldr	r3, [pc, #660]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80025cc:	2180      	movs	r1, #128	; 0x80
 80025ce:	0249      	lsls	r1, r1, #9
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e012      	b.n	80025fc <HAL_RCC_OscConfig+0xd4>
 80025d6:	4ba2      	ldr	r3, [pc, #648]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4ba1      	ldr	r3, [pc, #644]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80025dc:	49a1      	ldr	r1, [pc, #644]	; (8002864 <HAL_RCC_OscConfig+0x33c>)
 80025de:	400a      	ands	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	4b9f      	ldr	r3, [pc, #636]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	025b      	lsls	r3, r3, #9
 80025ea:	4013      	ands	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4b9b      	ldr	r3, [pc, #620]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b9a      	ldr	r3, [pc, #616]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80025f6:	499c      	ldr	r1, [pc, #624]	; (8002868 <HAL_RCC_OscConfig+0x340>)
 80025f8:	400a      	ands	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d014      	beq.n	800262e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7ff fc94 	bl	8001f30 <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260e:	f7ff fc8f 	bl	8001f30 <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b64      	cmp	r3, #100	; 0x64
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e2f9      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002620:	4b8f      	ldr	r3, [pc, #572]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	029b      	lsls	r3, r3, #10
 8002628:	4013      	ands	r3, r2
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0xe6>
 800262c:	e015      	b.n	800265a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7ff fc7f 	bl	8001f30 <HAL_GetTick>
 8002632:	0003      	movs	r3, r0
 8002634:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002638:	f7ff fc7a 	bl	8001f30 <HAL_GetTick>
 800263c:	0002      	movs	r2, r0
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e2e4      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800264a:	4b85      	ldr	r3, [pc, #532]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	029b      	lsls	r3, r3, #10
 8002652:	4013      	ands	r3, r2
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x110>
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2202      	movs	r2, #2
 8002660:	4013      	ands	r3, r2
 8002662:	d100      	bne.n	8002666 <HAL_RCC_OscConfig+0x13e>
 8002664:	e099      	b.n	800279a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	2220      	movs	r2, #32
 8002670:	4013      	ands	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002674:	4b7a      	ldr	r3, [pc, #488]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b79      	ldr	r3, [pc, #484]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 800267a:	2120      	movs	r1, #32
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	2220      	movs	r2, #32
 8002684:	4393      	bics	r3, r2
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b04      	cmp	r3, #4
 800268c:	d005      	beq.n	800269a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	2b0c      	cmp	r3, #12
 8002692:	d13e      	bne.n	8002712 <HAL_RCC_OscConfig+0x1ea>
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d13b      	bne.n	8002712 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800269a:	4b71      	ldr	r3, [pc, #452]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2204      	movs	r2, #4
 80026a0:	4013      	ands	r3, r2
 80026a2:	d004      	beq.n	80026ae <HAL_RCC_OscConfig+0x186>
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e2b2      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4a6e      	ldr	r2, [pc, #440]	; (800286c <HAL_RCC_OscConfig+0x344>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	021a      	lsls	r2, r3, #8
 80026be:	4b68      	ldr	r3, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80026c4:	4b66      	ldr	r3, [pc, #408]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2209      	movs	r2, #9
 80026ca:	4393      	bics	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	4b64      	ldr	r3, [pc, #400]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80026d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026d6:	f000 fbeb 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 80026da:	0001      	movs	r1, r0
 80026dc:	4b60      	ldr	r3, [pc, #384]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	220f      	movs	r2, #15
 80026e4:	4013      	ands	r3, r2
 80026e6:	4a62      	ldr	r2, [pc, #392]	; (8002870 <HAL_RCC_OscConfig+0x348>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	000a      	movs	r2, r1
 80026ec:	40da      	lsrs	r2, r3
 80026ee:	4b61      	ldr	r3, [pc, #388]	; (8002874 <HAL_RCC_OscConfig+0x34c>)
 80026f0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80026f2:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_OscConfig+0x350>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2513      	movs	r5, #19
 80026f8:	197c      	adds	r4, r7, r5
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7ff fbd2 	bl	8001ea4 <HAL_InitTick>
 8002700:	0003      	movs	r3, r0
 8002702:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002704:	197b      	adds	r3, r7, r5
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d046      	beq.n	800279a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800270c:	197b      	adds	r3, r7, r5
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	e280      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	2b00      	cmp	r3, #0
 8002716:	d027      	beq.n	8002768 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002718:	4b51      	ldr	r3, [pc, #324]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2209      	movs	r2, #9
 800271e:	4393      	bics	r3, r2
 8002720:	0019      	movs	r1, r3
 8002722:	4b4f      	ldr	r3, [pc, #316]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 8002724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002726:	430a      	orrs	r2, r1
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7ff fc01 	bl	8001f30 <HAL_GetTick>
 800272e:	0003      	movs	r3, r0
 8002730:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002734:	f7ff fbfc 	bl	8001f30 <HAL_GetTick>
 8002738:	0002      	movs	r2, r0
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e266      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002746:	4b46      	ldr	r3, [pc, #280]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2204      	movs	r2, #4
 800274c:	4013      	ands	r3, r2
 800274e:	d0f1      	beq.n	8002734 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a45      	ldr	r2, [pc, #276]	; (800286c <HAL_RCC_OscConfig+0x344>)
 8002756:	4013      	ands	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	021a      	lsls	r2, r3, #8
 8002760:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	e018      	b.n	800279a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002768:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b3c      	ldr	r3, [pc, #240]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 800276e:	2101      	movs	r1, #1
 8002770:	438a      	bics	r2, r1
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7ff fbdc 	bl	8001f30 <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277e:	f7ff fbd7 	bl	8001f30 <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e241      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002790:	4b33      	ldr	r3, [pc, #204]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2204      	movs	r2, #4
 8002796:	4013      	ands	r3, r2
 8002798:	d1f1      	bne.n	800277e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2210      	movs	r2, #16
 80027a0:	4013      	ands	r3, r2
 80027a2:	d100      	bne.n	80027a6 <HAL_RCC_OscConfig+0x27e>
 80027a4:	e0a1      	b.n	80028ea <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d140      	bne.n	800282e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ac:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_OscConfig+0x29c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e227      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c4:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a2c      	ldr	r2, [pc, #176]	; (800287c <HAL_RCC_OscConfig+0x354>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	4b23      	ldr	r3, [pc, #140]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	0a19      	lsrs	r1, r3, #8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	061a      	lsls	r2, r3, #24
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80027e8:	430a      	orrs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	0b5b      	lsrs	r3, r3, #13
 80027f2:	3301      	adds	r3, #1
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	0212      	lsls	r2, r2, #8
 80027f8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	210f      	movs	r1, #15
 8002802:	400b      	ands	r3, r1
 8002804:	491a      	ldr	r1, [pc, #104]	; (8002870 <HAL_RCC_OscConfig+0x348>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800280a:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_RCC_OscConfig+0x34c>)
 800280c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HAL_RCC_OscConfig+0x350>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2513      	movs	r5, #19
 8002814:	197c      	adds	r4, r7, r5
 8002816:	0018      	movs	r0, r3
 8002818:	f7ff fb44 	bl	8001ea4 <HAL_InitTick>
 800281c:	0003      	movs	r3, r0
 800281e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002820:	197b      	adds	r3, r7, r5
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d060      	beq.n	80028ea <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002828:	197b      	adds	r3, r7, r5
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	e1f2      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d03f      	beq.n	80028b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCC_OscConfig+0x338>)
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	0049      	lsls	r1, r1, #1
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff fb74 	bl	8001f30 <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800284c:	e018      	b.n	8002880 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800284e:	f7ff fb6f 	bl	8001f30 <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d911      	bls.n	8002880 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e1d9      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
 8002860:	40021000 	.word	0x40021000
 8002864:	fffeffff 	.word	0xfffeffff
 8002868:	fffbffff 	.word	0xfffbffff
 800286c:	ffffe0ff 	.word	0xffffe0ff
 8002870:	08004f84 	.word	0x08004f84
 8002874:	20000000 	.word	0x20000000
 8002878:	20000004 	.word	0x20000004
 800287c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002880:	4bc9      	ldr	r3, [pc, #804]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4013      	ands	r3, r2
 800288a:	d0e0      	beq.n	800284e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800288c:	4bc6      	ldr	r3, [pc, #792]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4ac6      	ldr	r2, [pc, #792]	; (8002bac <HAL_RCC_OscConfig+0x684>)
 8002892:	4013      	ands	r3, r2
 8002894:	0019      	movs	r1, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1a      	ldr	r2, [r3, #32]
 800289a:	4bc3      	ldr	r3, [pc, #780]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 800289c:	430a      	orrs	r2, r1
 800289e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028a0:	4bc1      	ldr	r3, [pc, #772]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	0a19      	lsrs	r1, r3, #8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	061a      	lsls	r2, r3, #24
 80028ae:	4bbe      	ldr	r3, [pc, #760]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 80028b0:	430a      	orrs	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	e019      	b.n	80028ea <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028b6:	4bbc      	ldr	r3, [pc, #752]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4bbb      	ldr	r3, [pc, #748]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 80028bc:	49bc      	ldr	r1, [pc, #752]	; (8002bb0 <HAL_RCC_OscConfig+0x688>)
 80028be:	400a      	ands	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c2:	f7ff fb35 	bl	8001f30 <HAL_GetTick>
 80028c6:	0003      	movs	r3, r0
 80028c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028cc:	f7ff fb30 	bl	8001f30 <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e19a      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80028de:	4bb2      	ldr	r3, [pc, #712]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2208      	movs	r2, #8
 80028f0:	4013      	ands	r3, r2
 80028f2:	d036      	beq.n	8002962 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d019      	beq.n	8002930 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fc:	4baa      	ldr	r3, [pc, #680]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 80028fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002900:	4ba9      	ldr	r3, [pc, #676]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002902:	2101      	movs	r1, #1
 8002904:	430a      	orrs	r2, r1
 8002906:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002908:	f7ff fb12 	bl	8001f30 <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002912:	f7ff fb0d 	bl	8001f30 <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e177      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002924:	4ba0      	ldr	r3, [pc, #640]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002928:	2202      	movs	r2, #2
 800292a:	4013      	ands	r3, r2
 800292c:	d0f1      	beq.n	8002912 <HAL_RCC_OscConfig+0x3ea>
 800292e:	e018      	b.n	8002962 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002930:	4b9d      	ldr	r3, [pc, #628]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002934:	4b9c      	ldr	r3, [pc, #624]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002936:	2101      	movs	r1, #1
 8002938:	438a      	bics	r2, r1
 800293a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293c:	f7ff faf8 	bl	8001f30 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002946:	f7ff faf3 	bl	8001f30 <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e15d      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002958:	4b93      	ldr	r3, [pc, #588]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 800295a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295c:	2202      	movs	r2, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d1f1      	bne.n	8002946 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2204      	movs	r2, #4
 8002968:	4013      	ands	r3, r2
 800296a:	d100      	bne.n	800296e <HAL_RCC_OscConfig+0x446>
 800296c:	e0ae      	b.n	8002acc <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296e:	2023      	movs	r0, #35	; 0x23
 8002970:	183b      	adds	r3, r7, r0
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002976:	4b8c      	ldr	r3, [pc, #560]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	055b      	lsls	r3, r3, #21
 800297e:	4013      	ands	r3, r2
 8002980:	d109      	bne.n	8002996 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002986:	4b88      	ldr	r3, [pc, #544]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	0549      	lsls	r1, r1, #21
 800298c:	430a      	orrs	r2, r1
 800298e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002990:	183b      	adds	r3, r7, r0
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002996:	4b87      	ldr	r3, [pc, #540]	; (8002bb4 <HAL_RCC_OscConfig+0x68c>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4013      	ands	r3, r2
 80029a0:	d11a      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a2:	4b84      	ldr	r3, [pc, #528]	; (8002bb4 <HAL_RCC_OscConfig+0x68c>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b83      	ldr	r3, [pc, #524]	; (8002bb4 <HAL_RCC_OscConfig+0x68c>)
 80029a8:	2180      	movs	r1, #128	; 0x80
 80029aa:	0049      	lsls	r1, r1, #1
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b0:	f7ff fabe 	bl	8001f30 <HAL_GetTick>
 80029b4:	0003      	movs	r3, r0
 80029b6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ba:	f7ff fab9 	bl	8001f30 <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b64      	cmp	r3, #100	; 0x64
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e123      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	4b79      	ldr	r3, [pc, #484]	; (8002bb4 <HAL_RCC_OscConfig+0x68c>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4013      	ands	r3, r2
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d107      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4cc>
 80029e4:	4b70      	ldr	r3, [pc, #448]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 80029e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029e8:	4b6f      	ldr	r3, [pc, #444]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	0049      	lsls	r1, r1, #1
 80029ee:	430a      	orrs	r2, r1
 80029f0:	651a      	str	r2, [r3, #80]	; 0x50
 80029f2:	e031      	b.n	8002a58 <HAL_RCC_OscConfig+0x530>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10c      	bne.n	8002a16 <HAL_RCC_OscConfig+0x4ee>
 80029fc:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 80029fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a00:	4b69      	ldr	r3, [pc, #420]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002a02:	496b      	ldr	r1, [pc, #428]	; (8002bb0 <HAL_RCC_OscConfig+0x688>)
 8002a04:	400a      	ands	r2, r1
 8002a06:	651a      	str	r2, [r3, #80]	; 0x50
 8002a08:	4b67      	ldr	r3, [pc, #412]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002a0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a0c:	4b66      	ldr	r3, [pc, #408]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002a0e:	496a      	ldr	r1, [pc, #424]	; (8002bb8 <HAL_RCC_OscConfig+0x690>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	651a      	str	r2, [r3, #80]	; 0x50
 8002a14:	e020      	b.n	8002a58 <HAL_RCC_OscConfig+0x530>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	23a0      	movs	r3, #160	; 0xa0
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d10e      	bne.n	8002a40 <HAL_RCC_OscConfig+0x518>
 8002a22:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002a24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a26:	4b60      	ldr	r3, [pc, #384]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	00c9      	lsls	r1, r1, #3
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	651a      	str	r2, [r3, #80]	; 0x50
 8002a30:	4b5d      	ldr	r3, [pc, #372]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002a32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a34:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	0049      	lsls	r1, r1, #1
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	651a      	str	r2, [r3, #80]	; 0x50
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0x530>
 8002a40:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a44:	4b58      	ldr	r3, [pc, #352]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002a46:	495a      	ldr	r1, [pc, #360]	; (8002bb0 <HAL_RCC_OscConfig+0x688>)
 8002a48:	400a      	ands	r2, r1
 8002a4a:	651a      	str	r2, [r3, #80]	; 0x50
 8002a4c:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002a4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a50:	4b55      	ldr	r3, [pc, #340]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002a52:	4959      	ldr	r1, [pc, #356]	; (8002bb8 <HAL_RCC_OscConfig+0x690>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a60:	f7ff fa66 	bl	8001f30 <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a68:	e009      	b.n	8002a7e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7ff fa61 	bl	8001f30 <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	4a51      	ldr	r2, [pc, #324]	; (8002bbc <HAL_RCC_OscConfig+0x694>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0ca      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002a80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4013      	ands	r3, r2
 8002a88:	d0ef      	beq.n	8002a6a <HAL_RCC_OscConfig+0x542>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7ff fa50 	bl	8001f30 <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a94:	e009      	b.n	8002aaa <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7ff fa4b 	bl	8001f30 <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	4a46      	ldr	r2, [pc, #280]	; (8002bbc <HAL_RCC_OscConfig+0x694>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0b4      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aaa:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d1ef      	bne.n	8002a96 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ab6:	2323      	movs	r3, #35	; 0x23
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac0:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac4:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002ac6:	493e      	ldr	r1, [pc, #248]	; (8002bc0 <HAL_RCC_OscConfig+0x698>)
 8002ac8:	400a      	ands	r2, r1
 8002aca:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d100      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x5ae>
 8002ad4:	e09d      	b.n	8002c12 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d100      	bne.n	8002ade <HAL_RCC_OscConfig+0x5b6>
 8002adc:	e076      	b.n	8002bcc <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d145      	bne.n	8002b72 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002aec:	4935      	ldr	r1, [pc, #212]	; (8002bc4 <HAL_RCC_OscConfig+0x69c>)
 8002aee:	400a      	ands	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7ff fa1d 	bl	8001f30 <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afc:	f7ff fa18 	bl	8001f30 <HAL_GetTick>
 8002b00:	0002      	movs	r2, r0
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e082      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	049b      	lsls	r3, r3, #18
 8002b16:	4013      	ands	r3, r2
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b1a:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	4a2a      	ldr	r2, [pc, #168]	; (8002bc8 <HAL_RCC_OscConfig+0x6a0>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	431a      	orrs	r2, r3
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002b36:	430a      	orrs	r2, r1
 8002b38:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	0449      	lsls	r1, r1, #17
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7ff f9f2 	bl	8001f30 <HAL_GetTick>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b52:	f7ff f9ed 	bl	8001f30 <HAL_GetTick>
 8002b56:	0002      	movs	r2, r0
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e057      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	049b      	lsls	r3, r3, #18
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x62a>
 8002b70:	e04f      	b.n	8002c12 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002b78:	4912      	ldr	r1, [pc, #72]	; (8002bc4 <HAL_RCC_OscConfig+0x69c>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7ff f9d7 	bl	8001f30 <HAL_GetTick>
 8002b82:	0003      	movs	r3, r0
 8002b84:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b88:	f7ff f9d2 	bl	8001f30 <HAL_GetTick>
 8002b8c:	0002      	movs	r2, r0
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e03c      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b9a:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_RCC_OscConfig+0x680>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	049b      	lsls	r3, r3, #18
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x660>
 8002ba6:	e034      	b.n	8002c12 <HAL_RCC_OscConfig+0x6ea>
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	ffff1fff 	.word	0xffff1fff
 8002bb0:	fffffeff 	.word	0xfffffeff
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	fffffbff 	.word	0xfffffbff
 8002bbc:	00001388 	.word	0x00001388
 8002bc0:	efffffff 	.word	0xefffffff
 8002bc4:	feffffff 	.word	0xfeffffff
 8002bc8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bd8:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_RCC_OscConfig+0x6f4>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	025b      	lsls	r3, r3, #9
 8002be4:	401a      	ands	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d10f      	bne.n	8002c0e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	23f0      	movs	r3, #240	; 0xf0
 8002bf2:	039b      	lsls	r3, r3, #14
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	23c0      	movs	r3, #192	; 0xc0
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	401a      	ands	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b00a      	add	sp, #40	; 0x28
 8002c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1c:	40021000 	.word	0x40021000

08002c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e128      	b.n	8002e86 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b96      	ldr	r3, [pc, #600]	; (8002e90 <HAL_RCC_ClockConfig+0x270>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d91e      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b93      	ldr	r3, [pc, #588]	; (8002e90 <HAL_RCC_ClockConfig+0x270>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2201      	movs	r2, #1
 8002c48:	4393      	bics	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	4b90      	ldr	r3, [pc, #576]	; (8002e90 <HAL_RCC_ClockConfig+0x270>)
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c54:	f7ff f96c 	bl	8001f30 <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5c:	e009      	b.n	8002c72 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5e:	f7ff f967 	bl	8001f30 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	4a8a      	ldr	r2, [pc, #552]	; (8002e94 <HAL_RCC_ClockConfig+0x274>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e109      	b.n	8002e86 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b87      	ldr	r3, [pc, #540]	; (8002e90 <HAL_RCC_ClockConfig+0x270>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2201      	movs	r2, #1
 8002c78:	4013      	ands	r3, r2
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d1ee      	bne.n	8002c5e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2202      	movs	r2, #2
 8002c86:	4013      	ands	r3, r2
 8002c88:	d009      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8a:	4b83      	ldr	r3, [pc, #524]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	22f0      	movs	r2, #240	; 0xf0
 8002c90:	4393      	bics	r3, r2
 8002c92:	0019      	movs	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	4b7f      	ldr	r3, [pc, #508]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d100      	bne.n	8002caa <HAL_RCC_ClockConfig+0x8a>
 8002ca8:	e089      	b.n	8002dbe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cb2:	4b79      	ldr	r3, [pc, #484]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	029b      	lsls	r3, r3, #10
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d120      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0e1      	b.n	8002e86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cca:	4b73      	ldr	r3, [pc, #460]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	049b      	lsls	r3, r3, #18
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d114      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0d5      	b.n	8002e86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d106      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce2:	4b6d      	ldr	r3, [pc, #436]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d109      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0ca      	b.n	8002e86 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cf0:	4b69      	ldr	r3, [pc, #420]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0c2      	b.n	8002e86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d00:	4b65      	ldr	r3, [pc, #404]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2203      	movs	r2, #3
 8002d06:	4393      	bics	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4b62      	ldr	r3, [pc, #392]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002d10:	430a      	orrs	r2, r1
 8002d12:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d14:	f7ff f90c 	bl	8001f30 <HAL_GetTick>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d111      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d24:	e009      	b.n	8002d3a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d26:	f7ff f903 	bl	8001f30 <HAL_GetTick>
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	4a58      	ldr	r2, [pc, #352]	; (8002e94 <HAL_RCC_ClockConfig+0x274>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e0a5      	b.n	8002e86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d3a:	4b57      	ldr	r3, [pc, #348]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	220c      	movs	r2, #12
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d1ef      	bne.n	8002d26 <HAL_RCC_ClockConfig+0x106>
 8002d46:	e03a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d111      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d50:	e009      	b.n	8002d66 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d52:	f7ff f8ed 	bl	8001f30 <HAL_GetTick>
 8002d56:	0002      	movs	r2, r0
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	4a4d      	ldr	r2, [pc, #308]	; (8002e94 <HAL_RCC_ClockConfig+0x274>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e08f      	b.n	8002e86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d66:	4b4c      	ldr	r3, [pc, #304]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d1ef      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x132>
 8002d72:	e024      	b.n	8002dbe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d11b      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d7c:	e009      	b.n	8002d92 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7e:	f7ff f8d7 	bl	8001f30 <HAL_GetTick>
 8002d82:	0002      	movs	r2, r0
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	4a42      	ldr	r2, [pc, #264]	; (8002e94 <HAL_RCC_ClockConfig+0x274>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e079      	b.n	8002e86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d92:	4b41      	ldr	r3, [pc, #260]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	220c      	movs	r2, #12
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d1ef      	bne.n	8002d7e <HAL_RCC_ClockConfig+0x15e>
 8002d9e:	e00e      	b.n	8002dbe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7ff f8c6 	bl	8001f30 <HAL_GetTick>
 8002da4:	0002      	movs	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	4a3a      	ldr	r2, [pc, #232]	; (8002e94 <HAL_RCC_ClockConfig+0x274>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e068      	b.n	8002e86 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002db4:	4b38      	ldr	r3, [pc, #224]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	220c      	movs	r2, #12
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <HAL_RCC_ClockConfig+0x270>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d21e      	bcs.n	8002e0a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dcc:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <HAL_RCC_ClockConfig+0x270>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	4393      	bics	r3, r2
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <HAL_RCC_ClockConfig+0x270>)
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dde:	f7ff f8a7 	bl	8001f30 <HAL_GetTick>
 8002de2:	0003      	movs	r3, r0
 8002de4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	e009      	b.n	8002dfc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7ff f8a2 	bl	8001f30 <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	4a28      	ldr	r2, [pc, #160]	; (8002e94 <HAL_RCC_ClockConfig+0x274>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e044      	b.n	8002e86 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfc:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <HAL_RCC_ClockConfig+0x270>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2201      	movs	r2, #1
 8002e02:	4013      	ands	r3, r2
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d1ee      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2204      	movs	r2, #4
 8002e10:	4013      	ands	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a20      	ldr	r2, [pc, #128]	; (8002e9c <HAL_RCC_ClockConfig+0x27c>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e32:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	4a1a      	ldr	r2, [pc, #104]	; (8002ea0 <HAL_RCC_ClockConfig+0x280>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	00da      	lsls	r2, r3, #3
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002e44:	430a      	orrs	r2, r1
 8002e46:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e48:	f000 f832 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002e4c:	0001      	movs	r1, r0
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_RCC_ClockConfig+0x278>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	220f      	movs	r2, #15
 8002e56:	4013      	ands	r3, r2
 8002e58:	4a12      	ldr	r2, [pc, #72]	; (8002ea4 <HAL_RCC_ClockConfig+0x284>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	000a      	movs	r2, r1
 8002e5e:	40da      	lsrs	r2, r3
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_RCC_ClockConfig+0x288>)
 8002e62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_RCC_ClockConfig+0x28c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	250b      	movs	r5, #11
 8002e6a:	197c      	adds	r4, r7, r5
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff f819 	bl	8001ea4 <HAL_InitTick>
 8002e72:	0003      	movs	r3, r0
 8002e74:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002e76:	197b      	adds	r3, r7, r5
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002e7e:	197b      	adds	r3, r7, r5
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	0018      	movs	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b004      	add	sp, #16
 8002e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	40022000 	.word	0x40022000
 8002e94:	00001388 	.word	0x00001388
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	fffff8ff 	.word	0xfffff8ff
 8002ea0:	ffffc7ff 	.word	0xffffc7ff
 8002ea4:	08004f84 	.word	0x08004f84
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	b5b0      	push	{r4, r5, r7, lr}
 8002eb2:	b08e      	sub	sp, #56	; 0x38
 8002eb4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002eb6:	4b4c      	ldr	r3, [pc, #304]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d014      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ec6:	d900      	bls.n	8002eca <HAL_RCC_GetSysClockFreq+0x1a>
 8002ec8:	e07b      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x112>
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x24>
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d00b      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x3a>
 8002ed2:	e076      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ed4:	4b44      	ldr	r3, [pc, #272]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2210      	movs	r2, #16
 8002eda:	4013      	ands	r3, r2
 8002edc:	d002      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002ede:	4b43      	ldr	r3, [pc, #268]	; (8002fec <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ee0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002ee2:	e07c      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002ee4:	4b42      	ldr	r3, [pc, #264]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002ee6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ee8:	e079      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eea:	4b42      	ldr	r3, [pc, #264]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002eec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002eee:	e076      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	0c9a      	lsrs	r2, r3, #18
 8002ef4:	230f      	movs	r3, #15
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x148>)
 8002efa:	5c9b      	ldrb	r3, [r3, r2]
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	0d9a      	lsrs	r2, r3, #22
 8002f02:	2303      	movs	r3, #3
 8002f04:	4013      	ands	r3, r2
 8002f06:	3301      	adds	r3, #1
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f0a:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	025b      	lsls	r3, r3, #9
 8002f12:	4013      	ands	r3, r2
 8002f14:	d01a      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	4a35      	ldr	r2, [pc, #212]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002f20:	2300      	movs	r3, #0
 8002f22:	69b8      	ldr	r0, [r7, #24]
 8002f24:	69f9      	ldr	r1, [r7, #28]
 8002f26:	f7fd f9ad 	bl	8000284 <__aeabi_lmul>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	000b      	movs	r3, r1
 8002f2e:	0010      	movs	r0, r2
 8002f30:	0019      	movs	r1, r3
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f7fd f981 	bl	8000244 <__aeabi_uldivmod>
 8002f42:	0002      	movs	r2, r0
 8002f44:	000b      	movs	r3, r1
 8002f46:	0013      	movs	r3, r2
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4a:	e037      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f4c:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2210      	movs	r2, #16
 8002f52:	4013      	ands	r3, r2
 8002f54:	d01a      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4a23      	ldr	r2, [pc, #140]	; (8002fec <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f60:	2300      	movs	r3, #0
 8002f62:	68b8      	ldr	r0, [r7, #8]
 8002f64:	68f9      	ldr	r1, [r7, #12]
 8002f66:	f7fd f98d 	bl	8000284 <__aeabi_lmul>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	000b      	movs	r3, r1
 8002f6e:	0010      	movs	r0, r2
 8002f70:	0019      	movs	r1, r3
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f7fd f961 	bl	8000244 <__aeabi_uldivmod>
 8002f82:	0002      	movs	r2, r0
 8002f84:	000b      	movs	r3, r1
 8002f86:	0013      	movs	r3, r2
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8a:	e017      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	0018      	movs	r0, r3
 8002f90:	2300      	movs	r3, #0
 8002f92:	0019      	movs	r1, r3
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002f96:	2300      	movs	r3, #0
 8002f98:	f7fd f974 	bl	8000284 <__aeabi_lmul>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	000b      	movs	r3, r1
 8002fa0:	0010      	movs	r0, r2
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	001c      	movs	r4, r3
 8002fa8:	2300      	movs	r3, #0
 8002faa:	001d      	movs	r5, r3
 8002fac:	0022      	movs	r2, r4
 8002fae:	002b      	movs	r3, r5
 8002fb0:	f7fd f948 	bl	8000244 <__aeabi_uldivmod>
 8002fb4:	0002      	movs	r2, r0
 8002fb6:	000b      	movs	r3, r1
 8002fb8:	0013      	movs	r3, r2
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fc0:	e00d      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	0b5b      	lsrs	r3, r3, #13
 8002fc8:	2207      	movs	r2, #7
 8002fca:	4013      	ands	r3, r2
 8002fcc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	0212      	lsls	r2, r2, #8
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	0013      	movs	r3, r2
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fdc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b00e      	add	sp, #56	; 0x38
 8002fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	003d0900 	.word	0x003d0900
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	007a1200 	.word	0x007a1200
 8002ff8:	08004f9c 	.word	0x08004f9c

08002ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003000:	4b02      	ldr	r3, [pc, #8]	; (800300c <HAL_RCC_GetHCLKFreq+0x10>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	20000000 	.word	0x20000000

08003010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003014:	f7ff fff2 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003018:	0001      	movs	r1, r0
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	2207      	movs	r2, #7
 8003022:	4013      	ands	r3, r2
 8003024:	4a04      	ldr	r2, [pc, #16]	; (8003038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003026:	5cd3      	ldrb	r3, [r2, r3]
 8003028:	40d9      	lsrs	r1, r3
 800302a:	000b      	movs	r3, r1
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	40021000 	.word	0x40021000
 8003038:	08004f94 	.word	0x08004f94

0800303c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003040:	f7ff ffdc 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003044:	0001      	movs	r1, r0
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	0adb      	lsrs	r3, r3, #11
 800304c:	2207      	movs	r2, #7
 800304e:	4013      	ands	r3, r2
 8003050:	4a04      	ldr	r2, [pc, #16]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003052:	5cd3      	ldrb	r3, [r2, r3]
 8003054:	40d9      	lsrs	r1, r3
 8003056:	000b      	movs	r3, r1
}
 8003058:	0018      	movs	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	40021000 	.word	0x40021000
 8003064:	08004f94 	.word	0x08004f94

08003068 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003070:	2017      	movs	r0, #23
 8003072:	183b      	adds	r3, r7, r0
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2220      	movs	r2, #32
 800307e:	4013      	ands	r3, r2
 8003080:	d100      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003082:	e0c2      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003084:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	055b      	lsls	r3, r3, #21
 800308c:	4013      	ands	r3, r2
 800308e:	d109      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003090:	4b7e      	ldr	r3, [pc, #504]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003094:	4b7d      	ldr	r3, [pc, #500]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	0549      	lsls	r1, r1, #21
 800309a:	430a      	orrs	r2, r1
 800309c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800309e:	183b      	adds	r3, r7, r0
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a4:	4b7a      	ldr	r3, [pc, #488]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4013      	ands	r3, r2
 80030ae:	d11a      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b0:	4b77      	ldr	r3, [pc, #476]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	0049      	lsls	r1, r1, #1
 80030ba:	430a      	orrs	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7fe ff37 	bl	8001f30 <HAL_GetTick>
 80030c2:	0003      	movs	r3, r0
 80030c4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	e008      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c8:	f7fe ff32 	bl	8001f30 <HAL_GetTick>
 80030cc:	0002      	movs	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e0d4      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b6d      	ldr	r3, [pc, #436]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4013      	ands	r3, r2
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80030e6:	4b69      	ldr	r3, [pc, #420]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	23c0      	movs	r3, #192	; 0xc0
 80030ec:	039b      	lsls	r3, r3, #14
 80030ee:	4013      	ands	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	23c0      	movs	r3, #192	; 0xc0
 80030f8:	039b      	lsls	r3, r3, #14
 80030fa:	4013      	ands	r3, r2
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d013      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	23c0      	movs	r3, #192	; 0xc0
 8003108:	029b      	lsls	r3, r3, #10
 800310a:	401a      	ands	r2, r3
 800310c:	23c0      	movs	r3, #192	; 0xc0
 800310e:	029b      	lsls	r3, r3, #10
 8003110:	429a      	cmp	r2, r3
 8003112:	d10a      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003114:	4b5d      	ldr	r3, [pc, #372]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	029b      	lsls	r3, r3, #10
 800311c:	401a      	ands	r2, r3
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	029b      	lsls	r3, r3, #10
 8003122:	429a      	cmp	r2, r3
 8003124:	d101      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0ac      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800312a:	4b58      	ldr	r3, [pc, #352]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800312c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800312e:	23c0      	movs	r3, #192	; 0xc0
 8003130:	029b      	lsls	r3, r3, #10
 8003132:	4013      	ands	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d03b      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	23c0      	movs	r3, #192	; 0xc0
 8003142:	029b      	lsls	r3, r3, #10
 8003144:	4013      	ands	r3, r2
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	429a      	cmp	r2, r3
 800314a:	d033      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2220      	movs	r2, #32
 8003152:	4013      	ands	r3, r2
 8003154:	d02e      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003156:	4b4d      	ldr	r3, [pc, #308]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315a:	4a4e      	ldr	r2, [pc, #312]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800315c:	4013      	ands	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003160:	4b4a      	ldr	r3, [pc, #296]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003164:	4b49      	ldr	r3, [pc, #292]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003166:	2180      	movs	r1, #128	; 0x80
 8003168:	0309      	lsls	r1, r1, #12
 800316a:	430a      	orrs	r2, r1
 800316c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800316e:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003172:	4b46      	ldr	r3, [pc, #280]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003174:	4948      	ldr	r1, [pc, #288]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003176:	400a      	ands	r2, r1
 8003178:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800317a:	4b44      	ldr	r3, [pc, #272]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4013      	ands	r3, r2
 8003188:	d014      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7fe fed1 	bl	8001f30 <HAL_GetTick>
 800318e:	0003      	movs	r3, r0
 8003190:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003192:	e009      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7fe fecc 	bl	8001f30 <HAL_GetTick>
 8003198:	0002      	movs	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	4a3f      	ldr	r2, [pc, #252]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e06d      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a8:	4b38      	ldr	r3, [pc, #224]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80031aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4013      	ands	r3, r2
 80031b2:	d0ef      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	23c0      	movs	r3, #192	; 0xc0
 80031ba:	029b      	lsls	r3, r3, #10
 80031bc:	401a      	ands	r2, r3
 80031be:	23c0      	movs	r3, #192	; 0xc0
 80031c0:	029b      	lsls	r3, r3, #10
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80031c6:	4b31      	ldr	r3, [pc, #196]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a35      	ldr	r2, [pc, #212]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	23c0      	movs	r3, #192	; 0xc0
 80031d6:	039b      	lsls	r3, r3, #14
 80031d8:	401a      	ands	r2, r3
 80031da:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	4b2a      	ldr	r3, [pc, #168]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80031e2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	23c0      	movs	r3, #192	; 0xc0
 80031ea:	029b      	lsls	r3, r3, #10
 80031ec:	401a      	ands	r2, r3
 80031ee:	4b27      	ldr	r3, [pc, #156]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80031f0:	430a      	orrs	r2, r1
 80031f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031f4:	2317      	movs	r3, #23
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d105      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fe:	4b23      	ldr	r3, [pc, #140]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003202:	4b22      	ldr	r3, [pc, #136]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003204:	4927      	ldr	r1, [pc, #156]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003206:	400a      	ands	r2, r1
 8003208:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2202      	movs	r2, #2
 8003210:	4013      	ands	r3, r2
 8003212:	d009      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003218:	220c      	movs	r2, #12
 800321a:	4393      	bics	r3, r2
 800321c:	0019      	movs	r1, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003224:	430a      	orrs	r2, r1
 8003226:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2204      	movs	r2, #4
 800322e:	4013      	ands	r3, r2
 8003230:	d009      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003236:	4a1c      	ldr	r2, [pc, #112]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003238:	4013      	ands	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003242:	430a      	orrs	r2, r1
 8003244:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2208      	movs	r2, #8
 800324c:	4013      	ands	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003254:	4a15      	ldr	r2, [pc, #84]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003256:	4013      	ands	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003260:	430a      	orrs	r2, r1
 8003262:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2280      	movs	r2, #128	; 0x80
 800326a:	4013      	ands	r3, r2
 800326c:	d009      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003274:	4013      	ands	r3, r2
 8003276:	0019      	movs	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800327e:	430a      	orrs	r2, r1
 8003280:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b006      	add	sp, #24
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000
 8003290:	40007000 	.word	0x40007000
 8003294:	fffcffff 	.word	0xfffcffff
 8003298:	fff7ffff 	.word	0xfff7ffff
 800329c:	00001388 	.word	0x00001388
 80032a0:	ffcfffff 	.word	0xffcfffff
 80032a4:	efffffff 	.word	0xefffffff
 80032a8:	fffff3ff 	.word	0xfffff3ff
 80032ac:	ffffcfff 	.word	0xffffcfff
 80032b0:	fff3ffff 	.word	0xfff3ffff

080032b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e032      	b.n	800332c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2239      	movs	r2, #57	; 0x39
 80032ca:	5c9b      	ldrb	r3, [r3, r2]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d107      	bne.n	80032e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2238      	movs	r2, #56	; 0x38
 80032d6:	2100      	movs	r1, #0
 80032d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0018      	movs	r0, r3
 80032de:	f7fe fc1b 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2239      	movs	r2, #57	; 0x39
 80032e6:	2102      	movs	r1, #2
 80032e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3304      	adds	r3, #4
 80032f2:	0019      	movs	r1, r3
 80032f4:	0010      	movs	r0, r2
 80032f6:	f000 fa7f 	bl	80037f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	223e      	movs	r2, #62	; 0x3e
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	223a      	movs	r2, #58	; 0x3a
 8003306:	2101      	movs	r1, #1
 8003308:	5499      	strb	r1, [r3, r2]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	223b      	movs	r2, #59	; 0x3b
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	223c      	movs	r2, #60	; 0x3c
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	223d      	movs	r2, #61	; 0x3d
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2239      	movs	r2, #57	; 0x39
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b002      	add	sp, #8
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2239      	movs	r2, #57	; 0x39
 8003340:	5c9b      	ldrb	r3, [r3, r2]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d001      	beq.n	800334c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e02e      	b.n	80033aa <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2239      	movs	r2, #57	; 0x39
 8003350:	2102      	movs	r1, #2
 8003352:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	05db      	lsls	r3, r3, #23
 800335c:	429a      	cmp	r2, r3
 800335e:	d009      	beq.n	8003374 <HAL_TIM_Base_Start+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <HAL_TIM_Base_Start+0x80>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_Base_Start+0x40>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <HAL_TIM_Base_Start+0x84>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d111      	bne.n	8003398 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2207      	movs	r2, #7
 800337c:	4013      	ands	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b06      	cmp	r3, #6
 8003384:	d010      	beq.n	80033a8 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2101      	movs	r1, #1
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	e007      	b.n	80033a8 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2101      	movs	r1, #1
 80033a4:	430a      	orrs	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	0018      	movs	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b004      	add	sp, #16
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	40010800 	.word	0x40010800
 80033b8:	40011400 	.word	0x40011400

080033bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2239      	movs	r2, #57	; 0x39
 80033c8:	5c9b      	ldrb	r3, [r3, r2]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d001      	beq.n	80033d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e036      	b.n	8003442 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2239      	movs	r2, #57	; 0x39
 80033d8:	2102      	movs	r1, #2
 80033da:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2101      	movs	r1, #1
 80033e8:	430a      	orrs	r2, r1
 80033ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	05db      	lsls	r3, r3, #23
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d009      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x50>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a13      	ldr	r2, [pc, #76]	; (800344c <HAL_TIM_Base_Start_IT+0x90>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x50>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a12      	ldr	r2, [pc, #72]	; (8003450 <HAL_TIM_Base_Start_IT+0x94>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d111      	bne.n	8003430 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2207      	movs	r2, #7
 8003414:	4013      	ands	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b06      	cmp	r3, #6
 800341c:	d010      	beq.n	8003440 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2101      	movs	r1, #1
 800342a:	430a      	orrs	r2, r1
 800342c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342e:	e007      	b.n	8003440 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b004      	add	sp, #16
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40010800 	.word	0x40010800
 8003450:	40011400 	.word	0x40011400

08003454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2202      	movs	r2, #2
 8003464:	4013      	ands	r3, r2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d124      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2202      	movs	r2, #2
 8003472:	4013      	ands	r3, r2
 8003474:	2b02      	cmp	r3, #2
 8003476:	d11d      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2203      	movs	r2, #3
 800347e:	4252      	negs	r2, r2
 8003480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2203      	movs	r2, #3
 8003490:	4013      	ands	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	0018      	movs	r0, r3
 8003498:	f000 f996 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 800349c:	e007      	b.n	80034ae <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 f989 	bl	80037b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 f995 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2204      	movs	r2, #4
 80034bc:	4013      	ands	r3, r2
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d125      	bne.n	800350e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2204      	movs	r2, #4
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11e      	bne.n	800350e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2205      	movs	r2, #5
 80034d6:	4252      	negs	r2, r2
 80034d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	23c0      	movs	r3, #192	; 0xc0
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4013      	ands	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 f969 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 80034f6:	e007      	b.n	8003508 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f000 f95c 	bl	80037b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	0018      	movs	r0, r3
 8003504:	f000 f968 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2208      	movs	r2, #8
 8003516:	4013      	ands	r3, r2
 8003518:	2b08      	cmp	r3, #8
 800351a:	d124      	bne.n	8003566 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2208      	movs	r2, #8
 8003524:	4013      	ands	r3, r2
 8003526:	2b08      	cmp	r3, #8
 8003528:	d11d      	bne.n	8003566 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2209      	movs	r2, #9
 8003530:	4252      	negs	r2, r2
 8003532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2204      	movs	r2, #4
 8003538:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	2203      	movs	r2, #3
 8003542:	4013      	ands	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0018      	movs	r0, r3
 800354a:	f000 f93d 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 800354e:	e007      	b.n	8003560 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	0018      	movs	r0, r3
 8003554:	f000 f930 	bl	80037b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	0018      	movs	r0, r3
 800355c:	f000 f93c 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2210      	movs	r2, #16
 800356e:	4013      	ands	r3, r2
 8003570:	2b10      	cmp	r3, #16
 8003572:	d125      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2210      	movs	r2, #16
 800357c:	4013      	ands	r3, r2
 800357e:	2b10      	cmp	r3, #16
 8003580:	d11e      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2211      	movs	r2, #17
 8003588:	4252      	negs	r2, r2
 800358a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2208      	movs	r2, #8
 8003590:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	23c0      	movs	r3, #192	; 0xc0
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4013      	ands	r3, r2
 800359e:	d004      	beq.n	80035aa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	0018      	movs	r0, r3
 80035a4:	f000 f910 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e007      	b.n	80035ba <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	0018      	movs	r0, r3
 80035ae:	f000 f903 	bl	80037b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 f90f 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2201      	movs	r2, #1
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d10f      	bne.n	80035ee <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d108      	bne.n	80035ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2202      	movs	r2, #2
 80035e2:	4252      	negs	r2, r2
 80035e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7fe f815 	bl	8001618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2240      	movs	r2, #64	; 0x40
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d10f      	bne.n	800361c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2240      	movs	r2, #64	; 0x40
 8003604:	4013      	ands	r3, r2
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d108      	bne.n	800361c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2241      	movs	r2, #65	; 0x41
 8003610:	4252      	negs	r2, r2
 8003612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	0018      	movs	r0, r3
 8003618:	f000 f8e6 	bl	80037e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2238      	movs	r2, #56	; 0x38
 8003632:	5c9b      	ldrb	r3, [r3, r2]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIM_ConfigClockSource+0x18>
 8003638:	2302      	movs	r3, #2
 800363a:	e0b7      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x188>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2238      	movs	r2, #56	; 0x38
 8003640:	2101      	movs	r1, #1
 8003642:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2239      	movs	r2, #57	; 0x39
 8003648:	2102      	movs	r1, #2
 800364a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2277      	movs	r2, #119	; 0x77
 8003658:	4393      	bics	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a55      	ldr	r2, [pc, #340]	; (80037b4 <HAL_TIM_ConfigClockSource+0x190>)
 8003660:	4013      	ands	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2280      	movs	r2, #128	; 0x80
 8003672:	0192      	lsls	r2, r2, #6
 8003674:	4293      	cmp	r3, r2
 8003676:	d040      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0xd6>
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	0192      	lsls	r2, r2, #6
 800367c:	4293      	cmp	r3, r2
 800367e:	d900      	bls.n	8003682 <HAL_TIM_ConfigClockSource+0x5e>
 8003680:	e088      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x170>
 8003682:	2280      	movs	r2, #128	; 0x80
 8003684:	0152      	lsls	r2, r2, #5
 8003686:	4293      	cmp	r3, r2
 8003688:	d100      	bne.n	800368c <HAL_TIM_ConfigClockSource+0x68>
 800368a:	e085      	b.n	8003798 <HAL_TIM_ConfigClockSource+0x174>
 800368c:	2280      	movs	r2, #128	; 0x80
 800368e:	0152      	lsls	r2, r2, #5
 8003690:	4293      	cmp	r3, r2
 8003692:	d900      	bls.n	8003696 <HAL_TIM_ConfigClockSource+0x72>
 8003694:	e07e      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x170>
 8003696:	2b70      	cmp	r3, #112	; 0x70
 8003698:	d018      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0xa8>
 800369a:	d900      	bls.n	800369e <HAL_TIM_ConfigClockSource+0x7a>
 800369c:	e07a      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x170>
 800369e:	2b60      	cmp	r3, #96	; 0x60
 80036a0:	d04f      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x11e>
 80036a2:	d900      	bls.n	80036a6 <HAL_TIM_ConfigClockSource+0x82>
 80036a4:	e076      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x170>
 80036a6:	2b50      	cmp	r3, #80	; 0x50
 80036a8:	d03b      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0xfe>
 80036aa:	d900      	bls.n	80036ae <HAL_TIM_ConfigClockSource+0x8a>
 80036ac:	e072      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x170>
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d057      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0x13e>
 80036b2:	d900      	bls.n	80036b6 <HAL_TIM_ConfigClockSource+0x92>
 80036b4:	e06e      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x170>
 80036b6:	2b30      	cmp	r3, #48	; 0x30
 80036b8:	d063      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x15e>
 80036ba:	d86b      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x170>
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d060      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x15e>
 80036c0:	d868      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x170>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d05d      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x15e>
 80036c6:	2b10      	cmp	r3, #16
 80036c8:	d05b      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036ca:	e063      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f000 f95a 	bl	8003994 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2277      	movs	r2, #119	; 0x77
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]
      break;
 80036f8:	e04f      	b.n	800379a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6899      	ldr	r1, [r3, #8]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f000 f943 	bl	8003994 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	01c9      	lsls	r1, r1, #7
 800371c:	430a      	orrs	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
      break;
 8003720:	e03b      	b.n	800379a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	001a      	movs	r2, r3
 8003730:	f000 f8b6 	bl	80038a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2150      	movs	r1, #80	; 0x50
 800373a:	0018      	movs	r0, r3
 800373c:	f000 f910 	bl	8003960 <TIM_ITRx_SetConfig>
      break;
 8003740:	e02b      	b.n	800379a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	001a      	movs	r2, r3
 8003750:	f000 f8d4 	bl	80038fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2160      	movs	r1, #96	; 0x60
 800375a:	0018      	movs	r0, r3
 800375c:	f000 f900 	bl	8003960 <TIM_ITRx_SetConfig>
      break;
 8003760:	e01b      	b.n	800379a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	001a      	movs	r2, r3
 8003770:	f000 f896 	bl	80038a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2140      	movs	r1, #64	; 0x40
 800377a:	0018      	movs	r0, r3
 800377c:	f000 f8f0 	bl	8003960 <TIM_ITRx_SetConfig>
      break;
 8003780:	e00b      	b.n	800379a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0019      	movs	r1, r3
 800378c:	0010      	movs	r0, r2
 800378e:	f000 f8e7 	bl	8003960 <TIM_ITRx_SetConfig>
        break;
 8003792:	e002      	b.n	800379a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	e000      	b.n	800379a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003798:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2239      	movs	r2, #57	; 0x39
 800379e:	2101      	movs	r1, #1
 80037a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2238      	movs	r2, #56	; 0x38
 80037a6:	2100      	movs	r1, #0
 80037a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	0018      	movs	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b004      	add	sp, #16
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	ffff00ff 	.word	0xffff00ff

080037b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b002      	add	sp, #8
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037e0:	46c0      	nop			; (mov r8, r8)
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b002      	add	sp, #8
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b002      	add	sp, #8
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	05db      	lsls	r3, r3, #23
 800380e:	429a      	cmp	r2, r3
 8003810:	d007      	beq.n	8003822 <TIM_Base_SetConfig+0x2a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1f      	ldr	r2, [pc, #124]	; (8003894 <TIM_Base_SetConfig+0x9c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d003      	beq.n	8003822 <TIM_Base_SetConfig+0x2a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a1e      	ldr	r2, [pc, #120]	; (8003898 <TIM_Base_SetConfig+0xa0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d108      	bne.n	8003834 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2270      	movs	r2, #112	; 0x70
 8003826:	4393      	bics	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	05db      	lsls	r3, r3, #23
 800383a:	429a      	cmp	r2, r3
 800383c:	d007      	beq.n	800384e <TIM_Base_SetConfig+0x56>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a14      	ldr	r2, [pc, #80]	; (8003894 <TIM_Base_SetConfig+0x9c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d003      	beq.n	800384e <TIM_Base_SetConfig+0x56>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a13      	ldr	r2, [pc, #76]	; (8003898 <TIM_Base_SetConfig+0xa0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d108      	bne.n	8003860 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a12      	ldr	r2, [pc, #72]	; (800389c <TIM_Base_SetConfig+0xa4>)
 8003852:	4013      	ands	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	4393      	bics	r3, r2
 8003866:	001a      	movs	r2, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	615a      	str	r2, [r3, #20]
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b004      	add	sp, #16
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40010800 	.word	0x40010800
 8003898:	40011400 	.word	0x40011400
 800389c:	fffffcff 	.word	0xfffffcff

080038a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	2201      	movs	r2, #1
 80038b8:	4393      	bics	r3, r2
 80038ba:	001a      	movs	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	22f0      	movs	r2, #240	; 0xf0
 80038ca:	4393      	bics	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	220a      	movs	r2, #10
 80038dc:	4393      	bics	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	621a      	str	r2, [r3, #32]
}
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b006      	add	sp, #24
 80038fa:	bd80      	pop	{r7, pc}

080038fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	2210      	movs	r2, #16
 800390e:	4393      	bics	r3, r2
 8003910:	001a      	movs	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	4a0d      	ldr	r2, [pc, #52]	; (800395c <TIM_TI2_ConfigInputStage+0x60>)
 8003926:	4013      	ands	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	031b      	lsls	r3, r3, #12
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	22a0      	movs	r2, #160	; 0xa0
 8003938:	4393      	bics	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b006      	add	sp, #24
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	ffff0fff 	.word	0xffff0fff

08003960 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2270      	movs	r2, #112	; 0x70
 8003974:	4393      	bics	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	2207      	movs	r2, #7
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	609a      	str	r2, [r3, #8]
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b004      	add	sp, #16
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <TIM_ETR_SetConfig+0x3c>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	021a      	lsls	r2, r3, #8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b006      	add	sp, #24
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	ffff00ff 	.word	0xffff00ff

080039d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2238      	movs	r2, #56	; 0x38
 80039e2:	5c9b      	ldrb	r3, [r3, r2]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e042      	b.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2238      	movs	r2, #56	; 0x38
 80039f0:	2101      	movs	r1, #1
 80039f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2239      	movs	r2, #57	; 0x39
 80039f8:	2102      	movs	r1, #2
 80039fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2270      	movs	r2, #112	; 0x70
 8003a10:	4393      	bics	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	05db      	lsls	r3, r3, #23
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d009      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a11      	ldr	r2, [pc, #68]	; (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a0f      	ldr	r2, [pc, #60]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10c      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2280      	movs	r2, #128	; 0x80
 8003a4a:	4393      	bics	r3, r2
 8003a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2239      	movs	r2, #57	; 0x39
 8003a64:	2101      	movs	r1, #1
 8003a66:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2238      	movs	r2, #56	; 0x38
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	0018      	movs	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b004      	add	sp, #16
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	40010800 	.word	0x40010800
 8003a80:	40011400 	.word	0x40011400

08003a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e044      	b.n	8003b20 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d107      	bne.n	8003aae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2274      	movs	r2, #116	; 0x74
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7fe f89d 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2224      	movs	r2, #36	; 0x24
 8003ab2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2101      	movs	r1, #1
 8003ac0:	438a      	bics	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 f8d8 	bl	8003c7c <UART_SetConfig>
 8003acc:	0003      	movs	r3, r0
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e024      	b.n	8003b20 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f000 fb2d 	bl	8004140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	490d      	ldr	r1, [pc, #52]	; (8003b28 <HAL_UART_Init+0xa4>)
 8003af2:	400a      	ands	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	212a      	movs	r1, #42	; 0x2a
 8003b02:	438a      	bics	r2, r1
 8003b04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2101      	movs	r1, #1
 8003b12:	430a      	orrs	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f000 fbc5 	bl	80042a8 <UART_CheckIdleState>
 8003b1e:	0003      	movs	r3, r0
}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b002      	add	sp, #8
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	ffffb7ff 	.word	0xffffb7ff

08003b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	1dbb      	adds	r3, r7, #6
 8003b3a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d000      	beq.n	8003b46 <HAL_UART_Transmit+0x1a>
 8003b44:	e095      	b.n	8003c72 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_UART_Transmit+0x28>
 8003b4c:	1dbb      	adds	r3, r7, #6
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e08d      	b.n	8003c74 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	015b      	lsls	r3, r3, #5
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d109      	bne.n	8003b78 <HAL_UART_Transmit+0x4c>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d105      	bne.n	8003b78 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	4013      	ands	r3, r2
 8003b72:	d001      	beq.n	8003b78 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e07d      	b.n	8003c74 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2274      	movs	r2, #116	; 0x74
 8003b7c:	5c9b      	ldrb	r3, [r3, r2]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Transmit+0x5a>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e076      	b.n	8003c74 <HAL_UART_Transmit+0x148>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2274      	movs	r2, #116	; 0x74
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	2100      	movs	r1, #0
 8003b94:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2221      	movs	r2, #33	; 0x21
 8003b9a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b9c:	f7fe f9c8 	bl	8001f30 <HAL_GetTick>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1dba      	adds	r2, r7, #6
 8003ba8:	2150      	movs	r1, #80	; 0x50
 8003baa:	8812      	ldrh	r2, [r2, #0]
 8003bac:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1dba      	adds	r2, r7, #6
 8003bb2:	2152      	movs	r1, #82	; 0x52
 8003bb4:	8812      	ldrh	r2, [r2, #0]
 8003bb6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	015b      	lsls	r3, r3, #5
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d108      	bne.n	8003bd6 <HAL_UART_Transmit+0xaa>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	e003      	b.n	8003bde <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2274      	movs	r2, #116	; 0x74
 8003be2:	2100      	movs	r1, #0
 8003be4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003be6:	e02c      	b.n	8003c42 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	0013      	movs	r3, r2
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2180      	movs	r1, #128	; 0x80
 8003bf6:	f000 fb9f 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e038      	b.n	8003c74 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	001a      	movs	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	05d2      	lsls	r2, r2, #23
 8003c14:	0dd2      	lsrs	r2, r2, #23
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	3302      	adds	r3, #2
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	e007      	b.n	8003c30 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2252      	movs	r2, #82	; 0x52
 8003c34:	5a9b      	ldrh	r3, [r3, r2]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b299      	uxth	r1, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2252      	movs	r2, #82	; 0x52
 8003c40:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2252      	movs	r2, #82	; 0x52
 8003c46:	5a9b      	ldrh	r3, [r3, r2]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1cc      	bne.n	8003be8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	0013      	movs	r3, r2
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2140      	movs	r1, #64	; 0x40
 8003c5c:	f000 fb6c 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 8003c60:	1e03      	subs	r3, r0, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e005      	b.n	8003c74 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e000      	b.n	8003c74 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003c72:	2302      	movs	r3, #2
  }
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b008      	add	sp, #32
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c7c:	b5b0      	push	{r4, r5, r7, lr}
 8003c7e:	b08e      	sub	sp, #56	; 0x38
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c84:	231a      	movs	r3, #26
 8003c86:	2218      	movs	r2, #24
 8003c88:	4694      	mov	ip, r2
 8003c8a:	44bc      	add	ip, r7
 8003c8c:	4463      	add	r3, ip
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4abc      	ldr	r2, [pc, #752]	; (8003fa4 <UART_SetConfig+0x328>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4ab8      	ldr	r2, [pc, #736]	; (8003fa8 <UART_SetConfig+0x32c>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	0019      	movs	r1, r3
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4ab2      	ldr	r2, [pc, #712]	; (8003fac <UART_SetConfig+0x330>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4aad      	ldr	r2, [pc, #692]	; (8003fb0 <UART_SetConfig+0x334>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d04:	430a      	orrs	r2, r1
 8003d06:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4aa9      	ldr	r2, [pc, #676]	; (8003fb4 <UART_SetConfig+0x338>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d136      	bne.n	8003d80 <UART_SetConfig+0x104>
 8003d12:	4ba9      	ldr	r3, [pc, #676]	; (8003fb8 <UART_SetConfig+0x33c>)
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	220c      	movs	r2, #12
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b0c      	cmp	r3, #12
 8003d1c:	d020      	beq.n	8003d60 <UART_SetConfig+0xe4>
 8003d1e:	d827      	bhi.n	8003d70 <UART_SetConfig+0xf4>
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d00d      	beq.n	8003d40 <UART_SetConfig+0xc4>
 8003d24:	d824      	bhi.n	8003d70 <UART_SetConfig+0xf4>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <UART_SetConfig+0xb4>
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d010      	beq.n	8003d50 <UART_SetConfig+0xd4>
 8003d2e:	e01f      	b.n	8003d70 <UART_SetConfig+0xf4>
 8003d30:	231b      	movs	r3, #27
 8003d32:	2218      	movs	r2, #24
 8003d34:	4694      	mov	ip, r2
 8003d36:	44bc      	add	ip, r7
 8003d38:	4463      	add	r3, ip
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	e06f      	b.n	8003e20 <UART_SetConfig+0x1a4>
 8003d40:	231b      	movs	r3, #27
 8003d42:	2218      	movs	r2, #24
 8003d44:	4694      	mov	ip, r2
 8003d46:	44bc      	add	ip, r7
 8003d48:	4463      	add	r3, ip
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e067      	b.n	8003e20 <UART_SetConfig+0x1a4>
 8003d50:	231b      	movs	r3, #27
 8003d52:	2218      	movs	r2, #24
 8003d54:	4694      	mov	ip, r2
 8003d56:	44bc      	add	ip, r7
 8003d58:	4463      	add	r3, ip
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e05f      	b.n	8003e20 <UART_SetConfig+0x1a4>
 8003d60:	231b      	movs	r3, #27
 8003d62:	2218      	movs	r2, #24
 8003d64:	4694      	mov	ip, r2
 8003d66:	44bc      	add	ip, r7
 8003d68:	4463      	add	r3, ip
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e057      	b.n	8003e20 <UART_SetConfig+0x1a4>
 8003d70:	231b      	movs	r3, #27
 8003d72:	2218      	movs	r2, #24
 8003d74:	4694      	mov	ip, r2
 8003d76:	44bc      	add	ip, r7
 8003d78:	4463      	add	r3, ip
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e04f      	b.n	8003e20 <UART_SetConfig+0x1a4>
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a89      	ldr	r2, [pc, #548]	; (8003fac <UART_SetConfig+0x330>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d143      	bne.n	8003e12 <UART_SetConfig+0x196>
 8003d8a:	4b8b      	ldr	r3, [pc, #556]	; (8003fb8 <UART_SetConfig+0x33c>)
 8003d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d8e:	23c0      	movs	r3, #192	; 0xc0
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	4013      	ands	r3, r2
 8003d94:	22c0      	movs	r2, #192	; 0xc0
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d02a      	beq.n	8003df2 <UART_SetConfig+0x176>
 8003d9c:	22c0      	movs	r2, #192	; 0xc0
 8003d9e:	0112      	lsls	r2, r2, #4
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d82e      	bhi.n	8003e02 <UART_SetConfig+0x186>
 8003da4:	2280      	movs	r2, #128	; 0x80
 8003da6:	0112      	lsls	r2, r2, #4
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d012      	beq.n	8003dd2 <UART_SetConfig+0x156>
 8003dac:	2280      	movs	r2, #128	; 0x80
 8003dae:	0112      	lsls	r2, r2, #4
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d826      	bhi.n	8003e02 <UART_SetConfig+0x186>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <UART_SetConfig+0x146>
 8003db8:	2280      	movs	r2, #128	; 0x80
 8003dba:	00d2      	lsls	r2, r2, #3
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d010      	beq.n	8003de2 <UART_SetConfig+0x166>
 8003dc0:	e01f      	b.n	8003e02 <UART_SetConfig+0x186>
 8003dc2:	231b      	movs	r3, #27
 8003dc4:	2218      	movs	r2, #24
 8003dc6:	4694      	mov	ip, r2
 8003dc8:	44bc      	add	ip, r7
 8003dca:	4463      	add	r3, ip
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	e026      	b.n	8003e20 <UART_SetConfig+0x1a4>
 8003dd2:	231b      	movs	r3, #27
 8003dd4:	2218      	movs	r2, #24
 8003dd6:	4694      	mov	ip, r2
 8003dd8:	44bc      	add	ip, r7
 8003dda:	4463      	add	r3, ip
 8003ddc:	2202      	movs	r2, #2
 8003dde:	701a      	strb	r2, [r3, #0]
 8003de0:	e01e      	b.n	8003e20 <UART_SetConfig+0x1a4>
 8003de2:	231b      	movs	r3, #27
 8003de4:	2218      	movs	r2, #24
 8003de6:	4694      	mov	ip, r2
 8003de8:	44bc      	add	ip, r7
 8003dea:	4463      	add	r3, ip
 8003dec:	2204      	movs	r2, #4
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	e016      	b.n	8003e20 <UART_SetConfig+0x1a4>
 8003df2:	231b      	movs	r3, #27
 8003df4:	2218      	movs	r2, #24
 8003df6:	4694      	mov	ip, r2
 8003df8:	44bc      	add	ip, r7
 8003dfa:	4463      	add	r3, ip
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e00e      	b.n	8003e20 <UART_SetConfig+0x1a4>
 8003e02:	231b      	movs	r3, #27
 8003e04:	2218      	movs	r2, #24
 8003e06:	4694      	mov	ip, r2
 8003e08:	44bc      	add	ip, r7
 8003e0a:	4463      	add	r3, ip
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	e006      	b.n	8003e20 <UART_SetConfig+0x1a4>
 8003e12:	231b      	movs	r3, #27
 8003e14:	2218      	movs	r2, #24
 8003e16:	4694      	mov	ip, r2
 8003e18:	44bc      	add	ip, r7
 8003e1a:	4463      	add	r3, ip
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a61      	ldr	r2, [pc, #388]	; (8003fac <UART_SetConfig+0x330>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d000      	beq.n	8003e2c <UART_SetConfig+0x1b0>
 8003e2a:	e088      	b.n	8003f3e <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e2c:	231b      	movs	r3, #27
 8003e2e:	2218      	movs	r2, #24
 8003e30:	4694      	mov	ip, r2
 8003e32:	44bc      	add	ip, r7
 8003e34:	4463      	add	r3, ip
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d01d      	beq.n	8003e78 <UART_SetConfig+0x1fc>
 8003e3c:	dc20      	bgt.n	8003e80 <UART_SetConfig+0x204>
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d015      	beq.n	8003e6e <UART_SetConfig+0x1f2>
 8003e42:	dc1d      	bgt.n	8003e80 <UART_SetConfig+0x204>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <UART_SetConfig+0x1d2>
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d005      	beq.n	8003e58 <UART_SetConfig+0x1dc>
 8003e4c:	e018      	b.n	8003e80 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e4e:	f7ff f8df 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8003e52:	0003      	movs	r3, r0
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e56:	e01d      	b.n	8003e94 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e58:	4b57      	ldr	r3, [pc, #348]	; (8003fb8 <UART_SetConfig+0x33c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d002      	beq.n	8003e68 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e62:	4b56      	ldr	r3, [pc, #344]	; (8003fbc <UART_SetConfig+0x340>)
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e66:	e015      	b.n	8003e94 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8003e68:	4b55      	ldr	r3, [pc, #340]	; (8003fc0 <UART_SetConfig+0x344>)
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e6c:	e012      	b.n	8003e94 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6e:	f7ff f81f 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8003e72:	0003      	movs	r3, r0
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e76:	e00d      	b.n	8003e94 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e7e:	e009      	b.n	8003e94 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003e84:	231a      	movs	r3, #26
 8003e86:	2218      	movs	r2, #24
 8003e88:	4694      	mov	ip, r2
 8003e8a:	44bc      	add	ip, r7
 8003e8c:	4463      	add	r3, ip
 8003e8e:	2201      	movs	r2, #1
 8003e90:	701a      	strb	r2, [r3, #0]
        break;
 8003e92:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d100      	bne.n	8003e9c <UART_SetConfig+0x220>
 8003e9a:	e139      	b.n	8004110 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	0013      	movs	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	189b      	adds	r3, r3, r2
 8003ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d305      	bcc.n	8003eb8 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d907      	bls.n	8003ec8 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8003eb8:	231a      	movs	r3, #26
 8003eba:	2218      	movs	r2, #24
 8003ebc:	4694      	mov	ip, r2
 8003ebe:	44bc      	add	ip, r7
 8003ec0:	4463      	add	r3, ip
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	e123      	b.n	8004110 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	6939      	ldr	r1, [r7, #16]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	000b      	movs	r3, r1
 8003ed6:	0e1b      	lsrs	r3, r3, #24
 8003ed8:	0010      	movs	r0, r2
 8003eda:	0205      	lsls	r5, r0, #8
 8003edc:	431d      	orrs	r5, r3
 8003ede:	000b      	movs	r3, r1
 8003ee0:	021c      	lsls	r4, r3, #8
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	68b8      	ldr	r0, [r7, #8]
 8003ef0:	68f9      	ldr	r1, [r7, #12]
 8003ef2:	1900      	adds	r0, r0, r4
 8003ef4:	4169      	adcs	r1, r5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	2300      	movs	r3, #0
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f7fc f99e 	bl	8000244 <__aeabi_uldivmod>
 8003f08:	0002      	movs	r2, r0
 8003f0a:	000b      	movs	r3, r1
 8003f0c:	0013      	movs	r3, r2
 8003f0e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f12:	23c0      	movs	r3, #192	; 0xc0
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d309      	bcc.n	8003f2e <UART_SetConfig+0x2b2>
 8003f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	035b      	lsls	r3, r3, #13
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d204      	bcs.n	8003f2e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f2a:	60da      	str	r2, [r3, #12]
 8003f2c:	e0f0      	b.n	8004110 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003f2e:	231a      	movs	r3, #26
 8003f30:	2218      	movs	r2, #24
 8003f32:	4694      	mov	ip, r2
 8003f34:	44bc      	add	ip, r7
 8003f36:	4463      	add	r3, ip
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e0e8      	b.n	8004110 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	69da      	ldr	r2, [r3, #28]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d000      	beq.n	8003f4c <UART_SetConfig+0x2d0>
 8003f4a:	e087      	b.n	800405c <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8003f4c:	231b      	movs	r3, #27
 8003f4e:	2218      	movs	r2, #24
 8003f50:	4694      	mov	ip, r2
 8003f52:	44bc      	add	ip, r7
 8003f54:	4463      	add	r3, ip
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d835      	bhi.n	8003fc8 <UART_SetConfig+0x34c>
 8003f5c:	009a      	lsls	r2, r3, #2
 8003f5e:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <UART_SetConfig+0x348>)
 8003f60:	18d3      	adds	r3, r2, r3
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f66:	f7ff f853 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8003f6a:	0003      	movs	r3, r0
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f6e:	e035      	b.n	8003fdc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f70:	f7ff f864 	bl	800303c <HAL_RCC_GetPCLK2Freq>
 8003f74:	0003      	movs	r3, r0
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f78:	e030      	b.n	8003fdc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <UART_SetConfig+0x33c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2210      	movs	r2, #16
 8003f80:	4013      	ands	r3, r2
 8003f82:	d002      	beq.n	8003f8a <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f84:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <UART_SetConfig+0x340>)
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f88:	e028      	b.n	8003fdc <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <UART_SetConfig+0x344>)
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f8e:	e025      	b.n	8003fdc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f90:	f7fe ff8e 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8003f94:	0003      	movs	r3, r0
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f98:	e020      	b.n	8003fdc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003fa0:	e01c      	b.n	8003fdc <UART_SetConfig+0x360>
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	efff69f3 	.word	0xefff69f3
 8003fa8:	ffffcfff 	.word	0xffffcfff
 8003fac:	40004800 	.word	0x40004800
 8003fb0:	fffff4ff 	.word	0xfffff4ff
 8003fb4:	40004400 	.word	0x40004400
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	003d0900 	.word	0x003d0900
 8003fc0:	00f42400 	.word	0x00f42400
 8003fc4:	08004fa8 	.word	0x08004fa8
      default:
        pclk = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003fcc:	231a      	movs	r3, #26
 8003fce:	2218      	movs	r2, #24
 8003fd0:	4694      	mov	ip, r2
 8003fd2:	44bc      	add	ip, r7
 8003fd4:	4463      	add	r3, ip
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
        break;
 8003fda:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d100      	bne.n	8003fe4 <UART_SetConfig+0x368>
 8003fe2:	e095      	b.n	8004110 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	005a      	lsls	r2, r3, #1
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	18d2      	adds	r2, r2, r3
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	0010      	movs	r0, r2
 8003ff8:	f7fc f898 	bl	800012c <__udivsi3>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	2b0f      	cmp	r3, #15
 8004006:	d921      	bls.n	800404c <UART_SetConfig+0x3d0>
 8004008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	025b      	lsls	r3, r3, #9
 800400e:	429a      	cmp	r2, r3
 8004010:	d21c      	bcs.n	800404c <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	b29a      	uxth	r2, r3
 8004016:	200e      	movs	r0, #14
 8004018:	2418      	movs	r4, #24
 800401a:	193b      	adds	r3, r7, r4
 800401c:	181b      	adds	r3, r3, r0
 800401e:	210f      	movs	r1, #15
 8004020:	438a      	bics	r2, r1
 8004022:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	085b      	lsrs	r3, r3, #1
 8004028:	b29b      	uxth	r3, r3
 800402a:	2207      	movs	r2, #7
 800402c:	4013      	ands	r3, r2
 800402e:	b299      	uxth	r1, r3
 8004030:	193b      	adds	r3, r7, r4
 8004032:	181b      	adds	r3, r3, r0
 8004034:	193a      	adds	r2, r7, r4
 8004036:	1812      	adds	r2, r2, r0
 8004038:	8812      	ldrh	r2, [r2, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	193a      	adds	r2, r7, r4
 8004044:	1812      	adds	r2, r2, r0
 8004046:	8812      	ldrh	r2, [r2, #0]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	e061      	b.n	8004110 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800404c:	231a      	movs	r3, #26
 800404e:	2218      	movs	r2, #24
 8004050:	4694      	mov	ip, r2
 8004052:	44bc      	add	ip, r7
 8004054:	4463      	add	r3, ip
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	e059      	b.n	8004110 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800405c:	231b      	movs	r3, #27
 800405e:	2218      	movs	r2, #24
 8004060:	4694      	mov	ip, r2
 8004062:	44bc      	add	ip, r7
 8004064:	4463      	add	r3, ip
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d822      	bhi.n	80040b2 <UART_SetConfig+0x436>
 800406c:	009a      	lsls	r2, r3, #2
 800406e:	4b30      	ldr	r3, [pc, #192]	; (8004130 <UART_SetConfig+0x4b4>)
 8004070:	18d3      	adds	r3, r2, r3
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004076:	f7fe ffcb 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 800407a:	0003      	movs	r3, r0
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800407e:	e022      	b.n	80040c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004080:	f7fe ffdc 	bl	800303c <HAL_RCC_GetPCLK2Freq>
 8004084:	0003      	movs	r3, r0
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004088:	e01d      	b.n	80040c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800408a:	4b2a      	ldr	r3, [pc, #168]	; (8004134 <UART_SetConfig+0x4b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2210      	movs	r2, #16
 8004090:	4013      	ands	r3, r2
 8004092:	d002      	beq.n	800409a <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004094:	4b28      	ldr	r3, [pc, #160]	; (8004138 <UART_SetConfig+0x4bc>)
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004098:	e015      	b.n	80040c6 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 800409a:	4b28      	ldr	r3, [pc, #160]	; (800413c <UART_SetConfig+0x4c0>)
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800409e:	e012      	b.n	80040c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a0:	f7fe ff06 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 80040a4:	0003      	movs	r3, r0
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040a8:	e00d      	b.n	80040c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040b0:	e009      	b.n	80040c6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80040b6:	231a      	movs	r3, #26
 80040b8:	2218      	movs	r2, #24
 80040ba:	4694      	mov	ip, r2
 80040bc:	44bc      	add	ip, r7
 80040be:	4463      	add	r3, ip
 80040c0:	2201      	movs	r2, #1
 80040c2:	701a      	strb	r2, [r3, #0]
        break;
 80040c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d021      	beq.n	8004110 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	085a      	lsrs	r2, r3, #1
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	18d2      	adds	r2, r2, r3
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	0019      	movs	r1, r3
 80040dc:	0010      	movs	r0, r2
 80040de:	f7fc f825 	bl	800012c <__udivsi3>
 80040e2:	0003      	movs	r3, r0
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	d909      	bls.n	8004102 <UART_SetConfig+0x486>
 80040ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	025b      	lsls	r3, r3, #9
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d204      	bcs.n	8004102 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fe:	60da      	str	r2, [r3, #12]
 8004100:	e006      	b.n	8004110 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004102:	231a      	movs	r3, #26
 8004104:	2218      	movs	r2, #24
 8004106:	4694      	mov	ip, r2
 8004108:	44bc      	add	ip, r7
 800410a:	4463      	add	r3, ip
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2200      	movs	r2, #0
 8004114:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2200      	movs	r2, #0
 800411a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800411c:	231a      	movs	r3, #26
 800411e:	2218      	movs	r2, #24
 8004120:	4694      	mov	ip, r2
 8004122:	44bc      	add	ip, r7
 8004124:	4463      	add	r3, ip
 8004126:	781b      	ldrb	r3, [r3, #0]
}
 8004128:	0018      	movs	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	b00e      	add	sp, #56	; 0x38
 800412e:	bdb0      	pop	{r4, r5, r7, pc}
 8004130:	08004fcc 	.word	0x08004fcc
 8004134:	40021000 	.word	0x40021000
 8004138:	003d0900 	.word	0x003d0900
 800413c:	00f42400 	.word	0x00f42400

08004140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	2201      	movs	r2, #1
 800414e:	4013      	ands	r3, r2
 8004150:	d00b      	beq.n	800416a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a4a      	ldr	r2, [pc, #296]	; (8004284 <UART_AdvFeatureConfig+0x144>)
 800415a:	4013      	ands	r3, r2
 800415c:	0019      	movs	r1, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2202      	movs	r2, #2
 8004170:	4013      	ands	r3, r2
 8004172:	d00b      	beq.n	800418c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4a43      	ldr	r2, [pc, #268]	; (8004288 <UART_AdvFeatureConfig+0x148>)
 800417c:	4013      	ands	r3, r2
 800417e:	0019      	movs	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	2204      	movs	r2, #4
 8004192:	4013      	ands	r3, r2
 8004194:	d00b      	beq.n	80041ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4a3b      	ldr	r2, [pc, #236]	; (800428c <UART_AdvFeatureConfig+0x14c>)
 800419e:	4013      	ands	r3, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	2208      	movs	r2, #8
 80041b4:	4013      	ands	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	4a34      	ldr	r2, [pc, #208]	; (8004290 <UART_AdvFeatureConfig+0x150>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	0019      	movs	r1, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	2210      	movs	r2, #16
 80041d6:	4013      	ands	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	4a2c      	ldr	r2, [pc, #176]	; (8004294 <UART_AdvFeatureConfig+0x154>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	0019      	movs	r1, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	2220      	movs	r2, #32
 80041f8:	4013      	ands	r3, r2
 80041fa:	d00b      	beq.n	8004214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	4a25      	ldr	r2, [pc, #148]	; (8004298 <UART_AdvFeatureConfig+0x158>)
 8004204:	4013      	ands	r3, r2
 8004206:	0019      	movs	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2240      	movs	r2, #64	; 0x40
 800421a:	4013      	ands	r3, r2
 800421c:	d01d      	beq.n	800425a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a1d      	ldr	r2, [pc, #116]	; (800429c <UART_AdvFeatureConfig+0x15c>)
 8004226:	4013      	ands	r3, r2
 8004228:	0019      	movs	r1, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800423a:	2380      	movs	r3, #128	; 0x80
 800423c:	035b      	lsls	r3, r3, #13
 800423e:	429a      	cmp	r2, r3
 8004240:	d10b      	bne.n	800425a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <UART_AdvFeatureConfig+0x160>)
 800424a:	4013      	ands	r3, r2
 800424c:	0019      	movs	r1, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2280      	movs	r2, #128	; 0x80
 8004260:	4013      	ands	r3, r2
 8004262:	d00b      	beq.n	800427c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4a0e      	ldr	r2, [pc, #56]	; (80042a4 <UART_AdvFeatureConfig+0x164>)
 800426c:	4013      	ands	r3, r2
 800426e:	0019      	movs	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	605a      	str	r2, [r3, #4]
  }
}
 800427c:	46c0      	nop			; (mov r8, r8)
 800427e:	46bd      	mov	sp, r7
 8004280:	b002      	add	sp, #8
 8004282:	bd80      	pop	{r7, pc}
 8004284:	fffdffff 	.word	0xfffdffff
 8004288:	fffeffff 	.word	0xfffeffff
 800428c:	fffbffff 	.word	0xfffbffff
 8004290:	ffff7fff 	.word	0xffff7fff
 8004294:	ffffefff 	.word	0xffffefff
 8004298:	ffffdfff 	.word	0xffffdfff
 800429c:	ffefffff 	.word	0xffefffff
 80042a0:	ff9fffff 	.word	0xff9fffff
 80042a4:	fff7ffff 	.word	0xfff7ffff

080042a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	2100      	movs	r1, #0
 80042b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042b8:	f7fd fe3a 	bl	8001f30 <HAL_GetTick>
 80042bc:	0003      	movs	r3, r0
 80042be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2208      	movs	r2, #8
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d10c      	bne.n	80042e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	0391      	lsls	r1, r2, #14
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4a17      	ldr	r2, [pc, #92]	; (8004334 <UART_CheckIdleState+0x8c>)
 80042d8:	9200      	str	r2, [sp, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	f000 f82c 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 80042e0:	1e03      	subs	r3, r0, #0
 80042e2:	d001      	beq.n	80042e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e021      	b.n	800432c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2204      	movs	r2, #4
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d10c      	bne.n	8004310 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2280      	movs	r2, #128	; 0x80
 80042fa:	03d1      	lsls	r1, r2, #15
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	4a0d      	ldr	r2, [pc, #52]	; (8004334 <UART_CheckIdleState+0x8c>)
 8004300:	9200      	str	r2, [sp, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	f000 f818 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d001      	beq.n	8004310 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e00d      	b.n	800432c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2274      	movs	r2, #116	; 0x74
 8004326:	2100      	movs	r1, #0
 8004328:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	0018      	movs	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	b004      	add	sp, #16
 8004332:	bd80      	pop	{r7, pc}
 8004334:	01ffffff 	.word	0x01ffffff

08004338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	1dfb      	adds	r3, r7, #7
 8004346:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004348:	e05e      	b.n	8004408 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	3301      	adds	r3, #1
 800434e:	d05b      	beq.n	8004408 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004350:	f7fd fdee 	bl	8001f30 <HAL_GetTick>
 8004354:	0002      	movs	r2, r0
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	429a      	cmp	r2, r3
 800435e:	d302      	bcc.n	8004366 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d11b      	bne.n	800439e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	492f      	ldr	r1, [pc, #188]	; (8004430 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004372:	400a      	ands	r2, r1
 8004374:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2101      	movs	r1, #1
 8004382:	438a      	bics	r2, r1
 8004384:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2274      	movs	r2, #116	; 0x74
 8004396:	2100      	movs	r1, #0
 8004398:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e044      	b.n	8004428 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2204      	movs	r2, #4
 80043a6:	4013      	ands	r3, r2
 80043a8:	d02e      	beq.n	8004408 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	401a      	ands	r2, r3
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d124      	bne.n	8004408 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2280      	movs	r2, #128	; 0x80
 80043c4:	0112      	lsls	r2, r2, #4
 80043c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4917      	ldr	r1, [pc, #92]	; (8004430 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80043d4:	400a      	ands	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2101      	movs	r1, #1
 80043e4:	438a      	bics	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2280      	movs	r2, #128	; 0x80
 80043f8:	2120      	movs	r1, #32
 80043fa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2274      	movs	r2, #116	; 0x74
 8004400:	2100      	movs	r1, #0
 8004402:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e00f      	b.n	8004428 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4013      	ands	r3, r2
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	425a      	negs	r2, r3
 8004418:	4153      	adcs	r3, r2
 800441a:	b2db      	uxtb	r3, r3
 800441c:	001a      	movs	r2, r3
 800441e:	1dfb      	adds	r3, r7, #7
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d091      	beq.n	800434a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	b004      	add	sp, #16
 800442e:	bd80      	pop	{r7, pc}
 8004430:	fffffe5f 	.word	0xfffffe5f

08004434 <__errno>:
 8004434:	4b01      	ldr	r3, [pc, #4]	; (800443c <__errno+0x8>)
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	4770      	bx	lr
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	2000000c 	.word	0x2000000c

08004440 <__libc_init_array>:
 8004440:	b570      	push	{r4, r5, r6, lr}
 8004442:	2600      	movs	r6, #0
 8004444:	4d0c      	ldr	r5, [pc, #48]	; (8004478 <__libc_init_array+0x38>)
 8004446:	4c0d      	ldr	r4, [pc, #52]	; (800447c <__libc_init_array+0x3c>)
 8004448:	1b64      	subs	r4, r4, r5
 800444a:	10a4      	asrs	r4, r4, #2
 800444c:	42a6      	cmp	r6, r4
 800444e:	d109      	bne.n	8004464 <__libc_init_array+0x24>
 8004450:	2600      	movs	r6, #0
 8004452:	f000 fc7d 	bl	8004d50 <_init>
 8004456:	4d0a      	ldr	r5, [pc, #40]	; (8004480 <__libc_init_array+0x40>)
 8004458:	4c0a      	ldr	r4, [pc, #40]	; (8004484 <__libc_init_array+0x44>)
 800445a:	1b64      	subs	r4, r4, r5
 800445c:	10a4      	asrs	r4, r4, #2
 800445e:	42a6      	cmp	r6, r4
 8004460:	d105      	bne.n	800446e <__libc_init_array+0x2e>
 8004462:	bd70      	pop	{r4, r5, r6, pc}
 8004464:	00b3      	lsls	r3, r6, #2
 8004466:	58eb      	ldr	r3, [r5, r3]
 8004468:	4798      	blx	r3
 800446a:	3601      	adds	r6, #1
 800446c:	e7ee      	b.n	800444c <__libc_init_array+0xc>
 800446e:	00b3      	lsls	r3, r6, #2
 8004470:	58eb      	ldr	r3, [r5, r3]
 8004472:	4798      	blx	r3
 8004474:	3601      	adds	r6, #1
 8004476:	e7f2      	b.n	800445e <__libc_init_array+0x1e>
 8004478:	0800502c 	.word	0x0800502c
 800447c:	0800502c 	.word	0x0800502c
 8004480:	0800502c 	.word	0x0800502c
 8004484:	08005030 	.word	0x08005030

08004488 <memset>:
 8004488:	0003      	movs	r3, r0
 800448a:	1882      	adds	r2, r0, r2
 800448c:	4293      	cmp	r3, r2
 800448e:	d100      	bne.n	8004492 <memset+0xa>
 8004490:	4770      	bx	lr
 8004492:	7019      	strb	r1, [r3, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	e7f9      	b.n	800448c <memset+0x4>

08004498 <sniprintf>:
 8004498:	b40c      	push	{r2, r3}
 800449a:	b530      	push	{r4, r5, lr}
 800449c:	4b17      	ldr	r3, [pc, #92]	; (80044fc <sniprintf+0x64>)
 800449e:	000c      	movs	r4, r1
 80044a0:	681d      	ldr	r5, [r3, #0]
 80044a2:	b09d      	sub	sp, #116	; 0x74
 80044a4:	2900      	cmp	r1, #0
 80044a6:	da08      	bge.n	80044ba <sniprintf+0x22>
 80044a8:	238b      	movs	r3, #139	; 0x8b
 80044aa:	2001      	movs	r0, #1
 80044ac:	602b      	str	r3, [r5, #0]
 80044ae:	4240      	negs	r0, r0
 80044b0:	b01d      	add	sp, #116	; 0x74
 80044b2:	bc30      	pop	{r4, r5}
 80044b4:	bc08      	pop	{r3}
 80044b6:	b002      	add	sp, #8
 80044b8:	4718      	bx	r3
 80044ba:	2382      	movs	r3, #130	; 0x82
 80044bc:	466a      	mov	r2, sp
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	8293      	strh	r3, [r2, #20]
 80044c2:	2300      	movs	r3, #0
 80044c4:	9002      	str	r0, [sp, #8]
 80044c6:	9006      	str	r0, [sp, #24]
 80044c8:	4299      	cmp	r1, r3
 80044ca:	d000      	beq.n	80044ce <sniprintf+0x36>
 80044cc:	1e4b      	subs	r3, r1, #1
 80044ce:	9304      	str	r3, [sp, #16]
 80044d0:	9307      	str	r3, [sp, #28]
 80044d2:	2301      	movs	r3, #1
 80044d4:	466a      	mov	r2, sp
 80044d6:	425b      	negs	r3, r3
 80044d8:	82d3      	strh	r3, [r2, #22]
 80044da:	0028      	movs	r0, r5
 80044dc:	ab21      	add	r3, sp, #132	; 0x84
 80044de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80044e0:	a902      	add	r1, sp, #8
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	f000 f890 	bl	8004608 <_svfiprintf_r>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	da01      	bge.n	80044f0 <sniprintf+0x58>
 80044ec:	238b      	movs	r3, #139	; 0x8b
 80044ee:	602b      	str	r3, [r5, #0]
 80044f0:	2c00      	cmp	r4, #0
 80044f2:	d0dd      	beq.n	80044b0 <sniprintf+0x18>
 80044f4:	2300      	movs	r3, #0
 80044f6:	9a02      	ldr	r2, [sp, #8]
 80044f8:	7013      	strb	r3, [r2, #0]
 80044fa:	e7d9      	b.n	80044b0 <sniprintf+0x18>
 80044fc:	2000000c 	.word	0x2000000c

08004500 <_vsiprintf_r>:
 8004500:	b500      	push	{lr}
 8004502:	b09b      	sub	sp, #108	; 0x6c
 8004504:	9100      	str	r1, [sp, #0]
 8004506:	9104      	str	r1, [sp, #16]
 8004508:	4906      	ldr	r1, [pc, #24]	; (8004524 <_vsiprintf_r+0x24>)
 800450a:	9105      	str	r1, [sp, #20]
 800450c:	9102      	str	r1, [sp, #8]
 800450e:	4906      	ldr	r1, [pc, #24]	; (8004528 <_vsiprintf_r+0x28>)
 8004510:	9103      	str	r1, [sp, #12]
 8004512:	4669      	mov	r1, sp
 8004514:	f000 f878 	bl	8004608 <_svfiprintf_r>
 8004518:	2300      	movs	r3, #0
 800451a:	9a00      	ldr	r2, [sp, #0]
 800451c:	7013      	strb	r3, [r2, #0]
 800451e:	b01b      	add	sp, #108	; 0x6c
 8004520:	bd00      	pop	{pc}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	7fffffff 	.word	0x7fffffff
 8004528:	ffff0208 	.word	0xffff0208

0800452c <vsiprintf>:
 800452c:	b510      	push	{r4, lr}
 800452e:	0013      	movs	r3, r2
 8004530:	000a      	movs	r2, r1
 8004532:	0001      	movs	r1, r0
 8004534:	4802      	ldr	r0, [pc, #8]	; (8004540 <vsiprintf+0x14>)
 8004536:	6800      	ldr	r0, [r0, #0]
 8004538:	f7ff ffe2 	bl	8004500 <_vsiprintf_r>
 800453c:	bd10      	pop	{r4, pc}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	2000000c 	.word	0x2000000c

08004544 <__ssputs_r>:
 8004544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004546:	688e      	ldr	r6, [r1, #8]
 8004548:	b085      	sub	sp, #20
 800454a:	0007      	movs	r7, r0
 800454c:	000c      	movs	r4, r1
 800454e:	9203      	str	r2, [sp, #12]
 8004550:	9301      	str	r3, [sp, #4]
 8004552:	429e      	cmp	r6, r3
 8004554:	d83c      	bhi.n	80045d0 <__ssputs_r+0x8c>
 8004556:	2390      	movs	r3, #144	; 0x90
 8004558:	898a      	ldrh	r2, [r1, #12]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	421a      	tst	r2, r3
 800455e:	d034      	beq.n	80045ca <__ssputs_r+0x86>
 8004560:	2503      	movs	r5, #3
 8004562:	6909      	ldr	r1, [r1, #16]
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	1a5b      	subs	r3, r3, r1
 8004568:	9302      	str	r3, [sp, #8]
 800456a:	6963      	ldr	r3, [r4, #20]
 800456c:	9802      	ldr	r0, [sp, #8]
 800456e:	435d      	muls	r5, r3
 8004570:	0feb      	lsrs	r3, r5, #31
 8004572:	195d      	adds	r5, r3, r5
 8004574:	9b01      	ldr	r3, [sp, #4]
 8004576:	106d      	asrs	r5, r5, #1
 8004578:	3301      	adds	r3, #1
 800457a:	181b      	adds	r3, r3, r0
 800457c:	42ab      	cmp	r3, r5
 800457e:	d900      	bls.n	8004582 <__ssputs_r+0x3e>
 8004580:	001d      	movs	r5, r3
 8004582:	0553      	lsls	r3, r2, #21
 8004584:	d532      	bpl.n	80045ec <__ssputs_r+0xa8>
 8004586:	0029      	movs	r1, r5
 8004588:	0038      	movs	r0, r7
 800458a:	f000 fb31 	bl	8004bf0 <_malloc_r>
 800458e:	1e06      	subs	r6, r0, #0
 8004590:	d109      	bne.n	80045a6 <__ssputs_r+0x62>
 8004592:	230c      	movs	r3, #12
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	2340      	movs	r3, #64	; 0x40
 8004598:	2001      	movs	r0, #1
 800459a:	89a2      	ldrh	r2, [r4, #12]
 800459c:	4240      	negs	r0, r0
 800459e:	4313      	orrs	r3, r2
 80045a0:	81a3      	strh	r3, [r4, #12]
 80045a2:	b005      	add	sp, #20
 80045a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a6:	9a02      	ldr	r2, [sp, #8]
 80045a8:	6921      	ldr	r1, [r4, #16]
 80045aa:	f000 faba 	bl	8004b22 <memcpy>
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	4a14      	ldr	r2, [pc, #80]	; (8004604 <__ssputs_r+0xc0>)
 80045b2:	401a      	ands	r2, r3
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	4313      	orrs	r3, r2
 80045b8:	81a3      	strh	r3, [r4, #12]
 80045ba:	9b02      	ldr	r3, [sp, #8]
 80045bc:	6126      	str	r6, [r4, #16]
 80045be:	18f6      	adds	r6, r6, r3
 80045c0:	6026      	str	r6, [r4, #0]
 80045c2:	6165      	str	r5, [r4, #20]
 80045c4:	9e01      	ldr	r6, [sp, #4]
 80045c6:	1aed      	subs	r5, r5, r3
 80045c8:	60a5      	str	r5, [r4, #8]
 80045ca:	9b01      	ldr	r3, [sp, #4]
 80045cc:	429e      	cmp	r6, r3
 80045ce:	d900      	bls.n	80045d2 <__ssputs_r+0x8e>
 80045d0:	9e01      	ldr	r6, [sp, #4]
 80045d2:	0032      	movs	r2, r6
 80045d4:	9903      	ldr	r1, [sp, #12]
 80045d6:	6820      	ldr	r0, [r4, #0]
 80045d8:	f000 faac 	bl	8004b34 <memmove>
 80045dc:	68a3      	ldr	r3, [r4, #8]
 80045de:	2000      	movs	r0, #0
 80045e0:	1b9b      	subs	r3, r3, r6
 80045e2:	60a3      	str	r3, [r4, #8]
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	199e      	adds	r6, r3, r6
 80045e8:	6026      	str	r6, [r4, #0]
 80045ea:	e7da      	b.n	80045a2 <__ssputs_r+0x5e>
 80045ec:	002a      	movs	r2, r5
 80045ee:	0038      	movs	r0, r7
 80045f0:	f000 fb5c 	bl	8004cac <_realloc_r>
 80045f4:	1e06      	subs	r6, r0, #0
 80045f6:	d1e0      	bne.n	80045ba <__ssputs_r+0x76>
 80045f8:	0038      	movs	r0, r7
 80045fa:	6921      	ldr	r1, [r4, #16]
 80045fc:	f000 faae 	bl	8004b5c <_free_r>
 8004600:	e7c7      	b.n	8004592 <__ssputs_r+0x4e>
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	fffffb7f 	.word	0xfffffb7f

08004608 <_svfiprintf_r>:
 8004608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460a:	b0a1      	sub	sp, #132	; 0x84
 800460c:	9003      	str	r0, [sp, #12]
 800460e:	001d      	movs	r5, r3
 8004610:	898b      	ldrh	r3, [r1, #12]
 8004612:	000f      	movs	r7, r1
 8004614:	0016      	movs	r6, r2
 8004616:	061b      	lsls	r3, r3, #24
 8004618:	d511      	bpl.n	800463e <_svfiprintf_r+0x36>
 800461a:	690b      	ldr	r3, [r1, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10e      	bne.n	800463e <_svfiprintf_r+0x36>
 8004620:	2140      	movs	r1, #64	; 0x40
 8004622:	f000 fae5 	bl	8004bf0 <_malloc_r>
 8004626:	6038      	str	r0, [r7, #0]
 8004628:	6138      	str	r0, [r7, #16]
 800462a:	2800      	cmp	r0, #0
 800462c:	d105      	bne.n	800463a <_svfiprintf_r+0x32>
 800462e:	230c      	movs	r3, #12
 8004630:	9a03      	ldr	r2, [sp, #12]
 8004632:	3801      	subs	r0, #1
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	b021      	add	sp, #132	; 0x84
 8004638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800463a:	2340      	movs	r3, #64	; 0x40
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	2300      	movs	r3, #0
 8004640:	ac08      	add	r4, sp, #32
 8004642:	6163      	str	r3, [r4, #20]
 8004644:	3320      	adds	r3, #32
 8004646:	7663      	strb	r3, [r4, #25]
 8004648:	3310      	adds	r3, #16
 800464a:	76a3      	strb	r3, [r4, #26]
 800464c:	9507      	str	r5, [sp, #28]
 800464e:	0035      	movs	r5, r6
 8004650:	782b      	ldrb	r3, [r5, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <_svfiprintf_r+0x52>
 8004656:	2b25      	cmp	r3, #37	; 0x25
 8004658:	d147      	bne.n	80046ea <_svfiprintf_r+0xe2>
 800465a:	1bab      	subs	r3, r5, r6
 800465c:	9305      	str	r3, [sp, #20]
 800465e:	42b5      	cmp	r5, r6
 8004660:	d00c      	beq.n	800467c <_svfiprintf_r+0x74>
 8004662:	0032      	movs	r2, r6
 8004664:	0039      	movs	r1, r7
 8004666:	9803      	ldr	r0, [sp, #12]
 8004668:	f7ff ff6c 	bl	8004544 <__ssputs_r>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d100      	bne.n	8004672 <_svfiprintf_r+0x6a>
 8004670:	e0ae      	b.n	80047d0 <_svfiprintf_r+0x1c8>
 8004672:	6962      	ldr	r2, [r4, #20]
 8004674:	9b05      	ldr	r3, [sp, #20]
 8004676:	4694      	mov	ip, r2
 8004678:	4463      	add	r3, ip
 800467a:	6163      	str	r3, [r4, #20]
 800467c:	782b      	ldrb	r3, [r5, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d100      	bne.n	8004684 <_svfiprintf_r+0x7c>
 8004682:	e0a5      	b.n	80047d0 <_svfiprintf_r+0x1c8>
 8004684:	2201      	movs	r2, #1
 8004686:	2300      	movs	r3, #0
 8004688:	4252      	negs	r2, r2
 800468a:	6062      	str	r2, [r4, #4]
 800468c:	a904      	add	r1, sp, #16
 800468e:	3254      	adds	r2, #84	; 0x54
 8004690:	1852      	adds	r2, r2, r1
 8004692:	1c6e      	adds	r6, r5, #1
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	60e3      	str	r3, [r4, #12]
 8004698:	60a3      	str	r3, [r4, #8]
 800469a:	7013      	strb	r3, [r2, #0]
 800469c:	65a3      	str	r3, [r4, #88]	; 0x58
 800469e:	2205      	movs	r2, #5
 80046a0:	7831      	ldrb	r1, [r6, #0]
 80046a2:	4854      	ldr	r0, [pc, #336]	; (80047f4 <_svfiprintf_r+0x1ec>)
 80046a4:	f000 fa32 	bl	8004b0c <memchr>
 80046a8:	1c75      	adds	r5, r6, #1
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d11f      	bne.n	80046ee <_svfiprintf_r+0xe6>
 80046ae:	6822      	ldr	r2, [r4, #0]
 80046b0:	06d3      	lsls	r3, r2, #27
 80046b2:	d504      	bpl.n	80046be <_svfiprintf_r+0xb6>
 80046b4:	2353      	movs	r3, #83	; 0x53
 80046b6:	a904      	add	r1, sp, #16
 80046b8:	185b      	adds	r3, r3, r1
 80046ba:	2120      	movs	r1, #32
 80046bc:	7019      	strb	r1, [r3, #0]
 80046be:	0713      	lsls	r3, r2, #28
 80046c0:	d504      	bpl.n	80046cc <_svfiprintf_r+0xc4>
 80046c2:	2353      	movs	r3, #83	; 0x53
 80046c4:	a904      	add	r1, sp, #16
 80046c6:	185b      	adds	r3, r3, r1
 80046c8:	212b      	movs	r1, #43	; 0x2b
 80046ca:	7019      	strb	r1, [r3, #0]
 80046cc:	7833      	ldrb	r3, [r6, #0]
 80046ce:	2b2a      	cmp	r3, #42	; 0x2a
 80046d0:	d016      	beq.n	8004700 <_svfiprintf_r+0xf8>
 80046d2:	0035      	movs	r5, r6
 80046d4:	2100      	movs	r1, #0
 80046d6:	200a      	movs	r0, #10
 80046d8:	68e3      	ldr	r3, [r4, #12]
 80046da:	782a      	ldrb	r2, [r5, #0]
 80046dc:	1c6e      	adds	r6, r5, #1
 80046de:	3a30      	subs	r2, #48	; 0x30
 80046e0:	2a09      	cmp	r2, #9
 80046e2:	d94e      	bls.n	8004782 <_svfiprintf_r+0x17a>
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d111      	bne.n	800470c <_svfiprintf_r+0x104>
 80046e8:	e017      	b.n	800471a <_svfiprintf_r+0x112>
 80046ea:	3501      	adds	r5, #1
 80046ec:	e7b0      	b.n	8004650 <_svfiprintf_r+0x48>
 80046ee:	4b41      	ldr	r3, [pc, #260]	; (80047f4 <_svfiprintf_r+0x1ec>)
 80046f0:	6822      	ldr	r2, [r4, #0]
 80046f2:	1ac0      	subs	r0, r0, r3
 80046f4:	2301      	movs	r3, #1
 80046f6:	4083      	lsls	r3, r0
 80046f8:	4313      	orrs	r3, r2
 80046fa:	002e      	movs	r6, r5
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	e7ce      	b.n	800469e <_svfiprintf_r+0x96>
 8004700:	9b07      	ldr	r3, [sp, #28]
 8004702:	1d19      	adds	r1, r3, #4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	9107      	str	r1, [sp, #28]
 8004708:	2b00      	cmp	r3, #0
 800470a:	db01      	blt.n	8004710 <_svfiprintf_r+0x108>
 800470c:	930b      	str	r3, [sp, #44]	; 0x2c
 800470e:	e004      	b.n	800471a <_svfiprintf_r+0x112>
 8004710:	425b      	negs	r3, r3
 8004712:	60e3      	str	r3, [r4, #12]
 8004714:	2302      	movs	r3, #2
 8004716:	4313      	orrs	r3, r2
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	782b      	ldrb	r3, [r5, #0]
 800471c:	2b2e      	cmp	r3, #46	; 0x2e
 800471e:	d10a      	bne.n	8004736 <_svfiprintf_r+0x12e>
 8004720:	786b      	ldrb	r3, [r5, #1]
 8004722:	2b2a      	cmp	r3, #42	; 0x2a
 8004724:	d135      	bne.n	8004792 <_svfiprintf_r+0x18a>
 8004726:	9b07      	ldr	r3, [sp, #28]
 8004728:	3502      	adds	r5, #2
 800472a:	1d1a      	adds	r2, r3, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	9207      	str	r2, [sp, #28]
 8004730:	2b00      	cmp	r3, #0
 8004732:	db2b      	blt.n	800478c <_svfiprintf_r+0x184>
 8004734:	9309      	str	r3, [sp, #36]	; 0x24
 8004736:	4e30      	ldr	r6, [pc, #192]	; (80047f8 <_svfiprintf_r+0x1f0>)
 8004738:	2203      	movs	r2, #3
 800473a:	0030      	movs	r0, r6
 800473c:	7829      	ldrb	r1, [r5, #0]
 800473e:	f000 f9e5 	bl	8004b0c <memchr>
 8004742:	2800      	cmp	r0, #0
 8004744:	d006      	beq.n	8004754 <_svfiprintf_r+0x14c>
 8004746:	2340      	movs	r3, #64	; 0x40
 8004748:	1b80      	subs	r0, r0, r6
 800474a:	4083      	lsls	r3, r0
 800474c:	6822      	ldr	r2, [r4, #0]
 800474e:	3501      	adds	r5, #1
 8004750:	4313      	orrs	r3, r2
 8004752:	6023      	str	r3, [r4, #0]
 8004754:	7829      	ldrb	r1, [r5, #0]
 8004756:	2206      	movs	r2, #6
 8004758:	4828      	ldr	r0, [pc, #160]	; (80047fc <_svfiprintf_r+0x1f4>)
 800475a:	1c6e      	adds	r6, r5, #1
 800475c:	7621      	strb	r1, [r4, #24]
 800475e:	f000 f9d5 	bl	8004b0c <memchr>
 8004762:	2800      	cmp	r0, #0
 8004764:	d03c      	beq.n	80047e0 <_svfiprintf_r+0x1d8>
 8004766:	4b26      	ldr	r3, [pc, #152]	; (8004800 <_svfiprintf_r+0x1f8>)
 8004768:	2b00      	cmp	r3, #0
 800476a:	d125      	bne.n	80047b8 <_svfiprintf_r+0x1b0>
 800476c:	2207      	movs	r2, #7
 800476e:	9b07      	ldr	r3, [sp, #28]
 8004770:	3307      	adds	r3, #7
 8004772:	4393      	bics	r3, r2
 8004774:	3308      	adds	r3, #8
 8004776:	9307      	str	r3, [sp, #28]
 8004778:	6963      	ldr	r3, [r4, #20]
 800477a:	9a04      	ldr	r2, [sp, #16]
 800477c:	189b      	adds	r3, r3, r2
 800477e:	6163      	str	r3, [r4, #20]
 8004780:	e765      	b.n	800464e <_svfiprintf_r+0x46>
 8004782:	4343      	muls	r3, r0
 8004784:	0035      	movs	r5, r6
 8004786:	2101      	movs	r1, #1
 8004788:	189b      	adds	r3, r3, r2
 800478a:	e7a6      	b.n	80046da <_svfiprintf_r+0xd2>
 800478c:	2301      	movs	r3, #1
 800478e:	425b      	negs	r3, r3
 8004790:	e7d0      	b.n	8004734 <_svfiprintf_r+0x12c>
 8004792:	2300      	movs	r3, #0
 8004794:	200a      	movs	r0, #10
 8004796:	001a      	movs	r2, r3
 8004798:	3501      	adds	r5, #1
 800479a:	6063      	str	r3, [r4, #4]
 800479c:	7829      	ldrb	r1, [r5, #0]
 800479e:	1c6e      	adds	r6, r5, #1
 80047a0:	3930      	subs	r1, #48	; 0x30
 80047a2:	2909      	cmp	r1, #9
 80047a4:	d903      	bls.n	80047ae <_svfiprintf_r+0x1a6>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0c5      	beq.n	8004736 <_svfiprintf_r+0x12e>
 80047aa:	9209      	str	r2, [sp, #36]	; 0x24
 80047ac:	e7c3      	b.n	8004736 <_svfiprintf_r+0x12e>
 80047ae:	4342      	muls	r2, r0
 80047b0:	0035      	movs	r5, r6
 80047b2:	2301      	movs	r3, #1
 80047b4:	1852      	adds	r2, r2, r1
 80047b6:	e7f1      	b.n	800479c <_svfiprintf_r+0x194>
 80047b8:	ab07      	add	r3, sp, #28
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	003a      	movs	r2, r7
 80047be:	0021      	movs	r1, r4
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <_svfiprintf_r+0x1fc>)
 80047c2:	9803      	ldr	r0, [sp, #12]
 80047c4:	e000      	b.n	80047c8 <_svfiprintf_r+0x1c0>
 80047c6:	bf00      	nop
 80047c8:	9004      	str	r0, [sp, #16]
 80047ca:	9b04      	ldr	r3, [sp, #16]
 80047cc:	3301      	adds	r3, #1
 80047ce:	d1d3      	bne.n	8004778 <_svfiprintf_r+0x170>
 80047d0:	89bb      	ldrh	r3, [r7, #12]
 80047d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80047d4:	065b      	lsls	r3, r3, #25
 80047d6:	d400      	bmi.n	80047da <_svfiprintf_r+0x1d2>
 80047d8:	e72d      	b.n	8004636 <_svfiprintf_r+0x2e>
 80047da:	2001      	movs	r0, #1
 80047dc:	4240      	negs	r0, r0
 80047de:	e72a      	b.n	8004636 <_svfiprintf_r+0x2e>
 80047e0:	ab07      	add	r3, sp, #28
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	003a      	movs	r2, r7
 80047e6:	0021      	movs	r1, r4
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <_svfiprintf_r+0x1fc>)
 80047ea:	9803      	ldr	r0, [sp, #12]
 80047ec:	f000 f87c 	bl	80048e8 <_printf_i>
 80047f0:	e7ea      	b.n	80047c8 <_svfiprintf_r+0x1c0>
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	08004ff0 	.word	0x08004ff0
 80047f8:	08004ff6 	.word	0x08004ff6
 80047fc:	08004ffa 	.word	0x08004ffa
 8004800:	00000000 	.word	0x00000000
 8004804:	08004545 	.word	0x08004545

08004808 <_printf_common>:
 8004808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800480a:	0015      	movs	r5, r2
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	688a      	ldr	r2, [r1, #8]
 8004810:	690b      	ldr	r3, [r1, #16]
 8004812:	000c      	movs	r4, r1
 8004814:	9000      	str	r0, [sp, #0]
 8004816:	4293      	cmp	r3, r2
 8004818:	da00      	bge.n	800481c <_printf_common+0x14>
 800481a:	0013      	movs	r3, r2
 800481c:	0022      	movs	r2, r4
 800481e:	602b      	str	r3, [r5, #0]
 8004820:	3243      	adds	r2, #67	; 0x43
 8004822:	7812      	ldrb	r2, [r2, #0]
 8004824:	2a00      	cmp	r2, #0
 8004826:	d001      	beq.n	800482c <_printf_common+0x24>
 8004828:	3301      	adds	r3, #1
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	069b      	lsls	r3, r3, #26
 8004830:	d502      	bpl.n	8004838 <_printf_common+0x30>
 8004832:	682b      	ldr	r3, [r5, #0]
 8004834:	3302      	adds	r3, #2
 8004836:	602b      	str	r3, [r5, #0]
 8004838:	6822      	ldr	r2, [r4, #0]
 800483a:	2306      	movs	r3, #6
 800483c:	0017      	movs	r7, r2
 800483e:	401f      	ands	r7, r3
 8004840:	421a      	tst	r2, r3
 8004842:	d027      	beq.n	8004894 <_printf_common+0x8c>
 8004844:	0023      	movs	r3, r4
 8004846:	3343      	adds	r3, #67	; 0x43
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	1e5a      	subs	r2, r3, #1
 800484c:	4193      	sbcs	r3, r2
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	0692      	lsls	r2, r2, #26
 8004852:	d430      	bmi.n	80048b6 <_printf_common+0xae>
 8004854:	0022      	movs	r2, r4
 8004856:	9901      	ldr	r1, [sp, #4]
 8004858:	9800      	ldr	r0, [sp, #0]
 800485a:	9e08      	ldr	r6, [sp, #32]
 800485c:	3243      	adds	r2, #67	; 0x43
 800485e:	47b0      	blx	r6
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d025      	beq.n	80048b0 <_printf_common+0xa8>
 8004864:	2306      	movs	r3, #6
 8004866:	6820      	ldr	r0, [r4, #0]
 8004868:	682a      	ldr	r2, [r5, #0]
 800486a:	68e1      	ldr	r1, [r4, #12]
 800486c:	2500      	movs	r5, #0
 800486e:	4003      	ands	r3, r0
 8004870:	2b04      	cmp	r3, #4
 8004872:	d103      	bne.n	800487c <_printf_common+0x74>
 8004874:	1a8d      	subs	r5, r1, r2
 8004876:	43eb      	mvns	r3, r5
 8004878:	17db      	asrs	r3, r3, #31
 800487a:	401d      	ands	r5, r3
 800487c:	68a3      	ldr	r3, [r4, #8]
 800487e:	6922      	ldr	r2, [r4, #16]
 8004880:	4293      	cmp	r3, r2
 8004882:	dd01      	ble.n	8004888 <_printf_common+0x80>
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	18ed      	adds	r5, r5, r3
 8004888:	2700      	movs	r7, #0
 800488a:	42bd      	cmp	r5, r7
 800488c:	d120      	bne.n	80048d0 <_printf_common+0xc8>
 800488e:	2000      	movs	r0, #0
 8004890:	e010      	b.n	80048b4 <_printf_common+0xac>
 8004892:	3701      	adds	r7, #1
 8004894:	68e3      	ldr	r3, [r4, #12]
 8004896:	682a      	ldr	r2, [r5, #0]
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	42bb      	cmp	r3, r7
 800489c:	ddd2      	ble.n	8004844 <_printf_common+0x3c>
 800489e:	0022      	movs	r2, r4
 80048a0:	2301      	movs	r3, #1
 80048a2:	9901      	ldr	r1, [sp, #4]
 80048a4:	9800      	ldr	r0, [sp, #0]
 80048a6:	9e08      	ldr	r6, [sp, #32]
 80048a8:	3219      	adds	r2, #25
 80048aa:	47b0      	blx	r6
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d1f0      	bne.n	8004892 <_printf_common+0x8a>
 80048b0:	2001      	movs	r0, #1
 80048b2:	4240      	negs	r0, r0
 80048b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048b6:	2030      	movs	r0, #48	; 0x30
 80048b8:	18e1      	adds	r1, r4, r3
 80048ba:	3143      	adds	r1, #67	; 0x43
 80048bc:	7008      	strb	r0, [r1, #0]
 80048be:	0021      	movs	r1, r4
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	3145      	adds	r1, #69	; 0x45
 80048c4:	7809      	ldrb	r1, [r1, #0]
 80048c6:	18a2      	adds	r2, r4, r2
 80048c8:	3243      	adds	r2, #67	; 0x43
 80048ca:	3302      	adds	r3, #2
 80048cc:	7011      	strb	r1, [r2, #0]
 80048ce:	e7c1      	b.n	8004854 <_printf_common+0x4c>
 80048d0:	0022      	movs	r2, r4
 80048d2:	2301      	movs	r3, #1
 80048d4:	9901      	ldr	r1, [sp, #4]
 80048d6:	9800      	ldr	r0, [sp, #0]
 80048d8:	9e08      	ldr	r6, [sp, #32]
 80048da:	321a      	adds	r2, #26
 80048dc:	47b0      	blx	r6
 80048de:	1c43      	adds	r3, r0, #1
 80048e0:	d0e6      	beq.n	80048b0 <_printf_common+0xa8>
 80048e2:	3701      	adds	r7, #1
 80048e4:	e7d1      	b.n	800488a <_printf_common+0x82>
	...

080048e8 <_printf_i>:
 80048e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ea:	b08b      	sub	sp, #44	; 0x2c
 80048ec:	9206      	str	r2, [sp, #24]
 80048ee:	000a      	movs	r2, r1
 80048f0:	3243      	adds	r2, #67	; 0x43
 80048f2:	9307      	str	r3, [sp, #28]
 80048f4:	9005      	str	r0, [sp, #20]
 80048f6:	9204      	str	r2, [sp, #16]
 80048f8:	7e0a      	ldrb	r2, [r1, #24]
 80048fa:	000c      	movs	r4, r1
 80048fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80048fe:	2a78      	cmp	r2, #120	; 0x78
 8004900:	d806      	bhi.n	8004910 <_printf_i+0x28>
 8004902:	2a62      	cmp	r2, #98	; 0x62
 8004904:	d808      	bhi.n	8004918 <_printf_i+0x30>
 8004906:	2a00      	cmp	r2, #0
 8004908:	d100      	bne.n	800490c <_printf_i+0x24>
 800490a:	e0c0      	b.n	8004a8e <_printf_i+0x1a6>
 800490c:	2a58      	cmp	r2, #88	; 0x58
 800490e:	d052      	beq.n	80049b6 <_printf_i+0xce>
 8004910:	0026      	movs	r6, r4
 8004912:	3642      	adds	r6, #66	; 0x42
 8004914:	7032      	strb	r2, [r6, #0]
 8004916:	e022      	b.n	800495e <_printf_i+0x76>
 8004918:	0010      	movs	r0, r2
 800491a:	3863      	subs	r0, #99	; 0x63
 800491c:	2815      	cmp	r0, #21
 800491e:	d8f7      	bhi.n	8004910 <_printf_i+0x28>
 8004920:	f7fb fbfa 	bl	8000118 <__gnu_thumb1_case_shi>
 8004924:	001f0016 	.word	0x001f0016
 8004928:	fff6fff6 	.word	0xfff6fff6
 800492c:	fff6fff6 	.word	0xfff6fff6
 8004930:	fff6001f 	.word	0xfff6001f
 8004934:	fff6fff6 	.word	0xfff6fff6
 8004938:	00a8fff6 	.word	0x00a8fff6
 800493c:	009a0036 	.word	0x009a0036
 8004940:	fff6fff6 	.word	0xfff6fff6
 8004944:	fff600b9 	.word	0xfff600b9
 8004948:	fff60036 	.word	0xfff60036
 800494c:	009efff6 	.word	0x009efff6
 8004950:	0026      	movs	r6, r4
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	3642      	adds	r6, #66	; 0x42
 8004956:	1d11      	adds	r1, r2, #4
 8004958:	6019      	str	r1, [r3, #0]
 800495a:	6813      	ldr	r3, [r2, #0]
 800495c:	7033      	strb	r3, [r6, #0]
 800495e:	2301      	movs	r3, #1
 8004960:	e0a7      	b.n	8004ab2 <_printf_i+0x1ca>
 8004962:	6808      	ldr	r0, [r1, #0]
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	1d0a      	adds	r2, r1, #4
 8004968:	0605      	lsls	r5, r0, #24
 800496a:	d50b      	bpl.n	8004984 <_printf_i+0x9c>
 800496c:	680d      	ldr	r5, [r1, #0]
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	2d00      	cmp	r5, #0
 8004972:	da03      	bge.n	800497c <_printf_i+0x94>
 8004974:	232d      	movs	r3, #45	; 0x2d
 8004976:	9a04      	ldr	r2, [sp, #16]
 8004978:	426d      	negs	r5, r5
 800497a:	7013      	strb	r3, [r2, #0]
 800497c:	4b61      	ldr	r3, [pc, #388]	; (8004b04 <_printf_i+0x21c>)
 800497e:	270a      	movs	r7, #10
 8004980:	9303      	str	r3, [sp, #12]
 8004982:	e032      	b.n	80049ea <_printf_i+0x102>
 8004984:	680d      	ldr	r5, [r1, #0]
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	0641      	lsls	r1, r0, #25
 800498a:	d5f1      	bpl.n	8004970 <_printf_i+0x88>
 800498c:	b22d      	sxth	r5, r5
 800498e:	e7ef      	b.n	8004970 <_printf_i+0x88>
 8004990:	680d      	ldr	r5, [r1, #0]
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	1d08      	adds	r0, r1, #4
 8004996:	6018      	str	r0, [r3, #0]
 8004998:	062e      	lsls	r6, r5, #24
 800499a:	d501      	bpl.n	80049a0 <_printf_i+0xb8>
 800499c:	680d      	ldr	r5, [r1, #0]
 800499e:	e003      	b.n	80049a8 <_printf_i+0xc0>
 80049a0:	066d      	lsls	r5, r5, #25
 80049a2:	d5fb      	bpl.n	800499c <_printf_i+0xb4>
 80049a4:	680d      	ldr	r5, [r1, #0]
 80049a6:	b2ad      	uxth	r5, r5
 80049a8:	4b56      	ldr	r3, [pc, #344]	; (8004b04 <_printf_i+0x21c>)
 80049aa:	270a      	movs	r7, #10
 80049ac:	9303      	str	r3, [sp, #12]
 80049ae:	2a6f      	cmp	r2, #111	; 0x6f
 80049b0:	d117      	bne.n	80049e2 <_printf_i+0xfa>
 80049b2:	2708      	movs	r7, #8
 80049b4:	e015      	b.n	80049e2 <_printf_i+0xfa>
 80049b6:	3145      	adds	r1, #69	; 0x45
 80049b8:	700a      	strb	r2, [r1, #0]
 80049ba:	4a52      	ldr	r2, [pc, #328]	; (8004b04 <_printf_i+0x21c>)
 80049bc:	9203      	str	r2, [sp, #12]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	6821      	ldr	r1, [r4, #0]
 80049c2:	ca20      	ldmia	r2!, {r5}
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	0608      	lsls	r0, r1, #24
 80049c8:	d550      	bpl.n	8004a6c <_printf_i+0x184>
 80049ca:	07cb      	lsls	r3, r1, #31
 80049cc:	d502      	bpl.n	80049d4 <_printf_i+0xec>
 80049ce:	2320      	movs	r3, #32
 80049d0:	4319      	orrs	r1, r3
 80049d2:	6021      	str	r1, [r4, #0]
 80049d4:	2710      	movs	r7, #16
 80049d6:	2d00      	cmp	r5, #0
 80049d8:	d103      	bne.n	80049e2 <_printf_i+0xfa>
 80049da:	2320      	movs	r3, #32
 80049dc:	6822      	ldr	r2, [r4, #0]
 80049de:	439a      	bics	r2, r3
 80049e0:	6022      	str	r2, [r4, #0]
 80049e2:	0023      	movs	r3, r4
 80049e4:	2200      	movs	r2, #0
 80049e6:	3343      	adds	r3, #67	; 0x43
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	6863      	ldr	r3, [r4, #4]
 80049ec:	60a3      	str	r3, [r4, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	db03      	blt.n	80049fa <_printf_i+0x112>
 80049f2:	2204      	movs	r2, #4
 80049f4:	6821      	ldr	r1, [r4, #0]
 80049f6:	4391      	bics	r1, r2
 80049f8:	6021      	str	r1, [r4, #0]
 80049fa:	2d00      	cmp	r5, #0
 80049fc:	d102      	bne.n	8004a04 <_printf_i+0x11c>
 80049fe:	9e04      	ldr	r6, [sp, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00c      	beq.n	8004a1e <_printf_i+0x136>
 8004a04:	9e04      	ldr	r6, [sp, #16]
 8004a06:	0028      	movs	r0, r5
 8004a08:	0039      	movs	r1, r7
 8004a0a:	f7fb fc15 	bl	8000238 <__aeabi_uidivmod>
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	3e01      	subs	r6, #1
 8004a12:	5c5b      	ldrb	r3, [r3, r1]
 8004a14:	7033      	strb	r3, [r6, #0]
 8004a16:	002b      	movs	r3, r5
 8004a18:	0005      	movs	r5, r0
 8004a1a:	429f      	cmp	r7, r3
 8004a1c:	d9f3      	bls.n	8004a06 <_printf_i+0x11e>
 8004a1e:	2f08      	cmp	r7, #8
 8004a20:	d109      	bne.n	8004a36 <_printf_i+0x14e>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	07db      	lsls	r3, r3, #31
 8004a26:	d506      	bpl.n	8004a36 <_printf_i+0x14e>
 8004a28:	6863      	ldr	r3, [r4, #4]
 8004a2a:	6922      	ldr	r2, [r4, #16]
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	dc02      	bgt.n	8004a36 <_printf_i+0x14e>
 8004a30:	2330      	movs	r3, #48	; 0x30
 8004a32:	3e01      	subs	r6, #1
 8004a34:	7033      	strb	r3, [r6, #0]
 8004a36:	9b04      	ldr	r3, [sp, #16]
 8004a38:	1b9b      	subs	r3, r3, r6
 8004a3a:	6123      	str	r3, [r4, #16]
 8004a3c:	9b07      	ldr	r3, [sp, #28]
 8004a3e:	0021      	movs	r1, r4
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	9805      	ldr	r0, [sp, #20]
 8004a44:	9b06      	ldr	r3, [sp, #24]
 8004a46:	aa09      	add	r2, sp, #36	; 0x24
 8004a48:	f7ff fede 	bl	8004808 <_printf_common>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d135      	bne.n	8004abc <_printf_i+0x1d4>
 8004a50:	2001      	movs	r0, #1
 8004a52:	4240      	negs	r0, r0
 8004a54:	b00b      	add	sp, #44	; 0x2c
 8004a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a58:	2220      	movs	r2, #32
 8004a5a:	6809      	ldr	r1, [r1, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	6022      	str	r2, [r4, #0]
 8004a60:	0022      	movs	r2, r4
 8004a62:	2178      	movs	r1, #120	; 0x78
 8004a64:	3245      	adds	r2, #69	; 0x45
 8004a66:	7011      	strb	r1, [r2, #0]
 8004a68:	4a27      	ldr	r2, [pc, #156]	; (8004b08 <_printf_i+0x220>)
 8004a6a:	e7a7      	b.n	80049bc <_printf_i+0xd4>
 8004a6c:	0648      	lsls	r0, r1, #25
 8004a6e:	d5ac      	bpl.n	80049ca <_printf_i+0xe2>
 8004a70:	b2ad      	uxth	r5, r5
 8004a72:	e7aa      	b.n	80049ca <_printf_i+0xe2>
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	680d      	ldr	r5, [r1, #0]
 8004a78:	1d10      	adds	r0, r2, #4
 8004a7a:	6949      	ldr	r1, [r1, #20]
 8004a7c:	6018      	str	r0, [r3, #0]
 8004a7e:	6813      	ldr	r3, [r2, #0]
 8004a80:	062e      	lsls	r6, r5, #24
 8004a82:	d501      	bpl.n	8004a88 <_printf_i+0x1a0>
 8004a84:	6019      	str	r1, [r3, #0]
 8004a86:	e002      	b.n	8004a8e <_printf_i+0x1a6>
 8004a88:	066d      	lsls	r5, r5, #25
 8004a8a:	d5fb      	bpl.n	8004a84 <_printf_i+0x19c>
 8004a8c:	8019      	strh	r1, [r3, #0]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	9e04      	ldr	r6, [sp, #16]
 8004a92:	6123      	str	r3, [r4, #16]
 8004a94:	e7d2      	b.n	8004a3c <_printf_i+0x154>
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	1d11      	adds	r1, r2, #4
 8004a9a:	6019      	str	r1, [r3, #0]
 8004a9c:	6816      	ldr	r6, [r2, #0]
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	0030      	movs	r0, r6
 8004aa2:	6862      	ldr	r2, [r4, #4]
 8004aa4:	f000 f832 	bl	8004b0c <memchr>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d001      	beq.n	8004ab0 <_printf_i+0x1c8>
 8004aac:	1b80      	subs	r0, r0, r6
 8004aae:	6060      	str	r0, [r4, #4]
 8004ab0:	6863      	ldr	r3, [r4, #4]
 8004ab2:	6123      	str	r3, [r4, #16]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9a04      	ldr	r2, [sp, #16]
 8004ab8:	7013      	strb	r3, [r2, #0]
 8004aba:	e7bf      	b.n	8004a3c <_printf_i+0x154>
 8004abc:	6923      	ldr	r3, [r4, #16]
 8004abe:	0032      	movs	r2, r6
 8004ac0:	9906      	ldr	r1, [sp, #24]
 8004ac2:	9805      	ldr	r0, [sp, #20]
 8004ac4:	9d07      	ldr	r5, [sp, #28]
 8004ac6:	47a8      	blx	r5
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d0c1      	beq.n	8004a50 <_printf_i+0x168>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	079b      	lsls	r3, r3, #30
 8004ad0:	d415      	bmi.n	8004afe <_printf_i+0x216>
 8004ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad4:	68e0      	ldr	r0, [r4, #12]
 8004ad6:	4298      	cmp	r0, r3
 8004ad8:	dabc      	bge.n	8004a54 <_printf_i+0x16c>
 8004ada:	0018      	movs	r0, r3
 8004adc:	e7ba      	b.n	8004a54 <_printf_i+0x16c>
 8004ade:	0022      	movs	r2, r4
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	9906      	ldr	r1, [sp, #24]
 8004ae4:	9805      	ldr	r0, [sp, #20]
 8004ae6:	9e07      	ldr	r6, [sp, #28]
 8004ae8:	3219      	adds	r2, #25
 8004aea:	47b0      	blx	r6
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d0af      	beq.n	8004a50 <_printf_i+0x168>
 8004af0:	3501      	adds	r5, #1
 8004af2:	68e3      	ldr	r3, [r4, #12]
 8004af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	42ab      	cmp	r3, r5
 8004afa:	dcf0      	bgt.n	8004ade <_printf_i+0x1f6>
 8004afc:	e7e9      	b.n	8004ad2 <_printf_i+0x1ea>
 8004afe:	2500      	movs	r5, #0
 8004b00:	e7f7      	b.n	8004af2 <_printf_i+0x20a>
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	08005001 	.word	0x08005001
 8004b08:	08005012 	.word	0x08005012

08004b0c <memchr>:
 8004b0c:	b2c9      	uxtb	r1, r1
 8004b0e:	1882      	adds	r2, r0, r2
 8004b10:	4290      	cmp	r0, r2
 8004b12:	d101      	bne.n	8004b18 <memchr+0xc>
 8004b14:	2000      	movs	r0, #0
 8004b16:	4770      	bx	lr
 8004b18:	7803      	ldrb	r3, [r0, #0]
 8004b1a:	428b      	cmp	r3, r1
 8004b1c:	d0fb      	beq.n	8004b16 <memchr+0xa>
 8004b1e:	3001      	adds	r0, #1
 8004b20:	e7f6      	b.n	8004b10 <memchr+0x4>

08004b22 <memcpy>:
 8004b22:	2300      	movs	r3, #0
 8004b24:	b510      	push	{r4, lr}
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d100      	bne.n	8004b2c <memcpy+0xa>
 8004b2a:	bd10      	pop	{r4, pc}
 8004b2c:	5ccc      	ldrb	r4, [r1, r3]
 8004b2e:	54c4      	strb	r4, [r0, r3]
 8004b30:	3301      	adds	r3, #1
 8004b32:	e7f8      	b.n	8004b26 <memcpy+0x4>

08004b34 <memmove>:
 8004b34:	b510      	push	{r4, lr}
 8004b36:	4288      	cmp	r0, r1
 8004b38:	d902      	bls.n	8004b40 <memmove+0xc>
 8004b3a:	188b      	adds	r3, r1, r2
 8004b3c:	4298      	cmp	r0, r3
 8004b3e:	d303      	bcc.n	8004b48 <memmove+0x14>
 8004b40:	2300      	movs	r3, #0
 8004b42:	e007      	b.n	8004b54 <memmove+0x20>
 8004b44:	5c8b      	ldrb	r3, [r1, r2]
 8004b46:	5483      	strb	r3, [r0, r2]
 8004b48:	3a01      	subs	r2, #1
 8004b4a:	d2fb      	bcs.n	8004b44 <memmove+0x10>
 8004b4c:	bd10      	pop	{r4, pc}
 8004b4e:	5ccc      	ldrb	r4, [r1, r3]
 8004b50:	54c4      	strb	r4, [r0, r3]
 8004b52:	3301      	adds	r3, #1
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d1fa      	bne.n	8004b4e <memmove+0x1a>
 8004b58:	e7f8      	b.n	8004b4c <memmove+0x18>
	...

08004b5c <_free_r>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	0005      	movs	r5, r0
 8004b60:	2900      	cmp	r1, #0
 8004b62:	d010      	beq.n	8004b86 <_free_r+0x2a>
 8004b64:	1f0c      	subs	r4, r1, #4
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da00      	bge.n	8004b6e <_free_r+0x12>
 8004b6c:	18e4      	adds	r4, r4, r3
 8004b6e:	0028      	movs	r0, r5
 8004b70:	f000 f8d4 	bl	8004d1c <__malloc_lock>
 8004b74:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <_free_r+0x90>)
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <_free_r+0x2c>
 8004b7c:	6063      	str	r3, [r4, #4]
 8004b7e:	6014      	str	r4, [r2, #0]
 8004b80:	0028      	movs	r0, r5
 8004b82:	f000 f8d3 	bl	8004d2c <__malloc_unlock>
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	42a3      	cmp	r3, r4
 8004b8a:	d908      	bls.n	8004b9e <_free_r+0x42>
 8004b8c:	6821      	ldr	r1, [r4, #0]
 8004b8e:	1860      	adds	r0, r4, r1
 8004b90:	4283      	cmp	r3, r0
 8004b92:	d1f3      	bne.n	8004b7c <_free_r+0x20>
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	1841      	adds	r1, r0, r1
 8004b9a:	6021      	str	r1, [r4, #0]
 8004b9c:	e7ee      	b.n	8004b7c <_free_r+0x20>
 8004b9e:	001a      	movs	r2, r3
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <_free_r+0x4e>
 8004ba6:	42a3      	cmp	r3, r4
 8004ba8:	d9f9      	bls.n	8004b9e <_free_r+0x42>
 8004baa:	6811      	ldr	r1, [r2, #0]
 8004bac:	1850      	adds	r0, r2, r1
 8004bae:	42a0      	cmp	r0, r4
 8004bb0:	d10b      	bne.n	8004bca <_free_r+0x6e>
 8004bb2:	6820      	ldr	r0, [r4, #0]
 8004bb4:	1809      	adds	r1, r1, r0
 8004bb6:	1850      	adds	r0, r2, r1
 8004bb8:	6011      	str	r1, [r2, #0]
 8004bba:	4283      	cmp	r3, r0
 8004bbc:	d1e0      	bne.n	8004b80 <_free_r+0x24>
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	1841      	adds	r1, r0, r1
 8004bc4:	6011      	str	r1, [r2, #0]
 8004bc6:	6053      	str	r3, [r2, #4]
 8004bc8:	e7da      	b.n	8004b80 <_free_r+0x24>
 8004bca:	42a0      	cmp	r0, r4
 8004bcc:	d902      	bls.n	8004bd4 <_free_r+0x78>
 8004bce:	230c      	movs	r3, #12
 8004bd0:	602b      	str	r3, [r5, #0]
 8004bd2:	e7d5      	b.n	8004b80 <_free_r+0x24>
 8004bd4:	6821      	ldr	r1, [r4, #0]
 8004bd6:	1860      	adds	r0, r4, r1
 8004bd8:	4283      	cmp	r3, r0
 8004bda:	d103      	bne.n	8004be4 <_free_r+0x88>
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	1841      	adds	r1, r0, r1
 8004be2:	6021      	str	r1, [r4, #0]
 8004be4:	6063      	str	r3, [r4, #4]
 8004be6:	6054      	str	r4, [r2, #4]
 8004be8:	e7ca      	b.n	8004b80 <_free_r+0x24>
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	200000c0 	.word	0x200000c0

08004bf0 <_malloc_r>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	1ccd      	adds	r5, r1, #3
 8004bf6:	439d      	bics	r5, r3
 8004bf8:	3508      	adds	r5, #8
 8004bfa:	0006      	movs	r6, r0
 8004bfc:	2d0c      	cmp	r5, #12
 8004bfe:	d21f      	bcs.n	8004c40 <_malloc_r+0x50>
 8004c00:	250c      	movs	r5, #12
 8004c02:	42a9      	cmp	r1, r5
 8004c04:	d81e      	bhi.n	8004c44 <_malloc_r+0x54>
 8004c06:	0030      	movs	r0, r6
 8004c08:	f000 f888 	bl	8004d1c <__malloc_lock>
 8004c0c:	4925      	ldr	r1, [pc, #148]	; (8004ca4 <_malloc_r+0xb4>)
 8004c0e:	680a      	ldr	r2, [r1, #0]
 8004c10:	0014      	movs	r4, r2
 8004c12:	2c00      	cmp	r4, #0
 8004c14:	d11a      	bne.n	8004c4c <_malloc_r+0x5c>
 8004c16:	4f24      	ldr	r7, [pc, #144]	; (8004ca8 <_malloc_r+0xb8>)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d104      	bne.n	8004c28 <_malloc_r+0x38>
 8004c1e:	0021      	movs	r1, r4
 8004c20:	0030      	movs	r0, r6
 8004c22:	f000 f869 	bl	8004cf8 <_sbrk_r>
 8004c26:	6038      	str	r0, [r7, #0]
 8004c28:	0029      	movs	r1, r5
 8004c2a:	0030      	movs	r0, r6
 8004c2c:	f000 f864 	bl	8004cf8 <_sbrk_r>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d12b      	bne.n	8004c8c <_malloc_r+0x9c>
 8004c34:	230c      	movs	r3, #12
 8004c36:	0030      	movs	r0, r6
 8004c38:	6033      	str	r3, [r6, #0]
 8004c3a:	f000 f877 	bl	8004d2c <__malloc_unlock>
 8004c3e:	e003      	b.n	8004c48 <_malloc_r+0x58>
 8004c40:	2d00      	cmp	r5, #0
 8004c42:	dade      	bge.n	8004c02 <_malloc_r+0x12>
 8004c44:	230c      	movs	r3, #12
 8004c46:	6033      	str	r3, [r6, #0]
 8004c48:	2000      	movs	r0, #0
 8004c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	1b5b      	subs	r3, r3, r5
 8004c50:	d419      	bmi.n	8004c86 <_malloc_r+0x96>
 8004c52:	2b0b      	cmp	r3, #11
 8004c54:	d903      	bls.n	8004c5e <_malloc_r+0x6e>
 8004c56:	6023      	str	r3, [r4, #0]
 8004c58:	18e4      	adds	r4, r4, r3
 8004c5a:	6025      	str	r5, [r4, #0]
 8004c5c:	e003      	b.n	8004c66 <_malloc_r+0x76>
 8004c5e:	6863      	ldr	r3, [r4, #4]
 8004c60:	42a2      	cmp	r2, r4
 8004c62:	d10e      	bne.n	8004c82 <_malloc_r+0x92>
 8004c64:	600b      	str	r3, [r1, #0]
 8004c66:	0030      	movs	r0, r6
 8004c68:	f000 f860 	bl	8004d2c <__malloc_unlock>
 8004c6c:	0020      	movs	r0, r4
 8004c6e:	2207      	movs	r2, #7
 8004c70:	300b      	adds	r0, #11
 8004c72:	1d23      	adds	r3, r4, #4
 8004c74:	4390      	bics	r0, r2
 8004c76:	1ac2      	subs	r2, r0, r3
 8004c78:	4298      	cmp	r0, r3
 8004c7a:	d0e6      	beq.n	8004c4a <_malloc_r+0x5a>
 8004c7c:	1a1b      	subs	r3, r3, r0
 8004c7e:	50a3      	str	r3, [r4, r2]
 8004c80:	e7e3      	b.n	8004c4a <_malloc_r+0x5a>
 8004c82:	6053      	str	r3, [r2, #4]
 8004c84:	e7ef      	b.n	8004c66 <_malloc_r+0x76>
 8004c86:	0022      	movs	r2, r4
 8004c88:	6864      	ldr	r4, [r4, #4]
 8004c8a:	e7c2      	b.n	8004c12 <_malloc_r+0x22>
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	1cc4      	adds	r4, r0, #3
 8004c90:	439c      	bics	r4, r3
 8004c92:	42a0      	cmp	r0, r4
 8004c94:	d0e1      	beq.n	8004c5a <_malloc_r+0x6a>
 8004c96:	1a21      	subs	r1, r4, r0
 8004c98:	0030      	movs	r0, r6
 8004c9a:	f000 f82d 	bl	8004cf8 <_sbrk_r>
 8004c9e:	1c43      	adds	r3, r0, #1
 8004ca0:	d1db      	bne.n	8004c5a <_malloc_r+0x6a>
 8004ca2:	e7c7      	b.n	8004c34 <_malloc_r+0x44>
 8004ca4:	200000c0 	.word	0x200000c0
 8004ca8:	200000c4 	.word	0x200000c4

08004cac <_realloc_r>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	0007      	movs	r7, r0
 8004cb0:	000d      	movs	r5, r1
 8004cb2:	0016      	movs	r6, r2
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	d105      	bne.n	8004cc4 <_realloc_r+0x18>
 8004cb8:	0011      	movs	r1, r2
 8004cba:	f7ff ff99 	bl	8004bf0 <_malloc_r>
 8004cbe:	0004      	movs	r4, r0
 8004cc0:	0020      	movs	r0, r4
 8004cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc4:	2a00      	cmp	r2, #0
 8004cc6:	d103      	bne.n	8004cd0 <_realloc_r+0x24>
 8004cc8:	f7ff ff48 	bl	8004b5c <_free_r>
 8004ccc:	0034      	movs	r4, r6
 8004cce:	e7f7      	b.n	8004cc0 <_realloc_r+0x14>
 8004cd0:	f000 f834 	bl	8004d3c <_malloc_usable_size_r>
 8004cd4:	002c      	movs	r4, r5
 8004cd6:	42b0      	cmp	r0, r6
 8004cd8:	d2f2      	bcs.n	8004cc0 <_realloc_r+0x14>
 8004cda:	0031      	movs	r1, r6
 8004cdc:	0038      	movs	r0, r7
 8004cde:	f7ff ff87 	bl	8004bf0 <_malloc_r>
 8004ce2:	1e04      	subs	r4, r0, #0
 8004ce4:	d0ec      	beq.n	8004cc0 <_realloc_r+0x14>
 8004ce6:	0029      	movs	r1, r5
 8004ce8:	0032      	movs	r2, r6
 8004cea:	f7ff ff1a 	bl	8004b22 <memcpy>
 8004cee:	0029      	movs	r1, r5
 8004cf0:	0038      	movs	r0, r7
 8004cf2:	f7ff ff33 	bl	8004b5c <_free_r>
 8004cf6:	e7e3      	b.n	8004cc0 <_realloc_r+0x14>

08004cf8 <_sbrk_r>:
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	b570      	push	{r4, r5, r6, lr}
 8004cfc:	4d06      	ldr	r5, [pc, #24]	; (8004d18 <_sbrk_r+0x20>)
 8004cfe:	0004      	movs	r4, r0
 8004d00:	0008      	movs	r0, r1
 8004d02:	602b      	str	r3, [r5, #0]
 8004d04:	f7fc ffd6 	bl	8001cb4 <_sbrk>
 8004d08:	1c43      	adds	r3, r0, #1
 8004d0a:	d103      	bne.n	8004d14 <_sbrk_r+0x1c>
 8004d0c:	682b      	ldr	r3, [r5, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d000      	beq.n	8004d14 <_sbrk_r+0x1c>
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	bd70      	pop	{r4, r5, r6, pc}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	200001d0 	.word	0x200001d0

08004d1c <__malloc_lock>:
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	4802      	ldr	r0, [pc, #8]	; (8004d28 <__malloc_lock+0xc>)
 8004d20:	f000 f814 	bl	8004d4c <__retarget_lock_acquire_recursive>
 8004d24:	bd10      	pop	{r4, pc}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	200001d8 	.word	0x200001d8

08004d2c <__malloc_unlock>:
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	4802      	ldr	r0, [pc, #8]	; (8004d38 <__malloc_unlock+0xc>)
 8004d30:	f000 f80d 	bl	8004d4e <__retarget_lock_release_recursive>
 8004d34:	bd10      	pop	{r4, pc}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	200001d8 	.word	0x200001d8

08004d3c <_malloc_usable_size_r>:
 8004d3c:	1f0b      	subs	r3, r1, #4
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	1f18      	subs	r0, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da01      	bge.n	8004d4a <_malloc_usable_size_r+0xe>
 8004d46:	580b      	ldr	r3, [r1, r0]
 8004d48:	18c0      	adds	r0, r0, r3
 8004d4a:	4770      	bx	lr

08004d4c <__retarget_lock_acquire_recursive>:
 8004d4c:	4770      	bx	lr

08004d4e <__retarget_lock_release_recursive>:
 8004d4e:	4770      	bx	lr

08004d50 <_init>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr

08004d5c <_fini>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr
