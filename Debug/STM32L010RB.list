
STM32L010RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002d14  08002d14  00012d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d9c  08002d9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002da4  08002da4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da4  08002da4  00012da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da8  08002da8  00012da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  08002e1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002e1c  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009583  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001893  00000000  00000000  0002961b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000119bd  00000000  00000000  0002bed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fb5  00000000  00000000  0003d895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068749  00000000  00000000  0004684a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000aef93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000246c  00000000  00000000  000aefe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cfc 	.word	0x08002cfc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002cfc 	.word	0x08002cfc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <Error_Handler>:
static unsigned int elapsedTime = 0;

// ----- Functions ----- 

void Error_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	46c0      	nop			; (mov r8, r8)
     __disable_irq();
    while (1)
	{
    	printf("Error!\n");
 80004a4:	4b02      	ldr	r3, [pc, #8]	; (80004b0 <Error_Handler+0x14>)
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 ff8a 	bl	80023c0 <puts>
 80004ac:	e7fa      	b.n	80004a4 <Error_Handler+0x8>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	08002d14 	.word	0x08002d14

080004b4 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b093      	sub	sp, #76	; 0x4c
 80004b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ba:	2414      	movs	r4, #20
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	0018      	movs	r0, r3
 80004c0:	2334      	movs	r3, #52	; 0x34
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f001 ff01 	bl	80022cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ca:	003b      	movs	r3, r7
 80004cc:	0018      	movs	r0, r3
 80004ce:	2314      	movs	r3, #20
 80004d0:	001a      	movs	r2, r3
 80004d2:	2100      	movs	r1, #0
 80004d4:	f001 fefa 	bl	80022cc <memset>

  //Configure the main internal regulator output voltage
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d8:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <SystemClock_Config+0xa0>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a1e      	ldr	r2, [pc, #120]	; (8000558 <SystemClock_Config+0xa4>)
 80004de:	401a      	ands	r2, r3
 80004e0:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <SystemClock_Config+0xa0>)
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	0109      	lsls	r1, r1, #4
 80004e6:	430a      	orrs	r2, r1
 80004e8:	601a      	str	r2, [r3, #0]

  //Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004ea:	0021      	movs	r1, r4
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2210      	movs	r2, #16
 80004f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2201      	movs	r2, #1
 80004f6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	22a0      	movs	r2, #160	; 0xa0
 8000502:	0212      	lsls	r2, r2, #8
 8000504:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	187b      	adds	r3, r7, r1
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fda4 	bl	800105c <HAL_RCC_OscConfig>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000518:	f7ff ffc0 	bl	800049c <Error_Handler>
  }
  
  //Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051c:	003b      	movs	r3, r7
 800051e:	220f      	movs	r2, #15
 8000520:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000522:	003b      	movs	r3, r7
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	003b      	movs	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052e:	003b      	movs	r3, r7
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000534:	003b      	movs	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800053a:	003b      	movs	r3, r7
 800053c:	2100      	movs	r1, #0
 800053e:	0018      	movs	r0, r3
 8000540:	f001 f908 	bl	8001754 <HAL_RCC_ClockConfig>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000548:	f7ff ffa8 	bl	800049c <Error_Handler>
  }
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b013      	add	sp, #76	; 0x4c
 8000552:	bd90      	pop	{r4, r7, pc}
 8000554:	40007000 	.word	0x40007000
 8000558:	ffffe7ff 	.word	0xffffe7ff

0800055c <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000562:	2308      	movs	r3, #8
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	0018      	movs	r0, r3
 8000568:	2310      	movs	r3, #16
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f001 fead 	bl	80022cc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000572:	003b      	movs	r3, r7
 8000574:	0018      	movs	r0, r3
 8000576:	2308      	movs	r3, #8
 8000578:	001a      	movs	r2, r3
 800057a:	2100      	movs	r1, #0
 800057c:	f001 fea6 	bl	80022cc <memset>

	//Configure timer 2
	htim2.Instance = TIM2;
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <MX_TIM2_Init+0xa0>)
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	05d2      	lsls	r2, r2, #23
 8000586:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 2097; //2.097 MHZ divided by 2097 results in 1000 oscillations per second
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <MX_TIM2_Init+0xa0>)
 800058a:	4a1d      	ldr	r2, [pc, #116]	; (8000600 <MX_TIM2_Init+0xa4>)
 800058c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <MX_TIM2_Init+0xa0>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100; //Counter goes up to 100, then starts anew. This results in 10 counter restarts per second
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <MX_TIM2_Init+0xa0>)
 8000596:	2264      	movs	r2, #100	; 0x64
 8000598:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <MX_TIM2_Init+0xa0>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <MX_TIM2_Init+0xa0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <MX_TIM2_Init+0xa0>)
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fac1 	bl	8001b30 <HAL_TIM_Base_Init>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 80005b2:	f7ff ff73 	bl	800049c <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; //Use internal clock as a clock source (at 2 MHZ, max. 32 MHZ)
 80005b6:	2108      	movs	r1, #8
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	0152      	lsls	r2, r2, #5
 80005be:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005c0:	187a      	adds	r2, r7, r1
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_TIM2_Init+0xa0>)
 80005c4:	0011      	movs	r1, r2
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 fc26 	bl	8001e18 <HAL_TIM_ConfigClockSource>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 80005d0:	f7ff ff64 	bl	800049c <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d4:	003b      	movs	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005da:	003b      	movs	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005e0:	003a      	movs	r2, r7
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_TIM2_Init+0xa0>)
 80005e4:	0011      	movs	r1, r2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 fdee 	bl	80021c8 <HAL_TIMEx_MasterConfigSynchronization>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM2_Init+0x98>
	{
		Error_Handler();
 80005f0:	f7ff ff54 	bl	800049c <Error_Handler>
	}
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b006      	add	sp, #24
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000009c 	.word	0x2000009c
 8000600:	00000831 	.word	0x00000831

08000604 <PortInit>:

static void PortInit(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b089      	sub	sp, #36	; 0x24
 8000608:	af00      	add	r7, sp, #0
	//Enable GPIO Ports Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <PortInit+0xdc>)
 800060c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800060e:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <PortInit+0xdc>)
 8000610:	2101      	movs	r1, #1
 8000612:	430a      	orrs	r2, r1
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
 8000616:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <PortInit+0xdc>)
 8000618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061a:	2201      	movs	r2, #1
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <PortInit+0xdc>)
 8000624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <PortInit+0xdc>)
 8000628:	2104      	movs	r1, #4
 800062a:	430a      	orrs	r2, r1
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
 800062e:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <PortInit+0xdc>)
 8000630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000632:	2204      	movs	r2, #4
 8000634:	4013      	ands	r3, r2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <PortInit+0xdc>)
 800063c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <PortInit+0xdc>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	430a      	orrs	r2, r1
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
 8000646:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <PortInit+0xdc>)
 8000648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	4013      	ands	r3, r2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	240c      	movs	r4, #12
 8000654:	193b      	adds	r3, r7, r4
 8000656:	0018      	movs	r0, r3
 8000658:	2314      	movs	r3, #20
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f001 fe35 	bl	80022cc <memset>

	//Onboard-LED (PA5)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2220      	movs	r2, #32
 8000666:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2201      	movs	r2, #1
 800066c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	193b      	adds	r3, r7, r4
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	193b      	adds	r3, r7, r4
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	193a      	adds	r2, r7, r4
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	0011      	movs	r1, r2
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fb16 	bl	8000cb4 <HAL_GPIO_Init>

	//Output pin to power Breadboard-LED (PA4)
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2210      	movs	r2, #16
 800068c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2201      	movs	r2, #1
 8000692:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	193a      	adds	r2, r7, r4
 80006a2:	23a0      	movs	r3, #160	; 0xa0
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fb03 	bl	8000cb4 <HAL_GPIO_Init>

	//Blue push button (PC13)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006ae:	0021      	movs	r1, r4
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	0192      	lsls	r2, r2, #6
 80006b6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <PortInit+0xe0>)
 80006ce:	0019      	movs	r1, r3
 80006d0:	0010      	movs	r0, r2
 80006d2:	f000 faef 	bl	8000cb4 <HAL_GPIO_Init>
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b009      	add	sp, #36	; 0x24
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	40021000 	.word	0x40021000
 80006e4:	50000800 	.word	0x50000800

080006e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80006e8:	b5b0      	push	{r4, r5, r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	//Toggle Onboard-LED => 1/2 sec. on and 1/2 sec. off
	elapsedTime += 100;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3364      	adds	r3, #100	; 0x64
 80006f6:	001a      	movs	r2, r3
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006fa:	601a      	str	r2, [r3, #0]
	if(elapsedTime == 500)
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	23fa      	movs	r3, #250	; 0xfa
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	429a      	cmp	r2, r3
 8000706:	d108      	bne.n	800071a <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000708:	23a0      	movs	r3, #160	; 0xa0
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	2120      	movs	r1, #32
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fc88 	bl	8001024 <HAL_GPIO_TogglePin>
		elapsedTime = 0;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
	}

	//Check if blue push button is pressed
	GPIO_PinState state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800071a:	250f      	movs	r5, #15
 800071c:	197c      	adds	r4, r7, r5
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000724:	0019      	movs	r1, r3
 8000726:	0010      	movs	r0, r2
 8000728:	f000 fc42 	bl	8000fb0 <HAL_GPIO_ReadPin>
 800072c:	0003      	movs	r3, r0
 800072e:	7023      	strb	r3, [r4, #0]
	if(state == GPIO_PIN_RESET)
 8000730:	197b      	adds	r3, r7, r5
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d105      	bne.n	8000744 <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000738:	23a0      	movs	r3, #160	; 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	2110      	movs	r1, #16
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fc70 	bl	8001024 <HAL_GPIO_TogglePin>
	}
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b004      	add	sp, #16
 800074a:	bdb0      	pop	{r4, r5, r7, pc}
 800074c:	2000008c 	.word	0x2000008c
 8000750:	50000800 	.word	0x50000800

08000754 <main>:

int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	//Init stuff
	HAL_Init();
 8000758:	f000 f95e 	bl	8000a18 <HAL_Init>
	SystemClock_Config();
 800075c:	f7ff feaa 	bl	80004b4 <SystemClock_Config>
	PortInit();
 8000760:	f7ff ff50 	bl	8000604 <PortInit>
	MX_TIM2_Init();
 8000764:	f7ff fefa 	bl	800055c <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <main+0x48>)
 800076a:	0018      	movs	r0, r3
 800076c:	f001 fa20 	bl	8001bb0 <HAL_TIM_Base_Start_IT>

	//Reset pins
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); 	//Onboard-LED
 8000770:	23a0      	movs	r3, #160	; 0xa0
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2201      	movs	r2, #1
 8000776:	2120      	movs	r1, #32
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fc36 	bl	8000fea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//Breadboard-LED
 800077e:	23a0      	movs	r3, #160	; 0xa0
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	2200      	movs	r2, #0
 8000784:	2110      	movs	r1, #16
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fc2f 	bl	8000fea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Blue push button
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	019b      	lsls	r3, r3, #6
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <main+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	0019      	movs	r1, r3
 8000796:	f000 fc28 	bl	8000fea <HAL_GPIO_WritePin>

	while (1)
 800079a:	e7fe      	b.n	800079a <main+0x46>
 800079c:	2000009c 	.word	0x2000009c
 80007a0:	50000800 	.word	0x50000800

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <HAL_MspInit+0x24>)
 80007aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x24>)
 80007ae:	2101      	movs	r1, #1
 80007b0:	430a      	orrs	r2, r1
 80007b2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <HAL_MspInit+0x24>)
 80007b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_MspInit+0x24>)
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	0549      	lsls	r1, r1, #21
 80007be:	430a      	orrs	r2, r1
 80007c0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	429a      	cmp	r2, r3
 80007de:	d10d      	bne.n	80007fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_TIM_Base_MspInit+0x38>)
 80007e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <HAL_TIM_Base_MspInit+0x38>)
 80007e6:	2101      	movs	r1, #1
 80007e8:	430a      	orrs	r2, r1
 80007ea:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	200f      	movs	r0, #15
 80007f2:	f000 fa2d 	bl	8000c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007f6:	200f      	movs	r0, #15
 80007f8:	f000 fa3f 	bl	8000c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b002      	add	sp, #8
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082c:	f000 f948 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <TIM2_IRQHandler+0x14>)
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fa02 	bl	8001c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	2000009c 	.word	0x2000009c

08000850 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	e00a      	b.n	8000878 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000862:	e000      	b.n	8000866 <_read+0x16>
 8000864:	bf00      	nop
 8000866:	0001      	movs	r1, r0
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	60ba      	str	r2, [r7, #8]
 800086e:	b2ca      	uxtb	r2, r1
 8000870:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	429a      	cmp	r2, r3
 800087e:	dbf0      	blt.n	8000862 <_read+0x12>
	}

return len;
 8000880:	687b      	ldr	r3, [r7, #4]
}
 8000882:	0018      	movs	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	b006      	add	sp, #24
 8000888:	bd80      	pop	{r7, pc}

0800088a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e009      	b.n	80008b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	60ba      	str	r2, [r7, #8]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	0018      	movs	r0, r3
 80008a6:	e000      	b.n	80008aa <_write+0x20>
 80008a8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbf1      	blt.n	800089c <_write+0x12>
	}
	return len;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	0018      	movs	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	b006      	add	sp, #24
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <_close>:

int _close(int file)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
	return -1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	425b      	negs	r3, r3
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	0192      	lsls	r2, r2, #6
 80008e6:	605a      	str	r2, [r3, #4]
	return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	0018      	movs	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <_isatty>:

int _isatty(int file)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
	return 1;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b002      	add	sp, #8
 8000902:	bd80      	pop	{r7, pc}

08000904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
	return 0;
 8000910:	2300      	movs	r3, #0
}
 8000912:	0018      	movs	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	b004      	add	sp, #16
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <_sbrk+0x5c>)
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <_sbrk+0x60>)
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <_sbrk+0x64>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <_sbrk+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	18d3      	adds	r3, r2, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	429a      	cmp	r2, r3
 800094a:	d207      	bcs.n	800095c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800094c:	f001 fc94 	bl	8002278 <__errno>
 8000950:	0003      	movs	r3, r0
 8000952:	220c      	movs	r2, #12
 8000954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	e009      	b.n	8000970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	18d2      	adds	r2, r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <_sbrk+0x64>)
 800096c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b006      	add	sp, #24
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20005000 	.word	0x20005000
 800097c:	00000400 	.word	0x00000400
 8000980:	20000090 	.word	0x20000090
 8000984:	200000f0 	.word	0x200000f0

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000996:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000998:	4813      	ldr	r0, [pc, #76]	; (80009e8 <LoopForever+0x6>)
    LDR R1, [R0]
 800099a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800099c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <LoopForever+0xa>)
    CMP R1, R2
 80009a0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009a2:	d105      	bne.n	80009b0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009a6:	4913      	ldr	r1, [pc, #76]	; (80009f4 <LoopForever+0x12>)
    STR R1, [R0]
 80009a8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009aa:	4813      	ldr	r0, [pc, #76]	; (80009f8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009ac:	4913      	ldr	r1, [pc, #76]	; (80009fc <LoopForever+0x1a>)
    STR R1, [R0]
 80009ae:	6001      	str	r1, [r0, #0]

080009b0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	4813      	ldr	r0, [pc, #76]	; (8000a00 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009b2:	4914      	ldr	r1, [pc, #80]	; (8000a04 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <LoopForever+0x26>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009c8:	4c11      	ldr	r4, [pc, #68]	; (8000a10 <LoopForever+0x2e>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009d6:	f7ff ffd7 	bl	8000988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009da:	f001 fc53 	bl	8002284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009de:	f7ff feb9 	bl	8000754 <main>

080009e2 <LoopForever>:

LoopForever:
    b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
   ldr   r0, =_estack
 80009e4:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 80009e8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009ec:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80009f0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80009f4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009f8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009fc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a08:	08002dac 	.word	0x08002dac
  ldr r2, =_sbss
 8000a0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a10:	200000f0 	.word	0x200000f0

08000a14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_IRQHandler>
	...

08000a18 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_Init+0x3c>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_Init+0x3c>)
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a30:	2000      	movs	r0, #0
 8000a32:	f000 f811 	bl	8000a58 <HAL_InitTick>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
 8000a40:	e001      	b.n	8000a46 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a42:	f7ff feaf 	bl	80007a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_InitTick+0x5c>)
 8000a62:	681c      	ldr	r4, [r3, #0]
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_InitTick+0x60>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	0019      	movs	r1, r3
 8000a6a:	23fa      	movs	r3, #250	; 0xfa
 8000a6c:	0098      	lsls	r0, r3, #2
 8000a6e:	f7ff fb4b 	bl	8000108 <__udivsi3>
 8000a72:	0003      	movs	r3, r0
 8000a74:	0019      	movs	r1, r3
 8000a76:	0020      	movs	r0, r4
 8000a78:	f7ff fb46 	bl	8000108 <__udivsi3>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 f90b 	bl	8000c9a <HAL_SYSTICK_Config>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e00f      	b.n	8000aac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d80b      	bhi.n	8000aaa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	2301      	movs	r3, #1
 8000a96:	425b      	negs	r3, r3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 f8d8 	bl	8000c50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_InitTick+0x64>)
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b003      	add	sp, #12
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x1c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x20>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	18d2      	adds	r2, r2, r3
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	200000dc 	.word	0x200000dc

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <HAL_GetTick+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	200000dc 	.word	0x200000dc

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	0002      	movs	r2, r0
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b7f      	cmp	r3, #127	; 0x7f
 8000b0a:	d809      	bhi.n	8000b20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	001a      	movs	r2, r3
 8000b12:	231f      	movs	r3, #31
 8000b14:	401a      	ands	r2, r3
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__NVIC_EnableIRQ+0x30>)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	000a      	movs	r2, r1
 8000b1e:	601a      	str	r2, [r3, #0]
  }
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	0002      	movs	r2, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b40:	d828      	bhi.n	8000b94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b42:	4a2f      	ldr	r2, [pc, #188]	; (8000c00 <__NVIC_SetPriority+0xd4>)
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b25b      	sxtb	r3, r3
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	33c0      	adds	r3, #192	; 0xc0
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	589b      	ldr	r3, [r3, r2]
 8000b52:	1dfa      	adds	r2, r7, #7
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	0011      	movs	r1, r2
 8000b58:	2203      	movs	r2, #3
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	00d2      	lsls	r2, r2, #3
 8000b5e:	21ff      	movs	r1, #255	; 0xff
 8000b60:	4091      	lsls	r1, r2
 8000b62:	000a      	movs	r2, r1
 8000b64:	43d2      	mvns	r2, r2
 8000b66:	401a      	ands	r2, r3
 8000b68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	019b      	lsls	r3, r3, #6
 8000b6e:	22ff      	movs	r2, #255	; 0xff
 8000b70:	401a      	ands	r2, r3
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0018      	movs	r0, r3
 8000b78:	2303      	movs	r3, #3
 8000b7a:	4003      	ands	r3, r0
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b80:	481f      	ldr	r0, [pc, #124]	; (8000c00 <__NVIC_SetPriority+0xd4>)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	33c0      	adds	r3, #192	; 0xc0
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b92:	e031      	b.n	8000bf8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <__NVIC_SetPriority+0xd8>)
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	400b      	ands	r3, r1
 8000ba0:	3b08      	subs	r3, #8
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	3306      	adds	r3, #6
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	3304      	adds	r3, #4
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	1dfa      	adds	r2, r7, #7
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	400a      	ands	r2, r1
 8000bb8:	00d2      	lsls	r2, r2, #3
 8000bba:	21ff      	movs	r1, #255	; 0xff
 8000bbc:	4091      	lsls	r1, r2
 8000bbe:	000a      	movs	r2, r1
 8000bc0:	43d2      	mvns	r2, r2
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	019b      	lsls	r3, r3, #6
 8000bca:	22ff      	movs	r2, #255	; 0xff
 8000bcc:	401a      	ands	r2, r3
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	4003      	ands	r3, r0
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <__NVIC_SetPriority+0xd8>)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	001c      	movs	r4, r3
 8000be4:	230f      	movs	r3, #15
 8000be6:	4023      	ands	r3, r4
 8000be8:	3b08      	subs	r3, #8
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	430a      	orrs	r2, r1
 8000bee:	3306      	adds	r3, #6
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	18c3      	adds	r3, r0, r3
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b003      	add	sp, #12
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	1e5a      	subs	r2, r3, #1
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	045b      	lsls	r3, r3, #17
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d301      	bcc.n	8000c20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e010      	b.n	8000c42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <SysTick_Config+0x44>)
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	3a01      	subs	r2, #1
 8000c26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c28:	2301      	movs	r3, #1
 8000c2a:	425b      	negs	r3, r3
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff ff7c 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x44>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x44>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	0018      	movs	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	1c02      	adds	r2, r0, #0
 8000c60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff ff5d 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b004      	add	sp, #16
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	0002      	movs	r2, r0
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff ff33 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff ffaf 	bl	8000c08 <SysTick_Config>
 8000caa:	0003      	movs	r3, r0
}
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b002      	add	sp, #8
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cca:	e155      	b.n	8000f78 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d100      	bne.n	8000ce4 <HAL_GPIO_Init+0x30>
 8000ce2:	e146      	b.n	8000f72 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d00b      	beq.n	8000d04 <HAL_GPIO_Init+0x50>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d007      	beq.n	8000d04 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf8:	2b11      	cmp	r3, #17
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b12      	cmp	r3, #18
 8000d02:	d130      	bne.n	8000d66 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	409a      	lsls	r2, r3
 8000d12:	0013      	movs	r3, r2
 8000d14:	43da      	mvns	r2, r3
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	409a      	lsls	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	43da      	mvns	r2, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	2201      	movs	r2, #1
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	43da      	mvns	r2, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0xf2>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b12      	cmp	r3, #18
 8000da4:	d123      	bne.n	8000dee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	0092      	lsls	r2, r2, #2
 8000db0:	58d3      	ldr	r3, [r2, r3]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	2207      	movs	r2, #7
 8000db8:	4013      	ands	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2107      	movs	r1, #7
 8000dd2:	400b      	ands	r3, r1
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	6939      	ldr	r1, [r7, #16]
 8000dec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	055b      	lsls	r3, r3, #21
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d100      	bne.n	8000e30 <HAL_GPIO_Init+0x17c>
 8000e2e:	e0a0      	b.n	8000f72 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	4b57      	ldr	r3, [pc, #348]	; (8000f90 <HAL_GPIO_Init+0x2dc>)
 8000e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e34:	4b56      	ldr	r3, [pc, #344]	; (8000f90 <HAL_GPIO_Init+0x2dc>)
 8000e36:	2101      	movs	r1, #1
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3c:	4a55      	ldr	r2, [pc, #340]	; (8000f94 <HAL_GPIO_Init+0x2e0>)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	589b      	ldr	r3, [r3, r2]
 8000e48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	409a      	lsls	r2, r3
 8000e56:	0013      	movs	r3, r2
 8000e58:	43da      	mvns	r2, r3
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	23a0      	movs	r3, #160	; 0xa0
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d01f      	beq.n	8000eaa <HAL_GPIO_Init+0x1f6>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4a      	ldr	r2, [pc, #296]	; (8000f98 <HAL_GPIO_Init+0x2e4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d019      	beq.n	8000ea6 <HAL_GPIO_Init+0x1f2>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a49      	ldr	r2, [pc, #292]	; (8000f9c <HAL_GPIO_Init+0x2e8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x1ee>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a48      	ldr	r2, [pc, #288]	; (8000fa0 <HAL_GPIO_Init+0x2ec>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x1ea>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a47      	ldr	r2, [pc, #284]	; (8000fa4 <HAL_GPIO_Init+0x2f0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x1e6>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a46      	ldr	r2, [pc, #280]	; (8000fa8 <HAL_GPIO_Init+0x2f4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x1e2>
 8000e92:	2305      	movs	r3, #5
 8000e94:	e00a      	b.n	8000eac <HAL_GPIO_Init+0x1f8>
 8000e96:	2306      	movs	r3, #6
 8000e98:	e008      	b.n	8000eac <HAL_GPIO_Init+0x1f8>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x1f8>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_Init+0x1f8>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_Init+0x1f8>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x1f8>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	2103      	movs	r1, #3
 8000eb0:	400a      	ands	r2, r1
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ebc:	4935      	ldr	r1, [pc, #212]	; (8000f94 <HAL_GPIO_Init+0x2e0>)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eca:	4b38      	ldr	r3, [pc, #224]	; (8000fac <HAL_GPIO_Init+0x2f8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	025b      	lsls	r3, r3, #9
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eee:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <HAL_GPIO_Init+0x2f8>)
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <HAL_GPIO_Init+0x2f8>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43da      	mvns	r2, r3
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	029b      	lsls	r3, r3, #10
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f18:	4b24      	ldr	r3, [pc, #144]	; (8000fac <HAL_GPIO_Init+0x2f8>)
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <HAL_GPIO_Init+0x2f8>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43da      	mvns	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	035b      	lsls	r3, r3, #13
 8000f36:	4013      	ands	r3, r2
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_GPIO_Init+0x2f8>)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_GPIO_Init+0x2f8>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43da      	mvns	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	039b      	lsls	r3, r3, #14
 8000f60:	4013      	ands	r3, r2
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_GPIO_Init+0x2f8>)
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	40da      	lsrs	r2, r3
 8000f80:	1e13      	subs	r3, r2, #0
 8000f82:	d000      	beq.n	8000f86 <HAL_GPIO_Init+0x2d2>
 8000f84:	e6a2      	b.n	8000ccc <HAL_GPIO_Init+0x18>
  }
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b006      	add	sp, #24
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010000 	.word	0x40010000
 8000f98:	50000400 	.word	0x50000400
 8000f9c:	50000800 	.word	0x50000800
 8000fa0:	50000c00 	.word	0x50000c00
 8000fa4:	50001000 	.word	0x50001000
 8000fa8:	50001c00 	.word	0x50001c00
 8000fac:	40010400 	.word	0x40010400

08000fb0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	000a      	movs	r2, r1
 8000fba:	1cbb      	adds	r3, r7, #2
 8000fbc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	1cba      	adds	r2, r7, #2
 8000fc4:	8812      	ldrh	r2, [r2, #0]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d004      	beq.n	8000fd4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000fca:	230f      	movs	r3, #15
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e003      	b.n	8000fdc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000fdc:	230f      	movs	r3, #15
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	0008      	movs	r0, r1
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	1cbb      	adds	r3, r7, #2
 8000ff8:	1c02      	adds	r2, r0, #0
 8000ffa:	801a      	strh	r2, [r3, #0]
 8000ffc:	1c7b      	adds	r3, r7, #1
 8000ffe:	1c0a      	adds	r2, r1, #0
 8001000:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001002:	1c7b      	adds	r3, r7, #1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d004      	beq.n	8001014 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800100a:	1cbb      	adds	r3, r7, #2
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001012:	e003      	b.n	800101c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001014:	1cbb      	adds	r3, r7, #2
 8001016:	881a      	ldrh	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	000a      	movs	r2, r1
 800102e:	1cbb      	adds	r3, r7, #2
 8001030:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001038:	1cbb      	adds	r3, r7, #2
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4013      	ands	r3, r2
 8001040:	041a      	lsls	r2, r3, #16
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	1cb9      	adds	r1, r7, #2
 8001048:	8809      	ldrh	r1, [r1, #0]
 800104a:	400b      	ands	r3, r1
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b004      	add	sp, #16
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	f000 fb6c 	bl	8001748 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001070:	4bc8      	ldr	r3, [pc, #800]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	220c      	movs	r2, #12
 8001076:	4013      	ands	r3, r2
 8001078:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800107a:	4bc6      	ldr	r3, [pc, #792]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	025b      	lsls	r3, r3, #9
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2201      	movs	r2, #1
 800108c:	4013      	ands	r3, r2
 800108e:	d100      	bne.n	8001092 <HAL_RCC_OscConfig+0x36>
 8001090:	e07d      	b.n	800118e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	2b08      	cmp	r3, #8
 8001096:	d007      	beq.n	80010a8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	2b0c      	cmp	r3, #12
 800109c:	d112      	bne.n	80010c4 <HAL_RCC_OscConfig+0x68>
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	025b      	lsls	r3, r3, #9
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d10d      	bne.n	80010c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	4bba      	ldr	r3, [pc, #744]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	029b      	lsls	r3, r3, #10
 80010b0:	4013      	ands	r3, r2
 80010b2:	d100      	bne.n	80010b6 <HAL_RCC_OscConfig+0x5a>
 80010b4:	e06a      	b.n	800118c <HAL_RCC_OscConfig+0x130>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d166      	bne.n	800118c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	f000 fb42 	bl	8001748 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d107      	bne.n	80010e0 <HAL_RCC_OscConfig+0x84>
 80010d0:	4bb0      	ldr	r3, [pc, #704]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4baf      	ldr	r3, [pc, #700]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80010d6:	2180      	movs	r1, #128	; 0x80
 80010d8:	0249      	lsls	r1, r1, #9
 80010da:	430a      	orrs	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e027      	b.n	8001130 <HAL_RCC_OscConfig+0xd4>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	23a0      	movs	r3, #160	; 0xa0
 80010e6:	02db      	lsls	r3, r3, #11
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d10e      	bne.n	800110a <HAL_RCC_OscConfig+0xae>
 80010ec:	4ba9      	ldr	r3, [pc, #676]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4ba8      	ldr	r3, [pc, #672]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	02c9      	lsls	r1, r1, #11
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	4ba6      	ldr	r3, [pc, #664]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4ba5      	ldr	r3, [pc, #660]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	0249      	lsls	r1, r1, #9
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e012      	b.n	8001130 <HAL_RCC_OscConfig+0xd4>
 800110a:	4ba2      	ldr	r3, [pc, #648]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4ba1      	ldr	r3, [pc, #644]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001110:	49a1      	ldr	r1, [pc, #644]	; (8001398 <HAL_RCC_OscConfig+0x33c>)
 8001112:	400a      	ands	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	4b9f      	ldr	r3, [pc, #636]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	4013      	ands	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4b9b      	ldr	r3, [pc, #620]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b9a      	ldr	r3, [pc, #616]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 800112a:	499c      	ldr	r1, [pc, #624]	; (800139c <HAL_RCC_OscConfig+0x340>)
 800112c:	400a      	ands	r2, r1
 800112e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d014      	beq.n	8001162 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fcd4 	bl	8000ae4 <HAL_GetTick>
 800113c:	0003      	movs	r3, r0
 800113e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001142:	f7ff fccf 	bl	8000ae4 <HAL_GetTick>
 8001146:	0002      	movs	r2, r0
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b64      	cmp	r3, #100	; 0x64
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e2f9      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001154:	4b8f      	ldr	r3, [pc, #572]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	029b      	lsls	r3, r3, #10
 800115c:	4013      	ands	r3, r2
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0xe6>
 8001160:	e015      	b.n	800118e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001162:	f7ff fcbf 	bl	8000ae4 <HAL_GetTick>
 8001166:	0003      	movs	r3, r0
 8001168:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fcba 	bl	8000ae4 <HAL_GetTick>
 8001170:	0002      	movs	r2, r0
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e2e4      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800117e:	4b85      	ldr	r3, [pc, #532]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	029b      	lsls	r3, r3, #10
 8001186:	4013      	ands	r3, r2
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x110>
 800118a:	e000      	b.n	800118e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2202      	movs	r2, #2
 8001194:	4013      	ands	r3, r2
 8001196:	d100      	bne.n	800119a <HAL_RCC_OscConfig+0x13e>
 8001198:	e099      	b.n	80012ce <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	2220      	movs	r2, #32
 80011a4:	4013      	ands	r3, r2
 80011a6:	d009      	beq.n	80011bc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80011a8:	4b7a      	ldr	r3, [pc, #488]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b79      	ldr	r3, [pc, #484]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80011ae:	2120      	movs	r1, #32
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	2220      	movs	r2, #32
 80011b8:	4393      	bics	r3, r2
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	2b0c      	cmp	r3, #12
 80011c6:	d13e      	bne.n	8001246 <HAL_RCC_OscConfig+0x1ea>
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d13b      	bne.n	8001246 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80011ce:	4b71      	ldr	r3, [pc, #452]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2204      	movs	r2, #4
 80011d4:	4013      	ands	r3, r2
 80011d6:	d004      	beq.n	80011e2 <HAL_RCC_OscConfig+0x186>
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e2b2      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e2:	4b6c      	ldr	r3, [pc, #432]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4a6e      	ldr	r2, [pc, #440]	; (80013a0 <HAL_RCC_OscConfig+0x344>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	0019      	movs	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	021a      	lsls	r2, r3, #8
 80011f2:	4b68      	ldr	r3, [pc, #416]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80011f4:	430a      	orrs	r2, r1
 80011f6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011f8:	4b66      	ldr	r3, [pc, #408]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2209      	movs	r2, #9
 80011fe:	4393      	bics	r3, r2
 8001200:	0019      	movs	r1, r3
 8001202:	4b64      	ldr	r3, [pc, #400]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001206:	430a      	orrs	r2, r1
 8001208:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800120a:	f000 fbeb 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 800120e:	0001      	movs	r1, r0
 8001210:	4b60      	ldr	r3, [pc, #384]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	220f      	movs	r2, #15
 8001218:	4013      	ands	r3, r2
 800121a:	4a62      	ldr	r2, [pc, #392]	; (80013a4 <HAL_RCC_OscConfig+0x348>)
 800121c:	5cd3      	ldrb	r3, [r2, r3]
 800121e:	000a      	movs	r2, r1
 8001220:	40da      	lsrs	r2, r3
 8001222:	4b61      	ldr	r3, [pc, #388]	; (80013a8 <HAL_RCC_OscConfig+0x34c>)
 8001224:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001226:	4b61      	ldr	r3, [pc, #388]	; (80013ac <HAL_RCC_OscConfig+0x350>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2513      	movs	r5, #19
 800122c:	197c      	adds	r4, r7, r5
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff fc12 	bl	8000a58 <HAL_InitTick>
 8001234:	0003      	movs	r3, r0
 8001236:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001238:	197b      	adds	r3, r7, r5
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d046      	beq.n	80012ce <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001240:	197b      	adds	r3, r7, r5
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	e280      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	2b00      	cmp	r3, #0
 800124a:	d027      	beq.n	800129c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800124c:	4b51      	ldr	r3, [pc, #324]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2209      	movs	r2, #9
 8001252:	4393      	bics	r3, r2
 8001254:	0019      	movs	r1, r3
 8001256:	4b4f      	ldr	r3, [pc, #316]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800125a:	430a      	orrs	r2, r1
 800125c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125e:	f7ff fc41 	bl	8000ae4 <HAL_GetTick>
 8001262:	0003      	movs	r3, r0
 8001264:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001268:	f7ff fc3c 	bl	8000ae4 <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e266      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800127a:	4b46      	ldr	r3, [pc, #280]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2204      	movs	r2, #4
 8001280:	4013      	ands	r3, r2
 8001282:	d0f1      	beq.n	8001268 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	4b43      	ldr	r3, [pc, #268]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4a45      	ldr	r2, [pc, #276]	; (80013a0 <HAL_RCC_OscConfig+0x344>)
 800128a:	4013      	ands	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	021a      	lsls	r2, r3, #8
 8001294:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001296:	430a      	orrs	r2, r1
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	e018      	b.n	80012ce <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129c:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80012a2:	2101      	movs	r1, #1
 80012a4:	438a      	bics	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc1c 	bl	8000ae4 <HAL_GetTick>
 80012ac:	0003      	movs	r3, r0
 80012ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fc17 	bl	8000ae4 <HAL_GetTick>
 80012b6:	0002      	movs	r2, r0
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e241      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012c4:	4b33      	ldr	r3, [pc, #204]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2204      	movs	r2, #4
 80012ca:	4013      	ands	r3, r2
 80012cc:	d1f1      	bne.n	80012b2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2210      	movs	r2, #16
 80012d4:	4013      	ands	r3, r2
 80012d6:	d100      	bne.n	80012da <HAL_RCC_OscConfig+0x27e>
 80012d8:	e0a1      	b.n	800141e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d140      	bne.n	8001362 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e0:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4013      	ands	r3, r2
 80012ea:	d005      	beq.n	80012f8 <HAL_RCC_OscConfig+0x29c>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e227      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4a2c      	ldr	r2, [pc, #176]	; (80013b0 <HAL_RCC_OscConfig+0x354>)
 80012fe:	4013      	ands	r3, r2
 8001300:	0019      	movs	r1, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1a      	ldr	r2, [r3, #32]
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001308:	430a      	orrs	r2, r1
 800130a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	0a19      	lsrs	r1, r3, #8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	061a      	lsls	r2, r3, #24
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 800131c:	430a      	orrs	r2, r1
 800131e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	0b5b      	lsrs	r3, r3, #13
 8001326:	3301      	adds	r3, #1
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	0212      	lsls	r2, r2, #8
 800132c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	210f      	movs	r1, #15
 8001336:	400b      	ands	r3, r1
 8001338:	491a      	ldr	r1, [pc, #104]	; (80013a4 <HAL_RCC_OscConfig+0x348>)
 800133a:	5ccb      	ldrb	r3, [r1, r3]
 800133c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_RCC_OscConfig+0x34c>)
 8001340:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <HAL_RCC_OscConfig+0x350>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2513      	movs	r5, #19
 8001348:	197c      	adds	r4, r7, r5
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff fb84 	bl	8000a58 <HAL_InitTick>
 8001350:	0003      	movs	r3, r0
 8001352:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001354:	197b      	adds	r3, r7, r5
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d060      	beq.n	800141e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800135c:	197b      	adds	r3, r7, r5
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	e1f2      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d03f      	beq.n	80013ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_RCC_OscConfig+0x338>)
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	0049      	lsls	r1, r1, #1
 8001374:	430a      	orrs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fbb4 	bl	8000ae4 <HAL_GetTick>
 800137c:	0003      	movs	r3, r0
 800137e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001380:	e018      	b.n	80013b4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001382:	f7ff fbaf 	bl	8000ae4 <HAL_GetTick>
 8001386:	0002      	movs	r2, r0
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d911      	bls.n	80013b4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e1d9      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
 8001394:	40021000 	.word	0x40021000
 8001398:	fffeffff 	.word	0xfffeffff
 800139c:	fffbffff 	.word	0xfffbffff
 80013a0:	ffffe0ff 	.word	0xffffe0ff
 80013a4:	08002d1c 	.word	0x08002d1c
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000004 	.word	0x20000004
 80013b0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013b4:	4bc9      	ldr	r3, [pc, #804]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4013      	ands	r3, r2
 80013be:	d0e0      	beq.n	8001382 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c0:	4bc6      	ldr	r3, [pc, #792]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4ac6      	ldr	r2, [pc, #792]	; (80016e0 <HAL_RCC_OscConfig+0x684>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1a      	ldr	r2, [r3, #32]
 80013ce:	4bc3      	ldr	r3, [pc, #780]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d4:	4bc1      	ldr	r3, [pc, #772]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	0a19      	lsrs	r1, r3, #8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	061a      	lsls	r2, r3, #24
 80013e2:	4bbe      	ldr	r3, [pc, #760]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80013e4:	430a      	orrs	r2, r1
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	e019      	b.n	800141e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ea:	4bbc      	ldr	r3, [pc, #752]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4bbb      	ldr	r3, [pc, #748]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80013f0:	49bc      	ldr	r1, [pc, #752]	; (80016e4 <HAL_RCC_OscConfig+0x688>)
 80013f2:	400a      	ands	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff fb75 	bl	8000ae4 <HAL_GetTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001400:	f7ff fb70 	bl	8000ae4 <HAL_GetTick>
 8001404:	0002      	movs	r2, r0
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e19a      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001412:	4bb2      	ldr	r3, [pc, #712]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	2380      	movs	r3, #128	; 0x80
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4013      	ands	r3, r2
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2208      	movs	r2, #8
 8001424:	4013      	ands	r3, r2
 8001426:	d036      	beq.n	8001496 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d019      	beq.n	8001464 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001430:	4baa      	ldr	r3, [pc, #680]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001432:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001434:	4ba9      	ldr	r3, [pc, #676]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001436:	2101      	movs	r1, #1
 8001438:	430a      	orrs	r2, r1
 800143a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff fb52 	bl	8000ae4 <HAL_GetTick>
 8001440:	0003      	movs	r3, r0
 8001442:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff fb4d 	bl	8000ae4 <HAL_GetTick>
 800144a:	0002      	movs	r2, r0
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e177      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001458:	4ba0      	ldr	r3, [pc, #640]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 800145a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800145c:	2202      	movs	r2, #2
 800145e:	4013      	ands	r3, r2
 8001460:	d0f1      	beq.n	8001446 <HAL_RCC_OscConfig+0x3ea>
 8001462:	e018      	b.n	8001496 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b9d      	ldr	r3, [pc, #628]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001468:	4b9c      	ldr	r3, [pc, #624]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 800146a:	2101      	movs	r1, #1
 800146c:	438a      	bics	r2, r1
 800146e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff fb38 	bl	8000ae4 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fb33 	bl	8000ae4 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e15d      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800148c:	4b93      	ldr	r3, [pc, #588]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 800148e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001490:	2202      	movs	r2, #2
 8001492:	4013      	ands	r3, r2
 8001494:	d1f1      	bne.n	800147a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2204      	movs	r2, #4
 800149c:	4013      	ands	r3, r2
 800149e:	d100      	bne.n	80014a2 <HAL_RCC_OscConfig+0x446>
 80014a0:	e0ae      	b.n	8001600 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a2:	2023      	movs	r0, #35	; 0x23
 80014a4:	183b      	adds	r3, r7, r0
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b8c      	ldr	r3, [pc, #560]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80014ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	055b      	lsls	r3, r3, #21
 80014b2:	4013      	ands	r3, r2
 80014b4:	d109      	bne.n	80014ca <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b89      	ldr	r3, [pc, #548]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80014b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014ba:	4b88      	ldr	r3, [pc, #544]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	0549      	lsls	r1, r1, #21
 80014c0:	430a      	orrs	r2, r1
 80014c2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80014c4:	183b      	adds	r3, r7, r0
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b87      	ldr	r3, [pc, #540]	; (80016e8 <HAL_RCC_OscConfig+0x68c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4013      	ands	r3, r2
 80014d4:	d11a      	bne.n	800150c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b84      	ldr	r3, [pc, #528]	; (80016e8 <HAL_RCC_OscConfig+0x68c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b83      	ldr	r3, [pc, #524]	; (80016e8 <HAL_RCC_OscConfig+0x68c>)
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	0049      	lsls	r1, r1, #1
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e4:	f7ff fafe 	bl	8000ae4 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7ff faf9 	bl	8000ae4 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b64      	cmp	r3, #100	; 0x64
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e123      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4b79      	ldr	r3, [pc, #484]	; (80016e8 <HAL_RCC_OscConfig+0x68c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4013      	ands	r3, r2
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	429a      	cmp	r2, r3
 8001516:	d107      	bne.n	8001528 <HAL_RCC_OscConfig+0x4cc>
 8001518:	4b70      	ldr	r3, [pc, #448]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 800151a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800151c:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 800151e:	2180      	movs	r1, #128	; 0x80
 8001520:	0049      	lsls	r1, r1, #1
 8001522:	430a      	orrs	r2, r1
 8001524:	651a      	str	r2, [r3, #80]	; 0x50
 8001526:	e031      	b.n	800158c <HAL_RCC_OscConfig+0x530>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10c      	bne.n	800154a <HAL_RCC_OscConfig+0x4ee>
 8001530:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001532:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001534:	4b69      	ldr	r3, [pc, #420]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001536:	496b      	ldr	r1, [pc, #428]	; (80016e4 <HAL_RCC_OscConfig+0x688>)
 8001538:	400a      	ands	r2, r1
 800153a:	651a      	str	r2, [r3, #80]	; 0x50
 800153c:	4b67      	ldr	r3, [pc, #412]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 800153e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001540:	4b66      	ldr	r3, [pc, #408]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001542:	496a      	ldr	r1, [pc, #424]	; (80016ec <HAL_RCC_OscConfig+0x690>)
 8001544:	400a      	ands	r2, r1
 8001546:	651a      	str	r2, [r3, #80]	; 0x50
 8001548:	e020      	b.n	800158c <HAL_RCC_OscConfig+0x530>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	23a0      	movs	r3, #160	; 0xa0
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	429a      	cmp	r2, r3
 8001554:	d10e      	bne.n	8001574 <HAL_RCC_OscConfig+0x518>
 8001556:	4b61      	ldr	r3, [pc, #388]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001558:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800155a:	4b60      	ldr	r3, [pc, #384]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	00c9      	lsls	r1, r1, #3
 8001560:	430a      	orrs	r2, r1
 8001562:	651a      	str	r2, [r3, #80]	; 0x50
 8001564:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001568:	4b5c      	ldr	r3, [pc, #368]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	0049      	lsls	r1, r1, #1
 800156e:	430a      	orrs	r2, r1
 8001570:	651a      	str	r2, [r3, #80]	; 0x50
 8001572:	e00b      	b.n	800158c <HAL_RCC_OscConfig+0x530>
 8001574:	4b59      	ldr	r3, [pc, #356]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001576:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001578:	4b58      	ldr	r3, [pc, #352]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 800157a:	495a      	ldr	r1, [pc, #360]	; (80016e4 <HAL_RCC_OscConfig+0x688>)
 800157c:	400a      	ands	r2, r1
 800157e:	651a      	str	r2, [r3, #80]	; 0x50
 8001580:	4b56      	ldr	r3, [pc, #344]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001584:	4b55      	ldr	r3, [pc, #340]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001586:	4959      	ldr	r1, [pc, #356]	; (80016ec <HAL_RCC_OscConfig+0x690>)
 8001588:	400a      	ands	r2, r1
 800158a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d015      	beq.n	80015c0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff faa6 	bl	8000ae4 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800159c:	e009      	b.n	80015b2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159e:	f7ff faa1 	bl	8000ae4 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	4a51      	ldr	r2, [pc, #324]	; (80016f0 <HAL_RCC_OscConfig+0x694>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e0ca      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015b2:	4b4a      	ldr	r3, [pc, #296]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80015b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4013      	ands	r3, r2
 80015bc:	d0ef      	beq.n	800159e <HAL_RCC_OscConfig+0x542>
 80015be:	e014      	b.n	80015ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c0:	f7ff fa90 	bl	8000ae4 <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015c8:	e009      	b.n	80015de <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ca:	f7ff fa8b 	bl	8000ae4 <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	4a46      	ldr	r2, [pc, #280]	; (80016f0 <HAL_RCC_OscConfig+0x694>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e0b4      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80015e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4013      	ands	r3, r2
 80015e8:	d1ef      	bne.n	80015ca <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ea:	2323      	movs	r3, #35	; 0x23
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d105      	bne.n	8001600 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f4:	4b39      	ldr	r3, [pc, #228]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80015f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015f8:	4b38      	ldr	r3, [pc, #224]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80015fa:	493e      	ldr	r1, [pc, #248]	; (80016f4 <HAL_RCC_OscConfig+0x698>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	2b00      	cmp	r3, #0
 8001606:	d100      	bne.n	800160a <HAL_RCC_OscConfig+0x5ae>
 8001608:	e09d      	b.n	8001746 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	2b0c      	cmp	r3, #12
 800160e:	d100      	bne.n	8001612 <HAL_RCC_OscConfig+0x5b6>
 8001610:	e076      	b.n	8001700 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	2b02      	cmp	r3, #2
 8001618:	d145      	bne.n	80016a6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161a:	4b30      	ldr	r3, [pc, #192]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001620:	4935      	ldr	r1, [pc, #212]	; (80016f8 <HAL_RCC_OscConfig+0x69c>)
 8001622:	400a      	ands	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fa5d 	bl	8000ae4 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff fa58 	bl	8000ae4 <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e082      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	049b      	lsls	r3, r3, #18
 800164a:	4013      	ands	r3, r2
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	4a2a      	ldr	r2, [pc, #168]	; (80016fc <HAL_RCC_OscConfig+0x6a0>)
 8001654:	4013      	ands	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	431a      	orrs	r2, r3
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 800166a:	430a      	orrs	r2, r1
 800166c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	0449      	lsls	r1, r1, #17
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fa32 	bl	8000ae4 <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff fa2d 	bl	8000ae4 <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e057      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	049b      	lsls	r3, r3, #18
 80016a0:	4013      	ands	r3, r2
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x62a>
 80016a4:	e04f      	b.n	8001746 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80016ac:	4912      	ldr	r1, [pc, #72]	; (80016f8 <HAL_RCC_OscConfig+0x69c>)
 80016ae:	400a      	ands	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fa17 	bl	8000ae4 <HAL_GetTick>
 80016b6:	0003      	movs	r3, r0
 80016b8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fa12 	bl	8000ae4 <HAL_GetTick>
 80016c0:	0002      	movs	r2, r0
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e03c      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016ce:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_RCC_OscConfig+0x680>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	049b      	lsls	r3, r3, #18
 80016d6:	4013      	ands	r3, r2
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x660>
 80016da:	e034      	b.n	8001746 <HAL_RCC_OscConfig+0x6ea>
 80016dc:	40021000 	.word	0x40021000
 80016e0:	ffff1fff 	.word	0xffff1fff
 80016e4:	fffffeff 	.word	0xfffffeff
 80016e8:	40007000 	.word	0x40007000
 80016ec:	fffffbff 	.word	0xfffffbff
 80016f0:	00001388 	.word	0x00001388
 80016f4:	efffffff 	.word	0xefffffff
 80016f8:	feffffff 	.word	0xfeffffff
 80016fc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_RCC_OscConfig+0x6f4>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	025b      	lsls	r3, r3, #9
 8001718:	401a      	ands	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	429a      	cmp	r2, r3
 8001720:	d10f      	bne.n	8001742 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	23f0      	movs	r3, #240	; 0xf0
 8001726:	039b      	lsls	r3, r3, #14
 8001728:	401a      	ands	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d107      	bne.n	8001742 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	23c0      	movs	r3, #192	; 0xc0
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	401a      	ands	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	b00a      	add	sp, #40	; 0x28
 800174e:	bdb0      	pop	{r4, r5, r7, pc}
 8001750:	40021000 	.word	0x40021000

08001754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e128      	b.n	80019ba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001768:	4b96      	ldr	r3, [pc, #600]	; (80019c4 <HAL_RCC_ClockConfig+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2201      	movs	r2, #1
 800176e:	4013      	ands	r3, r2
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d91e      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b93      	ldr	r3, [pc, #588]	; (80019c4 <HAL_RCC_ClockConfig+0x270>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2201      	movs	r2, #1
 800177c:	4393      	bics	r3, r2
 800177e:	0019      	movs	r1, r3
 8001780:	4b90      	ldr	r3, [pc, #576]	; (80019c4 <HAL_RCC_ClockConfig+0x270>)
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001788:	f7ff f9ac 	bl	8000ae4 <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001790:	e009      	b.n	80017a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001792:	f7ff f9a7 	bl	8000ae4 <HAL_GetTick>
 8001796:	0002      	movs	r2, r0
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	4a8a      	ldr	r2, [pc, #552]	; (80019c8 <HAL_RCC_ClockConfig+0x274>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e109      	b.n	80019ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b87      	ldr	r3, [pc, #540]	; (80019c4 <HAL_RCC_ClockConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	4013      	ands	r3, r2
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d1ee      	bne.n	8001792 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2202      	movs	r2, #2
 80017ba:	4013      	ands	r3, r2
 80017bc:	d009      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017be:	4b83      	ldr	r3, [pc, #524]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	22f0      	movs	r2, #240	; 0xf0
 80017c4:	4393      	bics	r3, r2
 80017c6:	0019      	movs	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 80017ce:	430a      	orrs	r2, r1
 80017d0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4013      	ands	r3, r2
 80017da:	d100      	bne.n	80017de <HAL_RCC_ClockConfig+0x8a>
 80017dc:	e089      	b.n	80018f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017e6:	4b79      	ldr	r3, [pc, #484]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	029b      	lsls	r3, r3, #10
 80017ee:	4013      	ands	r3, r2
 80017f0:	d120      	bne.n	8001834 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0e1      	b.n	80019ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017fe:	4b73      	ldr	r3, [pc, #460]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	049b      	lsls	r3, r3, #18
 8001806:	4013      	ands	r3, r2
 8001808:	d114      	bne.n	8001834 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e0d5      	b.n	80019ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d106      	bne.n	8001824 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001816:	4b6d      	ldr	r3, [pc, #436]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2204      	movs	r2, #4
 800181c:	4013      	ands	r3, r2
 800181e:	d109      	bne.n	8001834 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0ca      	b.n	80019ba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001824:	4b69      	ldr	r3, [pc, #420]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4013      	ands	r3, r2
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0c2      	b.n	80019ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001834:	4b65      	ldr	r3, [pc, #404]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2203      	movs	r2, #3
 800183a:	4393      	bics	r3, r2
 800183c:	0019      	movs	r1, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4b62      	ldr	r3, [pc, #392]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 8001844:	430a      	orrs	r2, r1
 8001846:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001848:	f7ff f94c 	bl	8000ae4 <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d111      	bne.n	800187c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001858:	e009      	b.n	800186e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185a:	f7ff f943 	bl	8000ae4 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_RCC_ClockConfig+0x274>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0a5      	b.n	80019ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800186e:	4b57      	ldr	r3, [pc, #348]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	220c      	movs	r2, #12
 8001874:	4013      	ands	r3, r2
 8001876:	2b08      	cmp	r3, #8
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_ClockConfig+0x106>
 800187a:	e03a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d111      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001884:	e009      	b.n	800189a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001886:	f7ff f92d 	bl	8000ae4 <HAL_GetTick>
 800188a:	0002      	movs	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4a4d      	ldr	r2, [pc, #308]	; (80019c8 <HAL_RCC_ClockConfig+0x274>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e08f      	b.n	80019ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189a:	4b4c      	ldr	r3, [pc, #304]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	220c      	movs	r2, #12
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	d1ef      	bne.n	8001886 <HAL_RCC_ClockConfig+0x132>
 80018a6:	e024      	b.n	80018f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d11b      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b2:	f7ff f917 	bl	8000ae4 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4a42      	ldr	r2, [pc, #264]	; (80019c8 <HAL_RCC_ClockConfig+0x274>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e079      	b.n	80019ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018c6:	4b41      	ldr	r3, [pc, #260]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	220c      	movs	r2, #12
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d1ef      	bne.n	80018b2 <HAL_RCC_ClockConfig+0x15e>
 80018d2:	e00e      	b.n	80018f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d4:	f7ff f906 	bl	8000ae4 <HAL_GetTick>
 80018d8:	0002      	movs	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	4a3a      	ldr	r2, [pc, #232]	; (80019c8 <HAL_RCC_ClockConfig+0x274>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e068      	b.n	80019ba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018e8:	4b38      	ldr	r3, [pc, #224]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	220c      	movs	r2, #12
 80018ee:	4013      	ands	r3, r2
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <HAL_RCC_ClockConfig+0x270>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	4013      	ands	r3, r2
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d21e      	bcs.n	800193e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_RCC_ClockConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	4393      	bics	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_RCC_ClockConfig+0x270>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001912:	f7ff f8e7 	bl	8000ae4 <HAL_GetTick>
 8001916:	0003      	movs	r3, r0
 8001918:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	e009      	b.n	8001930 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff f8e2 	bl	8000ae4 <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	4a28      	ldr	r2, [pc, #160]	; (80019c8 <HAL_RCC_ClockConfig+0x274>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e044      	b.n	80019ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_RCC_ClockConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	4013      	ands	r3, r2
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d1ee      	bne.n	800191c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2204      	movs	r2, #4
 8001944:	4013      	ands	r3, r2
 8001946:	d009      	beq.n	800195c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <HAL_RCC_ClockConfig+0x27c>)
 800194e:	4013      	ands	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 8001958:	430a      	orrs	r2, r1
 800195a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2208      	movs	r2, #8
 8001962:	4013      	ands	r3, r2
 8001964:	d00a      	beq.n	800197c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <HAL_RCC_ClockConfig+0x280>)
 800196c:	4013      	ands	r3, r2
 800196e:	0019      	movs	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	00da      	lsls	r2, r3, #3
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 8001978:	430a      	orrs	r2, r1
 800197a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800197c:	f000 f832 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 8001980:	0001      	movs	r1, r0
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_RCC_ClockConfig+0x278>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	220f      	movs	r2, #15
 800198a:	4013      	ands	r3, r2
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_RCC_ClockConfig+0x284>)
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	000a      	movs	r2, r1
 8001992:	40da      	lsrs	r2, r3
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_RCC_ClockConfig+0x288>)
 8001996:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_RCC_ClockConfig+0x28c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	250b      	movs	r5, #11
 800199e:	197c      	adds	r4, r7, r5
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7ff f859 	bl	8000a58 <HAL_InitTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80019aa:	197b      	adds	r3, r7, r5
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80019b2:	197b      	adds	r3, r7, r5
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	e000      	b.n	80019ba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	0018      	movs	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	b004      	add	sp, #16
 80019c0:	bdb0      	pop	{r4, r5, r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	40022000 	.word	0x40022000
 80019c8:	00001388 	.word	0x00001388
 80019cc:	40021000 	.word	0x40021000
 80019d0:	fffff8ff 	.word	0xfffff8ff
 80019d4:	ffffc7ff 	.word	0xffffc7ff
 80019d8:	08002d1c 	.word	0x08002d1c
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	b08e      	sub	sp, #56	; 0x38
 80019e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80019ea:	4b4c      	ldr	r3, [pc, #304]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x138>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f2:	230c      	movs	r3, #12
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d014      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x40>
 80019fa:	d900      	bls.n	80019fe <HAL_RCC_GetSysClockFreq+0x1a>
 80019fc:	e07b      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x112>
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d002      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x24>
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d00b      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a06:	e076      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a08:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d002      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a12:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a16:	e07c      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a18:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a1c:	e079      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a1e:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a22:	e076      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	0c9a      	lsrs	r2, r3, #18
 8001a28:	230f      	movs	r3, #15
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x148>)
 8001a2e:	5c9b      	ldrb	r3, [r3, r2]
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a34:	0d9a      	lsrs	r2, r3, #22
 8001a36:	2303      	movs	r3, #3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	025b      	lsls	r3, r3, #9
 8001a46:	4013      	ands	r3, r2
 8001a48:	d01a      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	4a35      	ldr	r2, [pc, #212]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a54:	2300      	movs	r3, #0
 8001a56:	69b8      	ldr	r0, [r7, #24]
 8001a58:	69f9      	ldr	r1, [r7, #28]
 8001a5a:	f7fe fc01 	bl	8000260 <__aeabi_lmul>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	000b      	movs	r3, r1
 8001a62:	0010      	movs	r0, r2
 8001a64:	0019      	movs	r1, r3
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f7fe fbd5 	bl	8000220 <__aeabi_uldivmod>
 8001a76:	0002      	movs	r2, r0
 8001a78:	000b      	movs	r3, r1
 8001a7a:	0013      	movs	r3, r2
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a7e:	e037      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a80:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2210      	movs	r2, #16
 8001a86:	4013      	ands	r3, r2
 8001a88:	d01a      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a94:	2300      	movs	r3, #0
 8001a96:	68b8      	ldr	r0, [r7, #8]
 8001a98:	68f9      	ldr	r1, [r7, #12]
 8001a9a:	f7fe fbe1 	bl	8000260 <__aeabi_lmul>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	000b      	movs	r3, r1
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f7fe fbb5 	bl	8000220 <__aeabi_uldivmod>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	000b      	movs	r3, r1
 8001aba:	0013      	movs	r3, r2
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
 8001abe:	e017      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x140>)
 8001aca:	2300      	movs	r3, #0
 8001acc:	f7fe fbc8 	bl	8000260 <__aeabi_lmul>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	000b      	movs	r3, r1
 8001ad4:	0010      	movs	r0, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	001c      	movs	r4, r3
 8001adc:	2300      	movs	r3, #0
 8001ade:	001d      	movs	r5, r3
 8001ae0:	0022      	movs	r2, r4
 8001ae2:	002b      	movs	r3, r5
 8001ae4:	f7fe fb9c 	bl	8000220 <__aeabi_uldivmod>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	000b      	movs	r3, r1
 8001aec:	0013      	movs	r3, r2
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001af4:	e00d      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	0b5b      	lsrs	r3, r3, #13
 8001afc:	2207      	movs	r2, #7
 8001afe:	4013      	ands	r3, r2
 8001b00:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	3301      	adds	r3, #1
 8001b06:	2280      	movs	r2, #128	; 0x80
 8001b08:	0212      	lsls	r2, r2, #8
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b10:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b00e      	add	sp, #56	; 0x38
 8001b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	003d0900 	.word	0x003d0900
 8001b24:	00f42400 	.word	0x00f42400
 8001b28:	007a1200 	.word	0x007a1200
 8001b2c:	08002d2c 	.word	0x08002d2c

08001b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e032      	b.n	8001ba8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2239      	movs	r2, #57	; 0x39
 8001b46:	5c9b      	ldrb	r3, [r3, r2]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d107      	bne.n	8001b5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2238      	movs	r2, #56	; 0x38
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7fe fe37 	bl	80007cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2239      	movs	r2, #57	; 0x39
 8001b62:	2102      	movs	r1, #2
 8001b64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	0019      	movs	r1, r3
 8001b70:	0010      	movs	r0, r2
 8001b72:	f000 fa3b 	bl	8001fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	223e      	movs	r2, #62	; 0x3e
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	223a      	movs	r2, #58	; 0x3a
 8001b82:	2101      	movs	r1, #1
 8001b84:	5499      	strb	r1, [r3, r2]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	223b      	movs	r2, #59	; 0x3b
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	5499      	strb	r1, [r3, r2]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	223c      	movs	r2, #60	; 0x3c
 8001b92:	2101      	movs	r1, #1
 8001b94:	5499      	strb	r1, [r3, r2]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	223d      	movs	r2, #61	; 0x3d
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2239      	movs	r2, #57	; 0x39
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2239      	movs	r2, #57	; 0x39
 8001bbc:	5c9b      	ldrb	r3, [r3, r2]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d001      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e036      	b.n	8001c36 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2239      	movs	r2, #57	; 0x39
 8001bcc:	2102      	movs	r1, #2
 8001bce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2101      	movs	r1, #1
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	05db      	lsls	r3, r3, #23
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d009      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x50>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <HAL_TIM_Base_Start_IT+0x90>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d004      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x50>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <HAL_TIM_Base_Start_IT+0x94>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d111      	bne.n	8001c24 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2207      	movs	r2, #7
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d010      	beq.n	8001c34 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c22:	e007      	b.n	8001c34 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2101      	movs	r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b004      	add	sp, #16
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40011400 	.word	0x40011400

08001c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2202      	movs	r2, #2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d124      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2202      	movs	r2, #2
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d11d      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2203      	movs	r2, #3
 8001c72:	4252      	negs	r2, r2
 8001c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2203      	movs	r2, #3
 8001c84:	4013      	ands	r3, r2
 8001c86:	d004      	beq.n	8001c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 f996 	bl	8001fbc <HAL_TIM_IC_CaptureCallback>
 8001c90:	e007      	b.n	8001ca2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f000 f989 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f000 f995 	bl	8001fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d125      	bne.n	8001d02 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11e      	bne.n	8001d02 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2205      	movs	r2, #5
 8001cca:	4252      	negs	r2, r2
 8001ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	23c0      	movs	r3, #192	; 0xc0
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d004      	beq.n	8001cec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f000 f969 	bl	8001fbc <HAL_TIM_IC_CaptureCallback>
 8001cea:	e007      	b.n	8001cfc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 f95c 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f000 f968 	bl	8001fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2208      	movs	r2, #8
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d124      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2208      	movs	r2, #8
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d11d      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2209      	movs	r2, #9
 8001d24:	4252      	negs	r2, r2
 8001d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	2203      	movs	r2, #3
 8001d36:	4013      	ands	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f000 f93d 	bl	8001fbc <HAL_TIM_IC_CaptureCallback>
 8001d42:	e007      	b.n	8001d54 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	0018      	movs	r0, r3
 8001d48:	f000 f930 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f000 f93c 	bl	8001fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2210      	movs	r2, #16
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d125      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2210      	movs	r2, #16
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d11e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2211      	movs	r2, #17
 8001d7c:	4252      	negs	r2, r2
 8001d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2208      	movs	r2, #8
 8001d84:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	23c0      	movs	r3, #192	; 0xc0
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4013      	ands	r3, r2
 8001d92:	d004      	beq.n	8001d9e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f000 f910 	bl	8001fbc <HAL_TIM_IC_CaptureCallback>
 8001d9c:	e007      	b.n	8001dae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f000 f903 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f000 f90f 	bl	8001fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d10f      	bne.n	8001de2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d108      	bne.n	8001de2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	4252      	negs	r2, r2
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7fe fc83 	bl	80006e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2240      	movs	r2, #64	; 0x40
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b40      	cmp	r3, #64	; 0x40
 8001dee:	d10f      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2240      	movs	r2, #64	; 0x40
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b40      	cmp	r3, #64	; 0x40
 8001dfc:	d108      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2241      	movs	r2, #65	; 0x41
 8001e04:	4252      	negs	r2, r2
 8001e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f000 f8e6 	bl	8001fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b002      	add	sp, #8
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2238      	movs	r2, #56	; 0x38
 8001e26:	5c9b      	ldrb	r3, [r3, r2]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_TIM_ConfigClockSource+0x18>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e0b7      	b.n	8001fa0 <HAL_TIM_ConfigClockSource+0x188>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2238      	movs	r2, #56	; 0x38
 8001e34:	2101      	movs	r1, #1
 8001e36:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2239      	movs	r2, #57	; 0x39
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2277      	movs	r2, #119	; 0x77
 8001e4c:	4393      	bics	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4a55      	ldr	r2, [pc, #340]	; (8001fa8 <HAL_TIM_ConfigClockSource+0x190>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	0192      	lsls	r2, r2, #6
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d040      	beq.n	8001eee <HAL_TIM_ConfigClockSource+0xd6>
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	0192      	lsls	r2, r2, #6
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d900      	bls.n	8001e76 <HAL_TIM_ConfigClockSource+0x5e>
 8001e74:	e088      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x170>
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	0152      	lsls	r2, r2, #5
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d100      	bne.n	8001e80 <HAL_TIM_ConfigClockSource+0x68>
 8001e7e:	e085      	b.n	8001f8c <HAL_TIM_ConfigClockSource+0x174>
 8001e80:	2280      	movs	r2, #128	; 0x80
 8001e82:	0152      	lsls	r2, r2, #5
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d900      	bls.n	8001e8a <HAL_TIM_ConfigClockSource+0x72>
 8001e88:	e07e      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x170>
 8001e8a:	2b70      	cmp	r3, #112	; 0x70
 8001e8c:	d018      	beq.n	8001ec0 <HAL_TIM_ConfigClockSource+0xa8>
 8001e8e:	d900      	bls.n	8001e92 <HAL_TIM_ConfigClockSource+0x7a>
 8001e90:	e07a      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x170>
 8001e92:	2b60      	cmp	r3, #96	; 0x60
 8001e94:	d04f      	beq.n	8001f36 <HAL_TIM_ConfigClockSource+0x11e>
 8001e96:	d900      	bls.n	8001e9a <HAL_TIM_ConfigClockSource+0x82>
 8001e98:	e076      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x170>
 8001e9a:	2b50      	cmp	r3, #80	; 0x50
 8001e9c:	d03b      	beq.n	8001f16 <HAL_TIM_ConfigClockSource+0xfe>
 8001e9e:	d900      	bls.n	8001ea2 <HAL_TIM_ConfigClockSource+0x8a>
 8001ea0:	e072      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x170>
 8001ea2:	2b40      	cmp	r3, #64	; 0x40
 8001ea4:	d057      	beq.n	8001f56 <HAL_TIM_ConfigClockSource+0x13e>
 8001ea6:	d900      	bls.n	8001eaa <HAL_TIM_ConfigClockSource+0x92>
 8001ea8:	e06e      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x170>
 8001eaa:	2b30      	cmp	r3, #48	; 0x30
 8001eac:	d063      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0x15e>
 8001eae:	d86b      	bhi.n	8001f88 <HAL_TIM_ConfigClockSource+0x170>
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d060      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0x15e>
 8001eb4:	d868      	bhi.n	8001f88 <HAL_TIM_ConfigClockSource+0x170>
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d05d      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0x15e>
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d05b      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001ebe:	e063      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f000 f95a 	bl	8002188 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2277      	movs	r2, #119	; 0x77
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	609a      	str	r2, [r3, #8]
      break;
 8001eec:	e04f      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6899      	ldr	r1, [r3, #8]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f000 f943 	bl	8002188 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	01c9      	lsls	r1, r1, #7
 8001f10:	430a      	orrs	r2, r1
 8001f12:	609a      	str	r2, [r3, #8]
      break;
 8001f14:	e03b      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6859      	ldr	r1, [r3, #4]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	001a      	movs	r2, r3
 8001f24:	f000 f8b6 	bl	8002094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2150      	movs	r1, #80	; 0x50
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f000 f910 	bl	8002154 <TIM_ITRx_SetConfig>
      break;
 8001f34:	e02b      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	001a      	movs	r2, r3
 8001f44:	f000 f8d4 	bl	80020f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2160      	movs	r1, #96	; 0x60
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 f900 	bl	8002154 <TIM_ITRx_SetConfig>
      break;
 8001f54:	e01b      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	001a      	movs	r2, r3
 8001f64:	f000 f896 	bl	8002094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2140      	movs	r1, #64	; 0x40
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 f8f0 	bl	8002154 <TIM_ITRx_SetConfig>
      break;
 8001f74:	e00b      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	0019      	movs	r1, r3
 8001f80:	0010      	movs	r0, r2
 8001f82:	f000 f8e7 	bl	8002154 <TIM_ITRx_SetConfig>
        break;
 8001f86:	e002      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	e000      	b.n	8001f8e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001f8c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2239      	movs	r2, #57	; 0x39
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2238      	movs	r2, #56	; 0x38
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b004      	add	sp, #16
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	ffff00ff 	.word	0xffff00ff

08001fac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b002      	add	sp, #8
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}

08001fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	05db      	lsls	r3, r3, #23
 8002002:	429a      	cmp	r2, r3
 8002004:	d007      	beq.n	8002016 <TIM_Base_SetConfig+0x2a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <TIM_Base_SetConfig+0x9c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d003      	beq.n	8002016 <TIM_Base_SetConfig+0x2a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a1e      	ldr	r2, [pc, #120]	; (800208c <TIM_Base_SetConfig+0xa0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d108      	bne.n	8002028 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2270      	movs	r2, #112	; 0x70
 800201a:	4393      	bics	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	05db      	lsls	r3, r3, #23
 800202e:	429a      	cmp	r2, r3
 8002030:	d007      	beq.n	8002042 <TIM_Base_SetConfig+0x56>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <TIM_Base_SetConfig+0x9c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d003      	beq.n	8002042 <TIM_Base_SetConfig+0x56>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a13      	ldr	r2, [pc, #76]	; (800208c <TIM_Base_SetConfig+0xa0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d108      	bne.n	8002054 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <TIM_Base_SetConfig+0xa4>)
 8002046:	4013      	ands	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2280      	movs	r2, #128	; 0x80
 8002058:	4393      	bics	r3, r2
 800205a:	001a      	movs	r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	615a      	str	r2, [r3, #20]
}
 8002080:	46c0      	nop			; (mov r8, r8)
 8002082:	46bd      	mov	sp, r7
 8002084:	b004      	add	sp, #16
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40010800 	.word	0x40010800
 800208c:	40011400 	.word	0x40011400
 8002090:	fffffcff 	.word	0xfffffcff

08002094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	2201      	movs	r2, #1
 80020ac:	4393      	bics	r3, r2
 80020ae:	001a      	movs	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	22f0      	movs	r2, #240	; 0xf0
 80020be:	4393      	bics	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	220a      	movs	r2, #10
 80020d0:	4393      	bics	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	621a      	str	r2, [r3, #32]
}
 80020e8:	46c0      	nop			; (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b006      	add	sp, #24
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	2210      	movs	r2, #16
 8002102:	4393      	bics	r3, r2
 8002104:	001a      	movs	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <TIM_TI2_ConfigInputStage+0x60>)
 800211a:	4013      	ands	r3, r2
 800211c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	031b      	lsls	r3, r3, #12
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	22a0      	movs	r2, #160	; 0xa0
 800212c:	4393      	bics	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	621a      	str	r2, [r3, #32]
}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b006      	add	sp, #24
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	ffff0fff 	.word	0xffff0fff

08002154 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2270      	movs	r2, #112	; 0x70
 8002168:	4393      	bics	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	2207      	movs	r2, #7
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	609a      	str	r2, [r3, #8]
}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b004      	add	sp, #16
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <TIM_ETR_SetConfig+0x3c>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	021a      	lsls	r2, r3, #8
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	609a      	str	r2, [r3, #8]
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b006      	add	sp, #24
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	ffff00ff 	.word	0xffff00ff

080021c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2238      	movs	r2, #56	; 0x38
 80021d6:	5c9b      	ldrb	r3, [r3, r2]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021dc:	2302      	movs	r3, #2
 80021de:	e042      	b.n	8002266 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2238      	movs	r2, #56	; 0x38
 80021e4:	2101      	movs	r1, #1
 80021e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2239      	movs	r2, #57	; 0x39
 80021ec:	2102      	movs	r1, #2
 80021ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2270      	movs	r2, #112	; 0x70
 8002204:	4393      	bics	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	05db      	lsls	r3, r3, #23
 8002222:	429a      	cmp	r2, r3
 8002224:	d009      	beq.n	800223a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d004      	beq.n	800223a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0f      	ldr	r2, [pc, #60]	; (8002274 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10c      	bne.n	8002254 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	4393      	bics	r3, r2
 8002240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	4313      	orrs	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2239      	movs	r2, #57	; 0x39
 8002258:	2101      	movs	r1, #1
 800225a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2238      	movs	r2, #56	; 0x38
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	0018      	movs	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	b004      	add	sp, #16
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	40010800 	.word	0x40010800
 8002274:	40011400 	.word	0x40011400

08002278 <__errno>:
 8002278:	4b01      	ldr	r3, [pc, #4]	; (8002280 <__errno+0x8>)
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	4770      	bx	lr
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	2000000c 	.word	0x2000000c

08002284 <__libc_init_array>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	2600      	movs	r6, #0
 8002288:	4d0c      	ldr	r5, [pc, #48]	; (80022bc <__libc_init_array+0x38>)
 800228a:	4c0d      	ldr	r4, [pc, #52]	; (80022c0 <__libc_init_array+0x3c>)
 800228c:	1b64      	subs	r4, r4, r5
 800228e:	10a4      	asrs	r4, r4, #2
 8002290:	42a6      	cmp	r6, r4
 8002292:	d109      	bne.n	80022a8 <__libc_init_array+0x24>
 8002294:	2600      	movs	r6, #0
 8002296:	f000 fd31 	bl	8002cfc <_init>
 800229a:	4d0a      	ldr	r5, [pc, #40]	; (80022c4 <__libc_init_array+0x40>)
 800229c:	4c0a      	ldr	r4, [pc, #40]	; (80022c8 <__libc_init_array+0x44>)
 800229e:	1b64      	subs	r4, r4, r5
 80022a0:	10a4      	asrs	r4, r4, #2
 80022a2:	42a6      	cmp	r6, r4
 80022a4:	d105      	bne.n	80022b2 <__libc_init_array+0x2e>
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
 80022a8:	00b3      	lsls	r3, r6, #2
 80022aa:	58eb      	ldr	r3, [r5, r3]
 80022ac:	4798      	blx	r3
 80022ae:	3601      	adds	r6, #1
 80022b0:	e7ee      	b.n	8002290 <__libc_init_array+0xc>
 80022b2:	00b3      	lsls	r3, r6, #2
 80022b4:	58eb      	ldr	r3, [r5, r3]
 80022b6:	4798      	blx	r3
 80022b8:	3601      	adds	r6, #1
 80022ba:	e7f2      	b.n	80022a2 <__libc_init_array+0x1e>
 80022bc:	08002da4 	.word	0x08002da4
 80022c0:	08002da4 	.word	0x08002da4
 80022c4:	08002da4 	.word	0x08002da4
 80022c8:	08002da8 	.word	0x08002da8

080022cc <memset>:
 80022cc:	0003      	movs	r3, r0
 80022ce:	1882      	adds	r2, r0, r2
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d100      	bne.n	80022d6 <memset+0xa>
 80022d4:	4770      	bx	lr
 80022d6:	7019      	strb	r1, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	e7f9      	b.n	80022d0 <memset+0x4>

080022dc <_puts_r>:
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	0005      	movs	r5, r0
 80022e0:	000e      	movs	r6, r1
 80022e2:	2800      	cmp	r0, #0
 80022e4:	d004      	beq.n	80022f0 <_puts_r+0x14>
 80022e6:	6983      	ldr	r3, [r0, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <_puts_r+0x14>
 80022ec:	f000 fa6e 	bl	80027cc <__sinit>
 80022f0:	69ab      	ldr	r3, [r5, #24]
 80022f2:	68ac      	ldr	r4, [r5, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <_puts_r+0x22>
 80022f8:	0028      	movs	r0, r5
 80022fa:	f000 fa67 	bl	80027cc <__sinit>
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <_puts_r+0xd8>)
 8002300:	429c      	cmp	r4, r3
 8002302:	d122      	bne.n	800234a <_puts_r+0x6e>
 8002304:	686c      	ldr	r4, [r5, #4]
 8002306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002308:	07db      	lsls	r3, r3, #31
 800230a:	d405      	bmi.n	8002318 <_puts_r+0x3c>
 800230c:	89a3      	ldrh	r3, [r4, #12]
 800230e:	059b      	lsls	r3, r3, #22
 8002310:	d402      	bmi.n	8002318 <_puts_r+0x3c>
 8002312:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002314:	f000 fafb 	bl	800290e <__retarget_lock_acquire_recursive>
 8002318:	89a3      	ldrh	r3, [r4, #12]
 800231a:	071b      	lsls	r3, r3, #28
 800231c:	d502      	bpl.n	8002324 <_puts_r+0x48>
 800231e:	6923      	ldr	r3, [r4, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d129      	bne.n	8002378 <_puts_r+0x9c>
 8002324:	0021      	movs	r1, r4
 8002326:	0028      	movs	r0, r5
 8002328:	f000 f8aa 	bl	8002480 <__swsetup_r>
 800232c:	2800      	cmp	r0, #0
 800232e:	d023      	beq.n	8002378 <_puts_r+0x9c>
 8002330:	2501      	movs	r5, #1
 8002332:	426d      	negs	r5, r5
 8002334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002336:	07db      	lsls	r3, r3, #31
 8002338:	d405      	bmi.n	8002346 <_puts_r+0x6a>
 800233a:	89a3      	ldrh	r3, [r4, #12]
 800233c:	059b      	lsls	r3, r3, #22
 800233e:	d402      	bmi.n	8002346 <_puts_r+0x6a>
 8002340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002342:	f000 fae5 	bl	8002910 <__retarget_lock_release_recursive>
 8002346:	0028      	movs	r0, r5
 8002348:	bd70      	pop	{r4, r5, r6, pc}
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <_puts_r+0xdc>)
 800234c:	429c      	cmp	r4, r3
 800234e:	d101      	bne.n	8002354 <_puts_r+0x78>
 8002350:	68ac      	ldr	r4, [r5, #8]
 8002352:	e7d8      	b.n	8002306 <_puts_r+0x2a>
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <_puts_r+0xe0>)
 8002356:	429c      	cmp	r4, r3
 8002358:	d1d5      	bne.n	8002306 <_puts_r+0x2a>
 800235a:	68ec      	ldr	r4, [r5, #12]
 800235c:	e7d3      	b.n	8002306 <_puts_r+0x2a>
 800235e:	3601      	adds	r6, #1
 8002360:	60a3      	str	r3, [r4, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	da04      	bge.n	8002370 <_puts_r+0x94>
 8002366:	69a2      	ldr	r2, [r4, #24]
 8002368:	429a      	cmp	r2, r3
 800236a:	dc16      	bgt.n	800239a <_puts_r+0xbe>
 800236c:	290a      	cmp	r1, #10
 800236e:	d014      	beq.n	800239a <_puts_r+0xbe>
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	6022      	str	r2, [r4, #0]
 8002376:	7019      	strb	r1, [r3, #0]
 8002378:	68a3      	ldr	r3, [r4, #8]
 800237a:	7831      	ldrb	r1, [r6, #0]
 800237c:	3b01      	subs	r3, #1
 800237e:	2900      	cmp	r1, #0
 8002380:	d1ed      	bne.n	800235e <_puts_r+0x82>
 8002382:	60a3      	str	r3, [r4, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	da0f      	bge.n	80023a8 <_puts_r+0xcc>
 8002388:	0028      	movs	r0, r5
 800238a:	0022      	movs	r2, r4
 800238c:	310a      	adds	r1, #10
 800238e:	f000 f821 	bl	80023d4 <__swbuf_r>
 8002392:	250a      	movs	r5, #10
 8002394:	1c43      	adds	r3, r0, #1
 8002396:	d1cd      	bne.n	8002334 <_puts_r+0x58>
 8002398:	e7ca      	b.n	8002330 <_puts_r+0x54>
 800239a:	0022      	movs	r2, r4
 800239c:	0028      	movs	r0, r5
 800239e:	f000 f819 	bl	80023d4 <__swbuf_r>
 80023a2:	1c43      	adds	r3, r0, #1
 80023a4:	d1e8      	bne.n	8002378 <_puts_r+0x9c>
 80023a6:	e7c3      	b.n	8002330 <_puts_r+0x54>
 80023a8:	250a      	movs	r5, #10
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	6022      	str	r2, [r4, #0]
 80023b0:	701d      	strb	r5, [r3, #0]
 80023b2:	e7bf      	b.n	8002334 <_puts_r+0x58>
 80023b4:	08002d5c 	.word	0x08002d5c
 80023b8:	08002d7c 	.word	0x08002d7c
 80023bc:	08002d3c 	.word	0x08002d3c

080023c0 <puts>:
 80023c0:	b510      	push	{r4, lr}
 80023c2:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <puts+0x10>)
 80023c4:	0001      	movs	r1, r0
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	f7ff ff88 	bl	80022dc <_puts_r>
 80023cc:	bd10      	pop	{r4, pc}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	2000000c 	.word	0x2000000c

080023d4 <__swbuf_r>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	0005      	movs	r5, r0
 80023d8:	000e      	movs	r6, r1
 80023da:	0014      	movs	r4, r2
 80023dc:	2800      	cmp	r0, #0
 80023de:	d004      	beq.n	80023ea <__swbuf_r+0x16>
 80023e0:	6983      	ldr	r3, [r0, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <__swbuf_r+0x16>
 80023e6:	f000 f9f1 	bl	80027cc <__sinit>
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <__swbuf_r+0xa0>)
 80023ec:	429c      	cmp	r4, r3
 80023ee:	d12e      	bne.n	800244e <__swbuf_r+0x7a>
 80023f0:	686c      	ldr	r4, [r5, #4]
 80023f2:	69a3      	ldr	r3, [r4, #24]
 80023f4:	60a3      	str	r3, [r4, #8]
 80023f6:	89a3      	ldrh	r3, [r4, #12]
 80023f8:	071b      	lsls	r3, r3, #28
 80023fa:	d532      	bpl.n	8002462 <__swbuf_r+0x8e>
 80023fc:	6923      	ldr	r3, [r4, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d02f      	beq.n	8002462 <__swbuf_r+0x8e>
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	6922      	ldr	r2, [r4, #16]
 8002406:	b2f7      	uxtb	r7, r6
 8002408:	1a98      	subs	r0, r3, r2
 800240a:	6963      	ldr	r3, [r4, #20]
 800240c:	b2f6      	uxtb	r6, r6
 800240e:	4283      	cmp	r3, r0
 8002410:	dc05      	bgt.n	800241e <__swbuf_r+0x4a>
 8002412:	0021      	movs	r1, r4
 8002414:	0028      	movs	r0, r5
 8002416:	f000 f937 	bl	8002688 <_fflush_r>
 800241a:	2800      	cmp	r0, #0
 800241c:	d127      	bne.n	800246e <__swbuf_r+0x9a>
 800241e:	68a3      	ldr	r3, [r4, #8]
 8002420:	3001      	adds	r0, #1
 8002422:	3b01      	subs	r3, #1
 8002424:	60a3      	str	r3, [r4, #8]
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	6022      	str	r2, [r4, #0]
 800242c:	701f      	strb	r7, [r3, #0]
 800242e:	6963      	ldr	r3, [r4, #20]
 8002430:	4283      	cmp	r3, r0
 8002432:	d004      	beq.n	800243e <__swbuf_r+0x6a>
 8002434:	89a3      	ldrh	r3, [r4, #12]
 8002436:	07db      	lsls	r3, r3, #31
 8002438:	d507      	bpl.n	800244a <__swbuf_r+0x76>
 800243a:	2e0a      	cmp	r6, #10
 800243c:	d105      	bne.n	800244a <__swbuf_r+0x76>
 800243e:	0021      	movs	r1, r4
 8002440:	0028      	movs	r0, r5
 8002442:	f000 f921 	bl	8002688 <_fflush_r>
 8002446:	2800      	cmp	r0, #0
 8002448:	d111      	bne.n	800246e <__swbuf_r+0x9a>
 800244a:	0030      	movs	r0, r6
 800244c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <__swbuf_r+0xa4>)
 8002450:	429c      	cmp	r4, r3
 8002452:	d101      	bne.n	8002458 <__swbuf_r+0x84>
 8002454:	68ac      	ldr	r4, [r5, #8]
 8002456:	e7cc      	b.n	80023f2 <__swbuf_r+0x1e>
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <__swbuf_r+0xa8>)
 800245a:	429c      	cmp	r4, r3
 800245c:	d1c9      	bne.n	80023f2 <__swbuf_r+0x1e>
 800245e:	68ec      	ldr	r4, [r5, #12]
 8002460:	e7c7      	b.n	80023f2 <__swbuf_r+0x1e>
 8002462:	0021      	movs	r1, r4
 8002464:	0028      	movs	r0, r5
 8002466:	f000 f80b 	bl	8002480 <__swsetup_r>
 800246a:	2800      	cmp	r0, #0
 800246c:	d0c9      	beq.n	8002402 <__swbuf_r+0x2e>
 800246e:	2601      	movs	r6, #1
 8002470:	4276      	negs	r6, r6
 8002472:	e7ea      	b.n	800244a <__swbuf_r+0x76>
 8002474:	08002d5c 	.word	0x08002d5c
 8002478:	08002d7c 	.word	0x08002d7c
 800247c:	08002d3c 	.word	0x08002d3c

08002480 <__swsetup_r>:
 8002480:	4b37      	ldr	r3, [pc, #220]	; (8002560 <__swsetup_r+0xe0>)
 8002482:	b570      	push	{r4, r5, r6, lr}
 8002484:	681d      	ldr	r5, [r3, #0]
 8002486:	0006      	movs	r6, r0
 8002488:	000c      	movs	r4, r1
 800248a:	2d00      	cmp	r5, #0
 800248c:	d005      	beq.n	800249a <__swsetup_r+0x1a>
 800248e:	69ab      	ldr	r3, [r5, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <__swsetup_r+0x1a>
 8002494:	0028      	movs	r0, r5
 8002496:	f000 f999 	bl	80027cc <__sinit>
 800249a:	4b32      	ldr	r3, [pc, #200]	; (8002564 <__swsetup_r+0xe4>)
 800249c:	429c      	cmp	r4, r3
 800249e:	d10f      	bne.n	80024c0 <__swsetup_r+0x40>
 80024a0:	686c      	ldr	r4, [r5, #4]
 80024a2:	230c      	movs	r3, #12
 80024a4:	5ee2      	ldrsh	r2, [r4, r3]
 80024a6:	b293      	uxth	r3, r2
 80024a8:	0711      	lsls	r1, r2, #28
 80024aa:	d42d      	bmi.n	8002508 <__swsetup_r+0x88>
 80024ac:	06d9      	lsls	r1, r3, #27
 80024ae:	d411      	bmi.n	80024d4 <__swsetup_r+0x54>
 80024b0:	2309      	movs	r3, #9
 80024b2:	2001      	movs	r0, #1
 80024b4:	6033      	str	r3, [r6, #0]
 80024b6:	3337      	adds	r3, #55	; 0x37
 80024b8:	4313      	orrs	r3, r2
 80024ba:	81a3      	strh	r3, [r4, #12]
 80024bc:	4240      	negs	r0, r0
 80024be:	bd70      	pop	{r4, r5, r6, pc}
 80024c0:	4b29      	ldr	r3, [pc, #164]	; (8002568 <__swsetup_r+0xe8>)
 80024c2:	429c      	cmp	r4, r3
 80024c4:	d101      	bne.n	80024ca <__swsetup_r+0x4a>
 80024c6:	68ac      	ldr	r4, [r5, #8]
 80024c8:	e7eb      	b.n	80024a2 <__swsetup_r+0x22>
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <__swsetup_r+0xec>)
 80024cc:	429c      	cmp	r4, r3
 80024ce:	d1e8      	bne.n	80024a2 <__swsetup_r+0x22>
 80024d0:	68ec      	ldr	r4, [r5, #12]
 80024d2:	e7e6      	b.n	80024a2 <__swsetup_r+0x22>
 80024d4:	075b      	lsls	r3, r3, #29
 80024d6:	d513      	bpl.n	8002500 <__swsetup_r+0x80>
 80024d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024da:	2900      	cmp	r1, #0
 80024dc:	d008      	beq.n	80024f0 <__swsetup_r+0x70>
 80024de:	0023      	movs	r3, r4
 80024e0:	3344      	adds	r3, #68	; 0x44
 80024e2:	4299      	cmp	r1, r3
 80024e4:	d002      	beq.n	80024ec <__swsetup_r+0x6c>
 80024e6:	0030      	movs	r0, r6
 80024e8:	f000 fa80 	bl	80029ec <_free_r>
 80024ec:	2300      	movs	r3, #0
 80024ee:	6363      	str	r3, [r4, #52]	; 0x34
 80024f0:	2224      	movs	r2, #36	; 0x24
 80024f2:	89a3      	ldrh	r3, [r4, #12]
 80024f4:	4393      	bics	r3, r2
 80024f6:	81a3      	strh	r3, [r4, #12]
 80024f8:	2300      	movs	r3, #0
 80024fa:	6063      	str	r3, [r4, #4]
 80024fc:	6923      	ldr	r3, [r4, #16]
 80024fe:	6023      	str	r3, [r4, #0]
 8002500:	2308      	movs	r3, #8
 8002502:	89a2      	ldrh	r2, [r4, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	81a3      	strh	r3, [r4, #12]
 8002508:	6923      	ldr	r3, [r4, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <__swsetup_r+0xa6>
 800250e:	21a0      	movs	r1, #160	; 0xa0
 8002510:	2280      	movs	r2, #128	; 0x80
 8002512:	89a3      	ldrh	r3, [r4, #12]
 8002514:	0089      	lsls	r1, r1, #2
 8002516:	0092      	lsls	r2, r2, #2
 8002518:	400b      	ands	r3, r1
 800251a:	4293      	cmp	r3, r2
 800251c:	d003      	beq.n	8002526 <__swsetup_r+0xa6>
 800251e:	0021      	movs	r1, r4
 8002520:	0030      	movs	r0, r6
 8002522:	f000 fa1f 	bl	8002964 <__smakebuf_r>
 8002526:	220c      	movs	r2, #12
 8002528:	5ea3      	ldrsh	r3, [r4, r2]
 800252a:	2001      	movs	r0, #1
 800252c:	001a      	movs	r2, r3
 800252e:	b299      	uxth	r1, r3
 8002530:	4002      	ands	r2, r0
 8002532:	4203      	tst	r3, r0
 8002534:	d00f      	beq.n	8002556 <__swsetup_r+0xd6>
 8002536:	2200      	movs	r2, #0
 8002538:	60a2      	str	r2, [r4, #8]
 800253a:	6962      	ldr	r2, [r4, #20]
 800253c:	4252      	negs	r2, r2
 800253e:	61a2      	str	r2, [r4, #24]
 8002540:	2000      	movs	r0, #0
 8002542:	6922      	ldr	r2, [r4, #16]
 8002544:	4282      	cmp	r2, r0
 8002546:	d1ba      	bne.n	80024be <__swsetup_r+0x3e>
 8002548:	060a      	lsls	r2, r1, #24
 800254a:	d5b8      	bpl.n	80024be <__swsetup_r+0x3e>
 800254c:	2240      	movs	r2, #64	; 0x40
 800254e:	4313      	orrs	r3, r2
 8002550:	81a3      	strh	r3, [r4, #12]
 8002552:	3801      	subs	r0, #1
 8002554:	e7b3      	b.n	80024be <__swsetup_r+0x3e>
 8002556:	0788      	lsls	r0, r1, #30
 8002558:	d400      	bmi.n	800255c <__swsetup_r+0xdc>
 800255a:	6962      	ldr	r2, [r4, #20]
 800255c:	60a2      	str	r2, [r4, #8]
 800255e:	e7ef      	b.n	8002540 <__swsetup_r+0xc0>
 8002560:	2000000c 	.word	0x2000000c
 8002564:	08002d5c 	.word	0x08002d5c
 8002568:	08002d7c 	.word	0x08002d7c
 800256c:	08002d3c 	.word	0x08002d3c

08002570 <__sflush_r>:
 8002570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002572:	898b      	ldrh	r3, [r1, #12]
 8002574:	0005      	movs	r5, r0
 8002576:	000c      	movs	r4, r1
 8002578:	071a      	lsls	r2, r3, #28
 800257a:	d45f      	bmi.n	800263c <__sflush_r+0xcc>
 800257c:	684a      	ldr	r2, [r1, #4]
 800257e:	2a00      	cmp	r2, #0
 8002580:	dc04      	bgt.n	800258c <__sflush_r+0x1c>
 8002582:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002584:	2a00      	cmp	r2, #0
 8002586:	dc01      	bgt.n	800258c <__sflush_r+0x1c>
 8002588:	2000      	movs	r0, #0
 800258a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800258c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800258e:	2f00      	cmp	r7, #0
 8002590:	d0fa      	beq.n	8002588 <__sflush_r+0x18>
 8002592:	2200      	movs	r2, #0
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	682e      	ldr	r6, [r5, #0]
 8002598:	602a      	str	r2, [r5, #0]
 800259a:	001a      	movs	r2, r3
 800259c:	0149      	lsls	r1, r1, #5
 800259e:	400a      	ands	r2, r1
 80025a0:	420b      	tst	r3, r1
 80025a2:	d034      	beq.n	800260e <__sflush_r+0x9e>
 80025a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025a6:	89a3      	ldrh	r3, [r4, #12]
 80025a8:	075b      	lsls	r3, r3, #29
 80025aa:	d506      	bpl.n	80025ba <__sflush_r+0x4a>
 80025ac:	6863      	ldr	r3, [r4, #4]
 80025ae:	1ac0      	subs	r0, r0, r3
 80025b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <__sflush_r+0x4a>
 80025b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b8:	1ac0      	subs	r0, r0, r3
 80025ba:	0002      	movs	r2, r0
 80025bc:	6a21      	ldr	r1, [r4, #32]
 80025be:	2300      	movs	r3, #0
 80025c0:	0028      	movs	r0, r5
 80025c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80025c4:	47b8      	blx	r7
 80025c6:	89a1      	ldrh	r1, [r4, #12]
 80025c8:	1c43      	adds	r3, r0, #1
 80025ca:	d106      	bne.n	80025da <__sflush_r+0x6a>
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	2b1d      	cmp	r3, #29
 80025d0:	d831      	bhi.n	8002636 <__sflush_r+0xc6>
 80025d2:	4a2c      	ldr	r2, [pc, #176]	; (8002684 <__sflush_r+0x114>)
 80025d4:	40da      	lsrs	r2, r3
 80025d6:	07d3      	lsls	r3, r2, #31
 80025d8:	d52d      	bpl.n	8002636 <__sflush_r+0xc6>
 80025da:	2300      	movs	r3, #0
 80025dc:	6063      	str	r3, [r4, #4]
 80025de:	6923      	ldr	r3, [r4, #16]
 80025e0:	6023      	str	r3, [r4, #0]
 80025e2:	04cb      	lsls	r3, r1, #19
 80025e4:	d505      	bpl.n	80025f2 <__sflush_r+0x82>
 80025e6:	1c43      	adds	r3, r0, #1
 80025e8:	d102      	bne.n	80025f0 <__sflush_r+0x80>
 80025ea:	682b      	ldr	r3, [r5, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d100      	bne.n	80025f2 <__sflush_r+0x82>
 80025f0:	6560      	str	r0, [r4, #84]	; 0x54
 80025f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025f4:	602e      	str	r6, [r5, #0]
 80025f6:	2900      	cmp	r1, #0
 80025f8:	d0c6      	beq.n	8002588 <__sflush_r+0x18>
 80025fa:	0023      	movs	r3, r4
 80025fc:	3344      	adds	r3, #68	; 0x44
 80025fe:	4299      	cmp	r1, r3
 8002600:	d002      	beq.n	8002608 <__sflush_r+0x98>
 8002602:	0028      	movs	r0, r5
 8002604:	f000 f9f2 	bl	80029ec <_free_r>
 8002608:	2000      	movs	r0, #0
 800260a:	6360      	str	r0, [r4, #52]	; 0x34
 800260c:	e7bd      	b.n	800258a <__sflush_r+0x1a>
 800260e:	2301      	movs	r3, #1
 8002610:	0028      	movs	r0, r5
 8002612:	6a21      	ldr	r1, [r4, #32]
 8002614:	47b8      	blx	r7
 8002616:	1c43      	adds	r3, r0, #1
 8002618:	d1c5      	bne.n	80025a6 <__sflush_r+0x36>
 800261a:	682b      	ldr	r3, [r5, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0c2      	beq.n	80025a6 <__sflush_r+0x36>
 8002620:	2b1d      	cmp	r3, #29
 8002622:	d001      	beq.n	8002628 <__sflush_r+0xb8>
 8002624:	2b16      	cmp	r3, #22
 8002626:	d101      	bne.n	800262c <__sflush_r+0xbc>
 8002628:	602e      	str	r6, [r5, #0]
 800262a:	e7ad      	b.n	8002588 <__sflush_r+0x18>
 800262c:	2340      	movs	r3, #64	; 0x40
 800262e:	89a2      	ldrh	r2, [r4, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	81a3      	strh	r3, [r4, #12]
 8002634:	e7a9      	b.n	800258a <__sflush_r+0x1a>
 8002636:	2340      	movs	r3, #64	; 0x40
 8002638:	430b      	orrs	r3, r1
 800263a:	e7fa      	b.n	8002632 <__sflush_r+0xc2>
 800263c:	690f      	ldr	r7, [r1, #16]
 800263e:	2f00      	cmp	r7, #0
 8002640:	d0a2      	beq.n	8002588 <__sflush_r+0x18>
 8002642:	680a      	ldr	r2, [r1, #0]
 8002644:	600f      	str	r7, [r1, #0]
 8002646:	1bd2      	subs	r2, r2, r7
 8002648:	9201      	str	r2, [sp, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	079b      	lsls	r3, r3, #30
 800264e:	d100      	bne.n	8002652 <__sflush_r+0xe2>
 8002650:	694a      	ldr	r2, [r1, #20]
 8002652:	60a2      	str	r2, [r4, #8]
 8002654:	9b01      	ldr	r3, [sp, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	dc00      	bgt.n	800265c <__sflush_r+0xec>
 800265a:	e795      	b.n	8002588 <__sflush_r+0x18>
 800265c:	003a      	movs	r2, r7
 800265e:	0028      	movs	r0, r5
 8002660:	9b01      	ldr	r3, [sp, #4]
 8002662:	6a21      	ldr	r1, [r4, #32]
 8002664:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002666:	47b0      	blx	r6
 8002668:	2800      	cmp	r0, #0
 800266a:	dc06      	bgt.n	800267a <__sflush_r+0x10a>
 800266c:	2340      	movs	r3, #64	; 0x40
 800266e:	2001      	movs	r0, #1
 8002670:	89a2      	ldrh	r2, [r4, #12]
 8002672:	4240      	negs	r0, r0
 8002674:	4313      	orrs	r3, r2
 8002676:	81a3      	strh	r3, [r4, #12]
 8002678:	e787      	b.n	800258a <__sflush_r+0x1a>
 800267a:	9b01      	ldr	r3, [sp, #4]
 800267c:	183f      	adds	r7, r7, r0
 800267e:	1a1b      	subs	r3, r3, r0
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	e7e7      	b.n	8002654 <__sflush_r+0xe4>
 8002684:	20400001 	.word	0x20400001

08002688 <_fflush_r>:
 8002688:	690b      	ldr	r3, [r1, #16]
 800268a:	b570      	push	{r4, r5, r6, lr}
 800268c:	0005      	movs	r5, r0
 800268e:	000c      	movs	r4, r1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <_fflush_r+0x12>
 8002694:	2500      	movs	r5, #0
 8002696:	0028      	movs	r0, r5
 8002698:	bd70      	pop	{r4, r5, r6, pc}
 800269a:	2800      	cmp	r0, #0
 800269c:	d004      	beq.n	80026a8 <_fflush_r+0x20>
 800269e:	6983      	ldr	r3, [r0, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <_fflush_r+0x20>
 80026a4:	f000 f892 	bl	80027cc <__sinit>
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <_fflush_r+0x74>)
 80026aa:	429c      	cmp	r4, r3
 80026ac:	d11b      	bne.n	80026e6 <_fflush_r+0x5e>
 80026ae:	686c      	ldr	r4, [r5, #4]
 80026b0:	220c      	movs	r2, #12
 80026b2:	5ea3      	ldrsh	r3, [r4, r2]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0ed      	beq.n	8002694 <_fflush_r+0xc>
 80026b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80026ba:	07d2      	lsls	r2, r2, #31
 80026bc:	d404      	bmi.n	80026c8 <_fflush_r+0x40>
 80026be:	059b      	lsls	r3, r3, #22
 80026c0:	d402      	bmi.n	80026c8 <_fflush_r+0x40>
 80026c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026c4:	f000 f923 	bl	800290e <__retarget_lock_acquire_recursive>
 80026c8:	0028      	movs	r0, r5
 80026ca:	0021      	movs	r1, r4
 80026cc:	f7ff ff50 	bl	8002570 <__sflush_r>
 80026d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026d2:	0005      	movs	r5, r0
 80026d4:	07db      	lsls	r3, r3, #31
 80026d6:	d4de      	bmi.n	8002696 <_fflush_r+0xe>
 80026d8:	89a3      	ldrh	r3, [r4, #12]
 80026da:	059b      	lsls	r3, r3, #22
 80026dc:	d4db      	bmi.n	8002696 <_fflush_r+0xe>
 80026de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026e0:	f000 f916 	bl	8002910 <__retarget_lock_release_recursive>
 80026e4:	e7d7      	b.n	8002696 <_fflush_r+0xe>
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <_fflush_r+0x78>)
 80026e8:	429c      	cmp	r4, r3
 80026ea:	d101      	bne.n	80026f0 <_fflush_r+0x68>
 80026ec:	68ac      	ldr	r4, [r5, #8]
 80026ee:	e7df      	b.n	80026b0 <_fflush_r+0x28>
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <_fflush_r+0x7c>)
 80026f2:	429c      	cmp	r4, r3
 80026f4:	d1dc      	bne.n	80026b0 <_fflush_r+0x28>
 80026f6:	68ec      	ldr	r4, [r5, #12]
 80026f8:	e7da      	b.n	80026b0 <_fflush_r+0x28>
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	08002d5c 	.word	0x08002d5c
 8002700:	08002d7c 	.word	0x08002d7c
 8002704:	08002d3c 	.word	0x08002d3c

08002708 <std>:
 8002708:	2300      	movs	r3, #0
 800270a:	b510      	push	{r4, lr}
 800270c:	0004      	movs	r4, r0
 800270e:	6003      	str	r3, [r0, #0]
 8002710:	6043      	str	r3, [r0, #4]
 8002712:	6083      	str	r3, [r0, #8]
 8002714:	8181      	strh	r1, [r0, #12]
 8002716:	6643      	str	r3, [r0, #100]	; 0x64
 8002718:	0019      	movs	r1, r3
 800271a:	81c2      	strh	r2, [r0, #14]
 800271c:	6103      	str	r3, [r0, #16]
 800271e:	6143      	str	r3, [r0, #20]
 8002720:	6183      	str	r3, [r0, #24]
 8002722:	2208      	movs	r2, #8
 8002724:	305c      	adds	r0, #92	; 0x5c
 8002726:	f7ff fdd1 	bl	80022cc <memset>
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <std+0x38>)
 800272c:	6263      	str	r3, [r4, #36]	; 0x24
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <std+0x3c>)
 8002730:	6224      	str	r4, [r4, #32]
 8002732:	62a3      	str	r3, [r4, #40]	; 0x28
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <std+0x40>)
 8002736:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <std+0x44>)
 800273a:	6323      	str	r3, [r4, #48]	; 0x30
 800273c:	bd10      	pop	{r4, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	08002b61 	.word	0x08002b61
 8002744:	08002b89 	.word	0x08002b89
 8002748:	08002bc1 	.word	0x08002bc1
 800274c:	08002bed 	.word	0x08002bed

08002750 <_cleanup_r>:
 8002750:	b510      	push	{r4, lr}
 8002752:	4902      	ldr	r1, [pc, #8]	; (800275c <_cleanup_r+0xc>)
 8002754:	f000 f8ba 	bl	80028cc <_fwalk_reent>
 8002758:	bd10      	pop	{r4, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	08002689 	.word	0x08002689

08002760 <__sfmoreglue>:
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	2568      	movs	r5, #104	; 0x68
 8002764:	1e4a      	subs	r2, r1, #1
 8002766:	4355      	muls	r5, r2
 8002768:	000e      	movs	r6, r1
 800276a:	0029      	movs	r1, r5
 800276c:	3174      	adds	r1, #116	; 0x74
 800276e:	f000 f987 	bl	8002a80 <_malloc_r>
 8002772:	1e04      	subs	r4, r0, #0
 8002774:	d008      	beq.n	8002788 <__sfmoreglue+0x28>
 8002776:	2100      	movs	r1, #0
 8002778:	002a      	movs	r2, r5
 800277a:	6001      	str	r1, [r0, #0]
 800277c:	6046      	str	r6, [r0, #4]
 800277e:	300c      	adds	r0, #12
 8002780:	60a0      	str	r0, [r4, #8]
 8002782:	3268      	adds	r2, #104	; 0x68
 8002784:	f7ff fda2 	bl	80022cc <memset>
 8002788:	0020      	movs	r0, r4
 800278a:	bd70      	pop	{r4, r5, r6, pc}

0800278c <__sfp_lock_acquire>:
 800278c:	b510      	push	{r4, lr}
 800278e:	4802      	ldr	r0, [pc, #8]	; (8002798 <__sfp_lock_acquire+0xc>)
 8002790:	f000 f8bd 	bl	800290e <__retarget_lock_acquire_recursive>
 8002794:	bd10      	pop	{r4, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	200000e8 	.word	0x200000e8

0800279c <__sfp_lock_release>:
 800279c:	b510      	push	{r4, lr}
 800279e:	4802      	ldr	r0, [pc, #8]	; (80027a8 <__sfp_lock_release+0xc>)
 80027a0:	f000 f8b6 	bl	8002910 <__retarget_lock_release_recursive>
 80027a4:	bd10      	pop	{r4, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	200000e8 	.word	0x200000e8

080027ac <__sinit_lock_acquire>:
 80027ac:	b510      	push	{r4, lr}
 80027ae:	4802      	ldr	r0, [pc, #8]	; (80027b8 <__sinit_lock_acquire+0xc>)
 80027b0:	f000 f8ad 	bl	800290e <__retarget_lock_acquire_recursive>
 80027b4:	bd10      	pop	{r4, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	200000e3 	.word	0x200000e3

080027bc <__sinit_lock_release>:
 80027bc:	b510      	push	{r4, lr}
 80027be:	4802      	ldr	r0, [pc, #8]	; (80027c8 <__sinit_lock_release+0xc>)
 80027c0:	f000 f8a6 	bl	8002910 <__retarget_lock_release_recursive>
 80027c4:	bd10      	pop	{r4, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	200000e3 	.word	0x200000e3

080027cc <__sinit>:
 80027cc:	b513      	push	{r0, r1, r4, lr}
 80027ce:	0004      	movs	r4, r0
 80027d0:	f7ff ffec 	bl	80027ac <__sinit_lock_acquire>
 80027d4:	69a3      	ldr	r3, [r4, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <__sinit+0x14>
 80027da:	f7ff ffef 	bl	80027bc <__sinit_lock_release>
 80027de:	bd13      	pop	{r0, r1, r4, pc}
 80027e0:	64a3      	str	r3, [r4, #72]	; 0x48
 80027e2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80027e4:	6523      	str	r3, [r4, #80]	; 0x50
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <__sinit+0x68>)
 80027e8:	4a13      	ldr	r2, [pc, #76]	; (8002838 <__sinit+0x6c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	42a3      	cmp	r3, r4
 80027f2:	d101      	bne.n	80027f8 <__sinit+0x2c>
 80027f4:	2301      	movs	r3, #1
 80027f6:	61a3      	str	r3, [r4, #24]
 80027f8:	0020      	movs	r0, r4
 80027fa:	f000 f81f 	bl	800283c <__sfp>
 80027fe:	6060      	str	r0, [r4, #4]
 8002800:	0020      	movs	r0, r4
 8002802:	f000 f81b 	bl	800283c <__sfp>
 8002806:	60a0      	str	r0, [r4, #8]
 8002808:	0020      	movs	r0, r4
 800280a:	f000 f817 	bl	800283c <__sfp>
 800280e:	2200      	movs	r2, #0
 8002810:	2104      	movs	r1, #4
 8002812:	60e0      	str	r0, [r4, #12]
 8002814:	6860      	ldr	r0, [r4, #4]
 8002816:	f7ff ff77 	bl	8002708 <std>
 800281a:	2201      	movs	r2, #1
 800281c:	2109      	movs	r1, #9
 800281e:	68a0      	ldr	r0, [r4, #8]
 8002820:	f7ff ff72 	bl	8002708 <std>
 8002824:	2202      	movs	r2, #2
 8002826:	2112      	movs	r1, #18
 8002828:	68e0      	ldr	r0, [r4, #12]
 800282a:	f7ff ff6d 	bl	8002708 <std>
 800282e:	2301      	movs	r3, #1
 8002830:	61a3      	str	r3, [r4, #24]
 8002832:	e7d2      	b.n	80027da <__sinit+0xe>
 8002834:	08002d38 	.word	0x08002d38
 8002838:	08002751 	.word	0x08002751

0800283c <__sfp>:
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283e:	0007      	movs	r7, r0
 8002840:	f7ff ffa4 	bl	800278c <__sfp_lock_acquire>
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <__sfp+0x88>)
 8002846:	681e      	ldr	r6, [r3, #0]
 8002848:	69b3      	ldr	r3, [r6, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <__sfp+0x18>
 800284e:	0030      	movs	r0, r6
 8002850:	f7ff ffbc 	bl	80027cc <__sinit>
 8002854:	3648      	adds	r6, #72	; 0x48
 8002856:	68b4      	ldr	r4, [r6, #8]
 8002858:	6873      	ldr	r3, [r6, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	d504      	bpl.n	8002868 <__sfp+0x2c>
 800285e:	6833      	ldr	r3, [r6, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d022      	beq.n	80028aa <__sfp+0x6e>
 8002864:	6836      	ldr	r6, [r6, #0]
 8002866:	e7f6      	b.n	8002856 <__sfp+0x1a>
 8002868:	220c      	movs	r2, #12
 800286a:	5ea5      	ldrsh	r5, [r4, r2]
 800286c:	2d00      	cmp	r5, #0
 800286e:	d11a      	bne.n	80028a6 <__sfp+0x6a>
 8002870:	0020      	movs	r0, r4
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <__sfp+0x8c>)
 8002874:	3058      	adds	r0, #88	; 0x58
 8002876:	60e3      	str	r3, [r4, #12]
 8002878:	6665      	str	r5, [r4, #100]	; 0x64
 800287a:	f000 f847 	bl	800290c <__retarget_lock_init_recursive>
 800287e:	f7ff ff8d 	bl	800279c <__sfp_lock_release>
 8002882:	0020      	movs	r0, r4
 8002884:	2208      	movs	r2, #8
 8002886:	0029      	movs	r1, r5
 8002888:	6025      	str	r5, [r4, #0]
 800288a:	60a5      	str	r5, [r4, #8]
 800288c:	6065      	str	r5, [r4, #4]
 800288e:	6125      	str	r5, [r4, #16]
 8002890:	6165      	str	r5, [r4, #20]
 8002892:	61a5      	str	r5, [r4, #24]
 8002894:	305c      	adds	r0, #92	; 0x5c
 8002896:	f7ff fd19 	bl	80022cc <memset>
 800289a:	6365      	str	r5, [r4, #52]	; 0x34
 800289c:	63a5      	str	r5, [r4, #56]	; 0x38
 800289e:	64a5      	str	r5, [r4, #72]	; 0x48
 80028a0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80028a2:	0020      	movs	r0, r4
 80028a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028a6:	3468      	adds	r4, #104	; 0x68
 80028a8:	e7d7      	b.n	800285a <__sfp+0x1e>
 80028aa:	2104      	movs	r1, #4
 80028ac:	0038      	movs	r0, r7
 80028ae:	f7ff ff57 	bl	8002760 <__sfmoreglue>
 80028b2:	1e04      	subs	r4, r0, #0
 80028b4:	6030      	str	r0, [r6, #0]
 80028b6:	d1d5      	bne.n	8002864 <__sfp+0x28>
 80028b8:	f7ff ff70 	bl	800279c <__sfp_lock_release>
 80028bc:	230c      	movs	r3, #12
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	e7ef      	b.n	80028a2 <__sfp+0x66>
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	08002d38 	.word	0x08002d38
 80028c8:	ffff0001 	.word	0xffff0001

080028cc <_fwalk_reent>:
 80028cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028ce:	0004      	movs	r4, r0
 80028d0:	0006      	movs	r6, r0
 80028d2:	2700      	movs	r7, #0
 80028d4:	9101      	str	r1, [sp, #4]
 80028d6:	3448      	adds	r4, #72	; 0x48
 80028d8:	6863      	ldr	r3, [r4, #4]
 80028da:	68a5      	ldr	r5, [r4, #8]
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	9b00      	ldr	r3, [sp, #0]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	d504      	bpl.n	80028f0 <_fwalk_reent+0x24>
 80028e6:	6824      	ldr	r4, [r4, #0]
 80028e8:	2c00      	cmp	r4, #0
 80028ea:	d1f5      	bne.n	80028d8 <_fwalk_reent+0xc>
 80028ec:	0038      	movs	r0, r7
 80028ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80028f0:	89ab      	ldrh	r3, [r5, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d908      	bls.n	8002908 <_fwalk_reent+0x3c>
 80028f6:	220e      	movs	r2, #14
 80028f8:	5eab      	ldrsh	r3, [r5, r2]
 80028fa:	3301      	adds	r3, #1
 80028fc:	d004      	beq.n	8002908 <_fwalk_reent+0x3c>
 80028fe:	0029      	movs	r1, r5
 8002900:	0030      	movs	r0, r6
 8002902:	9b01      	ldr	r3, [sp, #4]
 8002904:	4798      	blx	r3
 8002906:	4307      	orrs	r7, r0
 8002908:	3568      	adds	r5, #104	; 0x68
 800290a:	e7e8      	b.n	80028de <_fwalk_reent+0x12>

0800290c <__retarget_lock_init_recursive>:
 800290c:	4770      	bx	lr

0800290e <__retarget_lock_acquire_recursive>:
 800290e:	4770      	bx	lr

08002910 <__retarget_lock_release_recursive>:
 8002910:	4770      	bx	lr
	...

08002914 <__swhatbuf_r>:
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	000e      	movs	r6, r1
 8002918:	001d      	movs	r5, r3
 800291a:	230e      	movs	r3, #14
 800291c:	5ec9      	ldrsh	r1, [r1, r3]
 800291e:	0014      	movs	r4, r2
 8002920:	b096      	sub	sp, #88	; 0x58
 8002922:	2900      	cmp	r1, #0
 8002924:	da07      	bge.n	8002936 <__swhatbuf_r+0x22>
 8002926:	2300      	movs	r3, #0
 8002928:	602b      	str	r3, [r5, #0]
 800292a:	89b3      	ldrh	r3, [r6, #12]
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	d411      	bmi.n	8002954 <__swhatbuf_r+0x40>
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	e00f      	b.n	8002956 <__swhatbuf_r+0x42>
 8002936:	466a      	mov	r2, sp
 8002938:	f000 f984 	bl	8002c44 <_fstat_r>
 800293c:	2800      	cmp	r0, #0
 800293e:	dbf2      	blt.n	8002926 <__swhatbuf_r+0x12>
 8002940:	23f0      	movs	r3, #240	; 0xf0
 8002942:	9901      	ldr	r1, [sp, #4]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	4019      	ands	r1, r3
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <__swhatbuf_r+0x4c>)
 800294a:	18c9      	adds	r1, r1, r3
 800294c:	424b      	negs	r3, r1
 800294e:	4159      	adcs	r1, r3
 8002950:	6029      	str	r1, [r5, #0]
 8002952:	e7ed      	b.n	8002930 <__swhatbuf_r+0x1c>
 8002954:	2340      	movs	r3, #64	; 0x40
 8002956:	2000      	movs	r0, #0
 8002958:	6023      	str	r3, [r4, #0]
 800295a:	b016      	add	sp, #88	; 0x58
 800295c:	bd70      	pop	{r4, r5, r6, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	ffffe000 	.word	0xffffe000

08002964 <__smakebuf_r>:
 8002964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002966:	2602      	movs	r6, #2
 8002968:	898b      	ldrh	r3, [r1, #12]
 800296a:	0005      	movs	r5, r0
 800296c:	000c      	movs	r4, r1
 800296e:	4233      	tst	r3, r6
 8002970:	d006      	beq.n	8002980 <__smakebuf_r+0x1c>
 8002972:	0023      	movs	r3, r4
 8002974:	3347      	adds	r3, #71	; 0x47
 8002976:	6023      	str	r3, [r4, #0]
 8002978:	6123      	str	r3, [r4, #16]
 800297a:	2301      	movs	r3, #1
 800297c:	6163      	str	r3, [r4, #20]
 800297e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002980:	466a      	mov	r2, sp
 8002982:	ab01      	add	r3, sp, #4
 8002984:	f7ff ffc6 	bl	8002914 <__swhatbuf_r>
 8002988:	9900      	ldr	r1, [sp, #0]
 800298a:	0007      	movs	r7, r0
 800298c:	0028      	movs	r0, r5
 800298e:	f000 f877 	bl	8002a80 <_malloc_r>
 8002992:	2800      	cmp	r0, #0
 8002994:	d108      	bne.n	80029a8 <__smakebuf_r+0x44>
 8002996:	220c      	movs	r2, #12
 8002998:	5ea3      	ldrsh	r3, [r4, r2]
 800299a:	059a      	lsls	r2, r3, #22
 800299c:	d4ef      	bmi.n	800297e <__smakebuf_r+0x1a>
 800299e:	2203      	movs	r2, #3
 80029a0:	4393      	bics	r3, r2
 80029a2:	431e      	orrs	r6, r3
 80029a4:	81a6      	strh	r6, [r4, #12]
 80029a6:	e7e4      	b.n	8002972 <__smakebuf_r+0xe>
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <__smakebuf_r+0x84>)
 80029aa:	62ab      	str	r3, [r5, #40]	; 0x28
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	89a2      	ldrh	r2, [r4, #12]
 80029b0:	6020      	str	r0, [r4, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	81a3      	strh	r3, [r4, #12]
 80029b6:	9b00      	ldr	r3, [sp, #0]
 80029b8:	6120      	str	r0, [r4, #16]
 80029ba:	6163      	str	r3, [r4, #20]
 80029bc:	9b01      	ldr	r3, [sp, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <__smakebuf_r+0x7a>
 80029c2:	0028      	movs	r0, r5
 80029c4:	230e      	movs	r3, #14
 80029c6:	5ee1      	ldrsh	r1, [r4, r3]
 80029c8:	f000 f94e 	bl	8002c68 <_isatty_r>
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d006      	beq.n	80029de <__smakebuf_r+0x7a>
 80029d0:	2203      	movs	r2, #3
 80029d2:	89a3      	ldrh	r3, [r4, #12]
 80029d4:	4393      	bics	r3, r2
 80029d6:	001a      	movs	r2, r3
 80029d8:	2301      	movs	r3, #1
 80029da:	4313      	orrs	r3, r2
 80029dc:	81a3      	strh	r3, [r4, #12]
 80029de:	89a0      	ldrh	r0, [r4, #12]
 80029e0:	4307      	orrs	r7, r0
 80029e2:	81a7      	strh	r7, [r4, #12]
 80029e4:	e7cb      	b.n	800297e <__smakebuf_r+0x1a>
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	08002751 	.word	0x08002751

080029ec <_free_r>:
 80029ec:	b570      	push	{r4, r5, r6, lr}
 80029ee:	0005      	movs	r5, r0
 80029f0:	2900      	cmp	r1, #0
 80029f2:	d010      	beq.n	8002a16 <_free_r+0x2a>
 80029f4:	1f0c      	subs	r4, r1, #4
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da00      	bge.n	80029fe <_free_r+0x12>
 80029fc:	18e4      	adds	r4, r4, r3
 80029fe:	0028      	movs	r0, r5
 8002a00:	f000 f958 	bl	8002cb4 <__malloc_lock>
 8002a04:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <_free_r+0x90>)
 8002a06:	6813      	ldr	r3, [r2, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <_free_r+0x2c>
 8002a0c:	6063      	str	r3, [r4, #4]
 8002a0e:	6014      	str	r4, [r2, #0]
 8002a10:	0028      	movs	r0, r5
 8002a12:	f000 f957 	bl	8002cc4 <__malloc_unlock>
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	42a3      	cmp	r3, r4
 8002a1a:	d908      	bls.n	8002a2e <_free_r+0x42>
 8002a1c:	6821      	ldr	r1, [r4, #0]
 8002a1e:	1860      	adds	r0, r4, r1
 8002a20:	4283      	cmp	r3, r0
 8002a22:	d1f3      	bne.n	8002a0c <_free_r+0x20>
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	1841      	adds	r1, r0, r1
 8002a2a:	6021      	str	r1, [r4, #0]
 8002a2c:	e7ee      	b.n	8002a0c <_free_r+0x20>
 8002a2e:	001a      	movs	r2, r3
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <_free_r+0x4e>
 8002a36:	42a3      	cmp	r3, r4
 8002a38:	d9f9      	bls.n	8002a2e <_free_r+0x42>
 8002a3a:	6811      	ldr	r1, [r2, #0]
 8002a3c:	1850      	adds	r0, r2, r1
 8002a3e:	42a0      	cmp	r0, r4
 8002a40:	d10b      	bne.n	8002a5a <_free_r+0x6e>
 8002a42:	6820      	ldr	r0, [r4, #0]
 8002a44:	1809      	adds	r1, r1, r0
 8002a46:	1850      	adds	r0, r2, r1
 8002a48:	6011      	str	r1, [r2, #0]
 8002a4a:	4283      	cmp	r3, r0
 8002a4c:	d1e0      	bne.n	8002a10 <_free_r+0x24>
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	1841      	adds	r1, r0, r1
 8002a54:	6011      	str	r1, [r2, #0]
 8002a56:	6053      	str	r3, [r2, #4]
 8002a58:	e7da      	b.n	8002a10 <_free_r+0x24>
 8002a5a:	42a0      	cmp	r0, r4
 8002a5c:	d902      	bls.n	8002a64 <_free_r+0x78>
 8002a5e:	230c      	movs	r3, #12
 8002a60:	602b      	str	r3, [r5, #0]
 8002a62:	e7d5      	b.n	8002a10 <_free_r+0x24>
 8002a64:	6821      	ldr	r1, [r4, #0]
 8002a66:	1860      	adds	r0, r4, r1
 8002a68:	4283      	cmp	r3, r0
 8002a6a:	d103      	bne.n	8002a74 <_free_r+0x88>
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	1841      	adds	r1, r0, r1
 8002a72:	6021      	str	r1, [r4, #0]
 8002a74:	6063      	str	r3, [r4, #4]
 8002a76:	6054      	str	r4, [r2, #4]
 8002a78:	e7ca      	b.n	8002a10 <_free_r+0x24>
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	20000094 	.word	0x20000094

08002a80 <_malloc_r>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	2303      	movs	r3, #3
 8002a84:	1ccd      	adds	r5, r1, #3
 8002a86:	439d      	bics	r5, r3
 8002a88:	3508      	adds	r5, #8
 8002a8a:	0006      	movs	r6, r0
 8002a8c:	2d0c      	cmp	r5, #12
 8002a8e:	d21f      	bcs.n	8002ad0 <_malloc_r+0x50>
 8002a90:	250c      	movs	r5, #12
 8002a92:	42a9      	cmp	r1, r5
 8002a94:	d81e      	bhi.n	8002ad4 <_malloc_r+0x54>
 8002a96:	0030      	movs	r0, r6
 8002a98:	f000 f90c 	bl	8002cb4 <__malloc_lock>
 8002a9c:	4925      	ldr	r1, [pc, #148]	; (8002b34 <_malloc_r+0xb4>)
 8002a9e:	680a      	ldr	r2, [r1, #0]
 8002aa0:	0014      	movs	r4, r2
 8002aa2:	2c00      	cmp	r4, #0
 8002aa4:	d11a      	bne.n	8002adc <_malloc_r+0x5c>
 8002aa6:	4f24      	ldr	r7, [pc, #144]	; (8002b38 <_malloc_r+0xb8>)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <_malloc_r+0x38>
 8002aae:	0021      	movs	r1, r4
 8002ab0:	0030      	movs	r0, r6
 8002ab2:	f000 f843 	bl	8002b3c <_sbrk_r>
 8002ab6:	6038      	str	r0, [r7, #0]
 8002ab8:	0029      	movs	r1, r5
 8002aba:	0030      	movs	r0, r6
 8002abc:	f000 f83e 	bl	8002b3c <_sbrk_r>
 8002ac0:	1c43      	adds	r3, r0, #1
 8002ac2:	d12b      	bne.n	8002b1c <_malloc_r+0x9c>
 8002ac4:	230c      	movs	r3, #12
 8002ac6:	0030      	movs	r0, r6
 8002ac8:	6033      	str	r3, [r6, #0]
 8002aca:	f000 f8fb 	bl	8002cc4 <__malloc_unlock>
 8002ace:	e003      	b.n	8002ad8 <_malloc_r+0x58>
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	dade      	bge.n	8002a92 <_malloc_r+0x12>
 8002ad4:	230c      	movs	r3, #12
 8002ad6:	6033      	str	r3, [r6, #0]
 8002ad8:	2000      	movs	r0, #0
 8002ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	1b5b      	subs	r3, r3, r5
 8002ae0:	d419      	bmi.n	8002b16 <_malloc_r+0x96>
 8002ae2:	2b0b      	cmp	r3, #11
 8002ae4:	d903      	bls.n	8002aee <_malloc_r+0x6e>
 8002ae6:	6023      	str	r3, [r4, #0]
 8002ae8:	18e4      	adds	r4, r4, r3
 8002aea:	6025      	str	r5, [r4, #0]
 8002aec:	e003      	b.n	8002af6 <_malloc_r+0x76>
 8002aee:	6863      	ldr	r3, [r4, #4]
 8002af0:	42a2      	cmp	r2, r4
 8002af2:	d10e      	bne.n	8002b12 <_malloc_r+0x92>
 8002af4:	600b      	str	r3, [r1, #0]
 8002af6:	0030      	movs	r0, r6
 8002af8:	f000 f8e4 	bl	8002cc4 <__malloc_unlock>
 8002afc:	0020      	movs	r0, r4
 8002afe:	2207      	movs	r2, #7
 8002b00:	300b      	adds	r0, #11
 8002b02:	1d23      	adds	r3, r4, #4
 8002b04:	4390      	bics	r0, r2
 8002b06:	1ac2      	subs	r2, r0, r3
 8002b08:	4298      	cmp	r0, r3
 8002b0a:	d0e6      	beq.n	8002ada <_malloc_r+0x5a>
 8002b0c:	1a1b      	subs	r3, r3, r0
 8002b0e:	50a3      	str	r3, [r4, r2]
 8002b10:	e7e3      	b.n	8002ada <_malloc_r+0x5a>
 8002b12:	6053      	str	r3, [r2, #4]
 8002b14:	e7ef      	b.n	8002af6 <_malloc_r+0x76>
 8002b16:	0022      	movs	r2, r4
 8002b18:	6864      	ldr	r4, [r4, #4]
 8002b1a:	e7c2      	b.n	8002aa2 <_malloc_r+0x22>
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	1cc4      	adds	r4, r0, #3
 8002b20:	439c      	bics	r4, r3
 8002b22:	42a0      	cmp	r0, r4
 8002b24:	d0e1      	beq.n	8002aea <_malloc_r+0x6a>
 8002b26:	1a21      	subs	r1, r4, r0
 8002b28:	0030      	movs	r0, r6
 8002b2a:	f000 f807 	bl	8002b3c <_sbrk_r>
 8002b2e:	1c43      	adds	r3, r0, #1
 8002b30:	d1db      	bne.n	8002aea <_malloc_r+0x6a>
 8002b32:	e7c7      	b.n	8002ac4 <_malloc_r+0x44>
 8002b34:	20000094 	.word	0x20000094
 8002b38:	20000098 	.word	0x20000098

08002b3c <_sbrk_r>:
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	b570      	push	{r4, r5, r6, lr}
 8002b40:	4d06      	ldr	r5, [pc, #24]	; (8002b5c <_sbrk_r+0x20>)
 8002b42:	0004      	movs	r4, r0
 8002b44:	0008      	movs	r0, r1
 8002b46:	602b      	str	r3, [r5, #0]
 8002b48:	f7fd fee8 	bl	800091c <_sbrk>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d103      	bne.n	8002b58 <_sbrk_r+0x1c>
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d000      	beq.n	8002b58 <_sbrk_r+0x1c>
 8002b56:	6023      	str	r3, [r4, #0]
 8002b58:	bd70      	pop	{r4, r5, r6, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	200000ec 	.word	0x200000ec

08002b60 <__sread>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	000c      	movs	r4, r1
 8002b64:	250e      	movs	r5, #14
 8002b66:	5f49      	ldrsh	r1, [r1, r5]
 8002b68:	f000 f8b4 	bl	8002cd4 <_read_r>
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	db03      	blt.n	8002b78 <__sread+0x18>
 8002b70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b72:	181b      	adds	r3, r3, r0
 8002b74:	6563      	str	r3, [r4, #84]	; 0x54
 8002b76:	bd70      	pop	{r4, r5, r6, pc}
 8002b78:	89a3      	ldrh	r3, [r4, #12]
 8002b7a:	4a02      	ldr	r2, [pc, #8]	; (8002b84 <__sread+0x24>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	81a3      	strh	r3, [r4, #12]
 8002b80:	e7f9      	b.n	8002b76 <__sread+0x16>
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	ffffefff 	.word	0xffffefff

08002b88 <__swrite>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	001f      	movs	r7, r3
 8002b8c:	898b      	ldrh	r3, [r1, #12]
 8002b8e:	0005      	movs	r5, r0
 8002b90:	000c      	movs	r4, r1
 8002b92:	0016      	movs	r6, r2
 8002b94:	05db      	lsls	r3, r3, #23
 8002b96:	d505      	bpl.n	8002ba4 <__swrite+0x1c>
 8002b98:	230e      	movs	r3, #14
 8002b9a:	5ec9      	ldrsh	r1, [r1, r3]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	f000 f874 	bl	8002c8c <_lseek_r>
 8002ba4:	89a3      	ldrh	r3, [r4, #12]
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <__swrite+0x34>)
 8002ba8:	0028      	movs	r0, r5
 8002baa:	4013      	ands	r3, r2
 8002bac:	81a3      	strh	r3, [r4, #12]
 8002bae:	0032      	movs	r2, r6
 8002bb0:	230e      	movs	r3, #14
 8002bb2:	5ee1      	ldrsh	r1, [r4, r3]
 8002bb4:	003b      	movs	r3, r7
 8002bb6:	f000 f81f 	bl	8002bf8 <_write_r>
 8002bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bbc:	ffffefff 	.word	0xffffefff

08002bc0 <__sseek>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	000c      	movs	r4, r1
 8002bc4:	250e      	movs	r5, #14
 8002bc6:	5f49      	ldrsh	r1, [r1, r5]
 8002bc8:	f000 f860 	bl	8002c8c <_lseek_r>
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	1c42      	adds	r2, r0, #1
 8002bd0:	d103      	bne.n	8002bda <__sseek+0x1a>
 8002bd2:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <__sseek+0x28>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	81a3      	strh	r3, [r4, #12]
 8002bd8:	bd70      	pop	{r4, r5, r6, pc}
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	0152      	lsls	r2, r2, #5
 8002bde:	4313      	orrs	r3, r2
 8002be0:	81a3      	strh	r3, [r4, #12]
 8002be2:	6560      	str	r0, [r4, #84]	; 0x54
 8002be4:	e7f8      	b.n	8002bd8 <__sseek+0x18>
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	ffffefff 	.word	0xffffefff

08002bec <__sclose>:
 8002bec:	b510      	push	{r4, lr}
 8002bee:	230e      	movs	r3, #14
 8002bf0:	5ec9      	ldrsh	r1, [r1, r3]
 8002bf2:	f000 f815 	bl	8002c20 <_close_r>
 8002bf6:	bd10      	pop	{r4, pc}

08002bf8 <_write_r>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	0004      	movs	r4, r0
 8002bfc:	0008      	movs	r0, r1
 8002bfe:	0011      	movs	r1, r2
 8002c00:	001a      	movs	r2, r3
 8002c02:	2300      	movs	r3, #0
 8002c04:	4d05      	ldr	r5, [pc, #20]	; (8002c1c <_write_r+0x24>)
 8002c06:	602b      	str	r3, [r5, #0]
 8002c08:	f7fd fe3f 	bl	800088a <_write>
 8002c0c:	1c43      	adds	r3, r0, #1
 8002c0e:	d103      	bne.n	8002c18 <_write_r+0x20>
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d000      	beq.n	8002c18 <_write_r+0x20>
 8002c16:	6023      	str	r3, [r4, #0]
 8002c18:	bd70      	pop	{r4, r5, r6, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	200000ec 	.word	0x200000ec

08002c20 <_close_r>:
 8002c20:	2300      	movs	r3, #0
 8002c22:	b570      	push	{r4, r5, r6, lr}
 8002c24:	4d06      	ldr	r5, [pc, #24]	; (8002c40 <_close_r+0x20>)
 8002c26:	0004      	movs	r4, r0
 8002c28:	0008      	movs	r0, r1
 8002c2a:	602b      	str	r3, [r5, #0]
 8002c2c:	f7fd fe49 	bl	80008c2 <_close>
 8002c30:	1c43      	adds	r3, r0, #1
 8002c32:	d103      	bne.n	8002c3c <_close_r+0x1c>
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d000      	beq.n	8002c3c <_close_r+0x1c>
 8002c3a:	6023      	str	r3, [r4, #0]
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	200000ec 	.word	0x200000ec

08002c44 <_fstat_r>:
 8002c44:	2300      	movs	r3, #0
 8002c46:	b570      	push	{r4, r5, r6, lr}
 8002c48:	4d06      	ldr	r5, [pc, #24]	; (8002c64 <_fstat_r+0x20>)
 8002c4a:	0004      	movs	r4, r0
 8002c4c:	0008      	movs	r0, r1
 8002c4e:	0011      	movs	r1, r2
 8002c50:	602b      	str	r3, [r5, #0]
 8002c52:	f7fd fe40 	bl	80008d6 <_fstat>
 8002c56:	1c43      	adds	r3, r0, #1
 8002c58:	d103      	bne.n	8002c62 <_fstat_r+0x1e>
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d000      	beq.n	8002c62 <_fstat_r+0x1e>
 8002c60:	6023      	str	r3, [r4, #0]
 8002c62:	bd70      	pop	{r4, r5, r6, pc}
 8002c64:	200000ec 	.word	0x200000ec

08002c68 <_isatty_r>:
 8002c68:	2300      	movs	r3, #0
 8002c6a:	b570      	push	{r4, r5, r6, lr}
 8002c6c:	4d06      	ldr	r5, [pc, #24]	; (8002c88 <_isatty_r+0x20>)
 8002c6e:	0004      	movs	r4, r0
 8002c70:	0008      	movs	r0, r1
 8002c72:	602b      	str	r3, [r5, #0]
 8002c74:	f7fd fe3d 	bl	80008f2 <_isatty>
 8002c78:	1c43      	adds	r3, r0, #1
 8002c7a:	d103      	bne.n	8002c84 <_isatty_r+0x1c>
 8002c7c:	682b      	ldr	r3, [r5, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d000      	beq.n	8002c84 <_isatty_r+0x1c>
 8002c82:	6023      	str	r3, [r4, #0]
 8002c84:	bd70      	pop	{r4, r5, r6, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	200000ec 	.word	0x200000ec

08002c8c <_lseek_r>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	0004      	movs	r4, r0
 8002c90:	0008      	movs	r0, r1
 8002c92:	0011      	movs	r1, r2
 8002c94:	001a      	movs	r2, r3
 8002c96:	2300      	movs	r3, #0
 8002c98:	4d05      	ldr	r5, [pc, #20]	; (8002cb0 <_lseek_r+0x24>)
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	f7fd fe32 	bl	8000904 <_lseek>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d103      	bne.n	8002cac <_lseek_r+0x20>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d000      	beq.n	8002cac <_lseek_r+0x20>
 8002caa:	6023      	str	r3, [r4, #0]
 8002cac:	bd70      	pop	{r4, r5, r6, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	200000ec 	.word	0x200000ec

08002cb4 <__malloc_lock>:
 8002cb4:	b510      	push	{r4, lr}
 8002cb6:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <__malloc_lock+0xc>)
 8002cb8:	f7ff fe29 	bl	800290e <__retarget_lock_acquire_recursive>
 8002cbc:	bd10      	pop	{r4, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	200000e4 	.word	0x200000e4

08002cc4 <__malloc_unlock>:
 8002cc4:	b510      	push	{r4, lr}
 8002cc6:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <__malloc_unlock+0xc>)
 8002cc8:	f7ff fe22 	bl	8002910 <__retarget_lock_release_recursive>
 8002ccc:	bd10      	pop	{r4, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	200000e4 	.word	0x200000e4

08002cd4 <_read_r>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	0004      	movs	r4, r0
 8002cd8:	0008      	movs	r0, r1
 8002cda:	0011      	movs	r1, r2
 8002cdc:	001a      	movs	r2, r3
 8002cde:	2300      	movs	r3, #0
 8002ce0:	4d05      	ldr	r5, [pc, #20]	; (8002cf8 <_read_r+0x24>)
 8002ce2:	602b      	str	r3, [r5, #0]
 8002ce4:	f7fd fdb4 	bl	8000850 <_read>
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	d103      	bne.n	8002cf4 <_read_r+0x20>
 8002cec:	682b      	ldr	r3, [r5, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d000      	beq.n	8002cf4 <_read_r+0x20>
 8002cf2:	6023      	str	r3, [r4, #0]
 8002cf4:	bd70      	pop	{r4, r5, r6, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	200000ec 	.word	0x200000ec

08002cfc <_init>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr

08002d08 <_fini>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr
