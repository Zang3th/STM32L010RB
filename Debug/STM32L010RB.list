
STM32L010RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003160  08003160  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003168  08003168  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  0800317c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0800317c  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdbd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1c  00000000  00000000  0002cdf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002ea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002f4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f06  00000000  00000000  0002fea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be16  00000000  00000000  00031dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f889  00000000  00000000  0003dbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ad44d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025fc  00000000  00000000  000ad4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ff8 	.word	0x08002ff8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002ff8 	.word	0x08002ff8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	1c08      	adds	r0, r1, #0
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f82e 	bl	80002c0 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	0415      	lsls	r5, r2, #16
 8000274:	0c2d      	lsrs	r5, r5, #16
 8000276:	000f      	movs	r7, r1
 8000278:	0001      	movs	r1, r0
 800027a:	002e      	movs	r6, r5
 800027c:	46c6      	mov	lr, r8
 800027e:	4684      	mov	ip, r0
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	0c14      	lsrs	r4, r2, #16
 8000284:	0c00      	lsrs	r0, r0, #16
 8000286:	0c09      	lsrs	r1, r1, #16
 8000288:	4346      	muls	r6, r0
 800028a:	434d      	muls	r5, r1
 800028c:	4360      	muls	r0, r4
 800028e:	4361      	muls	r1, r4
 8000290:	1940      	adds	r0, r0, r5
 8000292:	0c34      	lsrs	r4, r6, #16
 8000294:	1824      	adds	r4, r4, r0
 8000296:	b500      	push	{lr}
 8000298:	42a5      	cmp	r5, r4
 800029a:	d903      	bls.n	80002a4 <__aeabi_lmul+0x34>
 800029c:	2080      	movs	r0, #128	; 0x80
 800029e:	0240      	lsls	r0, r0, #9
 80002a0:	4680      	mov	r8, r0
 80002a2:	4441      	add	r1, r8
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	186d      	adds	r5, r5, r1
 80002a8:	4661      	mov	r1, ip
 80002aa:	4359      	muls	r1, r3
 80002ac:	437a      	muls	r2, r7
 80002ae:	0430      	lsls	r0, r6, #16
 80002b0:	1949      	adds	r1, r1, r5
 80002b2:	0424      	lsls	r4, r4, #16
 80002b4:	0c00      	lsrs	r0, r0, #16
 80002b6:	1820      	adds	r0, r4, r0
 80002b8:	1889      	adds	r1, r1, r2
 80002ba:	bc80      	pop	{r7}
 80002bc:	46b8      	mov	r8, r7
 80002be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c0 <__udivmoddi4>:
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	4657      	mov	r7, sl
 80002c4:	464e      	mov	r6, r9
 80002c6:	4645      	mov	r5, r8
 80002c8:	46de      	mov	lr, fp
 80002ca:	b5e0      	push	{r5, r6, r7, lr}
 80002cc:	0004      	movs	r4, r0
 80002ce:	000d      	movs	r5, r1
 80002d0:	4692      	mov	sl, r2
 80002d2:	4699      	mov	r9, r3
 80002d4:	b083      	sub	sp, #12
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d830      	bhi.n	800033c <__udivmoddi4+0x7c>
 80002da:	d02d      	beq.n	8000338 <__udivmoddi4+0x78>
 80002dc:	4649      	mov	r1, r9
 80002de:	4650      	mov	r0, sl
 80002e0:	f000 f8ba 	bl	8000458 <__clzdi2>
 80002e4:	0029      	movs	r1, r5
 80002e6:	0006      	movs	r6, r0
 80002e8:	0020      	movs	r0, r4
 80002ea:	f000 f8b5 	bl	8000458 <__clzdi2>
 80002ee:	1a33      	subs	r3, r6, r0
 80002f0:	4698      	mov	r8, r3
 80002f2:	3b20      	subs	r3, #32
 80002f4:	469b      	mov	fp, r3
 80002f6:	d433      	bmi.n	8000360 <__udivmoddi4+0xa0>
 80002f8:	465a      	mov	r2, fp
 80002fa:	4653      	mov	r3, sl
 80002fc:	4093      	lsls	r3, r2
 80002fe:	4642      	mov	r2, r8
 8000300:	001f      	movs	r7, r3
 8000302:	4653      	mov	r3, sl
 8000304:	4093      	lsls	r3, r2
 8000306:	001e      	movs	r6, r3
 8000308:	42af      	cmp	r7, r5
 800030a:	d83a      	bhi.n	8000382 <__udivmoddi4+0xc2>
 800030c:	42af      	cmp	r7, r5
 800030e:	d100      	bne.n	8000312 <__udivmoddi4+0x52>
 8000310:	e078      	b.n	8000404 <__udivmoddi4+0x144>
 8000312:	465b      	mov	r3, fp
 8000314:	1ba4      	subs	r4, r4, r6
 8000316:	41bd      	sbcs	r5, r7
 8000318:	2b00      	cmp	r3, #0
 800031a:	da00      	bge.n	800031e <__udivmoddi4+0x5e>
 800031c:	e075      	b.n	800040a <__udivmoddi4+0x14a>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	2301      	movs	r3, #1
 8000328:	465a      	mov	r2, fp
 800032a:	4093      	lsls	r3, r2
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	2301      	movs	r3, #1
 8000330:	4642      	mov	r2, r8
 8000332:	4093      	lsls	r3, r2
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	e028      	b.n	800038a <__udivmoddi4+0xca>
 8000338:	4282      	cmp	r2, r0
 800033a:	d9cf      	bls.n	80002dc <__udivmoddi4+0x1c>
 800033c:	2200      	movs	r2, #0
 800033e:	2300      	movs	r3, #0
 8000340:	9200      	str	r2, [sp, #0]
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <__udivmoddi4+0x8e>
 800034a:	601c      	str	r4, [r3, #0]
 800034c:	605d      	str	r5, [r3, #4]
 800034e:	9800      	ldr	r0, [sp, #0]
 8000350:	9901      	ldr	r1, [sp, #4]
 8000352:	b003      	add	sp, #12
 8000354:	bcf0      	pop	{r4, r5, r6, r7}
 8000356:	46bb      	mov	fp, r7
 8000358:	46b2      	mov	sl, r6
 800035a:	46a9      	mov	r9, r5
 800035c:	46a0      	mov	r8, r4
 800035e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000360:	4642      	mov	r2, r8
 8000362:	2320      	movs	r3, #32
 8000364:	1a9b      	subs	r3, r3, r2
 8000366:	4652      	mov	r2, sl
 8000368:	40da      	lsrs	r2, r3
 800036a:	4641      	mov	r1, r8
 800036c:	0013      	movs	r3, r2
 800036e:	464a      	mov	r2, r9
 8000370:	408a      	lsls	r2, r1
 8000372:	0017      	movs	r7, r2
 8000374:	4642      	mov	r2, r8
 8000376:	431f      	orrs	r7, r3
 8000378:	4653      	mov	r3, sl
 800037a:	4093      	lsls	r3, r2
 800037c:	001e      	movs	r6, r3
 800037e:	42af      	cmp	r7, r5
 8000380:	d9c4      	bls.n	800030c <__udivmoddi4+0x4c>
 8000382:	2200      	movs	r2, #0
 8000384:	2300      	movs	r3, #0
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	4643      	mov	r3, r8
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0d9      	beq.n	8000344 <__udivmoddi4+0x84>
 8000390:	07fb      	lsls	r3, r7, #31
 8000392:	0872      	lsrs	r2, r6, #1
 8000394:	431a      	orrs	r2, r3
 8000396:	4646      	mov	r6, r8
 8000398:	087b      	lsrs	r3, r7, #1
 800039a:	e00e      	b.n	80003ba <__udivmoddi4+0xfa>
 800039c:	42ab      	cmp	r3, r5
 800039e:	d101      	bne.n	80003a4 <__udivmoddi4+0xe4>
 80003a0:	42a2      	cmp	r2, r4
 80003a2:	d80c      	bhi.n	80003be <__udivmoddi4+0xfe>
 80003a4:	1aa4      	subs	r4, r4, r2
 80003a6:	419d      	sbcs	r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	1924      	adds	r4, r4, r4
 80003ac:	416d      	adcs	r5, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	3e01      	subs	r6, #1
 80003b2:	1824      	adds	r4, r4, r0
 80003b4:	414d      	adcs	r5, r1
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d006      	beq.n	80003c8 <__udivmoddi4+0x108>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	d9ee      	bls.n	800039c <__udivmoddi4+0xdc>
 80003be:	3e01      	subs	r6, #1
 80003c0:	1924      	adds	r4, r4, r4
 80003c2:	416d      	adcs	r5, r5
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d1f8      	bne.n	80003ba <__udivmoddi4+0xfa>
 80003c8:	9800      	ldr	r0, [sp, #0]
 80003ca:	9901      	ldr	r1, [sp, #4]
 80003cc:	465b      	mov	r3, fp
 80003ce:	1900      	adds	r0, r0, r4
 80003d0:	4169      	adcs	r1, r5
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	db24      	blt.n	8000420 <__udivmoddi4+0x160>
 80003d6:	002b      	movs	r3, r5
 80003d8:	465a      	mov	r2, fp
 80003da:	4644      	mov	r4, r8
 80003dc:	40d3      	lsrs	r3, r2
 80003de:	002a      	movs	r2, r5
 80003e0:	40e2      	lsrs	r2, r4
 80003e2:	001c      	movs	r4, r3
 80003e4:	465b      	mov	r3, fp
 80003e6:	0015      	movs	r5, r2
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	db2a      	blt.n	8000442 <__udivmoddi4+0x182>
 80003ec:	0026      	movs	r6, r4
 80003ee:	409e      	lsls	r6, r3
 80003f0:	0033      	movs	r3, r6
 80003f2:	0026      	movs	r6, r4
 80003f4:	4647      	mov	r7, r8
 80003f6:	40be      	lsls	r6, r7
 80003f8:	0032      	movs	r2, r6
 80003fa:	1a80      	subs	r0, r0, r2
 80003fc:	4199      	sbcs	r1, r3
 80003fe:	9000      	str	r0, [sp, #0]
 8000400:	9101      	str	r1, [sp, #4]
 8000402:	e79f      	b.n	8000344 <__udivmoddi4+0x84>
 8000404:	42a3      	cmp	r3, r4
 8000406:	d8bc      	bhi.n	8000382 <__udivmoddi4+0xc2>
 8000408:	e783      	b.n	8000312 <__udivmoddi4+0x52>
 800040a:	4642      	mov	r2, r8
 800040c:	2320      	movs	r3, #32
 800040e:	2100      	movs	r1, #0
 8000410:	1a9b      	subs	r3, r3, r2
 8000412:	2200      	movs	r2, #0
 8000414:	9100      	str	r1, [sp, #0]
 8000416:	9201      	str	r2, [sp, #4]
 8000418:	2201      	movs	r2, #1
 800041a:	40da      	lsrs	r2, r3
 800041c:	9201      	str	r2, [sp, #4]
 800041e:	e786      	b.n	800032e <__udivmoddi4+0x6e>
 8000420:	4642      	mov	r2, r8
 8000422:	2320      	movs	r3, #32
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	002a      	movs	r2, r5
 8000428:	4646      	mov	r6, r8
 800042a:	409a      	lsls	r2, r3
 800042c:	0023      	movs	r3, r4
 800042e:	40f3      	lsrs	r3, r6
 8000430:	4644      	mov	r4, r8
 8000432:	4313      	orrs	r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	40e2      	lsrs	r2, r4
 8000438:	001c      	movs	r4, r3
 800043a:	465b      	mov	r3, fp
 800043c:	0015      	movs	r5, r2
 800043e:	2b00      	cmp	r3, #0
 8000440:	dad4      	bge.n	80003ec <__udivmoddi4+0x12c>
 8000442:	4642      	mov	r2, r8
 8000444:	002f      	movs	r7, r5
 8000446:	2320      	movs	r3, #32
 8000448:	0026      	movs	r6, r4
 800044a:	4097      	lsls	r7, r2
 800044c:	1a9b      	subs	r3, r3, r2
 800044e:	40de      	lsrs	r6, r3
 8000450:	003b      	movs	r3, r7
 8000452:	4333      	orrs	r3, r6
 8000454:	e7cd      	b.n	80003f2 <__udivmoddi4+0x132>
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__clzdi2>:
 8000458:	b510      	push	{r4, lr}
 800045a:	2900      	cmp	r1, #0
 800045c:	d103      	bne.n	8000466 <__clzdi2+0xe>
 800045e:	f000 f807 	bl	8000470 <__clzsi2>
 8000462:	3020      	adds	r0, #32
 8000464:	e002      	b.n	800046c <__clzdi2+0x14>
 8000466:	1c08      	adds	r0, r1, #0
 8000468:	f000 f802 	bl	8000470 <__clzsi2>
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__clzsi2>:
 8000470:	211c      	movs	r1, #28
 8000472:	2301      	movs	r3, #1
 8000474:	041b      	lsls	r3, r3, #16
 8000476:	4298      	cmp	r0, r3
 8000478:	d301      	bcc.n	800047e <__clzsi2+0xe>
 800047a:	0c00      	lsrs	r0, r0, #16
 800047c:	3910      	subs	r1, #16
 800047e:	0a1b      	lsrs	r3, r3, #8
 8000480:	4298      	cmp	r0, r3
 8000482:	d301      	bcc.n	8000488 <__clzsi2+0x18>
 8000484:	0a00      	lsrs	r0, r0, #8
 8000486:	3908      	subs	r1, #8
 8000488:	091b      	lsrs	r3, r3, #4
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0x22>
 800048e:	0900      	lsrs	r0, r0, #4
 8000490:	3904      	subs	r1, #4
 8000492:	a202      	add	r2, pc, #8	; (adr r2, 800049c <__clzsi2+0x2c>)
 8000494:	5c10      	ldrb	r0, [r2, r0]
 8000496:	1840      	adds	r0, r0, r1
 8000498:	4770      	bx	lr
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	02020304 	.word	0x02020304
 80004a0:	01010101 	.word	0x01010101
	...

080004ac <SystemClock_Config>:
UART_HandleTypeDef huart2;

// ----- Functions ----- 

static void SystemClock_Config(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b099      	sub	sp, #100	; 0x64
 80004b0:	af00      	add	r7, sp, #0
  	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	242c      	movs	r4, #44	; 0x2c
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2334      	movs	r3, #52	; 0x34
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f002 fd93 	bl	8002fe8 <memset>
  	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c2:	2318      	movs	r3, #24
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	2314      	movs	r3, #20
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f002 fd8b 	bl	8002fe8 <memset>
  	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d2:	003b      	movs	r3, r7
 80004d4:	0018      	movs	r0, r3
 80004d6:	2318      	movs	r3, #24
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f002 fd84 	bl	8002fe8 <memset>

  	//Configure the main internal regulator output voltage
  	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e0:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <SystemClock_Config+0xe8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a2c      	ldr	r2, [pc, #176]	; (8000598 <SystemClock_Config+0xec>)
 80004e6:	401a      	ands	r2, r3
 80004e8:	4b2a      	ldr	r3, [pc, #168]	; (8000594 <SystemClock_Config+0xe8>)
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0109      	lsls	r1, r1, #4
 80004ee:	430a      	orrs	r2, r1
 80004f0:	601a      	str	r2, [r3, #0]

  	//Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure
  	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f2:	0021      	movs	r1, r4
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2202      	movs	r2, #2
 80004f8:	601a      	str	r2, [r3, #0]
  	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2201      	movs	r2, #1
 80004fe:	60da      	str	r2, [r3, #12]
  	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2210      	movs	r2, #16
 8000504:	611a      	str	r2, [r3, #16]
  	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2202      	movs	r2, #2
 800050a:	625a      	str	r2, [r3, #36]	; 0x24
  	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
  	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	02d2      	lsls	r2, r2, #11
 8000518:	62da      	str	r2, [r3, #44]	; 0x2c
  	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	03d2      	lsls	r2, r2, #15
 8000520:	631a      	str	r2, [r3, #48]	; 0x30
  	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	187b      	adds	r3, r7, r1
 8000524:	0018      	movs	r0, r3
 8000526:	f000 fdb5 	bl	8001094 <HAL_RCC_OscConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d003      	beq.n	8000536 <SystemClock_Config+0x8a>
  	{
  	  	UT_Error_Handler("HAL_RCC_OscConfig failed!");
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <SystemClock_Config+0xf0>)
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fa79 	bl	8000a28 <UT_Error_Handler>
  	}

  	//Initializes the CPU, AHB and APB buses clocks
  	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000536:	2118      	movs	r1, #24
 8000538:	187b      	adds	r3, r7, r1
 800053a:	220f      	movs	r2, #15
 800053c:	601a      	str	r2, [r3, #0]
  	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2203      	movs	r2, #3
 8000542:	605a      	str	r2, [r3, #4]
  	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2101      	movs	r1, #1
 800055a:	0018      	movs	r0, r3
 800055c:	f001 f916 	bl	800178c <HAL_RCC_ClockConfig>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d003      	beq.n	800056c <SystemClock_Config+0xc0>
  	{
  	  	UT_Error_Handler("HAL_RCC_ClockConfig failed!");
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <SystemClock_Config+0xf4>)
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fa5e 	bl	8000a28 <UT_Error_Handler>
  	}

  	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800056c:	003b      	movs	r3, r7
 800056e:	2202      	movs	r2, #2
 8000570:	601a      	str	r2, [r3, #0]
  	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000572:	003b      	movs	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000578:	003b      	movs	r3, r7
 800057a:	0018      	movs	r0, r3
 800057c:	f001 fb2a 	bl	8001bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d003      	beq.n	800058c <SystemClock_Config+0xe0>
  	{
  	  	UT_Error_Handler("HAL_RCCEx_PeriphCLKConfig failed!");
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <SystemClock_Config+0xf8>)
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fa4e 	bl	8000a28 <UT_Error_Handler>
  	}
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b019      	add	sp, #100	; 0x64
 8000592:	bd90      	pop	{r4, r7, pc}
 8000594:	40007000 	.word	0x40007000
 8000598:	ffffe7ff 	.word	0xffffe7ff
 800059c:	08003010 	.word	0x08003010
 80005a0:	0800302c 	.word	0x0800302c
 80005a4:	08003048 	.word	0x08003048

080005a8 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005ae:	4a16      	ldr	r2, [pc, #88]	; (8000608 <MX_USART2_UART_Init+0x60>)
 80005b0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005b4:	22e1      	movs	r2, #225	; 0xe1
 80005b6:	0252      	lsls	r2, r2, #9
 80005b8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 ffff 	bl	80025f0 <HAL_UART_Init>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d003      	beq.n	80005fe <MX_USART2_UART_Init+0x56>
	{
		UT_Error_Handler("HAL_UART_Init failed!");
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <MX_USART2_UART_Init+0x64>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 fa15 	bl	8000a28 <UT_Error_Handler>
	}
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000068 	.word	0x20000068
 8000608:	40004400 	.word	0x40004400
 800060c:	0800306c 	.word	0x0800306c

08000610 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000616:	2308      	movs	r3, #8
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	0018      	movs	r0, r3
 800061c:	2310      	movs	r3, #16
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f002 fce1 	bl	8002fe8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000626:	003b      	movs	r3, r7
 8000628:	0018      	movs	r0, r3
 800062a:	2308      	movs	r3, #8
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f002 fcda 	bl	8002fe8 <memset>

	//Configure timer 2
	htim2.Instance = TIM2;
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_TIM2_Init+0xb8>)
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	05d2      	lsls	r2, r2, #23
 800063a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3200; //32MHZ divided by 3200. This results in 10000 oscillations per second
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_TIM2_Init+0xb8>)
 800063e:	22c8      	movs	r2, #200	; 0xc8
 8000640:	0112      	lsls	r2, r2, #4
 8000642:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_TIM2_Init+0xb8>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000; //Counter goes up to 10000, then starts anew. This results in 1 counter restarts every second
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_TIM2_Init+0xb8>)
 800064c:	4a1f      	ldr	r2, [pc, #124]	; (80006cc <MX_TIM2_Init+0xbc>)
 800064e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_TIM2_Init+0xb8>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_TIM2_Init+0xb8>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_TIM2_Init+0xb8>)
 800065e:	0018      	movs	r0, r3
 8000660:	f001 fbde 	bl	8001e20 <HAL_TIM_Base_Init>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d003      	beq.n	8000670 <MX_TIM2_Init+0x60>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_TIM2_Init+0xc0>)
 800066a:	0018      	movs	r0, r3
 800066c:	f000 f9dc 	bl	8000a28 <UT_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; //Use internal clock as a clock source
 8000670:	2108      	movs	r1, #8
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	0152      	lsls	r2, r2, #5
 8000678:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800067a:	187a      	adds	r2, r7, r1
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_TIM2_Init+0xb8>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f001 fd85 	bl	8002190 <HAL_TIM_ConfigClockSource>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d003      	beq.n	8000692 <MX_TIM2_Init+0x82>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_TIM2_Init+0xc4>)
 800068c:	0018      	movs	r0, r3
 800068e:	f000 f9cb 	bl	8000a28 <UT_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000692:	003b      	movs	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069e:	003a      	movs	r2, r7
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_TIM2_Init+0xb8>)
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 ff4b 	bl	8002540 <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d003      	beq.n	80006b6 <MX_TIM2_Init+0xa6>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_TIM2_Init+0xc8>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 f9b9 	bl	8000a28 <UT_Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim2);
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <MX_TIM2_Init+0xb8>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 f931 	bl	8000920 <HAL_TIM_MspPostInit>
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b006      	add	sp, #24
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000028 	.word	0x20000028
 80006cc:	00002710 	.word	0x00002710
 80006d0:	08003084 	.word	0x08003084
 80006d4:	080030a0 	.word	0x080030a0
 80006d8:	080030c4 	.word	0x080030c4

080006dc <MX_TIM21_Init>:

static void MX_TIM21_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	2308      	movs	r3, #8
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	0018      	movs	r0, r3
 80006e8:	2310      	movs	r3, #16
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f002 fc7b 	bl	8002fe8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	003b      	movs	r3, r7
 80006f4:	0018      	movs	r0, r3
 80006f6:	2308      	movs	r3, #8
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f002 fc74 	bl	8002fe8 <memset>

	//Configure timer 21
	htim21.Instance = TIM21;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_TIM21_Init+0xac>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <MX_TIM21_Init+0xb0>)
 8000704:	601a      	str	r2, [r3, #0]
	htim21.Init.Prescaler = 28; //32MHZ divided by 28. High resolution for microsecond-Delay-Function
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <MX_TIM21_Init+0xac>)
 8000708:	221c      	movs	r2, #28
 800070a:	605a      	str	r2, [r3, #4]
	htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_TIM21_Init+0xac>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
	htim21.Init.Period = 65535;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_TIM21_Init+0xac>)
 8000714:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <MX_TIM21_Init+0xb4>)
 8000716:	60da      	str	r2, [r3, #12]
	htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_TIM21_Init+0xac>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
	htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_TIM21_Init+0xac>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_TIM21_Init+0xac>)
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fb7a 	bl	8001e20 <HAL_TIM_Base_Init>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d003      	beq.n	8000738 <MX_TIM21_Init+0x5c>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_TIM21_Init+0xb8>)
 8000732:	0018      	movs	r0, r3
 8000734:	f000 f978 	bl	8000a28 <UT_Error_Handler>
	}	

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000738:	2108      	movs	r1, #8
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0152      	lsls	r2, r2, #5
 8000740:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000742:	187a      	adds	r2, r7, r1
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_TIM21_Init+0xac>)
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f001 fd21 	bl	8002190 <HAL_TIM_ConfigClockSource>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d003      	beq.n	800075a <MX_TIM21_Init+0x7e>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_TIM21_Init+0xbc>)
 8000754:	0018      	movs	r0, r3
 8000756:	f000 f967 	bl	8000a28 <UT_Error_Handler>
	}	

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075a:	003b      	movs	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	003b      	movs	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000766:	003a      	movs	r2, r7
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_TIM21_Init+0xac>)
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fee7 	bl	8002540 <HAL_TIMEx_MasterConfigSynchronization>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d003      	beq.n	800077e <MX_TIM21_Init+0xa2>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_TIM21_Init+0xc0>)
 8000778:	0018      	movs	r0, r3
 800077a:	f000 f955 	bl	8000a28 <UT_Error_Handler>
	}
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b006      	add	sp, #24
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	200000ec 	.word	0x200000ec
 800078c:	40010800 	.word	0x40010800
 8000790:	0000ffff 	.word	0x0000ffff
 8000794:	08003084 	.word	0x08003084
 8000798:	080030a0 	.word	0x080030a0
 800079c:	080030c4 	.word	0x080030c4

080007a0 <Port_Init>:

static void Port_Init(void)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b08b      	sub	sp, #44	; 0x2c
 80007a4:	af00      	add	r7, sp, #0
	//Enable GPIO Ports Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <Port_Init+0xa8>)
 80007a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <Port_Init+0xa8>)
 80007ac:	2101      	movs	r1, #1
 80007ae:	430a      	orrs	r2, r1
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <Port_Init+0xa8>)
 80007b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b6:	2201      	movs	r2, #1
 80007b8:	4013      	ands	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <Port_Init+0xa8>)
 80007c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <Port_Init+0xa8>)
 80007c4:	2102      	movs	r1, #2
 80007c6:	430a      	orrs	r2, r1
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <Port_Init+0xa8>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ce:	2202      	movs	r2, #2
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <Port_Init+0xa8>)
 80007d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <Port_Init+0xa8>)
 80007dc:	2104      	movs	r1, #4
 80007de:	430a      	orrs	r2, r1
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <Port_Init+0xa8>)
 80007e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e6:	2204      	movs	r2, #4
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <Port_Init+0xa8>)
 80007f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <Port_Init+0xa8>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	430a      	orrs	r2, r1
 80007f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <Port_Init+0xa8>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	4013      	ands	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

	//Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	2414      	movs	r4, #20
 8000808:	193b      	adds	r3, r7, r4
 800080a:	0018      	movs	r0, r3
 800080c:	2314      	movs	r3, #20
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f002 fbe9 	bl	8002fe8 <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2220      	movs	r2, #32
 800081c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2201      	movs	r2, #1
 8000822:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2201      	movs	r2, #1
 800082e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	187a      	adds	r2, r7, r1
 8000832:	23a0      	movs	r3, #160	; 0xa0
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fa91 	bl	8000d60 <HAL_GPIO_Init>
}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b00b      	add	sp, #44	; 0x2c
 8000844:	bd90      	pop	{r4, r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_TIM_PeriodElapsedCallback>:

//Timed interupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{	
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	//Toggle Onboard-LED (1 sec. on and 1 sec. off)
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000854:	23a0      	movs	r3, #160	; 0xa0
 8000856:	05db      	lsls	r3, r3, #23
 8000858:	2120      	movs	r1, #32
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fbfe 	bl	800105c <HAL_GPIO_TogglePin>
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bd80      	pop	{r7, pc}

08000868 <main>:

int main(void)
{		
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	//Init stuff
	HAL_Init();
 800086c:	f000 f92a 	bl	8000ac4 <HAL_Init>
	SystemClock_Config();
 8000870:	f7ff fe1c 	bl	80004ac <SystemClock_Config>
	Port_Init();
 8000874:	f7ff ff94 	bl	80007a0 <Port_Init>
	MX_TIM2_Init();
 8000878:	f7ff feca 	bl	8000610 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 800087c:	f7ff fe94 	bl	80005a8 <MX_USART2_UART_Init>
	MX_TIM21_Init();	
 8000880:	f7ff ff2c 	bl	80006dc <MX_TIM21_Init>

	//Start timers
	HAL_TIM_Base_Start_IT(&htim2);	
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <main+0x30>)
 8000886:	0018      	movs	r0, r3
 8000888:	f001 fb4e 	bl	8001f28 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim21);
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <main+0x34>)
 800088e:	0018      	movs	r0, r3
 8000890:	f001 fb06 	bl	8001ea0 <HAL_TIM_Base_Start>

	while (1)
 8000894:	e7fe      	b.n	8000894 <main+0x2c>
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	20000028 	.word	0x20000028
 800089c:	200000ec 	.word	0x200000ec

080008a0 <HAL_MspInit>:
#include "main.h"

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <HAL_MspInit+0x24>)
 80008a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x24>)
 80008aa:	2101      	movs	r1, #1
 80008ac:	430a      	orrs	r2, r1
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <HAL_MspInit+0x24>)
 80008b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <HAL_MspInit+0x24>)
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	0549      	lsls	r1, r1, #21
 80008ba:	430a      	orrs	r2, r1
 80008bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	429a      	cmp	r2, r3
 80008da:	d10e      	bne.n	80008fa <HAL_TIM_Base_MspInit+0x32>
  {
    //Peripheral clock enable
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_TIM_Base_MspInit+0x50>)
 80008de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <HAL_TIM_Base_MspInit+0x50>)
 80008e2:	2101      	movs	r1, #1
 80008e4:	430a      	orrs	r2, r1
 80008e6:	639a      	str	r2, [r3, #56]	; 0x38

    //Enable timed interrupts based on timer 2
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	200f      	movs	r0, #15
 80008ee:	f000 fa05 	bl	8000cfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f000 fa17 	bl	8000d26 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM21)
  {
    //Peripheral clock enable
    __HAL_RCC_TIM21_CLK_ENABLE();
  }
}
 80008f8:	e00a      	b.n	8000910 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_TIM_Base_MspInit+0x54>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d105      	bne.n	8000910 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <HAL_TIM_Base_MspInit+0x50>)
 8000906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <HAL_TIM_Base_MspInit+0x50>)
 800090a:	2104      	movs	r1, #4
 800090c:	430a      	orrs	r2, r1
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b002      	add	sp, #8
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800

08000920 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}

08000930 <HAL_UART_MspInit>:
    __HAL_RCC_TIM21_CLK_DISABLE();
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b089      	sub	sp, #36	; 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	240c      	movs	r4, #12
 800093a:	193b      	adds	r3, r7, r4
 800093c:	0018      	movs	r0, r3
 800093e:	2314      	movs	r3, #20
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f002 fb50 	bl	8002fe8 <memset>
  if(huart->Instance==USART2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a12      	ldr	r2, [pc, #72]	; (8000998 <HAL_UART_MspInit+0x68>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d11d      	bne.n	800098e <HAL_UART_MspInit+0x5e>
  {
    __HAL_RCC_USART2_CLK_ENABLE();
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_UART_MspInit+0x6c>)
 8000954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_UART_MspInit+0x6c>)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	0289      	lsls	r1, r1, #10
 800095c:	430a      	orrs	r2, r1
 800095e:	639a      	str	r2, [r3, #56]	; 0x38

    //USART2 GPIO Configuration
    //PA2     ------> USART2_TX
    //PA3     ------> USART2_RX
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000960:	0021      	movs	r1, r4
 8000962:	187b      	adds	r3, r7, r1
 8000964:	220c      	movs	r2, #12
 8000966:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2202      	movs	r2, #2
 800096c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2203      	movs	r2, #3
 8000978:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2204      	movs	r2, #4
 800097e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	187a      	adds	r2, r7, r1
 8000982:	23a0      	movs	r3, #160	; 0xa0
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f000 f9e9 	bl	8000d60 <HAL_GPIO_Init>
  }
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b009      	add	sp, #36	; 0x24
 8000994:	bd90      	pop	{r4, r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	40004400 	.word	0x40004400
 800099c:	40021000 	.word	0x40021000

080009a0 <NMI_Handler>:
#include "stm32l0xx_it.h"

extern TIM_HandleTypeDef htim2;

void NMI_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

  }
}

void HardFault_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <PendSV_Handler>:


void PendSV_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0

}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80009c4:	f000 f8d2 	bl	8000b6c <HAL_IncTick>
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <EXTI4_15_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l0xx.s).                    */
/******************************************************************************/

void EXTI4_15_IRQHandler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <TIM2_IRQHandler+0x14>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 faee 	bl	8001fc0 <HAL_TIM_IRQHandler>
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	20000028 	.word	0x20000028

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <UT_PrintMsg>:
#include "utility.h"

void UT_PrintMsg(char* msg)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	0018      	movs	r0, r3
 8000a08:	f7ff fb7e 	bl	8000108 <strlen>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	2301      	movs	r3, #1
 8000a12:	425b      	negs	r3, r3
 8000a14:	6879      	ldr	r1, [r7, #4]
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <UT_PrintMsg+0x28>)
 8000a18:	f001 fe3e 	bl	8002698 <HAL_UART_Transmit>
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000068 	.word	0x20000068

08000a28 <UT_Error_Handler>:
	UT_PrintMsg(buffer);
	va_end(args);
}

void UT_Error_Handler(char* err_msg)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	46c0      	nop			; (mov r8, r8)
    __disable_irq();
    while (1)
	{
    	UT_PrintMsg(err_msg);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff ffe0 	bl	80009fc <UT_PrintMsg>
 8000a3c:	e7fa      	b.n	8000a34 <UT_Error_Handler+0xc>
	...

08000a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a40:	4813      	ldr	r0, [pc, #76]	; (8000a90 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a42:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000a44:	4813      	ldr	r0, [pc, #76]	; (8000a94 <LoopForever+0x6>)
    LDR R1, [R0]
 8000a46:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a48:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a4a:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <LoopForever+0xa>)
    CMP R1, R2
 8000a4c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a4e:	d105      	bne.n	8000a5c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000a50:	4812      	ldr	r0, [pc, #72]	; (8000a9c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a52:	4913      	ldr	r1, [pc, #76]	; (8000aa0 <LoopForever+0x12>)
    STR R1, [R0]
 8000a54:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a56:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a58:	4913      	ldr	r1, [pc, #76]	; (8000aa8 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a5a:	6001      	str	r1, [r0, #0]

08000a5c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a5c:	4813      	ldr	r0, [pc, #76]	; (8000aac <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a5e:	4914      	ldr	r1, [pc, #80]	; (8000ab0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <LoopForever+0x26>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a74:	4c11      	ldr	r4, [pc, #68]	; (8000abc <LoopForever+0x2e>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a82:	f7ff ffb5 	bl	80009f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f002 fa8b 	bl	8002fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff feed 	bl	8000868 <main>

08000a8e <LoopForever>:

LoopForever:
    b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
   ldr   r0, =_estack
 8000a90:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000a94:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a98:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000a9c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000aa0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000aa4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000aa8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab4:	08003170 	.word	0x08003170
  ldr r2, =_sbss
 8000ab8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000abc:	20000130 	.word	0x20000130

08000ac0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_Init+0x3c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_Init+0x3c>)
 8000ad6:	2140      	movs	r1, #64	; 0x40
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 f811 	bl	8000b04 <HAL_InitTick>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	e001      	b.n	8000af2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aee:	f7ff fed7 	bl	80008a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	40022000 	.word	0x40022000

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_InitTick+0x5c>)
 8000b0e:	681c      	ldr	r4, [r3, #0]
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_InitTick+0x60>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	0019      	movs	r1, r3
 8000b16:	23fa      	movs	r3, #250	; 0xfa
 8000b18:	0098      	lsls	r0, r3, #2
 8000b1a:	f7ff fafd 	bl	8000118 <__udivsi3>
 8000b1e:	0003      	movs	r3, r0
 8000b20:	0019      	movs	r1, r3
 8000b22:	0020      	movs	r0, r4
 8000b24:	f7ff faf8 	bl	8000118 <__udivsi3>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f90b 	bl	8000d46 <HAL_SYSTICK_Config>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e00f      	b.n	8000b58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d80b      	bhi.n	8000b56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2301      	movs	r3, #1
 8000b42:	425b      	negs	r3, r3
 8000b44:	2200      	movs	r2, #0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f8d8 	bl	8000cfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_InitTick+0x64>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b003      	add	sp, #12
 8000b5e:	bd90      	pop	{r4, r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x1c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	001a      	movs	r2, r3
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x20>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	18d2      	adds	r2, r2, r3
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_IncTick+0x20>)
 8000b7e:	601a      	str	r2, [r3, #0]
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	2000012c 	.word	0x2000012c

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <HAL_GetTick+0x10>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	2000012c 	.word	0x2000012c

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0002      	movs	r2, r0
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb6:	d809      	bhi.n	8000bcc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	231f      	movs	r3, #31
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_EnableIRQ+0x30>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4091      	lsls	r1, r2
 8000bc8:	000a      	movs	r2, r1
 8000bca:	601a      	str	r2, [r3, #0]
  }
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	0002      	movs	r2, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d828      	bhi.n	8000c40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bee:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <__NVIC_SetPriority+0xd4>)
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	33c0      	adds	r3, #192	; 0xc0
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	589b      	ldr	r3, [r3, r2]
 8000bfe:	1dfa      	adds	r2, r7, #7
 8000c00:	7812      	ldrb	r2, [r2, #0]
 8000c02:	0011      	movs	r1, r2
 8000c04:	2203      	movs	r2, #3
 8000c06:	400a      	ands	r2, r1
 8000c08:	00d2      	lsls	r2, r2, #3
 8000c0a:	21ff      	movs	r1, #255	; 0xff
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	000a      	movs	r2, r1
 8000c10:	43d2      	mvns	r2, r2
 8000c12:	401a      	ands	r2, r3
 8000c14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	019b      	lsls	r3, r3, #6
 8000c1a:	22ff      	movs	r2, #255	; 0xff
 8000c1c:	401a      	ands	r2, r3
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0018      	movs	r0, r3
 8000c24:	2303      	movs	r3, #3
 8000c26:	4003      	ands	r3, r0
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c2c:	481f      	ldr	r0, [pc, #124]	; (8000cac <__NVIC_SetPriority+0xd4>)
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	430a      	orrs	r2, r1
 8000c38:	33c0      	adds	r3, #192	; 0xc0
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c3e:	e031      	b.n	8000ca4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <__NVIC_SetPriority+0xd8>)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	0019      	movs	r1, r3
 8000c48:	230f      	movs	r3, #15
 8000c4a:	400b      	ands	r3, r1
 8000c4c:	3b08      	subs	r3, #8
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3306      	adds	r3, #6
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	3304      	adds	r3, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	1dfa      	adds	r2, r7, #7
 8000c5c:	7812      	ldrb	r2, [r2, #0]
 8000c5e:	0011      	movs	r1, r2
 8000c60:	2203      	movs	r2, #3
 8000c62:	400a      	ands	r2, r1
 8000c64:	00d2      	lsls	r2, r2, #3
 8000c66:	21ff      	movs	r1, #255	; 0xff
 8000c68:	4091      	lsls	r1, r2
 8000c6a:	000a      	movs	r2, r1
 8000c6c:	43d2      	mvns	r2, r2
 8000c6e:	401a      	ands	r2, r3
 8000c70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	019b      	lsls	r3, r3, #6
 8000c76:	22ff      	movs	r2, #255	; 0xff
 8000c78:	401a      	ands	r2, r3
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	0018      	movs	r0, r3
 8000c80:	2303      	movs	r3, #3
 8000c82:	4003      	ands	r3, r0
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <__NVIC_SetPriority+0xd8>)
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	001c      	movs	r4, r3
 8000c90:	230f      	movs	r3, #15
 8000c92:	4023      	ands	r3, r4
 8000c94:	3b08      	subs	r3, #8
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	3306      	adds	r3, #6
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	18c3      	adds	r3, r0, r3
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b003      	add	sp, #12
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	1e5a      	subs	r2, r3, #1
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	045b      	lsls	r3, r3, #17
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d301      	bcc.n	8000ccc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e010      	b.n	8000cee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <SysTick_Config+0x44>)
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	3a01      	subs	r2, #1
 8000cd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	425b      	negs	r3, r3
 8000cd8:	2103      	movs	r1, #3
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff ff7c 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x44>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x44>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	210f      	movs	r1, #15
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	1c02      	adds	r2, r0, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ff5d 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b004      	add	sp, #16
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ff33 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff ffaf 	bl	8000cb4 <SysTick_Config>
 8000d56:	0003      	movs	r3, r0
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d76:	e155      	b.n	8001024 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4091      	lsls	r1, r2
 8000d82:	000a      	movs	r2, r1
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d100      	bne.n	8000d90 <HAL_GPIO_Init+0x30>
 8000d8e:	e146      	b.n	800101e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d00b      	beq.n	8000db0 <HAL_GPIO_Init+0x50>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d007      	beq.n	8000db0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da4:	2b11      	cmp	r3, #17
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b12      	cmp	r3, #18
 8000dae:	d130      	bne.n	8000e12 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	0013      	movs	r3, r2
 8000dc0:	43da      	mvns	r2, r3
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	409a      	lsls	r2, r3
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de6:	2201      	movs	r2, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	43da      	mvns	r2, r3
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	091b      	lsrs	r3, r3, #4
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	43da      	mvns	r2, r3
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0xf2>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b12      	cmp	r3, #18
 8000e50:	d123      	bne.n	8000e9a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	0092      	lsls	r2, r2, #2
 8000e5c:	58d3      	ldr	r3, [r2, r3]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	2207      	movs	r2, #7
 8000e64:	4013      	ands	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	691a      	ldr	r2, [r3, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2107      	movs	r1, #7
 8000e7e:	400b      	ands	r3, r1
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	6939      	ldr	r1, [r7, #16]
 8000e98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	401a      	ands	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	055b      	lsls	r3, r3, #21
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d100      	bne.n	8000edc <HAL_GPIO_Init+0x17c>
 8000eda:	e0a0      	b.n	800101e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000edc:	4b57      	ldr	r3, [pc, #348]	; (800103c <HAL_GPIO_Init+0x2dc>)
 8000ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ee0:	4b56      	ldr	r3, [pc, #344]	; (800103c <HAL_GPIO_Init+0x2dc>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee8:	4a55      	ldr	r2, [pc, #340]	; (8001040 <HAL_GPIO_Init+0x2e0>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	589b      	ldr	r3, [r3, r2]
 8000ef4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2203      	movs	r2, #3
 8000efa:	4013      	ands	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	409a      	lsls	r2, r3
 8000f02:	0013      	movs	r3, r2
 8000f04:	43da      	mvns	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	23a0      	movs	r3, #160	; 0xa0
 8000f10:	05db      	lsls	r3, r3, #23
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d01f      	beq.n	8000f56 <HAL_GPIO_Init+0x1f6>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4a      	ldr	r2, [pc, #296]	; (8001044 <HAL_GPIO_Init+0x2e4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d019      	beq.n	8000f52 <HAL_GPIO_Init+0x1f2>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a49      	ldr	r2, [pc, #292]	; (8001048 <HAL_GPIO_Init+0x2e8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d013      	beq.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a48      	ldr	r2, [pc, #288]	; (800104c <HAL_GPIO_Init+0x2ec>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00d      	beq.n	8000f4a <HAL_GPIO_Init+0x1ea>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a47      	ldr	r2, [pc, #284]	; (8001050 <HAL_GPIO_Init+0x2f0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x1e6>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a46      	ldr	r2, [pc, #280]	; (8001054 <HAL_GPIO_Init+0x2f4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_GPIO_Init+0x1e2>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e00a      	b.n	8000f58 <HAL_GPIO_Init+0x1f8>
 8000f42:	2306      	movs	r3, #6
 8000f44:	e008      	b.n	8000f58 <HAL_GPIO_Init+0x1f8>
 8000f46:	2304      	movs	r3, #4
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x1f8>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x1f8>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x1f8>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x1f8>
 8000f56:	2300      	movs	r3, #0
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	4093      	lsls	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f68:	4935      	ldr	r1, [pc, #212]	; (8001040 <HAL_GPIO_Init+0x2e0>)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f76:	4b38      	ldr	r3, [pc, #224]	; (8001058 <HAL_GPIO_Init+0x2f8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	2380      	movs	r3, #128	; 0x80
 8000f8c:	025b      	lsls	r3, r3, #9
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <HAL_GPIO_Init+0x2f8>)
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <HAL_GPIO_Init+0x2f8>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43da      	mvns	r2, r3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	029b      	lsls	r3, r3, #10
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <HAL_GPIO_Init+0x2f8>)
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <HAL_GPIO_Init+0x2f8>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	035b      	lsls	r3, r3, #13
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_GPIO_Init+0x2f8>)
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_GPIO_Init+0x2f8>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43da      	mvns	r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	039b      	lsls	r3, r3, #14
 800100c:	4013      	ands	r3, r2
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_GPIO_Init+0x2f8>)
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	40da      	lsrs	r2, r3
 800102c:	1e13      	subs	r3, r2, #0
 800102e:	d000      	beq.n	8001032 <HAL_GPIO_Init+0x2d2>
 8001030:	e6a2      	b.n	8000d78 <HAL_GPIO_Init+0x18>
  }
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b006      	add	sp, #24
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000
 8001044:	50000400 	.word	0x50000400
 8001048:	50000800 	.word	0x50000800
 800104c:	50000c00 	.word	0x50000c00
 8001050:	50001000 	.word	0x50001000
 8001054:	50001c00 	.word	0x50001c00
 8001058:	40010400 	.word	0x40010400

0800105c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	000a      	movs	r2, r1
 8001066:	1cbb      	adds	r3, r7, #2
 8001068:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001070:	1cbb      	adds	r3, r7, #2
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	4013      	ands	r3, r2
 8001078:	041a      	lsls	r2, r3, #16
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43db      	mvns	r3, r3
 800107e:	1cb9      	adds	r1, r7, #2
 8001080:	8809      	ldrh	r1, [r1, #0]
 8001082:	400b      	ands	r3, r1
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b004      	add	sp, #16
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f000 fb6c 	bl	8001780 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a8:	4bc8      	ldr	r3, [pc, #800]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	220c      	movs	r2, #12
 80010ae:	4013      	ands	r3, r2
 80010b0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010b2:	4bc6      	ldr	r3, [pc, #792]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	025b      	lsls	r3, r3, #9
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4013      	ands	r3, r2
 80010c6:	d100      	bne.n	80010ca <HAL_RCC_OscConfig+0x36>
 80010c8:	e07d      	b.n	80011c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d007      	beq.n	80010e0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b0c      	cmp	r3, #12
 80010d4:	d112      	bne.n	80010fc <HAL_RCC_OscConfig+0x68>
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	025b      	lsls	r3, r3, #9
 80010dc:	429a      	cmp	r2, r3
 80010de:	d10d      	bne.n	80010fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	4bba      	ldr	r3, [pc, #744]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	029b      	lsls	r3, r3, #10
 80010e8:	4013      	ands	r3, r2
 80010ea:	d100      	bne.n	80010ee <HAL_RCC_OscConfig+0x5a>
 80010ec:	e06a      	b.n	80011c4 <HAL_RCC_OscConfig+0x130>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d166      	bne.n	80011c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f000 fb42 	bl	8001780 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	025b      	lsls	r3, r3, #9
 8001104:	429a      	cmp	r2, r3
 8001106:	d107      	bne.n	8001118 <HAL_RCC_OscConfig+0x84>
 8001108:	4bb0      	ldr	r3, [pc, #704]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4baf      	ldr	r3, [pc, #700]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	0249      	lsls	r1, r1, #9
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e027      	b.n	8001168 <HAL_RCC_OscConfig+0xd4>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	23a0      	movs	r3, #160	; 0xa0
 800111e:	02db      	lsls	r3, r3, #11
 8001120:	429a      	cmp	r2, r3
 8001122:	d10e      	bne.n	8001142 <HAL_RCC_OscConfig+0xae>
 8001124:	4ba9      	ldr	r3, [pc, #676]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4ba8      	ldr	r3, [pc, #672]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	02c9      	lsls	r1, r1, #11
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	4ba6      	ldr	r3, [pc, #664]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4ba5      	ldr	r3, [pc, #660]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	0249      	lsls	r1, r1, #9
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e012      	b.n	8001168 <HAL_RCC_OscConfig+0xd4>
 8001142:	4ba2      	ldr	r3, [pc, #648]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4ba1      	ldr	r3, [pc, #644]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001148:	49a1      	ldr	r1, [pc, #644]	; (80013d0 <HAL_RCC_OscConfig+0x33c>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	4b9f      	ldr	r3, [pc, #636]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	025b      	lsls	r3, r3, #9
 8001156:	4013      	ands	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4b9b      	ldr	r3, [pc, #620]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b9a      	ldr	r3, [pc, #616]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001162:	499c      	ldr	r1, [pc, #624]	; (80013d4 <HAL_RCC_OscConfig+0x340>)
 8001164:	400a      	ands	r2, r1
 8001166:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d014      	beq.n	800119a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fd0e 	bl	8000b90 <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117a:	f7ff fd09 	bl	8000b90 <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b64      	cmp	r3, #100	; 0x64
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e2f9      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800118c:	4b8f      	ldr	r3, [pc, #572]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	029b      	lsls	r3, r3, #10
 8001194:	4013      	ands	r3, r2
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0xe6>
 8001198:	e015      	b.n	80011c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fcf9 	bl	8000b90 <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fcf4 	bl	8000b90 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e2e4      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011b6:	4b85      	ldr	r3, [pc, #532]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	029b      	lsls	r3, r3, #10
 80011be:	4013      	ands	r3, r2
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x110>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2202      	movs	r2, #2
 80011cc:	4013      	ands	r3, r2
 80011ce:	d100      	bne.n	80011d2 <HAL_RCC_OscConfig+0x13e>
 80011d0:	e099      	b.n	8001306 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	2220      	movs	r2, #32
 80011dc:	4013      	ands	r3, r2
 80011de:	d009      	beq.n	80011f4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80011e0:	4b7a      	ldr	r3, [pc, #488]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b79      	ldr	r3, [pc, #484]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80011e6:	2120      	movs	r1, #32
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	2220      	movs	r2, #32
 80011f0:	4393      	bics	r3, r2
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d005      	beq.n	8001206 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	2b0c      	cmp	r3, #12
 80011fe:	d13e      	bne.n	800127e <HAL_RCC_OscConfig+0x1ea>
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d13b      	bne.n	800127e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001206:	4b71      	ldr	r3, [pc, #452]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2204      	movs	r2, #4
 800120c:	4013      	ands	r3, r2
 800120e:	d004      	beq.n	800121a <HAL_RCC_OscConfig+0x186>
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e2b2      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121a:	4b6c      	ldr	r3, [pc, #432]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a6e      	ldr	r2, [pc, #440]	; (80013d8 <HAL_RCC_OscConfig+0x344>)
 8001220:	4013      	ands	r3, r2
 8001222:	0019      	movs	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	021a      	lsls	r2, r3, #8
 800122a:	4b68      	ldr	r3, [pc, #416]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800122c:	430a      	orrs	r2, r1
 800122e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001230:	4b66      	ldr	r3, [pc, #408]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2209      	movs	r2, #9
 8001236:	4393      	bics	r3, r2
 8001238:	0019      	movs	r1, r3
 800123a:	4b64      	ldr	r3, [pc, #400]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800123c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001242:	f000 fbeb 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8001246:	0001      	movs	r1, r0
 8001248:	4b60      	ldr	r3, [pc, #384]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	220f      	movs	r2, #15
 8001250:	4013      	ands	r3, r2
 8001252:	4a62      	ldr	r2, [pc, #392]	; (80013dc <HAL_RCC_OscConfig+0x348>)
 8001254:	5cd3      	ldrb	r3, [r2, r3]
 8001256:	000a      	movs	r2, r1
 8001258:	40da      	lsrs	r2, r3
 800125a:	4b61      	ldr	r3, [pc, #388]	; (80013e0 <HAL_RCC_OscConfig+0x34c>)
 800125c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800125e:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <HAL_RCC_OscConfig+0x350>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2513      	movs	r5, #19
 8001264:	197c      	adds	r4, r7, r5
 8001266:	0018      	movs	r0, r3
 8001268:	f7ff fc4c 	bl	8000b04 <HAL_InitTick>
 800126c:	0003      	movs	r3, r0
 800126e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001270:	197b      	adds	r3, r7, r5
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d046      	beq.n	8001306 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001278:	197b      	adds	r3, r7, r5
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	e280      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	2b00      	cmp	r3, #0
 8001282:	d027      	beq.n	80012d4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001284:	4b51      	ldr	r3, [pc, #324]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2209      	movs	r2, #9
 800128a:	4393      	bics	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	4b4f      	ldr	r3, [pc, #316]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fc7b 	bl	8000b90 <HAL_GetTick>
 800129a:	0003      	movs	r3, r0
 800129c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc76 	bl	8000b90 <HAL_GetTick>
 80012a4:	0002      	movs	r2, r0
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e266      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012b2:	4b46      	ldr	r3, [pc, #280]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2204      	movs	r2, #4
 80012b8:	4013      	ands	r3, r2
 80012ba:	d0f1      	beq.n	80012a0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012bc:	4b43      	ldr	r3, [pc, #268]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a45      	ldr	r2, [pc, #276]	; (80013d8 <HAL_RCC_OscConfig+0x344>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	0019      	movs	r1, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	021a      	lsls	r2, r3, #8
 80012cc:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012ce:	430a      	orrs	r2, r1
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	e018      	b.n	8001306 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b3c      	ldr	r3, [pc, #240]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012da:	2101      	movs	r1, #1
 80012dc:	438a      	bics	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc56 	bl	8000b90 <HAL_GetTick>
 80012e4:	0003      	movs	r3, r0
 80012e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff fc51 	bl	8000b90 <HAL_GetTick>
 80012ee:	0002      	movs	r2, r0
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e241      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012fc:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2204      	movs	r2, #4
 8001302:	4013      	ands	r3, r2
 8001304:	d1f1      	bne.n	80012ea <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2210      	movs	r2, #16
 800130c:	4013      	ands	r3, r2
 800130e:	d100      	bne.n	8001312 <HAL_RCC_OscConfig+0x27e>
 8001310:	e0a1      	b.n	8001456 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d140      	bne.n	800139a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4013      	ands	r3, r2
 8001322:	d005      	beq.n	8001330 <HAL_RCC_OscConfig+0x29c>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e227      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <HAL_RCC_OscConfig+0x354>)
 8001336:	4013      	ands	r3, r2
 8001338:	0019      	movs	r1, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1a      	ldr	r2, [r3, #32]
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001340:	430a      	orrs	r2, r1
 8001342:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	0a19      	lsrs	r1, r3, #8
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	061a      	lsls	r2, r3, #24
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001354:	430a      	orrs	r2, r1
 8001356:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	0b5b      	lsrs	r3, r3, #13
 800135e:	3301      	adds	r3, #1
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	0212      	lsls	r2, r2, #8
 8001364:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	210f      	movs	r1, #15
 800136e:	400b      	ands	r3, r1
 8001370:	491a      	ldr	r1, [pc, #104]	; (80013dc <HAL_RCC_OscConfig+0x348>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_RCC_OscConfig+0x34c>)
 8001378:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <HAL_RCC_OscConfig+0x350>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2513      	movs	r5, #19
 8001380:	197c      	adds	r4, r7, r5
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff fbbe 	bl	8000b04 <HAL_InitTick>
 8001388:	0003      	movs	r3, r0
 800138a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800138c:	197b      	adds	r3, r7, r5
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d060      	beq.n	8001456 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001394:	197b      	adds	r3, r7, r5
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	e1f2      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d03f      	beq.n	8001422 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	0049      	lsls	r1, r1, #1
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fbee 	bl	8000b90 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013b8:	e018      	b.n	80013ec <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ba:	f7ff fbe9 	bl	8000b90 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d911      	bls.n	80013ec <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1d9      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
 80013cc:	40021000 	.word	0x40021000
 80013d0:	fffeffff 	.word	0xfffeffff
 80013d4:	fffbffff 	.word	0xfffbffff
 80013d8:	ffffe0ff 	.word	0xffffe0ff
 80013dc:	080030f4 	.word	0x080030f4
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000004 	.word	0x20000004
 80013e8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ec:	4bc9      	ldr	r3, [pc, #804]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d0e0      	beq.n	80013ba <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f8:	4bc6      	ldr	r3, [pc, #792]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4ac6      	ldr	r2, [pc, #792]	; (8001718 <HAL_RCC_OscConfig+0x684>)
 80013fe:	4013      	ands	r3, r2
 8001400:	0019      	movs	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1a      	ldr	r2, [r3, #32]
 8001406:	4bc3      	ldr	r3, [pc, #780]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001408:	430a      	orrs	r2, r1
 800140a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140c:	4bc1      	ldr	r3, [pc, #772]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	0a19      	lsrs	r1, r3, #8
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	061a      	lsls	r2, r3, #24
 800141a:	4bbe      	ldr	r3, [pc, #760]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800141c:	430a      	orrs	r2, r1
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	e019      	b.n	8001456 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001422:	4bbc      	ldr	r3, [pc, #752]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4bbb      	ldr	r3, [pc, #748]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001428:	49bc      	ldr	r1, [pc, #752]	; (800171c <HAL_RCC_OscConfig+0x688>)
 800142a:	400a      	ands	r2, r1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142e:	f7ff fbaf 	bl	8000b90 <HAL_GetTick>
 8001432:	0003      	movs	r3, r0
 8001434:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001438:	f7ff fbaa 	bl	8000b90 <HAL_GetTick>
 800143c:	0002      	movs	r2, r0
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e19a      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800144a:	4bb2      	ldr	r3, [pc, #712]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4013      	ands	r3, r2
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2208      	movs	r2, #8
 800145c:	4013      	ands	r3, r2
 800145e:	d036      	beq.n	80014ce <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d019      	beq.n	800149c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001468:	4baa      	ldr	r3, [pc, #680]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800146a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800146c:	4ba9      	ldr	r3, [pc, #676]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800146e:	2101      	movs	r1, #1
 8001470:	430a      	orrs	r2, r1
 8001472:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff fb8c 	bl	8000b90 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147e:	f7ff fb87 	bl	8000b90 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e177      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001490:	4ba0      	ldr	r3, [pc, #640]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d0f1      	beq.n	800147e <HAL_RCC_OscConfig+0x3ea>
 800149a:	e018      	b.n	80014ce <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149c:	4b9d      	ldr	r3, [pc, #628]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800149e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014a0:	4b9c      	ldr	r3, [pc, #624]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80014a2:	2101      	movs	r1, #1
 80014a4:	438a      	bics	r2, r1
 80014a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a8:	f7ff fb72 	bl	8000b90 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b2:	f7ff fb6d 	bl	8000b90 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e15d      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014c4:	4b93      	ldr	r3, [pc, #588]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80014c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d1f1      	bne.n	80014b2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2204      	movs	r2, #4
 80014d4:	4013      	ands	r3, r2
 80014d6:	d100      	bne.n	80014da <HAL_RCC_OscConfig+0x446>
 80014d8:	e0ae      	b.n	8001638 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014da:	2023      	movs	r0, #35	; 0x23
 80014dc:	183b      	adds	r3, r7, r0
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e2:	4b8c      	ldr	r3, [pc, #560]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80014e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	055b      	lsls	r3, r3, #21
 80014ea:	4013      	ands	r3, r2
 80014ec:	d109      	bne.n	8001502 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b89      	ldr	r3, [pc, #548]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80014f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0549      	lsls	r1, r1, #21
 80014f8:	430a      	orrs	r2, r1
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80014fc:	183b      	adds	r3, r7, r0
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	4b87      	ldr	r3, [pc, #540]	; (8001720 <HAL_RCC_OscConfig+0x68c>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4013      	ands	r3, r2
 800150c:	d11a      	bne.n	8001544 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150e:	4b84      	ldr	r3, [pc, #528]	; (8001720 <HAL_RCC_OscConfig+0x68c>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b83      	ldr	r3, [pc, #524]	; (8001720 <HAL_RCC_OscConfig+0x68c>)
 8001514:	2180      	movs	r1, #128	; 0x80
 8001516:	0049      	lsls	r1, r1, #1
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151c:	f7ff fb38 	bl	8000b90 <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001526:	f7ff fb33 	bl	8000b90 <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b64      	cmp	r3, #100	; 0x64
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e123      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	4b79      	ldr	r3, [pc, #484]	; (8001720 <HAL_RCC_OscConfig+0x68c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4013      	ands	r3, r2
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	429a      	cmp	r2, r3
 800154e:	d107      	bne.n	8001560 <HAL_RCC_OscConfig+0x4cc>
 8001550:	4b70      	ldr	r3, [pc, #448]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001554:	4b6f      	ldr	r3, [pc, #444]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	0049      	lsls	r1, r1, #1
 800155a:	430a      	orrs	r2, r1
 800155c:	651a      	str	r2, [r3, #80]	; 0x50
 800155e:	e031      	b.n	80015c4 <HAL_RCC_OscConfig+0x530>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10c      	bne.n	8001582 <HAL_RCC_OscConfig+0x4ee>
 8001568:	4b6a      	ldr	r3, [pc, #424]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800156a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800156c:	4b69      	ldr	r3, [pc, #420]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800156e:	496b      	ldr	r1, [pc, #428]	; (800171c <HAL_RCC_OscConfig+0x688>)
 8001570:	400a      	ands	r2, r1
 8001572:	651a      	str	r2, [r3, #80]	; 0x50
 8001574:	4b67      	ldr	r3, [pc, #412]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001576:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001578:	4b66      	ldr	r3, [pc, #408]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800157a:	496a      	ldr	r1, [pc, #424]	; (8001724 <HAL_RCC_OscConfig+0x690>)
 800157c:	400a      	ands	r2, r1
 800157e:	651a      	str	r2, [r3, #80]	; 0x50
 8001580:	e020      	b.n	80015c4 <HAL_RCC_OscConfig+0x530>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	23a0      	movs	r3, #160	; 0xa0
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	429a      	cmp	r2, r3
 800158c:	d10e      	bne.n	80015ac <HAL_RCC_OscConfig+0x518>
 800158e:	4b61      	ldr	r3, [pc, #388]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001592:	4b60      	ldr	r3, [pc, #384]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	00c9      	lsls	r1, r1, #3
 8001598:	430a      	orrs	r2, r1
 800159a:	651a      	str	r2, [r3, #80]	; 0x50
 800159c:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800159e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015a0:	4b5c      	ldr	r3, [pc, #368]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	0049      	lsls	r1, r1, #1
 80015a6:	430a      	orrs	r2, r1
 80015a8:	651a      	str	r2, [r3, #80]	; 0x50
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0x530>
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80015ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80015b2:	495a      	ldr	r1, [pc, #360]	; (800171c <HAL_RCC_OscConfig+0x688>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	651a      	str	r2, [r3, #80]	; 0x50
 80015b8:	4b56      	ldr	r3, [pc, #344]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80015ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015bc:	4b55      	ldr	r3, [pc, #340]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80015be:	4959      	ldr	r1, [pc, #356]	; (8001724 <HAL_RCC_OscConfig+0x690>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d015      	beq.n	80015f8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fae0 	bl	8000b90 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015d4:	e009      	b.n	80015ea <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d6:	f7ff fadb 	bl	8000b90 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	4a51      	ldr	r2, [pc, #324]	; (8001728 <HAL_RCC_OscConfig+0x694>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e0ca      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80015ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	d0ef      	beq.n	80015d6 <HAL_RCC_OscConfig+0x542>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f8:	f7ff faca 	bl	8000b90 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001600:	e009      	b.n	8001616 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001602:	f7ff fac5 	bl	8000b90 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	4a46      	ldr	r2, [pc, #280]	; (8001728 <HAL_RCC_OscConfig+0x694>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e0b4      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001616:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001618:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4013      	ands	r3, r2
 8001620:	d1ef      	bne.n	8001602 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001622:	2323      	movs	r3, #35	; 0x23
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162c:	4b39      	ldr	r3, [pc, #228]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800162e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001630:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001632:	493e      	ldr	r1, [pc, #248]	; (800172c <HAL_RCC_OscConfig+0x698>)
 8001634:	400a      	ands	r2, r1
 8001636:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	2b00      	cmp	r3, #0
 800163e:	d100      	bne.n	8001642 <HAL_RCC_OscConfig+0x5ae>
 8001640:	e09d      	b.n	800177e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d100      	bne.n	800164a <HAL_RCC_OscConfig+0x5b6>
 8001648:	e076      	b.n	8001738 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2b02      	cmp	r3, #2
 8001650:	d145      	bne.n	80016de <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001658:	4935      	ldr	r1, [pc, #212]	; (8001730 <HAL_RCC_OscConfig+0x69c>)
 800165a:	400a      	ands	r2, r1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fa97 	bl	8000b90 <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fa92 	bl	8000b90 <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e082      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	049b      	lsls	r3, r3, #18
 8001682:	4013      	ands	r3, r2
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	4a2a      	ldr	r2, [pc, #168]	; (8001734 <HAL_RCC_OscConfig+0x6a0>)
 800168c:	4013      	ands	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	431a      	orrs	r2, r3
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	0449      	lsls	r1, r1, #17
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fa6c 	bl	8000b90 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff fa67 	bl	8000b90 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e057      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	049b      	lsls	r3, r3, #18
 80016d8:	4013      	ands	r3, r2
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x62a>
 80016dc:	e04f      	b.n	800177e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 80016e4:	4912      	ldr	r1, [pc, #72]	; (8001730 <HAL_RCC_OscConfig+0x69c>)
 80016e6:	400a      	ands	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff fa51 	bl	8000b90 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fa4c 	bl	8000b90 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e03c      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001706:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	049b      	lsls	r3, r3, #18
 800170e:	4013      	ands	r3, r2
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x660>
 8001712:	e034      	b.n	800177e <HAL_RCC_OscConfig+0x6ea>
 8001714:	40021000 	.word	0x40021000
 8001718:	ffff1fff 	.word	0xffff1fff
 800171c:	fffffeff 	.word	0xfffffeff
 8001720:	40007000 	.word	0x40007000
 8001724:	fffffbff 	.word	0xfffffbff
 8001728:	00001388 	.word	0x00001388
 800172c:	efffffff 	.word	0xefffffff
 8001730:	feffffff 	.word	0xfeffffff
 8001734:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e01d      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_RCC_OscConfig+0x6f4>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	025b      	lsls	r3, r3, #9
 8001750:	401a      	ands	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	429a      	cmp	r2, r3
 8001758:	d10f      	bne.n	800177a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	23f0      	movs	r3, #240	; 0xf0
 800175e:	039b      	lsls	r3, r3, #14
 8001760:	401a      	ands	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d107      	bne.n	800177a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	23c0      	movs	r3, #192	; 0xc0
 800176e:	041b      	lsls	r3, r3, #16
 8001770:	401a      	ands	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	b00a      	add	sp, #40	; 0x28
 8001786:	bdb0      	pop	{r4, r5, r7, pc}
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800178c:	b5b0      	push	{r4, r5, r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e128      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a0:	4b96      	ldr	r3, [pc, #600]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2201      	movs	r2, #1
 80017a6:	4013      	ands	r3, r2
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d91e      	bls.n	80017ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b93      	ldr	r3, [pc, #588]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	4393      	bics	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	4b90      	ldr	r3, [pc, #576]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017c0:	f7ff f9e6 	bl	8000b90 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c8:	e009      	b.n	80017de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ca:	f7ff f9e1 	bl	8000b90 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	4a8a      	ldr	r2, [pc, #552]	; (8001a00 <HAL_RCC_ClockConfig+0x274>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e109      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b87      	ldr	r3, [pc, #540]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2201      	movs	r2, #1
 80017e4:	4013      	ands	r3, r2
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d1ee      	bne.n	80017ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2202      	movs	r2, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	d009      	beq.n	800180a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f6:	4b83      	ldr	r3, [pc, #524]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	22f0      	movs	r2, #240	; 0xf0
 80017fc:	4393      	bics	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001806:	430a      	orrs	r2, r1
 8001808:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2201      	movs	r2, #1
 8001810:	4013      	ands	r3, r2
 8001812:	d100      	bne.n	8001816 <HAL_RCC_ClockConfig+0x8a>
 8001814:	e089      	b.n	800192a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800181e:	4b79      	ldr	r3, [pc, #484]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	029b      	lsls	r3, r3, #10
 8001826:	4013      	ands	r3, r2
 8001828:	d120      	bne.n	800186c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0e1      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001836:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	049b      	lsls	r3, r3, #18
 800183e:	4013      	ands	r3, r2
 8001840:	d114      	bne.n	800186c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0d5      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d106      	bne.n	800185c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800184e:	4b6d      	ldr	r3, [pc, #436]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2204      	movs	r2, #4
 8001854:	4013      	ands	r3, r2
 8001856:	d109      	bne.n	800186c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0ca      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800185c:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4013      	ands	r3, r2
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0c2      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186c:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2203      	movs	r2, #3
 8001872:	4393      	bics	r3, r2
 8001874:	0019      	movs	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	4b62      	ldr	r3, [pc, #392]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 800187c:	430a      	orrs	r2, r1
 800187e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001880:	f7ff f986 	bl	8000b90 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d111      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001890:	e009      	b.n	80018a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001892:	f7ff f97d 	bl	8000b90 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4a58      	ldr	r2, [pc, #352]	; (8001a00 <HAL_RCC_ClockConfig+0x274>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e0a5      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a6:	4b57      	ldr	r3, [pc, #348]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	220c      	movs	r2, #12
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d1ef      	bne.n	8001892 <HAL_RCC_ClockConfig+0x106>
 80018b2:	e03a      	b.n	800192a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d111      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018bc:	e009      	b.n	80018d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018be:	f7ff f967 	bl	8000b90 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4a4d      	ldr	r2, [pc, #308]	; (8001a00 <HAL_RCC_ClockConfig+0x274>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e08f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d2:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	220c      	movs	r2, #12
 80018d8:	4013      	ands	r3, r2
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d1ef      	bne.n	80018be <HAL_RCC_ClockConfig+0x132>
 80018de:	e024      	b.n	800192a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d11b      	bne.n	8001920 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018e8:	e009      	b.n	80018fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ea:	f7ff f951 	bl	8000b90 <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	4a42      	ldr	r2, [pc, #264]	; (8001a00 <HAL_RCC_ClockConfig+0x274>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e079      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	220c      	movs	r2, #12
 8001904:	4013      	ands	r3, r2
 8001906:	2b04      	cmp	r3, #4
 8001908:	d1ef      	bne.n	80018ea <HAL_RCC_ClockConfig+0x15e>
 800190a:	e00e      	b.n	800192a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff f940 	bl	8000b90 <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	4a3a      	ldr	r2, [pc, #232]	; (8001a00 <HAL_RCC_ClockConfig+0x274>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e068      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	220c      	movs	r2, #12
 8001926:	4013      	ands	r3, r2
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800192a:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	4013      	ands	r3, r2
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d21e      	bcs.n	8001976 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001938:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	4393      	bics	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800194a:	f7ff f921 	bl	8000b90 <HAL_GetTick>
 800194e:	0003      	movs	r3, r0
 8001950:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	e009      	b.n	8001968 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f7ff f91c 	bl	8000b90 <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <HAL_RCC_ClockConfig+0x274>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e044      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCC_ClockConfig+0x270>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	4013      	ands	r3, r2
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d1ee      	bne.n	8001954 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2204      	movs	r2, #4
 800197c:	4013      	ands	r3, r2
 800197e:	d009      	beq.n	8001994 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4a20      	ldr	r2, [pc, #128]	; (8001a08 <HAL_RCC_ClockConfig+0x27c>)
 8001986:	4013      	ands	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 8001990:	430a      	orrs	r2, r1
 8001992:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2208      	movs	r2, #8
 800199a:	4013      	ands	r3, r2
 800199c:	d00a      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	4a1a      	ldr	r2, [pc, #104]	; (8001a0c <HAL_RCC_ClockConfig+0x280>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	0019      	movs	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	00da      	lsls	r2, r3, #3
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b4:	f000 f832 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019b8:	0001      	movs	r1, r0
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_ClockConfig+0x278>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	220f      	movs	r2, #15
 80019c2:	4013      	ands	r3, r2
 80019c4:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <HAL_RCC_ClockConfig+0x284>)
 80019c6:	5cd3      	ldrb	r3, [r2, r3]
 80019c8:	000a      	movs	r2, r1
 80019ca:	40da      	lsrs	r2, r3
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_RCC_ClockConfig+0x288>)
 80019ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_RCC_ClockConfig+0x28c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	250b      	movs	r5, #11
 80019d6:	197c      	adds	r4, r7, r5
 80019d8:	0018      	movs	r0, r3
 80019da:	f7ff f893 	bl	8000b04 <HAL_InitTick>
 80019de:	0003      	movs	r3, r0
 80019e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80019e2:	197b      	adds	r3, r7, r5
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80019ea:	197b      	adds	r3, r7, r5
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bdb0      	pop	{r4, r5, r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	40022000 	.word	0x40022000
 8001a00:	00001388 	.word	0x00001388
 8001a04:	40021000 	.word	0x40021000
 8001a08:	fffff8ff 	.word	0xfffff8ff
 8001a0c:	ffffc7ff 	.word	0xffffc7ff
 8001a10:	080030f4 	.word	0x080030f4
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	b5b0      	push	{r4, r5, r7, lr}
 8001a1e:	b08e      	sub	sp, #56	; 0x38
 8001a20:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a22:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2a:	230c      	movs	r3, #12
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d014      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x40>
 8001a32:	d900      	bls.n	8001a36 <HAL_RCC_GetSysClockFreq+0x1a>
 8001a34:	e07b      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x112>
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d002      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x24>
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d00b      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a3e:	e076      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a40:	4b44      	ldr	r3, [pc, #272]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2210      	movs	r2, #16
 8001a46:	4013      	ands	r3, r2
 8001a48:	d002      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a4a:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a4e:	e07c      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a50:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x140>)
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a54:	e079      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a56:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a5a:	e076      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5e:	0c9a      	lsrs	r2, r3, #18
 8001a60:	230f      	movs	r3, #15
 8001a62:	401a      	ands	r2, r3
 8001a64:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a66:	5c9b      	ldrb	r3, [r3, r2]
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	0d9a      	lsrs	r2, r3, #22
 8001a6e:	2303      	movs	r3, #3
 8001a70:	4013      	ands	r3, r2
 8001a72:	3301      	adds	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a76:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	025b      	lsls	r3, r3, #9
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d01a      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	4a35      	ldr	r2, [pc, #212]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	69b8      	ldr	r0, [r7, #24]
 8001a90:	69f9      	ldr	r1, [r7, #28]
 8001a92:	f7fe fbed 	bl	8000270 <__aeabi_lmul>
 8001a96:	0002      	movs	r2, r0
 8001a98:	000b      	movs	r3, r1
 8001a9a:	0010      	movs	r0, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f7fe fbc1 	bl	8000230 <__aeabi_uldivmod>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	000b      	movs	r3, r1
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab6:	e037      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ab8:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2210      	movs	r2, #16
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d01a      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4a23      	ldr	r2, [pc, #140]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001acc:	2300      	movs	r3, #0
 8001ace:	68b8      	ldr	r0, [r7, #8]
 8001ad0:	68f9      	ldr	r1, [r7, #12]
 8001ad2:	f7fe fbcd 	bl	8000270 <__aeabi_lmul>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	000b      	movs	r3, r1
 8001ada:	0010      	movs	r0, r2
 8001adc:	0019      	movs	r1, r3
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f7fe fba1 	bl	8000230 <__aeabi_uldivmod>
 8001aee:	0002      	movs	r2, r0
 8001af0:	000b      	movs	r3, r1
 8001af2:	0013      	movs	r3, r2
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
 8001af6:	e017      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	0018      	movs	r0, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	0019      	movs	r1, r3
 8001b00:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x140>)
 8001b02:	2300      	movs	r3, #0
 8001b04:	f7fe fbb4 	bl	8000270 <__aeabi_lmul>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	000b      	movs	r3, r1
 8001b0c:	0010      	movs	r0, r2
 8001b0e:	0019      	movs	r1, r3
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	001c      	movs	r4, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	001d      	movs	r5, r3
 8001b18:	0022      	movs	r2, r4
 8001b1a:	002b      	movs	r3, r5
 8001b1c:	f7fe fb88 	bl	8000230 <__aeabi_uldivmod>
 8001b20:	0002      	movs	r2, r0
 8001b22:	000b      	movs	r3, r1
 8001b24:	0013      	movs	r3, r2
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b2c:	e00d      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	0b5b      	lsrs	r3, r3, #13
 8001b34:	2207      	movs	r2, #7
 8001b36:	4013      	ands	r3, r2
 8001b38:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	0212      	lsls	r2, r2, #8
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b48:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b00e      	add	sp, #56	; 0x38
 8001b52:	bdb0      	pop	{r4, r5, r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	003d0900 	.word	0x003d0900
 8001b5c:	00f42400 	.word	0x00f42400
 8001b60:	007a1200 	.word	0x007a1200
 8001b64:	0800310c 	.word	0x0800310c

08001b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b6c:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	20000000 	.word	0x20000000

08001b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b80:	f7ff fff2 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001b84:	0001      	movs	r1, r0
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	4013      	ands	r3, r2
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	40d9      	lsrs	r1, r3
 8001b96:	000b      	movs	r3, r1
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08003104 	.word	0x08003104

08001ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bac:	f7ff ffdc 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001bb0:	0001      	movs	r1, r0
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	0adb      	lsrs	r3, r3, #11
 8001bb8:	2207      	movs	r2, #7
 8001bba:	4013      	ands	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	40d9      	lsrs	r1, r3
 8001bc2:	000b      	movs	r3, r1
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08003104 	.word	0x08003104

08001bd4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001bdc:	2017      	movs	r0, #23
 8001bde:	183b      	adds	r3, r7, r0
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2220      	movs	r2, #32
 8001bea:	4013      	ands	r3, r2
 8001bec:	d100      	bne.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001bee:	e0c2      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf0:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	055b      	lsls	r3, r3, #21
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d109      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	4b7e      	ldr	r3, [pc, #504]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c00:	4b7d      	ldr	r3, [pc, #500]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	0549      	lsls	r1, r1, #21
 8001c06:	430a      	orrs	r2, r1
 8001c08:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c0a:	183b      	adds	r3, r7, r0
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	4b7a      	ldr	r3, [pc, #488]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d11a      	bne.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1c:	4b77      	ldr	r3, [pc, #476]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	0049      	lsls	r1, r1, #1
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2a:	f7fe ffb1 	bl	8000b90 <HAL_GetTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c32:	e008      	b.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c34:	f7fe ffac 	bl	8000b90 <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0d4      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b6d      	ldr	r3, [pc, #436]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c52:	4b69      	ldr	r3, [pc, #420]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	23c0      	movs	r3, #192	; 0xc0
 8001c58:	039b      	lsls	r3, r3, #14
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	23c0      	movs	r3, #192	; 0xc0
 8001c64:	039b      	lsls	r3, r3, #14
 8001c66:	4013      	ands	r3, r2
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d013      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	23c0      	movs	r3, #192	; 0xc0
 8001c74:	029b      	lsls	r3, r3, #10
 8001c76:	401a      	ands	r2, r3
 8001c78:	23c0      	movs	r3, #192	; 0xc0
 8001c7a:	029b      	lsls	r3, r3, #10
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10a      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c80:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	029b      	lsls	r3, r3, #10
 8001c88:	401a      	ands	r2, r3
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	029b      	lsls	r3, r3, #10
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d101      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0ac      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c96:	4b58      	ldr	r3, [pc, #352]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c9a:	23c0      	movs	r3, #192	; 0xc0
 8001c9c:	029b      	lsls	r3, r3, #10
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d03b      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	23c0      	movs	r3, #192	; 0xc0
 8001cae:	029b      	lsls	r3, r3, #10
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d033      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d02e      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc6:	4a4e      	ldr	r2, [pc, #312]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ccc:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cd0:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	0309      	lsls	r1, r1, #12
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cde:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ce0:	4948      	ldr	r1, [pc, #288]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ce6:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d014      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7fe ff4b 	bl	8000b90 <HAL_GetTick>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cfe:	e009      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7fe ff46 	bl	8000b90 <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	4a3f      	ldr	r2, [pc, #252]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e06d      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d14:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d0ef      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	23c0      	movs	r3, #192	; 0xc0
 8001d26:	029b      	lsls	r3, r3, #10
 8001d28:	401a      	ands	r2, r3
 8001d2a:	23c0      	movs	r3, #192	; 0xc0
 8001d2c:	029b      	lsls	r3, r3, #10
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001d32:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a35      	ldr	r2, [pc, #212]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	23c0      	movs	r3, #192	; 0xc0
 8001d42:	039b      	lsls	r3, r3, #14
 8001d44:	401a      	ands	r2, r3
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d4e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	23c0      	movs	r3, #192	; 0xc0
 8001d56:	029b      	lsls	r3, r3, #10
 8001d58:	401a      	ands	r2, r3
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d60:	2317      	movs	r3, #23
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d105      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6a:	4b23      	ldr	r3, [pc, #140]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d70:	4927      	ldr	r1, [pc, #156]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001d72:	400a      	ands	r2, r1
 8001d74:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d009      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d84:	220c      	movs	r2, #12
 8001d86:	4393      	bics	r3, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d90:	430a      	orrs	r2, r1
 8001d92:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d009      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dae:	430a      	orrs	r2, r1
 8001db0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2208      	movs	r2, #8
 8001db8:	4013      	ands	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2280      	movs	r2, #128	; 0x80
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d009      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	0019      	movs	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b006      	add	sp, #24
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	fffcffff 	.word	0xfffcffff
 8001e04:	fff7ffff 	.word	0xfff7ffff
 8001e08:	00001388 	.word	0x00001388
 8001e0c:	ffcfffff 	.word	0xffcfffff
 8001e10:	efffffff 	.word	0xefffffff
 8001e14:	fffff3ff 	.word	0xfffff3ff
 8001e18:	ffffcfff 	.word	0xffffcfff
 8001e1c:	fff3ffff 	.word	0xfff3ffff

08001e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e032      	b.n	8001e98 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2239      	movs	r2, #57	; 0x39
 8001e36:	5c9b      	ldrb	r3, [r3, r2]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d107      	bne.n	8001e4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2238      	movs	r2, #56	; 0x38
 8001e42:	2100      	movs	r1, #0
 8001e44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7fe fd3d 	bl	80008c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2239      	movs	r2, #57	; 0x39
 8001e52:	2102      	movs	r1, #2
 8001e54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	0019      	movs	r1, r3
 8001e60:	0010      	movs	r0, r2
 8001e62:	f000 fa7f 	bl	8002364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	223e      	movs	r2, #62	; 0x3e
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	223a      	movs	r2, #58	; 0x3a
 8001e72:	2101      	movs	r1, #1
 8001e74:	5499      	strb	r1, [r3, r2]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	223b      	movs	r2, #59	; 0x3b
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	5499      	strb	r1, [r3, r2]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	223c      	movs	r2, #60	; 0x3c
 8001e82:	2101      	movs	r1, #1
 8001e84:	5499      	strb	r1, [r3, r2]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	223d      	movs	r2, #61	; 0x3d
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2239      	movs	r2, #57	; 0x39
 8001e92:	2101      	movs	r1, #1
 8001e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2239      	movs	r2, #57	; 0x39
 8001eac:	5c9b      	ldrb	r3, [r3, r2]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d001      	beq.n	8001eb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e02e      	b.n	8001f16 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2239      	movs	r2, #57	; 0x39
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	05db      	lsls	r3, r3, #23
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d009      	beq.n	8001ee0 <HAL_TIM_Base_Start+0x40>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <HAL_TIM_Base_Start+0x80>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d004      	beq.n	8001ee0 <HAL_TIM_Base_Start+0x40>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <HAL_TIM_Base_Start+0x84>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d111      	bne.n	8001f04 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d010      	beq.n	8001f14 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f02:	e007      	b.n	8001f14 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	40010800 	.word	0x40010800
 8001f24:	40011400 	.word	0x40011400

08001f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2239      	movs	r2, #57	; 0x39
 8001f34:	5c9b      	ldrb	r3, [r3, r2]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d001      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e036      	b.n	8001fae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2239      	movs	r2, #57	; 0x39
 8001f44:	2102      	movs	r1, #2
 8001f46:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2101      	movs	r1, #1
 8001f54:	430a      	orrs	r2, r1
 8001f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	05db      	lsls	r3, r3, #23
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d009      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x50>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <HAL_TIM_Base_Start_IT+0x90>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x50>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <HAL_TIM_Base_Start_IT+0x94>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d010      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f9a:	e007      	b.n	8001fac <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b004      	add	sp, #16
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	40010800 	.word	0x40010800
 8001fbc:	40011400 	.word	0x40011400

08001fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d124      	bne.n	8002020 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d11d      	bne.n	8002020 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	4252      	negs	r2, r2
 8001fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d004      	beq.n	800200a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	0018      	movs	r0, r3
 8002004:	f000 f996 	bl	8002334 <HAL_TIM_IC_CaptureCallback>
 8002008:	e007      	b.n	800201a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 f989 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	0018      	movs	r0, r3
 8002016:	f000 f995 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2204      	movs	r2, #4
 8002028:	4013      	ands	r3, r2
 800202a:	2b04      	cmp	r3, #4
 800202c:	d125      	bne.n	800207a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2204      	movs	r2, #4
 8002036:	4013      	ands	r3, r2
 8002038:	2b04      	cmp	r3, #4
 800203a:	d11e      	bne.n	800207a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2205      	movs	r2, #5
 8002042:	4252      	negs	r2, r2
 8002044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	23c0      	movs	r3, #192	; 0xc0
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d004      	beq.n	8002064 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f000 f969 	bl	8002334 <HAL_TIM_IC_CaptureCallback>
 8002062:	e007      	b.n	8002074 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	0018      	movs	r0, r3
 8002068:	f000 f95c 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	0018      	movs	r0, r3
 8002070:	f000 f968 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	2208      	movs	r2, #8
 8002082:	4013      	ands	r3, r2
 8002084:	2b08      	cmp	r3, #8
 8002086:	d124      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2208      	movs	r2, #8
 8002090:	4013      	ands	r3, r2
 8002092:	2b08      	cmp	r3, #8
 8002094:	d11d      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2209      	movs	r2, #9
 800209c:	4252      	negs	r2, r2
 800209e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2204      	movs	r2, #4
 80020a4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	2203      	movs	r2, #3
 80020ae:	4013      	ands	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 f93d 	bl	8002334 <HAL_TIM_IC_CaptureCallback>
 80020ba:	e007      	b.n	80020cc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	0018      	movs	r0, r3
 80020c0:	f000 f930 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	0018      	movs	r0, r3
 80020c8:	f000 f93c 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2210      	movs	r2, #16
 80020da:	4013      	ands	r3, r2
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d125      	bne.n	800212c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2210      	movs	r2, #16
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d11e      	bne.n	800212c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2211      	movs	r2, #17
 80020f4:	4252      	negs	r2, r2
 80020f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2208      	movs	r2, #8
 80020fc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69da      	ldr	r2, [r3, #28]
 8002104:	23c0      	movs	r3, #192	; 0xc0
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4013      	ands	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	0018      	movs	r0, r3
 8002110:	f000 f910 	bl	8002334 <HAL_TIM_IC_CaptureCallback>
 8002114:	e007      	b.n	8002126 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	0018      	movs	r0, r3
 800211a:	f000 f903 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	0018      	movs	r0, r3
 8002122:	f000 f90f 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2201      	movs	r2, #1
 8002134:	4013      	ands	r3, r2
 8002136:	2b01      	cmp	r3, #1
 8002138:	d10f      	bne.n	800215a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	4013      	ands	r3, r2
 8002144:	2b01      	cmp	r3, #1
 8002146:	d108      	bne.n	800215a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2202      	movs	r2, #2
 800214e:	4252      	negs	r2, r2
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0018      	movs	r0, r3
 8002156:	f7fe fb79 	bl	800084c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2240      	movs	r2, #64	; 0x40
 8002162:	4013      	ands	r3, r2
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	d10f      	bne.n	8002188 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	4013      	ands	r3, r2
 8002172:	2b40      	cmp	r3, #64	; 0x40
 8002174:	d108      	bne.n	8002188 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2241      	movs	r2, #65	; 0x41
 800217c:	4252      	negs	r2, r2
 800217e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	0018      	movs	r0, r3
 8002184:	f000 f8e6 	bl	8002354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2238      	movs	r2, #56	; 0x38
 800219e:	5c9b      	ldrb	r3, [r3, r2]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_TIM_ConfigClockSource+0x18>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e0b7      	b.n	8002318 <HAL_TIM_ConfigClockSource+0x188>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2238      	movs	r2, #56	; 0x38
 80021ac:	2101      	movs	r1, #1
 80021ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2239      	movs	r2, #57	; 0x39
 80021b4:	2102      	movs	r1, #2
 80021b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2277      	movs	r2, #119	; 0x77
 80021c4:	4393      	bics	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a55      	ldr	r2, [pc, #340]	; (8002320 <HAL_TIM_ConfigClockSource+0x190>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	0192      	lsls	r2, r2, #6
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d040      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0xd6>
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	0192      	lsls	r2, r2, #6
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d900      	bls.n	80021ee <HAL_TIM_ConfigClockSource+0x5e>
 80021ec:	e088      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x170>
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	0152      	lsls	r2, r2, #5
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d100      	bne.n	80021f8 <HAL_TIM_ConfigClockSource+0x68>
 80021f6:	e085      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	0152      	lsls	r2, r2, #5
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d900      	bls.n	8002202 <HAL_TIM_ConfigClockSource+0x72>
 8002200:	e07e      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x170>
 8002202:	2b70      	cmp	r3, #112	; 0x70
 8002204:	d018      	beq.n	8002238 <HAL_TIM_ConfigClockSource+0xa8>
 8002206:	d900      	bls.n	800220a <HAL_TIM_ConfigClockSource+0x7a>
 8002208:	e07a      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x170>
 800220a:	2b60      	cmp	r3, #96	; 0x60
 800220c:	d04f      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x11e>
 800220e:	d900      	bls.n	8002212 <HAL_TIM_ConfigClockSource+0x82>
 8002210:	e076      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x170>
 8002212:	2b50      	cmp	r3, #80	; 0x50
 8002214:	d03b      	beq.n	800228e <HAL_TIM_ConfigClockSource+0xfe>
 8002216:	d900      	bls.n	800221a <HAL_TIM_ConfigClockSource+0x8a>
 8002218:	e072      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x170>
 800221a:	2b40      	cmp	r3, #64	; 0x40
 800221c:	d057      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x13e>
 800221e:	d900      	bls.n	8002222 <HAL_TIM_ConfigClockSource+0x92>
 8002220:	e06e      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x170>
 8002222:	2b30      	cmp	r3, #48	; 0x30
 8002224:	d063      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x15e>
 8002226:	d86b      	bhi.n	8002300 <HAL_TIM_ConfigClockSource+0x170>
 8002228:	2b20      	cmp	r3, #32
 800222a:	d060      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x15e>
 800222c:	d868      	bhi.n	8002300 <HAL_TIM_ConfigClockSource+0x170>
 800222e:	2b00      	cmp	r3, #0
 8002230:	d05d      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x15e>
 8002232:	2b10      	cmp	r3, #16
 8002234:	d05b      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002236:	e063      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f000 f95a 	bl	8002500 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2277      	movs	r2, #119	; 0x77
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	609a      	str	r2, [r3, #8]
      break;
 8002264:	e04f      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6899      	ldr	r1, [r3, #8]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f000 f943 	bl	8002500 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	01c9      	lsls	r1, r1, #7
 8002288:	430a      	orrs	r2, r1
 800228a:	609a      	str	r2, [r3, #8]
      break;
 800228c:	e03b      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	001a      	movs	r2, r3
 800229c:	f000 f8b6 	bl	800240c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2150      	movs	r1, #80	; 0x50
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 f910 	bl	80024cc <TIM_ITRx_SetConfig>
      break;
 80022ac:	e02b      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	001a      	movs	r2, r3
 80022bc:	f000 f8d4 	bl	8002468 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2160      	movs	r1, #96	; 0x60
 80022c6:	0018      	movs	r0, r3
 80022c8:	f000 f900 	bl	80024cc <TIM_ITRx_SetConfig>
      break;
 80022cc:	e01b      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6859      	ldr	r1, [r3, #4]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	001a      	movs	r2, r3
 80022dc:	f000 f896 	bl	800240c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2140      	movs	r1, #64	; 0x40
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 f8f0 	bl	80024cc <TIM_ITRx_SetConfig>
      break;
 80022ec:	e00b      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0019      	movs	r1, r3
 80022f8:	0010      	movs	r0, r2
 80022fa:	f000 f8e7 	bl	80024cc <TIM_ITRx_SetConfig>
        break;
 80022fe:	e002      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	e000      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002304:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2239      	movs	r2, #57	; 0x39
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2238      	movs	r2, #56	; 0x38
 8002312:	2100      	movs	r1, #0
 8002314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b004      	add	sp, #16
 800231e:	bd80      	pop	{r7, pc}
 8002320:	ffff00ff 	.word	0xffff00ff

08002324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800233c:	46c0      	nop			; (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800235c:	46c0      	nop			; (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b002      	add	sp, #8
 8002362:	bd80      	pop	{r7, pc}

08002364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	05db      	lsls	r3, r3, #23
 800237a:	429a      	cmp	r2, r3
 800237c:	d007      	beq.n	800238e <TIM_Base_SetConfig+0x2a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <TIM_Base_SetConfig+0x9c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d003      	beq.n	800238e <TIM_Base_SetConfig+0x2a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1e      	ldr	r2, [pc, #120]	; (8002404 <TIM_Base_SetConfig+0xa0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d108      	bne.n	80023a0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2270      	movs	r2, #112	; 0x70
 8002392:	4393      	bics	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	05db      	lsls	r3, r3, #23
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d007      	beq.n	80023ba <TIM_Base_SetConfig+0x56>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <TIM_Base_SetConfig+0x9c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d003      	beq.n	80023ba <TIM_Base_SetConfig+0x56>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a13      	ldr	r2, [pc, #76]	; (8002404 <TIM_Base_SetConfig+0xa0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d108      	bne.n	80023cc <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a12      	ldr	r2, [pc, #72]	; (8002408 <TIM_Base_SetConfig+0xa4>)
 80023be:	4013      	ands	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	4393      	bics	r3, r2
 80023d2:	001a      	movs	r2, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	615a      	str	r2, [r3, #20]
}
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b004      	add	sp, #16
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40010800 	.word	0x40010800
 8002404:	40011400 	.word	0x40011400
 8002408:	fffffcff 	.word	0xfffffcff

0800240c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	2201      	movs	r2, #1
 8002424:	4393      	bics	r3, r2
 8002426:	001a      	movs	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	22f0      	movs	r2, #240	; 0xf0
 8002436:	4393      	bics	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	220a      	movs	r2, #10
 8002448:	4393      	bics	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	621a      	str	r2, [r3, #32]
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	b006      	add	sp, #24
 8002466:	bd80      	pop	{r7, pc}

08002468 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	2210      	movs	r2, #16
 800247a:	4393      	bics	r3, r2
 800247c:	001a      	movs	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <TIM_TI2_ConfigInputStage+0x60>)
 8002492:	4013      	ands	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	031b      	lsls	r3, r3, #12
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	22a0      	movs	r2, #160	; 0xa0
 80024a4:	4393      	bics	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	621a      	str	r2, [r3, #32]
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b006      	add	sp, #24
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	ffff0fff 	.word	0xffff0fff

080024cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2270      	movs	r2, #112	; 0x70
 80024e0:	4393      	bics	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	2207      	movs	r2, #7
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	609a      	str	r2, [r3, #8]
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b004      	add	sp, #16
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	4a09      	ldr	r2, [pc, #36]	; (800253c <TIM_ETR_SetConfig+0x3c>)
 8002518:	4013      	ands	r3, r2
 800251a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	021a      	lsls	r2, r3, #8
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	431a      	orrs	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4313      	orrs	r3, r2
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b006      	add	sp, #24
 800253a:	bd80      	pop	{r7, pc}
 800253c:	ffff00ff 	.word	0xffff00ff

08002540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2238      	movs	r2, #56	; 0x38
 800254e:	5c9b      	ldrb	r3, [r3, r2]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002554:	2302      	movs	r3, #2
 8002556:	e042      	b.n	80025de <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2238      	movs	r2, #56	; 0x38
 800255c:	2101      	movs	r1, #1
 800255e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2239      	movs	r2, #57	; 0x39
 8002564:	2102      	movs	r1, #2
 8002566:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2270      	movs	r2, #112	; 0x70
 800257c:	4393      	bics	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	05db      	lsls	r3, r3, #23
 800259a:	429a      	cmp	r2, r3
 800259c:	d009      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d10c      	bne.n	80025cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	4393      	bics	r3, r2
 80025b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2239      	movs	r2, #57	; 0x39
 80025d0:	2101      	movs	r1, #1
 80025d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2238      	movs	r2, #56	; 0x38
 80025d8:	2100      	movs	r1, #0
 80025da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b004      	add	sp, #16
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	40010800 	.word	0x40010800
 80025ec:	40011400 	.word	0x40011400

080025f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e044      	b.n	800268c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002606:	2b00      	cmp	r3, #0
 8002608:	d107      	bne.n	800261a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2274      	movs	r2, #116	; 0x74
 800260e:	2100      	movs	r1, #0
 8002610:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	0018      	movs	r0, r3
 8002616:	f7fe f98b 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2224      	movs	r2, #36	; 0x24
 800261e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2101      	movs	r1, #1
 800262c:	438a      	bics	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	0018      	movs	r0, r3
 8002634:	f000 f8d8 	bl	80027e8 <UART_SetConfig>
 8002638:	0003      	movs	r3, r0
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e024      	b.n	800268c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fb2d 	bl	8002cac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	490d      	ldr	r1, [pc, #52]	; (8002694 <HAL_UART_Init+0xa4>)
 800265e:	400a      	ands	r2, r1
 8002660:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	212a      	movs	r1, #42	; 0x2a
 800266e:	438a      	bics	r2, r1
 8002670:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	0018      	movs	r0, r3
 8002686:	f000 fbc5 	bl	8002e14 <UART_CheckIdleState>
 800268a:	0003      	movs	r3, r0
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b002      	add	sp, #8
 8002692:	bd80      	pop	{r7, pc}
 8002694:	ffffb7ff 	.word	0xffffb7ff

08002698 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	1dbb      	adds	r3, r7, #6
 80026a6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d000      	beq.n	80026b2 <HAL_UART_Transmit+0x1a>
 80026b0:	e095      	b.n	80027de <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_UART_Transmit+0x28>
 80026b8:	1dbb      	adds	r3, r7, #6
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e08d      	b.n	80027e0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	015b      	lsls	r3, r3, #5
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d109      	bne.n	80026e4 <HAL_UART_Transmit+0x4c>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2201      	movs	r2, #1
 80026dc:	4013      	ands	r3, r2
 80026de:	d001      	beq.n	80026e4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e07d      	b.n	80027e0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2274      	movs	r2, #116	; 0x74
 80026e8:	5c9b      	ldrb	r3, [r3, r2]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_UART_Transmit+0x5a>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e076      	b.n	80027e0 <HAL_UART_Transmit+0x148>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2274      	movs	r2, #116	; 0x74
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	2100      	movs	r1, #0
 8002700:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2221      	movs	r2, #33	; 0x21
 8002706:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002708:	f7fe fa42 	bl	8000b90 <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1dba      	adds	r2, r7, #6
 8002714:	2150      	movs	r1, #80	; 0x50
 8002716:	8812      	ldrh	r2, [r2, #0]
 8002718:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1dba      	adds	r2, r7, #6
 800271e:	2152      	movs	r1, #82	; 0x52
 8002720:	8812      	ldrh	r2, [r2, #0]
 8002722:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	015b      	lsls	r3, r3, #5
 800272c:	429a      	cmp	r2, r3
 800272e:	d108      	bne.n	8002742 <HAL_UART_Transmit+0xaa>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d104      	bne.n	8002742 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	e003      	b.n	800274a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2274      	movs	r2, #116	; 0x74
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002752:	e02c      	b.n	80027ae <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	0013      	movs	r3, r2
 800275e:	2200      	movs	r2, #0
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	f000 fb9f 	bl	8002ea4 <UART_WaitOnFlagUntilTimeout>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d001      	beq.n	800276e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e038      	b.n	80027e0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10b      	bne.n	800278c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	001a      	movs	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	05d2      	lsls	r2, r2, #23
 8002780:	0dd2      	lsrs	r2, r2, #23
 8002782:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	3302      	adds	r3, #2
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	e007      	b.n	800279c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2252      	movs	r2, #82	; 0x52
 80027a0:	5a9b      	ldrh	r3, [r3, r2]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b299      	uxth	r1, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2252      	movs	r2, #82	; 0x52
 80027ac:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2252      	movs	r2, #82	; 0x52
 80027b2:	5a9b      	ldrh	r3, [r3, r2]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1cc      	bne.n	8002754 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	0013      	movs	r3, r2
 80027c4:	2200      	movs	r2, #0
 80027c6:	2140      	movs	r1, #64	; 0x40
 80027c8:	f000 fb6c 	bl	8002ea4 <UART_WaitOnFlagUntilTimeout>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e005      	b.n	80027e0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
  }
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b008      	add	sp, #32
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e8:	b5b0      	push	{r4, r5, r7, lr}
 80027ea:	b08e      	sub	sp, #56	; 0x38
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027f0:	231a      	movs	r3, #26
 80027f2:	2218      	movs	r2, #24
 80027f4:	4694      	mov	ip, r2
 80027f6:	44bc      	add	ip, r7
 80027f8:	4463      	add	r3, ip
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	431a      	orrs	r2, r3
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	431a      	orrs	r2, r3
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4313      	orrs	r3, r2
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4abc      	ldr	r2, [pc, #752]	; (8002b10 <UART_SetConfig+0x328>)
 800281e:	4013      	ands	r3, r2
 8002820:	0019      	movs	r1, r3
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4ab8      	ldr	r2, [pc, #736]	; (8002b14 <UART_SetConfig+0x32c>)
 8002834:	4013      	ands	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4ab2      	ldr	r2, [pc, #712]	; (8002b18 <UART_SetConfig+0x330>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800285a:	4313      	orrs	r3, r2
 800285c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4aad      	ldr	r2, [pc, #692]	; (8002b1c <UART_SetConfig+0x334>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4aa9      	ldr	r2, [pc, #676]	; (8002b20 <UART_SetConfig+0x338>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d136      	bne.n	80028ec <UART_SetConfig+0x104>
 800287e:	4ba9      	ldr	r3, [pc, #676]	; (8002b24 <UART_SetConfig+0x33c>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	220c      	movs	r2, #12
 8002884:	4013      	ands	r3, r2
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d020      	beq.n	80028cc <UART_SetConfig+0xe4>
 800288a:	d827      	bhi.n	80028dc <UART_SetConfig+0xf4>
 800288c:	2b08      	cmp	r3, #8
 800288e:	d00d      	beq.n	80028ac <UART_SetConfig+0xc4>
 8002890:	d824      	bhi.n	80028dc <UART_SetConfig+0xf4>
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <UART_SetConfig+0xb4>
 8002896:	2b04      	cmp	r3, #4
 8002898:	d010      	beq.n	80028bc <UART_SetConfig+0xd4>
 800289a:	e01f      	b.n	80028dc <UART_SetConfig+0xf4>
 800289c:	231b      	movs	r3, #27
 800289e:	2218      	movs	r2, #24
 80028a0:	4694      	mov	ip, r2
 80028a2:	44bc      	add	ip, r7
 80028a4:	4463      	add	r3, ip
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	e06f      	b.n	800298c <UART_SetConfig+0x1a4>
 80028ac:	231b      	movs	r3, #27
 80028ae:	2218      	movs	r2, #24
 80028b0:	4694      	mov	ip, r2
 80028b2:	44bc      	add	ip, r7
 80028b4:	4463      	add	r3, ip
 80028b6:	2202      	movs	r2, #2
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	e067      	b.n	800298c <UART_SetConfig+0x1a4>
 80028bc:	231b      	movs	r3, #27
 80028be:	2218      	movs	r2, #24
 80028c0:	4694      	mov	ip, r2
 80028c2:	44bc      	add	ip, r7
 80028c4:	4463      	add	r3, ip
 80028c6:	2204      	movs	r2, #4
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e05f      	b.n	800298c <UART_SetConfig+0x1a4>
 80028cc:	231b      	movs	r3, #27
 80028ce:	2218      	movs	r2, #24
 80028d0:	4694      	mov	ip, r2
 80028d2:	44bc      	add	ip, r7
 80028d4:	4463      	add	r3, ip
 80028d6:	2208      	movs	r2, #8
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e057      	b.n	800298c <UART_SetConfig+0x1a4>
 80028dc:	231b      	movs	r3, #27
 80028de:	2218      	movs	r2, #24
 80028e0:	4694      	mov	ip, r2
 80028e2:	44bc      	add	ip, r7
 80028e4:	4463      	add	r3, ip
 80028e6:	2210      	movs	r2, #16
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e04f      	b.n	800298c <UART_SetConfig+0x1a4>
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a89      	ldr	r2, [pc, #548]	; (8002b18 <UART_SetConfig+0x330>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d143      	bne.n	800297e <UART_SetConfig+0x196>
 80028f6:	4b8b      	ldr	r3, [pc, #556]	; (8002b24 <UART_SetConfig+0x33c>)
 80028f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028fa:	23c0      	movs	r3, #192	; 0xc0
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	4013      	ands	r3, r2
 8002900:	22c0      	movs	r2, #192	; 0xc0
 8002902:	0112      	lsls	r2, r2, #4
 8002904:	4293      	cmp	r3, r2
 8002906:	d02a      	beq.n	800295e <UART_SetConfig+0x176>
 8002908:	22c0      	movs	r2, #192	; 0xc0
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	4293      	cmp	r3, r2
 800290e:	d82e      	bhi.n	800296e <UART_SetConfig+0x186>
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	4293      	cmp	r3, r2
 8002916:	d012      	beq.n	800293e <UART_SetConfig+0x156>
 8002918:	2280      	movs	r2, #128	; 0x80
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	4293      	cmp	r3, r2
 800291e:	d826      	bhi.n	800296e <UART_SetConfig+0x186>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <UART_SetConfig+0x146>
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	00d2      	lsls	r2, r2, #3
 8002928:	4293      	cmp	r3, r2
 800292a:	d010      	beq.n	800294e <UART_SetConfig+0x166>
 800292c:	e01f      	b.n	800296e <UART_SetConfig+0x186>
 800292e:	231b      	movs	r3, #27
 8002930:	2218      	movs	r2, #24
 8002932:	4694      	mov	ip, r2
 8002934:	44bc      	add	ip, r7
 8002936:	4463      	add	r3, ip
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	e026      	b.n	800298c <UART_SetConfig+0x1a4>
 800293e:	231b      	movs	r3, #27
 8002940:	2218      	movs	r2, #24
 8002942:	4694      	mov	ip, r2
 8002944:	44bc      	add	ip, r7
 8002946:	4463      	add	r3, ip
 8002948:	2202      	movs	r2, #2
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e01e      	b.n	800298c <UART_SetConfig+0x1a4>
 800294e:	231b      	movs	r3, #27
 8002950:	2218      	movs	r2, #24
 8002952:	4694      	mov	ip, r2
 8002954:	44bc      	add	ip, r7
 8002956:	4463      	add	r3, ip
 8002958:	2204      	movs	r2, #4
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e016      	b.n	800298c <UART_SetConfig+0x1a4>
 800295e:	231b      	movs	r3, #27
 8002960:	2218      	movs	r2, #24
 8002962:	4694      	mov	ip, r2
 8002964:	44bc      	add	ip, r7
 8002966:	4463      	add	r3, ip
 8002968:	2208      	movs	r2, #8
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e00e      	b.n	800298c <UART_SetConfig+0x1a4>
 800296e:	231b      	movs	r3, #27
 8002970:	2218      	movs	r2, #24
 8002972:	4694      	mov	ip, r2
 8002974:	44bc      	add	ip, r7
 8002976:	4463      	add	r3, ip
 8002978:	2210      	movs	r2, #16
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	e006      	b.n	800298c <UART_SetConfig+0x1a4>
 800297e:	231b      	movs	r3, #27
 8002980:	2218      	movs	r2, #24
 8002982:	4694      	mov	ip, r2
 8002984:	44bc      	add	ip, r7
 8002986:	4463      	add	r3, ip
 8002988:	2210      	movs	r2, #16
 800298a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a61      	ldr	r2, [pc, #388]	; (8002b18 <UART_SetConfig+0x330>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d000      	beq.n	8002998 <UART_SetConfig+0x1b0>
 8002996:	e088      	b.n	8002aaa <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002998:	231b      	movs	r3, #27
 800299a:	2218      	movs	r2, #24
 800299c:	4694      	mov	ip, r2
 800299e:	44bc      	add	ip, r7
 80029a0:	4463      	add	r3, ip
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d01d      	beq.n	80029e4 <UART_SetConfig+0x1fc>
 80029a8:	dc20      	bgt.n	80029ec <UART_SetConfig+0x204>
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d015      	beq.n	80029da <UART_SetConfig+0x1f2>
 80029ae:	dc1d      	bgt.n	80029ec <UART_SetConfig+0x204>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <UART_SetConfig+0x1d2>
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d005      	beq.n	80029c4 <UART_SetConfig+0x1dc>
 80029b8:	e018      	b.n	80029ec <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ba:	f7ff f8df 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 80029be:	0003      	movs	r3, r0
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029c2:	e01d      	b.n	8002a00 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029c4:	4b57      	ldr	r3, [pc, #348]	; (8002b24 <UART_SetConfig+0x33c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2210      	movs	r2, #16
 80029ca:	4013      	ands	r3, r2
 80029cc:	d002      	beq.n	80029d4 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029ce:	4b56      	ldr	r3, [pc, #344]	; (8002b28 <UART_SetConfig+0x340>)
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029d2:	e015      	b.n	8002a00 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80029d4:	4b55      	ldr	r3, [pc, #340]	; (8002b2c <UART_SetConfig+0x344>)
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029d8:	e012      	b.n	8002a00 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029da:	f7ff f81f 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80029de:	0003      	movs	r3, r0
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029e2:	e00d      	b.n	8002a00 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029ea:	e009      	b.n	8002a00 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029f0:	231a      	movs	r3, #26
 80029f2:	2218      	movs	r2, #24
 80029f4:	4694      	mov	ip, r2
 80029f6:	44bc      	add	ip, r7
 80029f8:	4463      	add	r3, ip
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
        break;
 80029fe:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d100      	bne.n	8002a08 <UART_SetConfig+0x220>
 8002a06:	e139      	b.n	8002c7c <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	189b      	adds	r3, r3, r2
 8002a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d305      	bcc.n	8002a24 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d907      	bls.n	8002a34 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8002a24:	231a      	movs	r3, #26
 8002a26:	2218      	movs	r2, #24
 8002a28:	4694      	mov	ip, r2
 8002a2a:	44bc      	add	ip, r7
 8002a2c:	4463      	add	r3, ip
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e123      	b.n	8002c7c <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	6939      	ldr	r1, [r7, #16]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	000b      	movs	r3, r1
 8002a42:	0e1b      	lsrs	r3, r3, #24
 8002a44:	0010      	movs	r0, r2
 8002a46:	0205      	lsls	r5, r0, #8
 8002a48:	431d      	orrs	r5, r3
 8002a4a:	000b      	movs	r3, r1
 8002a4c:	021c      	lsls	r4, r3, #8
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68b8      	ldr	r0, [r7, #8]
 8002a5c:	68f9      	ldr	r1, [r7, #12]
 8002a5e:	1900      	adds	r0, r0, r4
 8002a60:	4169      	adcs	r1, r5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f7fd fbde 	bl	8000230 <__aeabi_uldivmod>
 8002a74:	0002      	movs	r2, r0
 8002a76:	000b      	movs	r3, r1
 8002a78:	0013      	movs	r3, r2
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a7e:	23c0      	movs	r3, #192	; 0xc0
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d309      	bcc.n	8002a9a <UART_SetConfig+0x2b2>
 8002a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	035b      	lsls	r3, r3, #13
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d204      	bcs.n	8002a9a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a96:	60da      	str	r2, [r3, #12]
 8002a98:	e0f0      	b.n	8002c7c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002a9a:	231a      	movs	r3, #26
 8002a9c:	2218      	movs	r2, #24
 8002a9e:	4694      	mov	ip, r2
 8002aa0:	44bc      	add	ip, r7
 8002aa2:	4463      	add	r3, ip
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e0e8      	b.n	8002c7c <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d000      	beq.n	8002ab8 <UART_SetConfig+0x2d0>
 8002ab6:	e087      	b.n	8002bc8 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8002ab8:	231b      	movs	r3, #27
 8002aba:	2218      	movs	r2, #24
 8002abc:	4694      	mov	ip, r2
 8002abe:	44bc      	add	ip, r7
 8002ac0:	4463      	add	r3, ip
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d835      	bhi.n	8002b34 <UART_SetConfig+0x34c>
 8002ac8:	009a      	lsls	r2, r3, #2
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <UART_SetConfig+0x348>)
 8002acc:	18d3      	adds	r3, r2, r3
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad2:	f7ff f853 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ada:	e035      	b.n	8002b48 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002adc:	f7ff f864 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ae4:	e030      	b.n	8002b48 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <UART_SetConfig+0x33c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2210      	movs	r2, #16
 8002aec:	4013      	ands	r3, r2
 8002aee:	d002      	beq.n	8002af6 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <UART_SetConfig+0x340>)
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002af4:	e028      	b.n	8002b48 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <UART_SetConfig+0x344>)
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002afa:	e025      	b.n	8002b48 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002afc:	f7fe ff8e 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8002b00:	0003      	movs	r3, r0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b04:	e020      	b.n	8002b48 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b0c:	e01c      	b.n	8002b48 <UART_SetConfig+0x360>
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	efff69f3 	.word	0xefff69f3
 8002b14:	ffffcfff 	.word	0xffffcfff
 8002b18:	40004800 	.word	0x40004800
 8002b1c:	fffff4ff 	.word	0xfffff4ff
 8002b20:	40004400 	.word	0x40004400
 8002b24:	40021000 	.word	0x40021000
 8002b28:	003d0900 	.word	0x003d0900
 8002b2c:	00f42400 	.word	0x00f42400
 8002b30:	08003118 	.word	0x08003118
      default:
        pclk = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b38:	231a      	movs	r3, #26
 8002b3a:	2218      	movs	r2, #24
 8002b3c:	4694      	mov	ip, r2
 8002b3e:	44bc      	add	ip, r7
 8002b40:	4463      	add	r3, ip
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
        break;
 8002b46:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d100      	bne.n	8002b50 <UART_SetConfig+0x368>
 8002b4e:	e095      	b.n	8002c7c <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	005a      	lsls	r2, r3, #1
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	18d2      	adds	r2, r2, r3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	0019      	movs	r1, r3
 8002b62:	0010      	movs	r0, r2
 8002b64:	f7fd fad8 	bl	8000118 <__udivsi3>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	2b0f      	cmp	r3, #15
 8002b72:	d921      	bls.n	8002bb8 <UART_SetConfig+0x3d0>
 8002b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	025b      	lsls	r3, r3, #9
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d21c      	bcs.n	8002bb8 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	200e      	movs	r0, #14
 8002b84:	2418      	movs	r4, #24
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	181b      	adds	r3, r3, r0
 8002b8a:	210f      	movs	r1, #15
 8002b8c:	438a      	bics	r2, r1
 8002b8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2207      	movs	r2, #7
 8002b98:	4013      	ands	r3, r2
 8002b9a:	b299      	uxth	r1, r3
 8002b9c:	193b      	adds	r3, r7, r4
 8002b9e:	181b      	adds	r3, r3, r0
 8002ba0:	193a      	adds	r2, r7, r4
 8002ba2:	1812      	adds	r2, r2, r0
 8002ba4:	8812      	ldrh	r2, [r2, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	193a      	adds	r2, r7, r4
 8002bb0:	1812      	adds	r2, r2, r0
 8002bb2:	8812      	ldrh	r2, [r2, #0]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	e061      	b.n	8002c7c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002bb8:	231a      	movs	r3, #26
 8002bba:	2218      	movs	r2, #24
 8002bbc:	4694      	mov	ip, r2
 8002bbe:	44bc      	add	ip, r7
 8002bc0:	4463      	add	r3, ip
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e059      	b.n	8002c7c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bc8:	231b      	movs	r3, #27
 8002bca:	2218      	movs	r2, #24
 8002bcc:	4694      	mov	ip, r2
 8002bce:	44bc      	add	ip, r7
 8002bd0:	4463      	add	r3, ip
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d822      	bhi.n	8002c1e <UART_SetConfig+0x436>
 8002bd8:	009a      	lsls	r2, r3, #2
 8002bda:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <UART_SetConfig+0x4b4>)
 8002bdc:	18d3      	adds	r3, r2, r3
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be2:	f7fe ffcb 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 8002be6:	0003      	movs	r3, r0
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bea:	e022      	b.n	8002c32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bec:	f7fe ffdc 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bf4:	e01d      	b.n	8002c32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <UART_SetConfig+0x4b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d002      	beq.n	8002c06 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c00:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <UART_SetConfig+0x4bc>)
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c04:	e015      	b.n	8002c32 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8002c06:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <UART_SetConfig+0x4c0>)
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c0a:	e012      	b.n	8002c32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c0c:	f7fe ff06 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8002c10:	0003      	movs	r3, r0
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c14:	e00d      	b.n	8002c32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c1c:	e009      	b.n	8002c32 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c22:	231a      	movs	r3, #26
 8002c24:	2218      	movs	r2, #24
 8002c26:	4694      	mov	ip, r2
 8002c28:	44bc      	add	ip, r7
 8002c2a:	4463      	add	r3, ip
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
        break;
 8002c30:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d021      	beq.n	8002c7c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	085a      	lsrs	r2, r3, #1
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	18d2      	adds	r2, r2, r3
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	0019      	movs	r1, r3
 8002c48:	0010      	movs	r0, r2
 8002c4a:	f7fd fa65 	bl	8000118 <__udivsi3>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	2b0f      	cmp	r3, #15
 8002c58:	d909      	bls.n	8002c6e <UART_SetConfig+0x486>
 8002c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	025b      	lsls	r3, r3, #9
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d204      	bcs.n	8002c6e <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	e006      	b.n	8002c7c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002c6e:	231a      	movs	r3, #26
 8002c70:	2218      	movs	r2, #24
 8002c72:	4694      	mov	ip, r2
 8002c74:	44bc      	add	ip, r7
 8002c76:	4463      	add	r3, ip
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	2200      	movs	r2, #0
 8002c86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c88:	231a      	movs	r3, #26
 8002c8a:	2218      	movs	r2, #24
 8002c8c:	4694      	mov	ip, r2
 8002c8e:	44bc      	add	ip, r7
 8002c90:	4463      	add	r3, ip
 8002c92:	781b      	ldrb	r3, [r3, #0]
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b00e      	add	sp, #56	; 0x38
 8002c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c9c:	0800313c 	.word	0x0800313c
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	003d0900 	.word	0x003d0900
 8002ca8:	00f42400 	.word	0x00f42400

08002cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d00b      	beq.n	8002cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a4a      	ldr	r2, [pc, #296]	; (8002df0 <UART_AdvFeatureConfig+0x144>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	2202      	movs	r2, #2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d00b      	beq.n	8002cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4a43      	ldr	r2, [pc, #268]	; (8002df4 <UART_AdvFeatureConfig+0x148>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	0019      	movs	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d00b      	beq.n	8002d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a3b      	ldr	r2, [pc, #236]	; (8002df8 <UART_AdvFeatureConfig+0x14c>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	2208      	movs	r2, #8
 8002d20:	4013      	ands	r3, r2
 8002d22:	d00b      	beq.n	8002d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4a34      	ldr	r2, [pc, #208]	; (8002dfc <UART_AdvFeatureConfig+0x150>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	0019      	movs	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	2210      	movs	r2, #16
 8002d42:	4013      	ands	r3, r2
 8002d44:	d00b      	beq.n	8002d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a2c      	ldr	r2, [pc, #176]	; (8002e00 <UART_AdvFeatureConfig+0x154>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	0019      	movs	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2220      	movs	r2, #32
 8002d64:	4013      	ands	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <UART_AdvFeatureConfig+0x158>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	0019      	movs	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	2240      	movs	r2, #64	; 0x40
 8002d86:	4013      	ands	r3, r2
 8002d88:	d01d      	beq.n	8002dc6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <UART_AdvFeatureConfig+0x15c>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	0019      	movs	r1, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	035b      	lsls	r3, r3, #13
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d10b      	bne.n	8002dc6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <UART_AdvFeatureConfig+0x160>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	0019      	movs	r1, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d00b      	beq.n	8002de8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <UART_AdvFeatureConfig+0x164>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	0019      	movs	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]
  }
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	fffdffff 	.word	0xfffdffff
 8002df4:	fffeffff 	.word	0xfffeffff
 8002df8:	fffbffff 	.word	0xfffbffff
 8002dfc:	ffff7fff 	.word	0xffff7fff
 8002e00:	ffffefff 	.word	0xffffefff
 8002e04:	ffffdfff 	.word	0xffffdfff
 8002e08:	ffefffff 	.word	0xffefffff
 8002e0c:	ff9fffff 	.word	0xff9fffff
 8002e10:	fff7ffff 	.word	0xfff7ffff

08002e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	2100      	movs	r1, #0
 8002e22:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e24:	f7fd feb4 	bl	8000b90 <HAL_GetTick>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2208      	movs	r2, #8
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d10c      	bne.n	8002e54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	0391      	lsls	r1, r2, #14
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4a17      	ldr	r2, [pc, #92]	; (8002ea0 <UART_CheckIdleState+0x8c>)
 8002e44:	9200      	str	r2, [sp, #0]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f000 f82c 	bl	8002ea4 <UART_WaitOnFlagUntilTimeout>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d001      	beq.n	8002e54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e021      	b.n	8002e98 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d10c      	bne.n	8002e7c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2280      	movs	r2, #128	; 0x80
 8002e66:	03d1      	lsls	r1, r2, #15
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <UART_CheckIdleState+0x8c>)
 8002e6c:	9200      	str	r2, [sp, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f000 f818 	bl	8002ea4 <UART_WaitOnFlagUntilTimeout>
 8002e74:	1e03      	subs	r3, r0, #0
 8002e76:	d001      	beq.n	8002e7c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e00d      	b.n	8002e98 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2274      	movs	r2, #116	; 0x74
 8002e92:	2100      	movs	r1, #0
 8002e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b004      	add	sp, #16
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	01ffffff 	.word	0x01ffffff

08002ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	1dfb      	adds	r3, r7, #7
 8002eb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb4:	e05e      	b.n	8002f74 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	d05b      	beq.n	8002f74 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebc:	f7fd fe68 	bl	8000b90 <HAL_GetTick>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d302      	bcc.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d11b      	bne.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	492f      	ldr	r1, [pc, #188]	; (8002f9c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002ede:	400a      	ands	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2101      	movs	r1, #1
 8002eee:	438a      	bics	r2, r1
 8002ef0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2274      	movs	r2, #116	; 0x74
 8002f02:	2100      	movs	r1, #0
 8002f04:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e044      	b.n	8002f94 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2204      	movs	r2, #4
 8002f12:	4013      	ands	r3, r2
 8002f14:	d02e      	beq.n	8002f74 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	401a      	ands	r2, r3
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d124      	bne.n	8002f74 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4917      	ldr	r1, [pc, #92]	; (8002f9c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002f40:	400a      	ands	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2101      	movs	r1, #1
 8002f50:	438a      	bics	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2280      	movs	r2, #128	; 0x80
 8002f64:	2120      	movs	r1, #32
 8002f66:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2274      	movs	r2, #116	; 0x74
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e00f      	b.n	8002f94 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	425a      	negs	r2, r3
 8002f84:	4153      	adcs	r3, r2
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	001a      	movs	r2, r3
 8002f8a:	1dfb      	adds	r3, r7, #7
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d091      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b004      	add	sp, #16
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	fffffe5f 	.word	0xfffffe5f

08002fa0 <__libc_init_array>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	4d0c      	ldr	r5, [pc, #48]	; (8002fd8 <__libc_init_array+0x38>)
 8002fa6:	4c0d      	ldr	r4, [pc, #52]	; (8002fdc <__libc_init_array+0x3c>)
 8002fa8:	1b64      	subs	r4, r4, r5
 8002faa:	10a4      	asrs	r4, r4, #2
 8002fac:	42a6      	cmp	r6, r4
 8002fae:	d109      	bne.n	8002fc4 <__libc_init_array+0x24>
 8002fb0:	2600      	movs	r6, #0
 8002fb2:	f000 f821 	bl	8002ff8 <_init>
 8002fb6:	4d0a      	ldr	r5, [pc, #40]	; (8002fe0 <__libc_init_array+0x40>)
 8002fb8:	4c0a      	ldr	r4, [pc, #40]	; (8002fe4 <__libc_init_array+0x44>)
 8002fba:	1b64      	subs	r4, r4, r5
 8002fbc:	10a4      	asrs	r4, r4, #2
 8002fbe:	42a6      	cmp	r6, r4
 8002fc0:	d105      	bne.n	8002fce <__libc_init_array+0x2e>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	00b3      	lsls	r3, r6, #2
 8002fc6:	58eb      	ldr	r3, [r5, r3]
 8002fc8:	4798      	blx	r3
 8002fca:	3601      	adds	r6, #1
 8002fcc:	e7ee      	b.n	8002fac <__libc_init_array+0xc>
 8002fce:	00b3      	lsls	r3, r6, #2
 8002fd0:	58eb      	ldr	r3, [r5, r3]
 8002fd2:	4798      	blx	r3
 8002fd4:	3601      	adds	r6, #1
 8002fd6:	e7f2      	b.n	8002fbe <__libc_init_array+0x1e>
 8002fd8:	08003168 	.word	0x08003168
 8002fdc:	08003168 	.word	0x08003168
 8002fe0:	08003168 	.word	0x08003168
 8002fe4:	0800316c 	.word	0x0800316c

08002fe8 <memset>:
 8002fe8:	0003      	movs	r3, r0
 8002fea:	1882      	adds	r2, r0, r2
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <memset+0xa>
 8002ff0:	4770      	bx	lr
 8002ff2:	7019      	strb	r1, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	e7f9      	b.n	8002fec <memset+0x4>

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
