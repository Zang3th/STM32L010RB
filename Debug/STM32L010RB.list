
STM32L010RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a94  08004a94  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a9c  08004a9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  08004b14  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08004b14  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107d8  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241a  00000000  00000000  00030870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00033898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000130f8  00000000  00000000  000343c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc2c  00000000  00000000  000474c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007020a  00000000  00000000  000550ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c52f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e4c  00000000  00000000  000c534c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004768 	.word	0x08004768

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004768 	.word	0x08004768

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <DHT22_PinAsOutput>:
#define DATA GPIOA, GPIO_PIN_6

// ----- Private functions ----- 

static void DHT22_PinAsOutput()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	0018      	movs	r0, r3
 80004ca:	2314      	movs	r3, #20
 80004cc:	001a      	movs	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f003 fd1a 	bl	8003f08 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2240      	movs	r2, #64	; 0x40
 80004d8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;	
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2201      	movs	r2, #1
 80004de:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;	
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2203      	movs	r2, #3
 80004ea:	60da      	str	r2, [r3, #12]
	
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	1d3a      	adds	r2, r7, #4
 80004ee:	23a0      	movs	r3, #160	; 0xa0
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fb83 	bl	8001c00 <HAL_GPIO_Init>
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b006      	add	sp, #24
 8000500:	bd80      	pop	{r7, pc}

08000502 <DHT22_PinAsInput>:

static void DHT22_PinAsInput()
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b086      	sub	sp, #24
 8000506:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	0018      	movs	r0, r3
 800050c:	2314      	movs	r3, #20
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f003 fcf9 	bl	8003f08 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_6;	
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2240      	movs	r2, #64	; 0x40
 800051a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2203      	movs	r2, #3
 800052c:	60da      	str	r2, [r3, #12]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052e:	1d3a      	adds	r2, r7, #4
 8000530:	23a0      	movs	r3, #160	; 0xa0
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f001 fb62 	bl	8001c00 <HAL_GPIO_Init>
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b006      	add	sp, #24
 8000542:	bd80      	pop	{r7, pc}

08000544 <DHT22_PrintByteBuffer>:

static void DHT22_PrintByteBuffer(uint8_t* buffer, const char* name)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	UT_printf("%s: ", name);
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <DHT22_PrintByteBuffer+0x5c>)
 8000552:	0011      	movs	r1, r2
 8000554:	0018      	movs	r0, r3
 8000556:	f001 f95b 	bl	8001810 <UT_printf>
	for(uint8_t j = 0; j < 8; j++)
 800055a:	230f      	movs	r3, #15
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	e010      	b.n	8000586 <DHT22_PrintByteBuffer+0x42>
	{
		UT_printf("%d", buffer[j]);
 8000564:	240f      	movs	r4, #15
 8000566:	193b      	adds	r3, r7, r4
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	18d3      	adds	r3, r2, r3
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	001a      	movs	r2, r3
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <DHT22_PrintByteBuffer+0x60>)
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f001 f94a 	bl	8001810 <UT_printf>
	for(uint8_t j = 0; j < 8; j++)
 800057c:	193b      	adds	r3, r7, r4
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	193b      	adds	r3, r7, r4
 8000582:	3201      	adds	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	230f      	movs	r3, #15
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b07      	cmp	r3, #7
 800058e:	d9e9      	bls.n	8000564 <DHT22_PrintByteBuffer+0x20>
	}

	UT_printf("\n\r");
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <DHT22_PrintByteBuffer+0x64>)
 8000592:	0018      	movs	r0, r3
 8000594:	f001 f93c 	bl	8001810 <UT_printf>
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b005      	add	sp, #20
 800059e:	bd90      	pop	{r4, r7, pc}
 80005a0:	08004780 	.word	0x08004780
 80005a4:	08004788 	.word	0x08004788
 80005a8:	0800478c 	.word	0x0800478c

080005ac <DHT22_ConvertByteBuffer>:

static uint8_t DHT22_ConvertByteBuffer(uint8_t* buffer)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	uint8_t val = 0;
 80005b4:	230f      	movs	r3, #15
 80005b6:	18fb      	adds	r3, r7, r3
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 80005bc:	230e      	movs	r3, #14
 80005be:	18fb      	adds	r3, r7, r3
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
 80005c4:	e01d      	b.n	8000602 <DHT22_ConvertByteBuffer+0x56>
	{		
		if(buffer[i] == 1)
 80005c6:	210e      	movs	r1, #14
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	18d3      	adds	r3, r2, r3
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d10f      	bne.n	80005f6 <DHT22_ConvertByteBuffer+0x4a>
		{
			val |= (1 << (7 - i));			
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2207      	movs	r2, #7
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	2201      	movs	r2, #1
 80005e0:	409a      	lsls	r2, r3
 80005e2:	0013      	movs	r3, r2
 80005e4:	b25a      	sxtb	r2, r3
 80005e6:	210f      	movs	r1, #15
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	4313      	orrs	r3, r2
 80005f0:	b25a      	sxtb	r2, r3
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 80005f6:	210e      	movs	r1, #14
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	781a      	ldrb	r2, [r3, #0]
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	3201      	adds	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
 8000602:	230e      	movs	r3, #14
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b07      	cmp	r3, #7
 800060a:	d9dc      	bls.n	80005c6 <DHT22_ConvertByteBuffer+0x1a>
		}
	}
	return val;
 800060c:	230f      	movs	r3, #15
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	781b      	ldrb	r3, [r3, #0]
}
 8000612:	0018      	movs	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	b004      	add	sp, #16
 8000618:	bd80      	pop	{r7, pc}

0800061a <DHT22_Read_Byte>:

static uint8_t DHT22_Read_Byte()
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
    uint8_t val = 0, j;
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < 8; j++)
 8000626:	1dbb      	adds	r3, r7, #6
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	e042      	b.n	80006b4 <DHT22_Read_Byte+0x9a>
	{
		while(!(HAL_GPIO_ReadPin(DATA)));  		//Wait for pin to go high
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	23a0      	movs	r3, #160	; 0xa0
 8000632:	05db      	lsls	r3, r3, #23
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	0018      	movs	r0, r3
 8000638:	f001 fc60 	bl	8001efc <HAL_GPIO_ReadPin>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d0f7      	beq.n	8000630 <DHT22_Read_Byte+0x16>
		UT_Delay_MicroSeconds(50);         		//Wait 50 us
 8000640:	2032      	movs	r0, #50	; 0x32
 8000642:	f001 f90f 	bl	8001864 <UT_Delay_MicroSeconds>
		if (!(HAL_GPIO_ReadPin(DATA)))     		//If the pin is low
 8000646:	23a0      	movs	r3, #160	; 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fc55 	bl	8001efc <HAL_GPIO_ReadPin>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d111      	bne.n	800067a <DHT22_Read_Byte+0x60>
		{
			val &= ~(1 << (7 - j));  			//Write 0
 8000656:	1dbb      	adds	r3, r7, #6
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2207      	movs	r2, #7
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	2201      	movs	r2, #1
 8000660:	409a      	lsls	r2, r3
 8000662:	0013      	movs	r3, r2
 8000664:	b25b      	sxtb	r3, r3
 8000666:	43db      	mvns	r3, r3
 8000668:	b25b      	sxtb	r3, r3
 800066a:	1dfa      	adds	r2, r7, #7
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	b252      	sxtb	r2, r2
 8000670:	4013      	ands	r3, r2
 8000672:	b25a      	sxtb	r2, r3
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	701a      	strb	r2, [r3, #0]
 8000678:	e017      	b.n	80006aa <DHT22_Read_Byte+0x90>
		}
		else 
        {
            val |= (1 << (7 - j));    			//Write 1
 800067a:	1dbb      	adds	r3, r7, #6
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2207      	movs	r2, #7
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	2201      	movs	r2, #1
 8000684:	409a      	lsls	r2, r3
 8000686:	0013      	movs	r3, r2
 8000688:	b25a      	sxtb	r2, r3
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b25b      	sxtb	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b25a      	sxtb	r2, r3
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	701a      	strb	r2, [r3, #0]
		    while ((HAL_GPIO_ReadPin(DATA)));  	//Wait for the pin to go low
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	23a0      	movs	r3, #160	; 0xa0
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 fc2b 	bl	8001efc <HAL_GPIO_ReadPin>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d1f7      	bne.n	800069a <DHT22_Read_Byte+0x80>
	for(j = 0; j < 8; j++)
 80006aa:	1dbb      	adds	r3, r7, #6
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	1dbb      	adds	r3, r7, #6
 80006b0:	3201      	adds	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
 80006b4:	1dbb      	adds	r3, r7, #6
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b07      	cmp	r3, #7
 80006ba:	d9b8      	bls.n	800062e <DHT22_Read_Byte+0x14>
        }
    }
	return val;
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	781b      	ldrb	r3, [r3, #0]
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b002      	add	sp, #8
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <DHT22_ReadByteToBuffer>:

static void DHT22_ReadByteToBuffer(uint8_t* buffer)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	for(uint8_t j = 0; j < 8; j++)
 80006d0:	230f      	movs	r3, #15
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	e031      	b.n	800073e <DHT22_ReadByteToBuffer+0x76>
	{
		while(!(HAL_GPIO_ReadPin(DATA)));  		//Wait for pin to go high
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	23a0      	movs	r3, #160	; 0xa0
 80006de:	05db      	lsls	r3, r3, #23
 80006e0:	2140      	movs	r1, #64	; 0x40
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 fc0a 	bl	8001efc <HAL_GPIO_ReadPin>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d0f7      	beq.n	80006dc <DHT22_ReadByteToBuffer+0x14>
		UT_Delay_MicroSeconds(50);         		//Wait 50 us
 80006ec:	2032      	movs	r0, #50	; 0x32
 80006ee:	f001 f8b9 	bl	8001864 <UT_Delay_MicroSeconds>

		if (!(HAL_GPIO_ReadPin(DATA)))     		//If the pin is low
 80006f2:	23a0      	movs	r3, #160	; 0xa0
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	2140      	movs	r1, #64	; 0x40
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 fbff 	bl	8001efc <HAL_GPIO_ReadPin>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d107      	bne.n	8000712 <DHT22_ReadByteToBuffer+0x4a>
		{
			buffer[j] = 0;  					//Write 0
 8000702:	230f      	movs	r3, #15
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	18d3      	adds	r3, r2, r3
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	e00f      	b.n	8000732 <DHT22_ReadByteToBuffer+0x6a>
		}
		else 
        {
            buffer[j] = 1;    					//Write 1			
 8000712:	230f      	movs	r3, #15
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	18d3      	adds	r3, r2, r3
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
		    while ((HAL_GPIO_ReadPin(DATA)));  	//Wait for the pin to go low
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	23a0      	movs	r3, #160	; 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	0018      	movs	r0, r3
 800072a:	f001 fbe7 	bl	8001efc <HAL_GPIO_ReadPin>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d1f7      	bne.n	8000722 <DHT22_ReadByteToBuffer+0x5a>
	for(uint8_t j = 0; j < 8; j++)
 8000732:	210f      	movs	r1, #15
 8000734:	187b      	adds	r3, r7, r1
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	187b      	adds	r3, r7, r1
 800073a:	3201      	adds	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	230f      	movs	r3, #15
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b07      	cmp	r3, #7
 8000746:	d9c8      	bls.n	80006da <DHT22_ReadByteToBuffer+0x12>
        }
    }
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b004      	add	sp, #16
 8000750:	bd80      	pop	{r7, pc}

08000752 <DHT22_StartTransmission>:

// ----- Public Functions -----

void DHT22_StartTransmission()
{		
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
    DHT22_PinAsOutput();          	//Set pin as output
 8000756:	f7ff feb3 	bl	80004c0 <DHT22_PinAsOutput>
	HAL_GPIO_WritePin(DATA, 0);   	//Set pin low	
 800075a:	23a0      	movs	r3, #160	; 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	2200      	movs	r2, #0
 8000760:	2140      	movs	r1, #64	; 0x40
 8000762:	0018      	movs	r0, r3
 8000764:	f001 fbe7 	bl	8001f36 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(2000);   	//Wait 2ms
 8000768:	23fa      	movs	r3, #250	; 0xfa
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	0018      	movs	r0, r3
 800076e:	f001 f879 	bl	8001864 <UT_Delay_MicroSeconds>
    DHT22_PinAsInput();             //Set pin as input
 8000772:	f7ff fec6 	bl	8000502 <DHT22_PinAsInput>
	UT_Delay_MicroSeconds(20);      //Wait 20us
 8000776:	2014      	movs	r0, #20
 8000778:	f001 f874 	bl	8001864 <UT_Delay_MicroSeconds>
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <DHT22_CheckResponse>:

int8_t DHT22_CheckResponse()
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
    int8_t response = 0;
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
	UT_Delay_MicroSeconds(40);      	//Wait 40us
 800078e:	2028      	movs	r0, #40	; 0x28
 8000790:	f001 f868 	bl	8001864 <UT_Delay_MicroSeconds>

	if(!(HAL_GPIO_ReadPin(DATA)))   	//If the pin is low
 8000794:	23a0      	movs	r3, #160	; 0xa0
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	2140      	movs	r1, #64	; 0x40
 800079a:	0018      	movs	r0, r3
 800079c:	f001 fbae 	bl	8001efc <HAL_GPIO_ReadPin>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d111      	bne.n	80007c8 <DHT22_CheckResponse+0x46>
	{
		UT_Delay_MicroSeconds(80); 		//Wait 40us
 80007a4:	2050      	movs	r0, #80	; 0x50
 80007a6:	f001 f85d 	bl	8001864 <UT_Delay_MicroSeconds>

		if((HAL_GPIO_ReadPin(DATA))) 	//If the pin is high -> response is ok
 80007aa:	23a0      	movs	r3, #160	; 0xa0
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fba3 	bl	8001efc <HAL_GPIO_ReadPin>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d003      	beq.n	80007c2 <DHT22_CheckResponse+0x40>
		{
			response = 1;
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
 80007c0:	e002      	b.n	80007c8 <DHT22_CheckResponse+0x46>
		}			
		else
		{
			response = -1;
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	22ff      	movs	r2, #255	; 0xff
 80007c6:	701a      	strb	r2, [r3, #0]
		}
	}

	while(HAL_GPIO_ReadPin(DATA));  	//Wait for pin to go low
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	23a0      	movs	r3, #160	; 0xa0
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	2140      	movs	r1, #64	; 0x40
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 fb93 	bl	8001efc <HAL_GPIO_ReadPin>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d1f7      	bne.n	80007ca <DHT22_CheckResponse+0x48>

	return response;
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b25b      	sxtb	r3, r3
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b002      	add	sp, #8
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <DHT22_ReadDataDebug>:

void DHT22_ReadDataDebug()
{
 80007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ea:	b08f      	sub	sp, #60	; 0x3c
 80007ec:	af00      	add	r7, sp, #0
	uint8_t h1[8], h2[8], t1[8], t2[8], cs[8];

	//Read raw binary data
	DHT22_ReadByteToBuffer(h1);
 80007ee:	2624      	movs	r6, #36	; 0x24
 80007f0:	19bb      	adds	r3, r7, r6
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff ff68 	bl	80006c8 <DHT22_ReadByteToBuffer>
	DHT22_ReadByteToBuffer(h2);
 80007f8:	241c      	movs	r4, #28
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff ff63 	bl	80006c8 <DHT22_ReadByteToBuffer>
	DHT22_ReadByteToBuffer(t1);
 8000802:	2514      	movs	r5, #20
 8000804:	197b      	adds	r3, r7, r5
 8000806:	0018      	movs	r0, r3
 8000808:	f7ff ff5e 	bl	80006c8 <DHT22_ReadByteToBuffer>
	DHT22_ReadByteToBuffer(t2);
 800080c:	230c      	movs	r3, #12
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff ff59 	bl	80006c8 <DHT22_ReadByteToBuffer>
	DHT22_ReadByteToBuffer(cs);	
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	0018      	movs	r0, r3
 800081a:	f7ff ff55 	bl	80006c8 <DHT22_ReadByteToBuffer>

	//Print raw binary data
	UT_printf("\n\r----- DEBUG -----\n\r");
 800081e:	4b76      	ldr	r3, [pc, #472]	; (80009f8 <DHT22_ReadDataDebug+0x210>)
 8000820:	0018      	movs	r0, r3
 8000822:	f000 fff5 	bl	8001810 <UT_printf>
	DHT22_PrintByteBuffer(h1, "h1_bin");
 8000826:	4a75      	ldr	r2, [pc, #468]	; (80009fc <DHT22_ReadDataDebug+0x214>)
 8000828:	19bb      	adds	r3, r7, r6
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f7ff fe89 	bl	8000544 <DHT22_PrintByteBuffer>
	DHT22_PrintByteBuffer(h2, "h2_bin");
 8000832:	4a73      	ldr	r2, [pc, #460]	; (8000a00 <DHT22_ReadDataDebug+0x218>)
 8000834:	193b      	adds	r3, r7, r4
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fe83 	bl	8000544 <DHT22_PrintByteBuffer>
	DHT22_PrintByteBuffer(t1, "t1_bin");
 800083e:	4a71      	ldr	r2, [pc, #452]	; (8000a04 <DHT22_ReadDataDebug+0x21c>)
 8000840:	197b      	adds	r3, r7, r5
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff fe7d 	bl	8000544 <DHT22_PrintByteBuffer>
	DHT22_PrintByteBuffer(t2, "t2_bin");
 800084a:	4a6f      	ldr	r2, [pc, #444]	; (8000a08 <DHT22_ReadDataDebug+0x220>)
 800084c:	210c      	movs	r1, #12
 800084e:	187b      	adds	r3, r7, r1
 8000850:	0011      	movs	r1, r2
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff fe76 	bl	8000544 <DHT22_PrintByteBuffer>
	DHT22_PrintByteBuffer(cs, "cs_bin");
 8000858:	4a6c      	ldr	r2, [pc, #432]	; (8000a0c <DHT22_ReadDataDebug+0x224>)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff fe70 	bl	8000544 <DHT22_PrintByteBuffer>

	//Convert data to uint8_t
	uint8_t h1_dec, h2_dec, t1_dec, t2_dec, cs_dec;
	h1_dec = DHT22_ConvertByteBuffer(h1);
 8000864:	2537      	movs	r5, #55	; 0x37
 8000866:	197c      	adds	r4, r7, r5
 8000868:	19bb      	adds	r3, r7, r6
 800086a:	0018      	movs	r0, r3
 800086c:	f7ff fe9e 	bl	80005ac <DHT22_ConvertByteBuffer>
 8000870:	0003      	movs	r3, r0
 8000872:	7023      	strb	r3, [r4, #0]
	h2_dec = DHT22_ConvertByteBuffer(h2);
 8000874:	2636      	movs	r6, #54	; 0x36
 8000876:	19bc      	adds	r4, r7, r6
 8000878:	231c      	movs	r3, #28
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	0018      	movs	r0, r3
 800087e:	f7ff fe95 	bl	80005ac <DHT22_ConvertByteBuffer>
 8000882:	0003      	movs	r3, r0
 8000884:	7023      	strb	r3, [r4, #0]
	t1_dec = DHT22_ConvertByteBuffer(t1);
 8000886:	2435      	movs	r4, #53	; 0x35
 8000888:	193c      	adds	r4, r7, r4
 800088a:	2314      	movs	r3, #20
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff fe8c 	bl	80005ac <DHT22_ConvertByteBuffer>
 8000894:	0003      	movs	r3, r0
 8000896:	7023      	strb	r3, [r4, #0]
	t2_dec = DHT22_ConvertByteBuffer(t2);	
 8000898:	2334      	movs	r3, #52	; 0x34
 800089a:	18fc      	adds	r4, r7, r3
 800089c:	210c      	movs	r1, #12
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	0018      	movs	r0, r3
 80008a2:	f7ff fe83 	bl	80005ac <DHT22_ConvertByteBuffer>
 80008a6:	0003      	movs	r3, r0
 80008a8:	7023      	strb	r3, [r4, #0]
	cs_dec = DHT22_ConvertByteBuffer(cs);
 80008aa:	2133      	movs	r1, #51	; 0x33
 80008ac:	187c      	adds	r4, r7, r1
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff fe7b 	bl	80005ac <DHT22_ConvertByteBuffer>
 80008b6:	0003      	movs	r3, r0
 80008b8:	7023      	strb	r3, [r4, #0]

	//Calculate checksum
	uint8_t myChecksum = h1_dec + h2_dec + t1_dec + t2_dec;
 80008ba:	197a      	adds	r2, r7, r5
 80008bc:	19bb      	adds	r3, r7, r6
 80008be:	7812      	ldrb	r2, [r2, #0]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	18d3      	adds	r3, r2, r3
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	2435      	movs	r4, #53	; 0x35
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	18d3      	adds	r3, r2, r3
 80008ce:	b2d9      	uxtb	r1, r3
 80008d0:	2032      	movs	r0, #50	; 0x32
 80008d2:	183b      	adds	r3, r7, r0
 80008d4:	2234      	movs	r2, #52	; 0x34
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	188a      	adds	r2, r1, r2
 80008dc:	701a      	strb	r2, [r3, #0]

	//Print decimal data	
	UT_printf("\n\r");
 80008de:	4b4c      	ldr	r3, [pc, #304]	; (8000a10 <DHT22_ReadDataDebug+0x228>)
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 ff95 	bl	8001810 <UT_printf>
	UT_printf("h1_dec: %d\n\r", h1_dec);
 80008e6:	197b      	adds	r3, r7, r5
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	4b4a      	ldr	r3, [pc, #296]	; (8000a14 <DHT22_ReadDataDebug+0x22c>)
 80008ec:	0011      	movs	r1, r2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 ff8e 	bl	8001810 <UT_printf>
	UT_printf("h2_dec: %d\n\r", h2_dec);
 80008f4:	19bb      	adds	r3, r7, r6
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	4b47      	ldr	r3, [pc, #284]	; (8000a18 <DHT22_ReadDataDebug+0x230>)
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 ff87 	bl	8001810 <UT_printf>
	UT_printf("t1_dec: %d\n\r", t1_dec);
 8000902:	193b      	adds	r3, r7, r4
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <DHT22_ReadDataDebug+0x234>)
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f000 ff80 	bl	8001810 <UT_printf>
	UT_printf("t2_dec: %d\n\r", t2_dec);
 8000910:	2234      	movs	r2, #52	; 0x34
 8000912:	18bb      	adds	r3, r7, r2
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <DHT22_ReadDataDebug+0x238>)
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f000 ff78 	bl	8001810 <UT_printf>
	UT_printf("checksum: %d\n\r", cs_dec);	
 8000920:	2133      	movs	r1, #51	; 0x33
 8000922:	187b      	adds	r3, r7, r1
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	4b3f      	ldr	r3, [pc, #252]	; (8000a24 <DHT22_ReadDataDebug+0x23c>)
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f000 ff70 	bl	8001810 <UT_printf>
	UT_printf("myChecksum: %d\n\r", myChecksum);
 8000930:	2032      	movs	r0, #50	; 0x32
 8000932:	183b      	adds	r3, r7, r0
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	4b3c      	ldr	r3, [pc, #240]	; (8000a28 <DHT22_ReadDataDebug+0x240>)
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f000 ff68 	bl	8001810 <UT_printf>

	//Combine data to uint16_t
	uint16_t humi_uint = 0, temp_uint = 0;
 8000940:	2130      	movs	r1, #48	; 0x30
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	801a      	strh	r2, [r3, #0]
 8000948:	202e      	movs	r0, #46	; 0x2e
 800094a:	183b      	adds	r3, r7, r0
 800094c:	2200      	movs	r2, #0
 800094e:	801a      	strh	r2, [r3, #0]
	humi_uint = (h1_dec << 8) | h2_dec;
 8000950:	197b      	adds	r3, r7, r5
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	b21a      	sxth	r2, r3
 8000958:	19bb      	adds	r3, r7, r6
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b21b      	sxth	r3, r3
 800095e:	4313      	orrs	r3, r2
 8000960:	b21a      	sxth	r2, r3
 8000962:	000d      	movs	r5, r1
 8000964:	187b      	adds	r3, r7, r1
 8000966:	801a      	strh	r2, [r3, #0]
	temp_uint = (t1_dec << 8) | t2_dec;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	021b      	lsls	r3, r3, #8
 800096e:	b21a      	sxth	r2, r3
 8000970:	2334      	movs	r3, #52	; 0x34
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b21b      	sxth	r3, r3
 8000978:	4313      	orrs	r3, r2
 800097a:	b21a      	sxth	r2, r3
 800097c:	0006      	movs	r6, r0
 800097e:	183b      	adds	r3, r7, r0
 8000980:	801a      	strh	r2, [r3, #0]

	//Print combined values		
	UT_printf("\n\r");
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <DHT22_ReadDataDebug+0x228>)
 8000984:	0018      	movs	r0, r3
 8000986:	f000 ff43 	bl	8001810 <UT_printf>
	UT_printf("Humidity: %d.%d%%\n\r", humi_uint / 10, humi_uint % 10);
 800098a:	197b      	adds	r3, r7, r5
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	210a      	movs	r1, #10
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff fbcb 	bl	800012c <__udivsi3>
 8000996:	0003      	movs	r3, r0
 8000998:	b29b      	uxth	r3, r3
 800099a:	001c      	movs	r4, r3
 800099c:	197b      	adds	r3, r7, r5
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	210a      	movs	r1, #10
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff fc48 	bl	8000238 <__aeabi_uidivmod>
 80009a8:	000b      	movs	r3, r1
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	001a      	movs	r2, r3
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <DHT22_ReadDataDebug+0x244>)
 80009b0:	0021      	movs	r1, r4
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 ff2c 	bl	8001810 <UT_printf>
	UT_printf("Temperature: %d.%d\n\r", temp_uint / 10, temp_uint % 10);	
 80009b8:	19bb      	adds	r3, r7, r6
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	210a      	movs	r1, #10
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff fbb4 	bl	800012c <__udivsi3>
 80009c4:	0003      	movs	r3, r0
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	001c      	movs	r4, r3
 80009ca:	19bb      	adds	r3, r7, r6
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	210a      	movs	r1, #10
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff fc31 	bl	8000238 <__aeabi_uidivmod>
 80009d6:	000b      	movs	r3, r1
 80009d8:	b29b      	uxth	r3, r3
 80009da:	001a      	movs	r2, r3
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <DHT22_ReadDataDebug+0x248>)
 80009de:	0021      	movs	r1, r4
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 ff15 	bl	8001810 <UT_printf>
	UT_printf("-----------------\n\r");
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <DHT22_ReadDataDebug+0x24c>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 ff11 	bl	8001810 <UT_printf>
}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b00f      	add	sp, #60	; 0x3c
 80009f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	08004790 	.word	0x08004790
 80009fc:	080047a8 	.word	0x080047a8
 8000a00:	080047b0 	.word	0x080047b0
 8000a04:	080047b8 	.word	0x080047b8
 8000a08:	080047c0 	.word	0x080047c0
 8000a0c:	080047c8 	.word	0x080047c8
 8000a10:	0800478c 	.word	0x0800478c
 8000a14:	080047d0 	.word	0x080047d0
 8000a18:	080047e0 	.word	0x080047e0
 8000a1c:	080047f0 	.word	0x080047f0
 8000a20:	08004800 	.word	0x08004800
 8000a24:	08004810 	.word	0x08004810
 8000a28:	08004820 	.word	0x08004820
 8000a2c:	08004834 	.word	0x08004834
 8000a30:	08004848 	.word	0x08004848
 8000a34:	08004860 	.word	0x08004860

08000a38 <DHT22_ReadData>:

int8_t DHT22_ReadData(uint16_t* humidity, uint16_t* temperature)
{
 8000a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	uint8_t h1, h2, t1, t2, cs;

	//Read raw binary data
	h1 = DHT22_Read_Byte();
 8000a42:	250f      	movs	r5, #15
 8000a44:	197c      	adds	r4, r7, r5
 8000a46:	f7ff fde8 	bl	800061a <DHT22_Read_Byte>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
	h2 = DHT22_Read_Byte();
 8000a4e:	260e      	movs	r6, #14
 8000a50:	19bc      	adds	r4, r7, r6
 8000a52:	f7ff fde2 	bl	800061a <DHT22_Read_Byte>
 8000a56:	0003      	movs	r3, r0
 8000a58:	7023      	strb	r3, [r4, #0]
	t1 = DHT22_Read_Byte();
 8000a5a:	230d      	movs	r3, #13
 8000a5c:	18fc      	adds	r4, r7, r3
 8000a5e:	f7ff fddc 	bl	800061a <DHT22_Read_Byte>
 8000a62:	0003      	movs	r3, r0
 8000a64:	7023      	strb	r3, [r4, #0]
	t2 = DHT22_Read_Byte();
 8000a66:	220c      	movs	r2, #12
 8000a68:	18bc      	adds	r4, r7, r2
 8000a6a:	f7ff fdd6 	bl	800061a <DHT22_Read_Byte>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	7023      	strb	r3, [r4, #0]
	cs = DHT22_Read_Byte();
 8000a72:	210b      	movs	r1, #11
 8000a74:	187c      	adds	r4, r7, r1
 8000a76:	f7ff fdd0 	bl	800061a <DHT22_Read_Byte>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	7023      	strb	r3, [r4, #0]

	//Calculate checksum
	uint8_t myChecksum = h1 + h2 + t1 + t2;
 8000a7e:	0028      	movs	r0, r5
 8000a80:	183a      	adds	r2, r7, r0
 8000a82:	0034      	movs	r4, r6
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	7812      	ldrb	r2, [r2, #0]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	18d3      	adds	r3, r2, r3
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	250d      	movs	r5, #13
 8000a90:	197b      	adds	r3, r7, r5
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	18d3      	adds	r3, r2, r3
 8000a96:	b2d9      	uxtb	r1, r3
 8000a98:	230a      	movs	r3, #10
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	260c      	movs	r6, #12
 8000a9e:	19ba      	adds	r2, r7, r6
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	188a      	adds	r2, r1, r2
 8000aa4:	701a      	strb	r2, [r3, #0]

	if(myChecksum == cs)
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	18fa      	adds	r2, r7, r3
 8000aaa:	210b      	movs	r1, #11
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	7812      	ldrb	r2, [r2, #0]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d119      	bne.n	8000aea <DHT22_ReadData+0xb2>
	{
		//Combine data to uint16_t
		*humidity = (h1 << 8) | h2;
 8000ab6:	183b      	adds	r3, r7, r0
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	b21a      	sxth	r2, r3
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	801a      	strh	r2, [r3, #0]
		*temperature = (t1 << 8) | t2;
 8000ace:	197b      	adds	r3, r7, r5
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	19bb      	adds	r3, r7, r6
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	801a      	strh	r2, [r3, #0]

		return 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e001      	b.n	8000aee <DHT22_ReadData+0xb6>
	}

	return -1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	425b      	negs	r3, r3
 8000aee:	0018      	movs	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b005      	add	sp, #20
 8000af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000af6 <set_RS>:
static char byteBuffer[8];

// ----- Private functions ----- 

static void set_RS(int state)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS, state);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	23a0      	movs	r3, #160	; 0xa0
 8000b04:	05db      	lsls	r3, r3, #23
 8000b06:	2101      	movs	r1, #1
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 fa14 	bl	8001f36 <HAL_GPIO_WritePin>
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <set_RW>:
static void set_RW(int state)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RW, state);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	23a0      	movs	r3, #160	; 0xa0
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	2102      	movs	r1, #2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 fa04 	bl	8001f36 <HAL_GPIO_WritePin>
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <set_E>:
static void set_E(int state)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(E, state);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <set_E+0x20>)
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	f001 f9f3 	bl	8001f36 <HAL_GPIO_WritePin>
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	50000400 	.word	0x50000400

08000b5c <set_DB7>:
static void set_DB7(int state)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB7, state);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <set_DB7+0x20>)
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	f001 f9e2 	bl	8001f36 <HAL_GPIO_WritePin>
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	50000400 	.word	0x50000400

08000b80 <set_DB6>:
static void set_DB6(int state)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB6, state);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <set_DB6+0x20>)
 8000b8e:	001a      	movs	r2, r3
 8000b90:	2140      	movs	r1, #64	; 0x40
 8000b92:	f001 f9d0 	bl	8001f36 <HAL_GPIO_WritePin>
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	50000400 	.word	0x50000400

08000ba4 <set_DB5>:
static void set_DB5(int state)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB5, state);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <set_DB5+0x20>)
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	f001 f9be 	bl	8001f36 <HAL_GPIO_WritePin>
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	50000400 	.word	0x50000400

08000bc8 <set_DB4>:
static void set_DB4(int state)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB4, state);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <set_DB4+0x20>)
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	2110      	movs	r1, #16
 8000bda:	f001 f9ac 	bl	8001f36 <HAL_GPIO_WritePin>
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	50000400 	.word	0x50000400

08000bec <set_DB3>:
static void set_DB3(int state)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB3, state);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4804      	ldr	r0, [pc, #16]	; (8000c0c <set_DB3+0x20>)
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	f001 f99a 	bl	8001f36 <HAL_GPIO_WritePin>
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	50000400 	.word	0x50000400

08000c10 <set_DB2>:
static void set_DB2(int state)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB2, state);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <set_DB2+0x20>)
 8000c1e:	001a      	movs	r2, r3
 8000c20:	2104      	movs	r1, #4
 8000c22:	f001 f988 	bl	8001f36 <HAL_GPIO_WritePin>
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	50000400 	.word	0x50000400

08000c34 <set_DB1>:
static void set_DB1(int state)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB1, state);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <set_DB1+0x20>)
 8000c42:	001a      	movs	r2, r3
 8000c44:	2102      	movs	r1, #2
 8000c46:	f001 f976 	bl	8001f36 <HAL_GPIO_WritePin>
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	50000400 	.word	0x50000400

08000c58 <set_DB0>:
static void set_DB0(int state)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB0, state);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <set_DB0+0x20>)
 8000c66:	001a      	movs	r2, r3
 8000c68:	2101      	movs	r1, #1
 8000c6a:	f001 f964 	bl	8001f36 <HAL_GPIO_WritePin>
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	50000400 	.word	0x50000400

08000c7c <get_DB7>:

static int get_DB7()
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
    GPIO_PinState state = HAL_GPIO_ReadPin(DB7);
 8000c82:	1dfc      	adds	r4, r7, #7
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <get_DB7+0x2c>)
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f001 f937 	bl	8001efc <HAL_GPIO_ReadPin>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	7023      	strb	r3, [r4, #0]
    if(state == GPIO_PIN_SET)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d101      	bne.n	8000c9e <get_DB7+0x22>
        return 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <get_DB7+0x24>
    else
        return 0;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b003      	add	sp, #12
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	50000400 	.word	0x50000400

08000cac <sendEnable>:

static void sendEnable()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
    set_E(1);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff ff40 	bl	8000b38 <set_E>

    //Wait atleast 2 ticks
    uint32_t tick_start = HAL_GetTick();
 8000cb8:	f000 fe96 	bl	80019e8 <HAL_GetTick>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	607b      	str	r3, [r7, #4]
    while((HAL_GetTick() - tick_start) <= 2){}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	f000 fe91 	bl	80019e8 <HAL_GetTick>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d9f8      	bls.n	8000cc2 <sendEnable+0x16>

    set_E(0);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff ff31 	bl	8000b38 <set_E>
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <waitForBusyFlag>:
static void waitForBusyFlag()
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
    set_RS(0);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff ff06 	bl	8000af6 <set_RS>
    set_RW(1);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f7ff ff13 	bl	8000b16 <set_RW>
    sendEnable();    
 8000cf0:	f7ff ffdc 	bl	8000cac <sendEnable>

    int val = 1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
    while(val != 0)
 8000cf8:	e003      	b.n	8000d02 <waitForBusyFlag+0x24>
    {
        val = get_DB7(); //Get busy flag
 8000cfa:	f7ff ffbf 	bl	8000c7c <get_DB7>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	607b      	str	r3, [r7, #4]
    while(val != 0)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1f8      	bne.n	8000cfa <waitForBusyFlag+0x1c>
    }
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <sendCommand>:
static void sendCommand()
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
    sendEnable();
 8000d16:	f7ff ffc9 	bl	8000cac <sendEnable>
    waitForBusyFlag();
 8000d1a:	f7ff ffe0 	bl	8000cde <waitForBusyFlag>
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <charToByteBuffer>:
static void charToByteBuffer(char c)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 8000d30:	230f      	movs	r3, #15
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e017      	b.n	8000d6a <charToByteBuffer+0x46>
    {
        char val = (c >> i) & 0x01;
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	200f      	movs	r0, #15
 8000d40:	183b      	adds	r3, r7, r0
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	411a      	asrs	r2, r3
 8000d46:	0013      	movs	r3, r2
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	240e      	movs	r4, #14
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	2101      	movs	r1, #1
 8000d50:	400a      	ands	r2, r1
 8000d52:	701a      	strb	r2, [r3, #0]
        byteBuffer[i] = val;
 8000d54:	183b      	adds	r3, r7, r0
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <charToByteBuffer+0x5c>)
 8000d5a:	1939      	adds	r1, r7, r4
 8000d5c:	7809      	ldrb	r1, [r1, #0]
 8000d5e:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0; i < 8; i++)
 8000d60:	183b      	adds	r3, r7, r0
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	183b      	adds	r3, r7, r0
 8000d66:	3201      	adds	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b07      	cmp	r3, #7
 8000d72:	d9e2      	bls.n	8000d3a <charToByteBuffer+0x16>
    }
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b005      	add	sp, #20
 8000d7c:	bd90      	pop	{r4, r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	2000008c 	.word	0x2000008c

08000d84 <sendByteBuffer>:
static void sendByteBuffer()
{    
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
    //Write data
    set_RS(1);
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff feb3 	bl	8000af6 <set_RS>
    set_RW(0);
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff fec0 	bl	8000b16 <set_RW>

    //Address to write to correct pin
    uint16_t address = 0x0001;
 8000d96:	1dbb      	adds	r3, r7, #6
 8000d98:	2201      	movs	r2, #1
 8000d9a:	801a      	strh	r2, [r3, #0]

    for(uint8_t i = 0; i < 8; i++)
 8000d9c:	1d7b      	adds	r3, r7, #5
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e017      	b.n	8000dd4 <sendByteBuffer+0x50>
    {        
        char val = byteBuffer[i];
 8000da4:	1d7b      	adds	r3, r7, #5
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	490f      	ldr	r1, [pc, #60]	; (8000de8 <sendByteBuffer+0x64>)
 8000dac:	5c8a      	ldrb	r2, [r1, r2]
 8000dae:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, address, (int)val); 
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	1dbb      	adds	r3, r7, #6
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <sendByteBuffer+0x68>)
 8000dba:	0019      	movs	r1, r3
 8000dbc:	f001 f8bb 	bl	8001f36 <HAL_GPIO_WritePin>
        address = address << 1; //Go to next pin
 8000dc0:	1dba      	adds	r2, r7, #6
 8000dc2:	1dbb      	adds	r3, r7, #6
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	18db      	adds	r3, r3, r3
 8000dc8:	8013      	strh	r3, [r2, #0]
    for(uint8_t i = 0; i < 8; i++)
 8000dca:	1d7b      	adds	r3, r7, #5
 8000dcc:	781a      	ldrb	r2, [r3, #0]
 8000dce:	1d7b      	adds	r3, r7, #5
 8000dd0:	3201      	adds	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	1d7b      	adds	r3, r7, #5
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b07      	cmp	r3, #7
 8000dda:	d9e3      	bls.n	8000da4 <sendByteBuffer+0x20>
    }
    sendCommand();
 8000ddc:	f7ff ff99 	bl	8000d12 <sendCommand>
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000008c 	.word	0x2000008c
 8000dec:	50000400 	.word	0x50000400

08000df0 <LCD_Init>:

// ----- Public Functions ----- 

void LCD_Init()
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
    //Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	0018      	movs	r0, r3
 8000dfa:	2314      	movs	r3, #20
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f003 f882 	bl	8003f08 <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2203      	movs	r2, #3
 8000e08:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2201      	movs	r2, #1
 8000e1a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	1d3a      	adds	r2, r7, #4
 8000e1e:	23a0      	movs	r3, #160	; 0xa0
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	0011      	movs	r1, r2
 8000e24:	0018      	movs	r0, r3
 8000e26:	f000 feeb 	bl	8001c00 <HAL_GPIO_Init>

	//Initialize all Output-Pins of Port B
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <LCD_Init+0xac>)
 8000e2e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2201      	movs	r2, #1
 8000e34:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	2201      	movs	r2, #1
 8000e40:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <LCD_Init+0xb0>)
 8000e46:	0019      	movs	r1, r3
 8000e48:	0010      	movs	r0, r2
 8000e4a:	f000 fed9 	bl	8001c00 <HAL_GPIO_Init>

    //Wait after startup
    HAL_Delay(16);
 8000e4e:	2010      	movs	r0, #16
 8000e50:	f000 fdd4 	bl	80019fc <HAL_Delay>

    //Reset everything
    set_RS(0);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff fe4e 	bl	8000af6 <set_RS>
    set_RW(0);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff fe5b 	bl	8000b16 <set_RW>
    set_DB7(0);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff fe7b 	bl	8000b5c <set_DB7>
    set_DB6(0);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fe8a 	bl	8000b80 <set_DB6>
    set_DB5(0);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fe99 	bl	8000ba4 <set_DB5>
    set_DB4(0);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fea8 	bl	8000bc8 <set_DB4>
    set_DB3(0);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff feb7 	bl	8000bec <set_DB3>
    set_DB2(0);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff fec6 	bl	8000c10 <set_DB2>
    set_DB1(0);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fed5 	bl	8000c34 <set_DB1>
    set_DB0(0);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fee4 	bl	8000c58 <set_DB0>

    sendCommand();
 8000e90:	f7ff ff3f 	bl	8000d12 <sendCommand>
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b006      	add	sp, #24
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	000001ff 	.word	0x000001ff
 8000ea0:	50000400 	.word	0x50000400

08000ea4 <LCD_Set8BitMode>:

void LCD_Set8BitMode()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    set_RS(0);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fe24 	bl	8000af6 <set_RS>
    set_RW(0);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fe31 	bl	8000b16 <set_RW>

    set_DB7(0);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fe51 	bl	8000b5c <set_DB7>
    set_DB6(0);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fe60 	bl	8000b80 <set_DB6>
    set_DB5(1); //Configure Function Set
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff fe6f 	bl	8000ba4 <set_DB5>
    set_DB4(1); //8-Bit or 4-Bit
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f7ff fe7e 	bl	8000bc8 <set_DB4>
    set_DB3(1); //2 Lines or 1 Line
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f7ff fe8d 	bl	8000bec <set_DB3>
    set_DB2(0); //5x11 or 5x8 Pixel
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff fe9c 	bl	8000c10 <set_DB2>
    set_DB1(0);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff feab 	bl	8000c34 <set_DB1>
    set_DB0(0);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff feba 	bl	8000c58 <set_DB0>

    sendCommand();
 8000ee4:	f7ff ff15 	bl	8000d12 <sendCommand>
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <LCD_ClearDisplay>:

void LCD_ClearDisplay()
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
    set_RS(0);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fdff 	bl	8000af6 <set_RS>
    set_RW(0);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fe0c 	bl	8000b16 <set_RW>

    set_DB7(0);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff fe2c 	bl	8000b5c <set_DB7>
    set_DB6(0);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fe3b 	bl	8000b80 <set_DB6>
    set_DB5(0);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff fe4a 	bl	8000ba4 <set_DB5>
    set_DB4(0);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fe59 	bl	8000bc8 <set_DB4>
    set_DB3(0);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff fe68 	bl	8000bec <set_DB3>
    set_DB2(0);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fe77 	bl	8000c10 <set_DB2>
    set_DB1(0);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff fe86 	bl	8000c34 <set_DB1>
    set_DB0(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff fe95 	bl	8000c58 <set_DB0>

    sendCommand();
 8000f2e:	f7ff fef0 	bl	8000d12 <sendCommand>
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <LCD_ReturnHome>:

void LCD_ReturnHome()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
    set_RS(0);
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fdda 	bl	8000af6 <set_RS>
    set_RW(0);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff fde7 	bl	8000b16 <set_RW>

    set_DB7(0);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff fe07 	bl	8000b5c <set_DB7>
    set_DB6(0);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff fe16 	bl	8000b80 <set_DB6>
    set_DB5(0);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fe25 	bl	8000ba4 <set_DB5>
    set_DB4(0);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff fe34 	bl	8000bc8 <set_DB4>
    set_DB3(0);
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff fe43 	bl	8000bec <set_DB3>
    set_DB2(0);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fe52 	bl	8000c10 <set_DB2>
    set_DB1(1);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fe61 	bl	8000c34 <set_DB1>
    set_DB0(0);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff fe70 	bl	8000c58 <set_DB0>

    sendCommand();
 8000f78:	f7ff fecb 	bl	8000d12 <sendCommand>
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <LCD_TurnDisplayOn>:

void LCD_TurnDisplayOn()
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
    set_RS(0);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fdb5 	bl	8000af6 <set_RS>
    set_RW(0);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fdc2 	bl	8000b16 <set_RW>

    set_DB7(0);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fde2 	bl	8000b5c <set_DB7>
    set_DB6(0);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff fdf1 	bl	8000b80 <set_DB6>
    set_DB5(0);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fe00 	bl	8000ba4 <set_DB5>
    set_DB4(0);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fe0f 	bl	8000bc8 <set_DB4>
    set_DB3(1); //Configure Display
 8000faa:	2001      	movs	r0, #1
 8000fac:	f7ff fe1e 	bl	8000bec <set_DB3>
    set_DB2(1); //Turn On/Off
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff fe2d 	bl	8000c10 <set_DB2>
    set_DB1(0); //Cursor settings
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fe3c 	bl	8000c34 <set_DB1>
    set_DB0(0); //Cursor settings
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff fe4b 	bl	8000c58 <set_DB0>

    sendCommand();
 8000fc2:	f7ff fea6 	bl	8000d12 <sendCommand>
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <LCD_Print>:
    charToByteBuffer(c);
    sendByteBuffer();
}

void LCD_Print(const char* string)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    //Iterate over every character     
    for(int i = 0; i < strlen(string); i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e00b      	b.n	8000ff2 <LCD_Print+0x26>
    {
        charToByteBuffer(string[i]); //Get binary representation of the character
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	18d3      	adds	r3, r2, r3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff fe9e 	bl	8000d24 <charToByteBuffer>
        sendByteBuffer(); //Set pins accordingly
 8000fe8:	f7ff fecc 	bl	8000d84 <sendByteBuffer>
    for(int i = 0; i < strlen(string); i++)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff f887 	bl	8000108 <strlen>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d8eb      	bhi.n	8000fda <LCD_Print+0xe>
    }    
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b004      	add	sp, #16
 800100a:	bd80      	pop	{r7, pc}

0800100c <LCD_printf>:

void LCD_printf(const char* format, ...)
{
 800100c:	b40f      	push	{r0, r1, r2, r3}
 800100e:	b580      	push	{r7, lr}
 8001010:	b0c2      	sub	sp, #264	; 0x108
 8001012:	af00      	add	r7, sp, #0
	va_list args;
	char buffer[256];	
	memset(buffer, 0, 256);
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	005a      	lsls	r2, r3, #1
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2100      	movs	r1, #0
 800101c:	0018      	movs	r0, r3
 800101e:	f002 ff73 	bl	8003f08 <memset>

	va_start(args, format);	
 8001022:	238a      	movs	r3, #138	; 0x8a
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	1d7a      	adds	r2, r7, #5
 800102a:	32ff      	adds	r2, #255	; 0xff
 800102c:	6013      	str	r3, [r2, #0]
	vsprintf(buffer, format, args);
 800102e:	1d7b      	adds	r3, r7, #5
 8001030:	33ff      	adds	r3, #255	; 0xff
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2388      	movs	r3, #136	; 0x88
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	6819      	ldr	r1, [r3, #0]
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	0018      	movs	r0, r3
 8001040:	f002 ff80 	bl	8003f44 <vsiprintf>
	LCD_Print(buffer);
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff ffc0 	bl	8000fcc <LCD_Print>
	va_end(args);
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b042      	add	sp, #264	; 0x108
 8001052:	bc80      	pop	{r7}
 8001054:	bc08      	pop	{r3}
 8001056:	b004      	add	sp, #16
 8001058:	4718      	bx	r3
	...

0800105c <SystemClock_Config>:
UART_HandleTypeDef huart2;

// ----- Functions ----- 

static void SystemClock_Config(void)
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b099      	sub	sp, #100	; 0x64
 8001060:	af00      	add	r7, sp, #0
  	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	242c      	movs	r4, #44	; 0x2c
 8001064:	193b      	adds	r3, r7, r4
 8001066:	0018      	movs	r0, r3
 8001068:	2334      	movs	r3, #52	; 0x34
 800106a:	001a      	movs	r2, r3
 800106c:	2100      	movs	r1, #0
 800106e:	f002 ff4b 	bl	8003f08 <memset>
  	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001072:	2318      	movs	r3, #24
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	0018      	movs	r0, r3
 8001078:	2314      	movs	r3, #20
 800107a:	001a      	movs	r2, r3
 800107c:	2100      	movs	r1, #0
 800107e:	f002 ff43 	bl	8003f08 <memset>
  	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001082:	003b      	movs	r3, r7
 8001084:	0018      	movs	r0, r3
 8001086:	2318      	movs	r3, #24
 8001088:	001a      	movs	r2, r3
 800108a:	2100      	movs	r1, #0
 800108c:	f002 ff3c 	bl	8003f08 <memset>

  	//Configure the main internal regulator output voltage
  	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <SystemClock_Config+0xe8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a2c      	ldr	r2, [pc, #176]	; (8001148 <SystemClock_Config+0xec>)
 8001096:	401a      	ands	r2, r3
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <SystemClock_Config+0xe8>)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	0109      	lsls	r1, r1, #4
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]

  	//Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure
  	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a2:	0021      	movs	r1, r4
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2202      	movs	r2, #2
 80010a8:	601a      	str	r2, [r3, #0]
  	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2201      	movs	r2, #1
 80010ae:	60da      	str	r2, [r3, #12]
  	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2210      	movs	r2, #16
 80010b4:	611a      	str	r2, [r3, #16]
  	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2202      	movs	r2, #2
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
  	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
  	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	02d2      	lsls	r2, r2, #11
 80010c8:	62da      	str	r2, [r3, #44]	; 0x2c
  	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	03d2      	lsls	r2, r2, #15
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30
  	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 ff67 	bl	8001fa8 <HAL_RCC_OscConfig>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d003      	beq.n	80010e6 <SystemClock_Config+0x8a>
  	{
  	  	UT_Error_Handler("HAL_RCC_OscConfig failed!");
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <SystemClock_Config+0xf0>)
 80010e0:	0018      	movs	r0, r3
 80010e2:	f000 fbb3 	bl	800184c <UT_Error_Handler>
  	}

  	//Initializes the CPU, AHB and APB buses clocks
  	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010e6:	2118      	movs	r1, #24
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	220f      	movs	r2, #15
 80010ec:	601a      	str	r2, [r3, #0]
  	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2203      	movs	r2, #3
 80010f2:	605a      	str	r2, [r3, #4]
  	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2101      	movs	r1, #1
 800110a:	0018      	movs	r0, r3
 800110c:	f001 fac8 	bl	80026a0 <HAL_RCC_ClockConfig>
 8001110:	1e03      	subs	r3, r0, #0
 8001112:	d003      	beq.n	800111c <SystemClock_Config+0xc0>
  	{
  	  	UT_Error_Handler("HAL_RCC_ClockConfig failed!");
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <SystemClock_Config+0xf4>)
 8001116:	0018      	movs	r0, r3
 8001118:	f000 fb98 	bl	800184c <UT_Error_Handler>
  	}

  	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800111c:	003b      	movs	r3, r7
 800111e:	2202      	movs	r2, #2
 8001120:	601a      	str	r2, [r3, #0]
  	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001122:	003b      	movs	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001128:	003b      	movs	r3, r7
 800112a:	0018      	movs	r0, r3
 800112c:	f001 fcdc 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
 8001130:	1e03      	subs	r3, r0, #0
 8001132:	d003      	beq.n	800113c <SystemClock_Config+0xe0>
  	{
  	  	UT_Error_Handler("HAL_RCCEx_PeriphCLKConfig failed!");
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <SystemClock_Config+0xf8>)
 8001136:	0018      	movs	r0, r3
 8001138:	f000 fb88 	bl	800184c <UT_Error_Handler>
  	}
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b019      	add	sp, #100	; 0x64
 8001142:	bd90      	pop	{r4, r7, pc}
 8001144:	40007000 	.word	0x40007000
 8001148:	ffffe7ff 	.word	0xffffe7ff
 800114c:	08004874 	.word	0x08004874
 8001150:	08004890 	.word	0x08004890
 8001154:	080048ac 	.word	0x080048ac

08001158 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 800115e:	4a16      	ldr	r2, [pc, #88]	; (80011b8 <MX_USART2_UART_Init+0x60>)
 8001160:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 8001164:	22e1      	movs	r2, #225	; 0xe1
 8001166:	0252      	lsls	r2, r2, #9
 8001168:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 800119c:	0018      	movs	r0, r3
 800119e:	f002 f9b1 	bl	8003504 <HAL_UART_Init>
 80011a2:	1e03      	subs	r3, r0, #0
 80011a4:	d003      	beq.n	80011ae <MX_USART2_UART_Init+0x56>
	{
		UT_Error_Handler("HAL_UART_Init failed!");
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <MX_USART2_UART_Init+0x64>)
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 fb4f 	bl	800184c <UT_Error_Handler>
	}
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200000e0 	.word	0x200000e0
 80011b8:	40004400 	.word	0x40004400
 80011bc:	080048d0 	.word	0x080048d0

080011c0 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	2308      	movs	r3, #8
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	0018      	movs	r0, r3
 80011cc:	2310      	movs	r3, #16
 80011ce:	001a      	movs	r2, r3
 80011d0:	2100      	movs	r1, #0
 80011d2:	f002 fe99 	bl	8003f08 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	003b      	movs	r3, r7
 80011d8:	0018      	movs	r0, r3
 80011da:	2308      	movs	r3, #8
 80011dc:	001a      	movs	r2, r3
 80011de:	2100      	movs	r1, #0
 80011e0:	f002 fe92 	bl	8003f08 <memset>

	//Configure timer 2
	htim2.Instance = TIM2;
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <MX_TIM2_Init+0xb8>)
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	05d2      	lsls	r2, r2, #23
 80011ea:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3200; //32MHZ divided by 3200. This results in 10000 oscillations per second
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <MX_TIM2_Init+0xb8>)
 80011ee:	22c8      	movs	r2, #200	; 0xc8
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_TIM2_Init+0xb8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000; //Counter goes up to 10000, then starts anew. This results in 1 counter restarts every second
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_TIM2_Init+0xb8>)
 80011fc:	4a1f      	ldr	r2, [pc, #124]	; (800127c <MX_TIM2_Init+0xbc>)
 80011fe:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_TIM2_Init+0xb8>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_TIM2_Init+0xb8>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_TIM2_Init+0xb8>)
 800120e:	0018      	movs	r0, r3
 8001210:	f001 fd90 	bl	8002d34 <HAL_TIM_Base_Init>
 8001214:	1e03      	subs	r3, r0, #0
 8001216:	d003      	beq.n	8001220 <MX_TIM2_Init+0x60>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_TIM2_Init+0xc0>)
 800121a:	0018      	movs	r0, r3
 800121c:	f000 fb16 	bl	800184c <UT_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; //Use internal clock as a clock source
 8001220:	2108      	movs	r1, #8
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	0152      	lsls	r2, r2, #5
 8001228:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800122a:	187a      	adds	r2, r7, r1
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_TIM2_Init+0xb8>)
 800122e:	0011      	movs	r1, r2
 8001230:	0018      	movs	r0, r3
 8001232:	f001 ff37 	bl	80030a4 <HAL_TIM_ConfigClockSource>
 8001236:	1e03      	subs	r3, r0, #0
 8001238:	d003      	beq.n	8001242 <MX_TIM2_Init+0x82>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_TIM2_Init+0xc4>)
 800123c:	0018      	movs	r0, r3
 800123e:	f000 fb05 	bl	800184c <UT_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	003b      	movs	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001248:	003b      	movs	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800124e:	003a      	movs	r2, r7
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_TIM2_Init+0xb8>)
 8001252:	0011      	movs	r1, r2
 8001254:	0018      	movs	r0, r3
 8001256:	f002 f8fd 	bl	8003454 <HAL_TIMEx_MasterConfigSynchronization>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d003      	beq.n	8001266 <MX_TIM2_Init+0xa6>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <MX_TIM2_Init+0xc8>)
 8001260:	0018      	movs	r0, r3
 8001262:	f000 faf3 	bl	800184c <UT_Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim2);
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <MX_TIM2_Init+0xb8>)
 8001268:	0018      	movs	r0, r3
 800126a:	f000 f9e7 	bl	800163c <HAL_TIM_MspPostInit>
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b006      	add	sp, #24
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	200000a0 	.word	0x200000a0
 800127c:	00002710 	.word	0x00002710
 8001280:	080048e8 	.word	0x080048e8
 8001284:	08004904 	.word	0x08004904
 8001288:	08004928 	.word	0x08004928

0800128c <MX_TIM21_Init>:

static void MX_TIM21_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	2308      	movs	r3, #8
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	0018      	movs	r0, r3
 8001298:	2310      	movs	r3, #16
 800129a:	001a      	movs	r2, r3
 800129c:	2100      	movs	r1, #0
 800129e:	f002 fe33 	bl	8003f08 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a2:	003b      	movs	r3, r7
 80012a4:	0018      	movs	r0, r3
 80012a6:	2308      	movs	r3, #8
 80012a8:	001a      	movs	r2, r3
 80012aa:	2100      	movs	r1, #0
 80012ac:	f002 fe2c 	bl	8003f08 <memset>

	//Configure timer 21
	htim21.Instance = TIM21;
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <MX_TIM21_Init+0xac>)
 80012b2:	4a22      	ldr	r2, [pc, #136]	; (800133c <MX_TIM21_Init+0xb0>)
 80012b4:	601a      	str	r2, [r3, #0]
	htim21.Init.Prescaler = 28; //32MHZ divided by 28. High resolution for microsecond-Delay-Function
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <MX_TIM21_Init+0xac>)
 80012b8:	221c      	movs	r2, #28
 80012ba:	605a      	str	r2, [r3, #4]
	htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <MX_TIM21_Init+0xac>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
	htim21.Init.Period = 65535;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_TIM21_Init+0xac>)
 80012c4:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <MX_TIM21_Init+0xb4>)
 80012c6:	60da      	str	r2, [r3, #12]
	htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <MX_TIM21_Init+0xac>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
	htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MX_TIM21_Init+0xac>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MX_TIM21_Init+0xac>)
 80012d6:	0018      	movs	r0, r3
 80012d8:	f001 fd2c 	bl	8002d34 <HAL_TIM_Base_Init>
 80012dc:	1e03      	subs	r3, r0, #0
 80012de:	d003      	beq.n	80012e8 <MX_TIM21_Init+0x5c>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_TIM21_Init+0xb8>)
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 fab2 	bl	800184c <UT_Error_Handler>
	}	

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e8:	2108      	movs	r1, #8
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	0152      	lsls	r2, r2, #5
 80012f0:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80012f2:	187a      	adds	r2, r7, r1
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <MX_TIM21_Init+0xac>)
 80012f6:	0011      	movs	r1, r2
 80012f8:	0018      	movs	r0, r3
 80012fa:	f001 fed3 	bl	80030a4 <HAL_TIM_ConfigClockSource>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d003      	beq.n	800130a <MX_TIM21_Init+0x7e>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_TIM21_Init+0xbc>)
 8001304:	0018      	movs	r0, r3
 8001306:	f000 faa1 	bl	800184c <UT_Error_Handler>
	}	

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	003b      	movs	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	003b      	movs	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001316:	003a      	movs	r2, r7
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <MX_TIM21_Init+0xac>)
 800131a:	0011      	movs	r1, r2
 800131c:	0018      	movs	r0, r3
 800131e:	f002 f899 	bl	8003454 <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d003      	beq.n	800132e <MX_TIM21_Init+0xa2>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_TIM21_Init+0xc0>)
 8001328:	0018      	movs	r0, r3
 800132a:	f000 fa8f 	bl	800184c <UT_Error_Handler>
	}
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	b006      	add	sp, #24
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	20000164 	.word	0x20000164
 800133c:	40010800 	.word	0x40010800
 8001340:	0000ffff 	.word	0x0000ffff
 8001344:	080048e8 	.word	0x080048e8
 8001348:	08004904 	.word	0x08004904
 800134c:	08004928 	.word	0x08004928

08001350 <Port_Init>:

static void Port_Init(void)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b08b      	sub	sp, #44	; 0x2c
 8001354:	af00      	add	r7, sp, #0
	//Enable GPIO Ports Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <Port_Init+0xcc>)
 8001358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <Port_Init+0xcc>)
 800135c:	2101      	movs	r1, #1
 800135e:	430a      	orrs	r2, r1
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <Port_Init+0xcc>)
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001366:	2201      	movs	r2, #1
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b2b      	ldr	r3, [pc, #172]	; (800141c <Port_Init+0xcc>)
 8001370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <Port_Init+0xcc>)
 8001374:	2102      	movs	r1, #2
 8001376:	430a      	orrs	r2, r1
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
 800137a:	4b28      	ldr	r3, [pc, #160]	; (800141c <Port_Init+0xcc>)
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	2202      	movs	r2, #2
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <Port_Init+0xcc>)
 8001388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <Port_Init+0xcc>)
 800138c:	2104      	movs	r1, #4
 800138e:	430a      	orrs	r2, r1
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <Port_Init+0xcc>)
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	2204      	movs	r2, #4
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <Port_Init+0xcc>)
 80013a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <Port_Init+0xcc>)
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	430a      	orrs	r2, r1
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <Port_Init+0xcc>)
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	4013      	ands	r3, r2
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

	//Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	2414      	movs	r4, #20
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	0018      	movs	r0, r3
 80013bc:	2314      	movs	r3, #20
 80013be:	001a      	movs	r2, r3
 80013c0:	2100      	movs	r1, #0
 80013c2:	f002 fda1 	bl	8003f08 <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013c6:	193b      	adds	r3, r7, r4
 80013c8:	2220      	movs	r2, #32
 80013ca:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	2201      	movs	r2, #1
 80013d0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	193b      	adds	r3, r7, r4
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013d8:	193b      	adds	r3, r7, r4
 80013da:	2201      	movs	r2, #1
 80013dc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	193a      	adds	r2, r7, r4
 80013e0:	23a0      	movs	r3, #160	; 0xa0
 80013e2:	05db      	lsls	r3, r3, #23
 80013e4:	0011      	movs	r1, r2
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 fc0a 	bl	8001c00 <HAL_GPIO_Init>

	//Initialize all Output-Pins of Port C
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013ec:	0021      	movs	r1, r4
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	0192      	lsls	r2, r2, #6
 80013f4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001408:	187b      	adds	r3, r7, r1
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <Port_Init+0xd0>)
 800140c:	0019      	movs	r1, r3
 800140e:	0010      	movs	r0, r2
 8001410:	f000 fbf6 	bl	8001c00 <HAL_GPIO_Init>
}
 8001414:	46c0      	nop			; (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b00b      	add	sp, #44	; 0x2c
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	50000800 	.word	0x50000800

08001424 <HAL_TIM_PeriodElapsedCallback>:

//Timed interupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{	
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	//Toggle Onboard-LED (1 sec. on and 1 sec. off)
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800142c:	23a0      	movs	r3, #160	; 0xa0
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	2120      	movs	r1, #32
 8001432:	0018      	movs	r0, r3
 8001434:	f000 fd9c 	bl	8001f70 <HAL_GPIO_TogglePin>
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}

08001440 <main>:

int main(void)
{		
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
	//Init stuff
	HAL_Init();
 8001446:	f000 fa69 	bl	800191c <HAL_Init>
	SystemClock_Config();
 800144a:	f7ff fe07 	bl	800105c <SystemClock_Config>
	Port_Init();
 800144e:	f7ff ff7f 	bl	8001350 <Port_Init>
	MX_TIM2_Init();
 8001452:	f7ff feb5 	bl	80011c0 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);	
 8001456:	4b4f      	ldr	r3, [pc, #316]	; (8001594 <main+0x154>)
 8001458:	0018      	movs	r0, r3
 800145a:	f001 fcef 	bl	8002e3c <HAL_TIM_Base_Start_IT>
	MX_USART2_UART_Init();
 800145e:	f7ff fe7b 	bl	8001158 <MX_USART2_UART_Init>
	MX_TIM21_Init();
 8001462:	f7ff ff13 	bl	800128c <MX_TIM21_Init>
	HAL_TIM_Base_Start(&htim21);
 8001466:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <main+0x158>)
 8001468:	0018      	movs	r0, r3
 800146a:	f001 fca3 	bl	8002db4 <HAL_TIM_Base_Start>

	//LCD stuff
	LCD_Init();
 800146e:	f7ff fcbf 	bl	8000df0 <LCD_Init>
	LCD_Set8BitMode();
 8001472:	f7ff fd17 	bl	8000ea4 <LCD_Set8BitMode>
	LCD_ClearDisplay();
 8001476:	f7ff fd3a 	bl	8000eee <LCD_ClearDisplay>
	LCD_ReturnHome();
 800147a:	f7ff fd5d 	bl	8000f38 <LCD_ReturnHome>
	LCD_TurnDisplayOn();
 800147e:	f7ff fd80 	bl	8000f82 <LCD_TurnDisplayOn>
	LCD_printf("Value = %d", 9999);
 8001482:	4a46      	ldr	r2, [pc, #280]	; (800159c <main+0x15c>)
 8001484:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <main+0x160>)
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f7ff fdbf 	bl	800100c <LCD_printf>
	
	HAL_Delay(2000);
 800148e:	23fa      	movs	r3, #250	; 0xfa
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	0018      	movs	r0, r3
 8001494:	f000 fab2 	bl	80019fc <HAL_Delay>
	
	uint16_t humidity = 0, temperature = 0;
 8001498:	1cbb      	adds	r3, r7, #2
 800149a:	2200      	movs	r2, #0
 800149c:	801a      	strh	r2, [r3, #0]
 800149e:	003b      	movs	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	801a      	strh	r2, [r3, #0]
	uint16_t counter = 0;	
 80014a4:	1dbb      	adds	r3, r7, #6
 80014a6:	2200      	movs	r2, #0
 80014a8:	801a      	strh	r2, [r3, #0]

	while (1)
	{				
		//Reading DHT
		DHT22_StartTransmission();
 80014aa:	f7ff f952 	bl	8000752 <DHT22_StartTransmission>
		int8_t response = DHT22_CheckResponse();	 
 80014ae:	1d7c      	adds	r4, r7, #5
 80014b0:	f7ff f967 	bl	8000782 <DHT22_CheckResponse>
 80014b4:	0003      	movs	r3, r0
 80014b6:	7023      	strb	r3, [r4, #0]

		if(response == 0)
 80014b8:	1d7b      	adds	r3, r7, #5
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d104      	bne.n	80014cc <main+0x8c>
		{
			UT_printf("\n\rSensor war nicht low nach 50us!\n\r");
 80014c2:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <main+0x164>)
 80014c4:	0018      	movs	r0, r3
 80014c6:	f000 f9a3 	bl	8001810 <UT_printf>
 80014ca:	e059      	b.n	8001580 <main+0x140>
		}			
		else if(response == 1)
 80014cc:	1d7b      	adds	r3, r7, #5
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d14b      	bne.n	800156e <main+0x12e>
		{			
			if((counter % 2) == 0)
 80014d6:	1dbb      	adds	r3, r7, #6
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	2201      	movs	r2, #1
 80014dc:	4013      	ands	r3, r2
 80014de:	b29b      	uxth	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <main+0xaa>
			{
				DHT22_ReadDataDebug();	
 80014e4:	f7ff f980 	bl	80007e8 <DHT22_ReadDataDebug>
 80014e8:	e04a      	b.n	8001580 <main+0x140>
			}
			else
			{
				int8_t success = DHT22_ReadData(&humidity, &temperature);
 80014ea:	1d3c      	adds	r4, r7, #4
 80014ec:	003a      	movs	r2, r7
 80014ee:	1cbb      	adds	r3, r7, #2
 80014f0:	0011      	movs	r1, r2
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff faa0 	bl	8000a38 <DHT22_ReadData>
 80014f8:	0003      	movs	r3, r0
 80014fa:	7023      	strb	r3, [r4, #0]
				if(success == 0)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b25b      	sxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d12e      	bne.n	8001564 <main+0x124>
				{
					UT_printf("\n\rHumidity: %d.%d%%\n\r", humidity / 10, humidity % 10);
 8001506:	1cbb      	adds	r3, r7, #2
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	210a      	movs	r1, #10
 800150c:	0018      	movs	r0, r3
 800150e:	f7fe fe0d 	bl	800012c <__udivsi3>
 8001512:	0003      	movs	r3, r0
 8001514:	b29b      	uxth	r3, r3
 8001516:	001c      	movs	r4, r3
 8001518:	1cbb      	adds	r3, r7, #2
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	210a      	movs	r1, #10
 800151e:	0018      	movs	r0, r3
 8001520:	f7fe fe8a 	bl	8000238 <__aeabi_uidivmod>
 8001524:	000b      	movs	r3, r1
 8001526:	b29b      	uxth	r3, r3
 8001528:	001a      	movs	r2, r3
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <main+0x168>)
 800152c:	0021      	movs	r1, r4
 800152e:	0018      	movs	r0, r3
 8001530:	f000 f96e 	bl	8001810 <UT_printf>
					UT_printf("Temperature: %d.%d\n\r", temperature / 10, temperature % 10);
 8001534:	003b      	movs	r3, r7
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	210a      	movs	r1, #10
 800153a:	0018      	movs	r0, r3
 800153c:	f7fe fdf6 	bl	800012c <__udivsi3>
 8001540:	0003      	movs	r3, r0
 8001542:	b29b      	uxth	r3, r3
 8001544:	001c      	movs	r4, r3
 8001546:	003b      	movs	r3, r7
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	210a      	movs	r1, #10
 800154c:	0018      	movs	r0, r3
 800154e:	f7fe fe73 	bl	8000238 <__aeabi_uidivmod>
 8001552:	000b      	movs	r3, r1
 8001554:	b29b      	uxth	r3, r3
 8001556:	001a      	movs	r2, r3
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <main+0x16c>)
 800155a:	0021      	movs	r1, r4
 800155c:	0018      	movs	r0, r3
 800155e:	f000 f957 	bl	8001810 <UT_printf>
 8001562:	e00d      	b.n	8001580 <main+0x140>
				}
				else			
				{
					UT_printf("\n\rChecksum wrong!\n\r");
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <main+0x170>)
 8001566:	0018      	movs	r0, r3
 8001568:	f000 f952 	bl	8001810 <UT_printf>
 800156c:	e008      	b.n	8001580 <main+0x140>
				}			
			}			
		}			
		else if(response == -1)
 800156e:	1d7b      	adds	r3, r7, #5
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b25b      	sxtb	r3, r3
 8001574:	3301      	adds	r3, #1
 8001576:	d103      	bne.n	8001580 <main+0x140>
		{
			UT_printf("\n\rSensor war nicht high nach 100us!\n\r");
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <main+0x174>)
 800157a:	0018      	movs	r0, r3
 800157c:	f000 f948 	bl	8001810 <UT_printf>
		}			
		
		counter++;
 8001580:	1dbb      	adds	r3, r7, #6
 8001582:	881a      	ldrh	r2, [r3, #0]
 8001584:	1dbb      	adds	r3, r7, #6
 8001586:	3201      	adds	r2, #1
 8001588:	801a      	strh	r2, [r3, #0]
		HAL_Delay(5000);
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <main+0x178>)
 800158c:	0018      	movs	r0, r3
 800158e:	f000 fa35 	bl	80019fc <HAL_Delay>
	{				
 8001592:	e78a      	b.n	80014aa <main+0x6a>
 8001594:	200000a0 	.word	0x200000a0
 8001598:	20000164 	.word	0x20000164
 800159c:	0000270f 	.word	0x0000270f
 80015a0:	08004958 	.word	0x08004958
 80015a4:	08004964 	.word	0x08004964
 80015a8:	08004988 	.word	0x08004988
 80015ac:	080049a0 	.word	0x080049a0
 80015b0:	080049b8 	.word	0x080049b8
 80015b4:	080049cc 	.word	0x080049cc
 80015b8:	00001388 	.word	0x00001388

080015bc <HAL_MspInit>:
#include "main.h"

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void HAL_MspInit(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <HAL_MspInit+0x24>)
 80015c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_MspInit+0x24>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_MspInit+0x24>)
 80015ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <HAL_MspInit+0x24>)
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	0549      	lsls	r1, r1, #21
 80015d6:	430a      	orrs	r2, r1
 80015d8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	05db      	lsls	r3, r3, #23
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d10e      	bne.n	8001616 <HAL_TIM_Base_MspInit+0x32>
  {
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_TIM_Base_MspInit+0x50>)
 80015fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_TIM_Base_MspInit+0x50>)
 80015fe:	2101      	movs	r1, #1
 8001600:	430a      	orrs	r2, r1
 8001602:	639a      	str	r2, [r3, #56]	; 0x38

    //TIM2 interrupt Init
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	200f      	movs	r0, #15
 800160a:	f000 fac7 	bl	8001b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800160e:	200f      	movs	r0, #15
 8001610:	f000 fad9 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM21)
  {
    //Peripheral clock enable
    __HAL_RCC_TIM21_CLK_ENABLE();
  }
}
 8001614:	e00a      	b.n	800162c <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_TIM_Base_MspInit+0x54>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d105      	bne.n	800162c <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <HAL_TIM_Base_MspInit+0x50>)
 8001622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_TIM_Base_MspInit+0x50>)
 8001626:	2104      	movs	r1, #4
 8001628:	430a      	orrs	r2, r1
 800162a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000
 8001638:	40010800 	.word	0x40010800

0800163c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	240c      	movs	r4, #12
 8001646:	193b      	adds	r3, r7, r4
 8001648:	0018      	movs	r0, r3
 800164a:	2314      	movs	r3, #20
 800164c:	001a      	movs	r2, r3
 800164e:	2100      	movs	r1, #0
 8001650:	f002 fc5a 	bl	8003f08 <memset>
  if(htim->Instance==TIM2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	05db      	lsls	r3, r3, #23
 800165c:	429a      	cmp	r2, r3
 800165e:	d123      	bne.n	80016a8 <HAL_TIM_MspPostInit+0x6c>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_TIM_MspPostInit+0x74>)
 8001662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_TIM_MspPostInit+0x74>)
 8001666:	2101      	movs	r1, #1
 8001668:	430a      	orrs	r2, r1
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_TIM_MspPostInit+0x74>)
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	2201      	movs	r2, #1
 8001672:	4013      	ands	r3, r2
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]

    //TIM2 GPIO Configuration - PA15 ------> TIM2_CH1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001678:	193b      	adds	r3, r7, r4
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	0212      	lsls	r2, r2, #8
 800167e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	0021      	movs	r1, r4
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2202      	movs	r2, #2
 8001686:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2205      	movs	r2, #5
 8001698:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	187a      	adds	r2, r7, r1
 800169c:	23a0      	movs	r3, #160	; 0xa0
 800169e:	05db      	lsls	r3, r3, #23
 80016a0:	0011      	movs	r1, r2
 80016a2:	0018      	movs	r0, r3
 80016a4:	f000 faac 	bl	8001c00 <HAL_GPIO_Init>
  }
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b009      	add	sp, #36	; 0x24
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	40021000 	.word	0x40021000

080016b4 <HAL_UART_MspInit>:
    __HAL_RCC_TIM21_CLK_DISABLE();
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	240c      	movs	r4, #12
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	0018      	movs	r0, r3
 80016c2:	2314      	movs	r3, #20
 80016c4:	001a      	movs	r2, r3
 80016c6:	2100      	movs	r1, #0
 80016c8:	f002 fc1e 	bl	8003f08 <memset>
  if(huart->Instance==USART2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <HAL_UART_MspInit+0x68>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d11d      	bne.n	8001712 <HAL_UART_MspInit+0x5e>
  {
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_UART_MspInit+0x6c>)
 80016d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_UART_MspInit+0x6c>)
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	0289      	lsls	r1, r1, #10
 80016e0:	430a      	orrs	r2, r1
 80016e2:	639a      	str	r2, [r3, #56]	; 0x38

    //USART2 GPIO Configuration
    //PA2     ------> USART2_TX
    //PA3     ------> USART2_RX
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016e4:	0021      	movs	r1, r4
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	220c      	movs	r2, #12
 80016ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2202      	movs	r2, #2
 80016f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	2203      	movs	r2, #3
 80016fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2204      	movs	r2, #4
 8001702:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	187a      	adds	r2, r7, r1
 8001706:	23a0      	movs	r3, #160	; 0xa0
 8001708:	05db      	lsls	r3, r3, #23
 800170a:	0011      	movs	r1, r2
 800170c:	0018      	movs	r0, r3
 800170e:	f000 fa77 	bl	8001c00 <HAL_GPIO_Init>
  }
}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b009      	add	sp, #36	; 0x24
 8001718:	bd90      	pop	{r4, r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	40004400 	.word	0x40004400
 8001720:	40021000 	.word	0x40021000

08001724 <NMI_Handler>:
#include "stm32l0xx_it.h"

extern TIM_HandleTypeDef htim2;

void NMI_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

  }
}

void HardFault_Handler(void)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0

}
 8001734:	46c0      	nop			; (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <PendSV_Handler>:


void PendSV_Handler(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0

}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001748:	f000 f93c 	bl	80019c4 <HAL_IncTick>
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <TIM2_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l0xx.s).                    */
/******************************************************************************/

void TIM2_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <TIM2_IRQHandler+0x14>)
 800175a:	0018      	movs	r0, r3
 800175c:	f001 fbba 	bl	8002ed4 <HAL_TIM_IRQHandler>
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	200000a0 	.word	0x200000a0

0800176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <_sbrk+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <_sbrk+0x60>)
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <_sbrk+0x64>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <_sbrk+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	429a      	cmp	r2, r3
 800179a:	d207      	bcs.n	80017ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800179c:	f002 fb8a 	bl	8003eb4 <__errno>
 80017a0:	0003      	movs	r3, r0
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a6:	2301      	movs	r3, #1
 80017a8:	425b      	negs	r3, r3
 80017aa:	e009      	b.n	80017c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	18d2      	adds	r2, r2, r3
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <_sbrk+0x64>)
 80017bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b006      	add	sp, #24
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20005000 	.word	0x20005000
 80017cc:	00000400 	.word	0x00000400
 80017d0:	20000094 	.word	0x20000094
 80017d4:	200001b8 	.word	0x200001b8

080017d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <send_to_UART>:
#include "utility.h"

void send_to_UART(char* msg)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	0018      	movs	r0, r3
 80017f0:	f7fe fc8a 	bl	8000108 <strlen>
 80017f4:	0003      	movs	r3, r0
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	2301      	movs	r3, #1
 80017fa:	425b      	negs	r3, r3
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4803      	ldr	r0, [pc, #12]	; (800180c <send_to_UART+0x28>)
 8001800:	f001 fed4 	bl	80035ac <HAL_UART_Transmit>
}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200000e0 	.word	0x200000e0

08001810 <UT_printf>:

void UT_printf(const char* format, ...)
{
 8001810:	b40f      	push	{r0, r1, r2, r3}
 8001812:	b580      	push	{r7, lr}
 8001814:	b08a      	sub	sp, #40	; 0x28
 8001816:	af00      	add	r7, sp, #0
	va_list args;
	char buffer[32];	
	memset(buffer, 0, 32);
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2220      	movs	r2, #32
 800181c:	2100      	movs	r1, #0
 800181e:	0018      	movs	r0, r3
 8001820:	f002 fb72 	bl	8003f08 <memset>

	va_start(args, format);	
 8001824:	2334      	movs	r3, #52	; 0x34
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
	vsprintf(buffer, format, args);
 800182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	0018      	movs	r0, r3
 8001832:	f002 fb87 	bl	8003f44 <vsiprintf>
	send_to_UART(buffer);
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff ffd3 	bl	80017e4 <send_to_UART>
	va_end(args);
}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b00a      	add	sp, #40	; 0x28
 8001844:	bc80      	pop	{r7}
 8001846:	bc08      	pop	{r3}
 8001848:	b004      	add	sp, #16
 800184a:	4718      	bx	r3

0800184c <UT_Error_Handler>:

void UT_Error_Handler(char* err_msg)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001854:	b672      	cpsid	i
}
 8001856:	46c0      	nop			; (mov r8, r8)
    __disable_irq();
    while (1)
	{
    	send_to_UART(err_msg);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0018      	movs	r0, r3
 800185c:	f7ff ffc2 	bl	80017e4 <send_to_UART>
 8001860:	e7fa      	b.n	8001858 <UT_Error_Handler+0xc>
	...

08001864 <UT_Delay_MicroSeconds>:
	}
}

void UT_Delay_MicroSeconds(uint16_t uSec)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	0002      	movs	r2, r0
 800186c:	1dbb      	adds	r3, r7, #6
 800186e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim21, 0);
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <UT_Delay_MicroSeconds+0x30>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2200      	movs	r2, #0
 8001876:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim21) < uSec);
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <UT_Delay_MicroSeconds+0x30>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001880:	1dbb      	adds	r3, r7, #6
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d3f8      	bcc.n	800187a <UT_Delay_MicroSeconds+0x16>
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	20000164 	.word	0x20000164

08001898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001898:	4813      	ldr	r0, [pc, #76]	; (80018e8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800189a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800189c:	4813      	ldr	r0, [pc, #76]	; (80018ec <LoopForever+0x6>)
    LDR R1, [R0]
 800189e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80018a0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80018a2:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <LoopForever+0xa>)
    CMP R1, R2
 80018a4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80018a6:	d105      	bne.n	80018b4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80018a8:	4812      	ldr	r0, [pc, #72]	; (80018f4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80018aa:	4913      	ldr	r1, [pc, #76]	; (80018f8 <LoopForever+0x12>)
    STR R1, [R0]
 80018ac:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80018ae:	4813      	ldr	r0, [pc, #76]	; (80018fc <LoopForever+0x16>)
    LDR R1,=0x00000000
 80018b0:	4913      	ldr	r1, [pc, #76]	; (8001900 <LoopForever+0x1a>)
    STR R1, [R0]
 80018b2:	6001      	str	r1, [r0, #0]

080018b4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b4:	4813      	ldr	r0, [pc, #76]	; (8001904 <LoopForever+0x1e>)
  ldr r1, =_edata
 80018b6:	4914      	ldr	r1, [pc, #80]	; (8001908 <LoopForever+0x22>)
  ldr r2, =_sidata
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <LoopForever+0x26>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a11      	ldr	r2, [pc, #68]	; (8001910 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80018cc:	4c11      	ldr	r4, [pc, #68]	; (8001914 <LoopForever+0x2e>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018da:	f7ff ff7d 	bl	80017d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018de:	f002 faef 	bl	8003ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f7ff fdad 	bl	8001440 <main>

080018e6 <LoopForever>:

LoopForever:
    b LoopForever
 80018e6:	e7fe      	b.n	80018e6 <LoopForever>
   ldr   r0, =_estack
 80018e8:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 80018ec:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80018f0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80018f4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80018f8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80018fc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001900:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800190c:	08004aa4 	.word	0x08004aa4
  ldr r2, =_sbss
 8001910:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001914:	200001b8 	.word	0x200001b8

08001918 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_IRQHandler>
	...

0800191c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_Init+0x3c>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_Init+0x3c>)
 800192e:	2140      	movs	r1, #64	; 0x40
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001934:	2000      	movs	r0, #0
 8001936:	f000 f811 	bl	800195c <HAL_InitTick>
 800193a:	1e03      	subs	r3, r0, #0
 800193c:	d003      	beq.n	8001946 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	e001      	b.n	800194a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001946:	f7ff fe39 	bl	80015bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b002      	add	sp, #8
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	40022000 	.word	0x40022000

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_InitTick+0x5c>)
 8001966:	681c      	ldr	r4, [r3, #0]
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <HAL_InitTick+0x60>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	0019      	movs	r1, r3
 800196e:	23fa      	movs	r3, #250	; 0xfa
 8001970:	0098      	lsls	r0, r3, #2
 8001972:	f7fe fbdb 	bl	800012c <__udivsi3>
 8001976:	0003      	movs	r3, r0
 8001978:	0019      	movs	r1, r3
 800197a:	0020      	movs	r0, r4
 800197c:	f7fe fbd6 	bl	800012c <__udivsi3>
 8001980:	0003      	movs	r3, r0
 8001982:	0018      	movs	r0, r3
 8001984:	f000 f92f 	bl	8001be6 <HAL_SYSTICK_Config>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d001      	beq.n	8001990 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e00f      	b.n	80019b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d80b      	bhi.n	80019ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	2301      	movs	r3, #1
 800199a:	425b      	negs	r3, r3
 800199c:	2200      	movs	r2, #0
 800199e:	0018      	movs	r0, r3
 80019a0:	f000 f8fc 	bl	8001b9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_InitTick+0x64>)
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b003      	add	sp, #12
 80019b6:	bd90      	pop	{r4, r7, pc}
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000008 	.word	0x20000008
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_IncTick+0x1c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	001a      	movs	r2, r3
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_IncTick+0x20>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	18d2      	adds	r2, r2, r3
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <HAL_IncTick+0x20>)
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	20000008 	.word	0x20000008
 80019e4:	200001a4 	.word	0x200001a4

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <HAL_GetTick+0x10>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	200001a4 	.word	0x200001a4

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff fff0 	bl	80019e8 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3301      	adds	r3, #1
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_Delay+0x44>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	189b      	adds	r3, r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	f7ff ffe0 	bl	80019e8 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f7      	bhi.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b004      	add	sp, #16
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	20000008 	.word	0x20000008

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	1dfb      	adds	r3, r7, #7
 8001a4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b7f      	cmp	r3, #127	; 0x7f
 8001a56:	d809      	bhi.n	8001a6c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a58:	1dfb      	adds	r3, r7, #7
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	231f      	movs	r3, #31
 8001a60:	401a      	ands	r2, r3
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__NVIC_EnableIRQ+0x30>)
 8001a64:	2101      	movs	r1, #1
 8001a66:	4091      	lsls	r1, r2
 8001a68:	000a      	movs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
  }
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b002      	add	sp, #8
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	e000e100 	.word	0xe000e100

08001a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	0002      	movs	r2, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a86:	1dfb      	adds	r3, r7, #7
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a8c:	d828      	bhi.n	8001ae0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a8e:	4a2f      	ldr	r2, [pc, #188]	; (8001b4c <__NVIC_SetPriority+0xd4>)
 8001a90:	1dfb      	adds	r3, r7, #7
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	33c0      	adds	r3, #192	; 0xc0
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	589b      	ldr	r3, [r3, r2]
 8001a9e:	1dfa      	adds	r2, r7, #7
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	0011      	movs	r1, r2
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	00d2      	lsls	r2, r2, #3
 8001aaa:	21ff      	movs	r1, #255	; 0xff
 8001aac:	4091      	lsls	r1, r2
 8001aae:	000a      	movs	r2, r1
 8001ab0:	43d2      	mvns	r2, r2
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	22ff      	movs	r2, #255	; 0xff
 8001abc:	401a      	ands	r2, r3
 8001abe:	1dfb      	adds	r3, r7, #7
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	4003      	ands	r3, r0
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001acc:	481f      	ldr	r0, [pc, #124]	; (8001b4c <__NVIC_SetPriority+0xd4>)
 8001ace:	1dfb      	adds	r3, r7, #7
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b25b      	sxtb	r3, r3
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	33c0      	adds	r3, #192	; 0xc0
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ade:	e031      	b.n	8001b44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <__NVIC_SetPriority+0xd8>)
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	230f      	movs	r3, #15
 8001aea:	400b      	ands	r3, r1
 8001aec:	3b08      	subs	r3, #8
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3306      	adds	r3, #6
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	18d3      	adds	r3, r2, r3
 8001af6:	3304      	adds	r3, #4
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	1dfa      	adds	r2, r7, #7
 8001afc:	7812      	ldrb	r2, [r2, #0]
 8001afe:	0011      	movs	r1, r2
 8001b00:	2203      	movs	r2, #3
 8001b02:	400a      	ands	r2, r1
 8001b04:	00d2      	lsls	r2, r2, #3
 8001b06:	21ff      	movs	r1, #255	; 0xff
 8001b08:	4091      	lsls	r1, r2
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	43d2      	mvns	r2, r2
 8001b0e:	401a      	ands	r2, r3
 8001b10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	019b      	lsls	r3, r3, #6
 8001b16:	22ff      	movs	r2, #255	; 0xff
 8001b18:	401a      	ands	r2, r3
 8001b1a:	1dfb      	adds	r3, r7, #7
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	2303      	movs	r3, #3
 8001b22:	4003      	ands	r3, r0
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b28:	4809      	ldr	r0, [pc, #36]	; (8001b50 <__NVIC_SetPriority+0xd8>)
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	001c      	movs	r4, r3
 8001b30:	230f      	movs	r3, #15
 8001b32:	4023      	ands	r3, r4
 8001b34:	3b08      	subs	r3, #8
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	3306      	adds	r3, #6
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	18c3      	adds	r3, r0, r3
 8001b40:	3304      	adds	r3, #4
 8001b42:	601a      	str	r2, [r3, #0]
}
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b003      	add	sp, #12
 8001b4a:	bd90      	pop	{r4, r7, pc}
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	1e5a      	subs	r2, r3, #1
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	045b      	lsls	r3, r3, #17
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d301      	bcc.n	8001b6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e010      	b.n	8001b8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <SysTick_Config+0x44>)
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	3a01      	subs	r2, #1
 8001b72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b74:	2301      	movs	r3, #1
 8001b76:	425b      	negs	r3, r3
 8001b78:	2103      	movs	r1, #3
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f7ff ff7c 	bl	8001a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <SysTick_Config+0x44>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <SysTick_Config+0x44>)
 8001b88:	2207      	movs	r2, #7
 8001b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b002      	add	sp, #8
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	e000e010 	.word	0xe000e010

08001b9c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	1c02      	adds	r2, r0, #0
 8001bac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff ff5d 	bl	8001a78 <__NVIC_SetPriority>
}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b004      	add	sp, #16
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	0002      	movs	r2, r0
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd2:	1dfb      	adds	r3, r7, #7
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff ff33 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7ff ffaf 	bl	8001b54 <SysTick_Config>
 8001bf6:	0003      	movs	r3, r0
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b002      	add	sp, #8
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c16:	e155      	b.n	8001ec4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4091      	lsls	r1, r2
 8001c22:	000a      	movs	r2, r1
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d100      	bne.n	8001c30 <HAL_GPIO_Init+0x30>
 8001c2e:	e146      	b.n	8001ebe <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d00b      	beq.n	8001c50 <HAL_GPIO_Init+0x50>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d007      	beq.n	8001c50 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c44:	2b11      	cmp	r3, #17
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b12      	cmp	r3, #18
 8001c4e:	d130      	bne.n	8001cb2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	0013      	movs	r3, r2
 8001c60:	43da      	mvns	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	409a      	lsls	r2, r3
 8001c72:	0013      	movs	r3, r2
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c86:	2201      	movs	r2, #1
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	0013      	movs	r3, r2
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0xf2>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b12      	cmp	r3, #18
 8001cf0:	d123      	bne.n	8001d3a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	58d3      	ldr	r3, [r2, r3]
 8001cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2207      	movs	r2, #7
 8001d04:	4013      	ands	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	0013      	movs	r3, r2
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2107      	movs	r1, #7
 8001d1e:	400b      	ands	r3, r1
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	409a      	lsls	r2, r3
 8001d24:	0013      	movs	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	08da      	lsrs	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3208      	adds	r2, #8
 8001d34:	0092      	lsls	r2, r2, #2
 8001d36:	6939      	ldr	r1, [r7, #16]
 8001d38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	409a      	lsls	r2, r3
 8001d48:	0013      	movs	r3, r2
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2203      	movs	r2, #3
 8001d58:	401a      	ands	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	055b      	lsls	r3, r3, #21
 8001d76:	4013      	ands	r3, r2
 8001d78:	d100      	bne.n	8001d7c <HAL_GPIO_Init+0x17c>
 8001d7a:	e0a0      	b.n	8001ebe <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7c:	4b57      	ldr	r3, [pc, #348]	; (8001edc <HAL_GPIO_Init+0x2dc>)
 8001d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d80:	4b56      	ldr	r3, [pc, #344]	; (8001edc <HAL_GPIO_Init+0x2dc>)
 8001d82:	2101      	movs	r1, #1
 8001d84:	430a      	orrs	r2, r1
 8001d86:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d88:	4a55      	ldr	r2, [pc, #340]	; (8001ee0 <HAL_GPIO_Init+0x2e0>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	589b      	ldr	r3, [r3, r2]
 8001d94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2203      	movs	r2, #3
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	409a      	lsls	r2, r3
 8001da2:	0013      	movs	r3, r2
 8001da4:	43da      	mvns	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	23a0      	movs	r3, #160	; 0xa0
 8001db0:	05db      	lsls	r3, r3, #23
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d01f      	beq.n	8001df6 <HAL_GPIO_Init+0x1f6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4a      	ldr	r2, [pc, #296]	; (8001ee4 <HAL_GPIO_Init+0x2e4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_Init+0x1f2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a49      	ldr	r2, [pc, #292]	; (8001ee8 <HAL_GPIO_Init+0x2e8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0x1ee>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a48      	ldr	r2, [pc, #288]	; (8001eec <HAL_GPIO_Init+0x2ec>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_Init+0x1ea>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a47      	ldr	r2, [pc, #284]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_Init+0x1e6>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a46      	ldr	r2, [pc, #280]	; (8001ef4 <HAL_GPIO_Init+0x2f4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_Init+0x1e2>
 8001dde:	2305      	movs	r3, #5
 8001de0:	e00a      	b.n	8001df8 <HAL_GPIO_Init+0x1f8>
 8001de2:	2306      	movs	r3, #6
 8001de4:	e008      	b.n	8001df8 <HAL_GPIO_Init+0x1f8>
 8001de6:	2304      	movs	r3, #4
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x1f8>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x1f8>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x1f8>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x1f8>
 8001df6:	2300      	movs	r3, #0
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	2103      	movs	r1, #3
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e08:	4935      	ldr	r1, [pc, #212]	; (8001ee0 <HAL_GPIO_Init+0x2e0>)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <HAL_GPIO_Init+0x2f8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	025b      	lsls	r3, r3, #9
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <HAL_GPIO_Init+0x2f8>)
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001e40:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <HAL_GPIO_Init+0x2f8>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	029b      	lsls	r3, r3, #10
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e64:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <HAL_GPIO_Init+0x2f8>)
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e6a:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <HAL_GPIO_Init+0x2f8>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43da      	mvns	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	035b      	lsls	r3, r3, #13
 8001e82:	4013      	ands	r3, r2
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_GPIO_Init+0x2f8>)
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_GPIO_Init+0x2f8>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	039b      	lsls	r3, r3, #14
 8001eac:	4013      	ands	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_GPIO_Init+0x2f8>)
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	40da      	lsrs	r2, r3
 8001ecc:	1e13      	subs	r3, r2, #0
 8001ece:	d000      	beq.n	8001ed2 <HAL_GPIO_Init+0x2d2>
 8001ed0:	e6a2      	b.n	8001c18 <HAL_GPIO_Init+0x18>
  }
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b006      	add	sp, #24
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	50000400 	.word	0x50000400
 8001ee8:	50000800 	.word	0x50000800
 8001eec:	50000c00 	.word	0x50000c00
 8001ef0:	50001000 	.word	0x50001000
 8001ef4:	50001c00 	.word	0x50001c00
 8001ef8:	40010400 	.word	0x40010400

08001efc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	000a      	movs	r2, r1
 8001f06:	1cbb      	adds	r3, r7, #2
 8001f08:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	1cba      	adds	r2, r7, #2
 8001f10:	8812      	ldrh	r2, [r2, #0]
 8001f12:	4013      	ands	r3, r2
 8001f14:	d004      	beq.n	8001f20 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f16:	230f      	movs	r3, #15
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e003      	b.n	8001f28 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f20:	230f      	movs	r3, #15
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f28:	230f      	movs	r3, #15
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	781b      	ldrb	r3, [r3, #0]
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	0008      	movs	r0, r1
 8001f40:	0011      	movs	r1, r2
 8001f42:	1cbb      	adds	r3, r7, #2
 8001f44:	1c02      	adds	r2, r0, #0
 8001f46:	801a      	strh	r2, [r3, #0]
 8001f48:	1c7b      	adds	r3, r7, #1
 8001f4a:	1c0a      	adds	r2, r1, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f4e:	1c7b      	adds	r3, r7, #1
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d004      	beq.n	8001f60 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f56:	1cbb      	adds	r3, r7, #2
 8001f58:	881a      	ldrh	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001f5e:	e003      	b.n	8001f68 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001f60:	1cbb      	adds	r3, r7, #2
 8001f62:	881a      	ldrh	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	000a      	movs	r2, r1
 8001f7a:	1cbb      	adds	r3, r7, #2
 8001f7c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f84:	1cbb      	adds	r3, r7, #2
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	041a      	lsls	r2, r3, #16
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	1cb9      	adds	r1, r7, #2
 8001f94:	8809      	ldrh	r1, [r1, #0]
 8001f96:	400b      	ands	r3, r1
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	619a      	str	r2, [r3, #24]
}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b004      	add	sp, #16
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f000 fb6c 	bl	8002694 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fbc:	4bc8      	ldr	r3, [pc, #800]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	220c      	movs	r2, #12
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc6:	4bc6      	ldr	r3, [pc, #792]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	025b      	lsls	r3, r3, #9
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d100      	bne.n	8001fde <HAL_RCC_OscConfig+0x36>
 8001fdc:	e07d      	b.n	80020da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d007      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	d112      	bne.n	8002010 <HAL_RCC_OscConfig+0x68>
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	025b      	lsls	r3, r3, #9
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d10d      	bne.n	8002010 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	4bba      	ldr	r3, [pc, #744]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	029b      	lsls	r3, r3, #10
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d100      	bne.n	8002002 <HAL_RCC_OscConfig+0x5a>
 8002000:	e06a      	b.n	80020d8 <HAL_RCC_OscConfig+0x130>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d166      	bne.n	80020d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	f000 fb42 	bl	8002694 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	025b      	lsls	r3, r3, #9
 8002018:	429a      	cmp	r2, r3
 800201a:	d107      	bne.n	800202c <HAL_RCC_OscConfig+0x84>
 800201c:	4bb0      	ldr	r3, [pc, #704]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4baf      	ldr	r3, [pc, #700]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	0249      	lsls	r1, r1, #9
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e027      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	23a0      	movs	r3, #160	; 0xa0
 8002032:	02db      	lsls	r3, r3, #11
 8002034:	429a      	cmp	r2, r3
 8002036:	d10e      	bne.n	8002056 <HAL_RCC_OscConfig+0xae>
 8002038:	4ba9      	ldr	r3, [pc, #676]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4ba8      	ldr	r3, [pc, #672]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	02c9      	lsls	r1, r1, #11
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	4ba6      	ldr	r3, [pc, #664]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4ba5      	ldr	r3, [pc, #660]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 800204c:	2180      	movs	r1, #128	; 0x80
 800204e:	0249      	lsls	r1, r1, #9
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e012      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 8002056:	4ba2      	ldr	r3, [pc, #648]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4ba1      	ldr	r3, [pc, #644]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 800205c:	49a1      	ldr	r1, [pc, #644]	; (80022e4 <HAL_RCC_OscConfig+0x33c>)
 800205e:	400a      	ands	r2, r1
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	4b9f      	ldr	r3, [pc, #636]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	025b      	lsls	r3, r3, #9
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4b9b      	ldr	r3, [pc, #620]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b9a      	ldr	r3, [pc, #616]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002076:	499c      	ldr	r1, [pc, #624]	; (80022e8 <HAL_RCC_OscConfig+0x340>)
 8002078:	400a      	ands	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d014      	beq.n	80020ae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff fcb0 	bl	80019e8 <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800208e:	f7ff fcab 	bl	80019e8 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e2f9      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020a0:	4b8f      	ldr	r3, [pc, #572]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	029b      	lsls	r3, r3, #10
 80020a8:	4013      	ands	r3, r2
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0xe6>
 80020ac:	e015      	b.n	80020da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7ff fc9b 	bl	80019e8 <HAL_GetTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff fc96 	bl	80019e8 <HAL_GetTick>
 80020bc:	0002      	movs	r2, r0
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e2e4      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020ca:	4b85      	ldr	r3, [pc, #532]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	029b      	lsls	r3, r3, #10
 80020d2:	4013      	ands	r3, r2
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x110>
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2202      	movs	r2, #2
 80020e0:	4013      	ands	r3, r2
 80020e2:	d100      	bne.n	80020e6 <HAL_RCC_OscConfig+0x13e>
 80020e4:	e099      	b.n	800221a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	2220      	movs	r2, #32
 80020f0:	4013      	ands	r3, r2
 80020f2:	d009      	beq.n	8002108 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80020f4:	4b7a      	ldr	r3, [pc, #488]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b79      	ldr	r3, [pc, #484]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80020fa:	2120      	movs	r1, #32
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	2220      	movs	r2, #32
 8002104:	4393      	bics	r3, r2
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b04      	cmp	r3, #4
 800210c:	d005      	beq.n	800211a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	2b0c      	cmp	r3, #12
 8002112:	d13e      	bne.n	8002192 <HAL_RCC_OscConfig+0x1ea>
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d13b      	bne.n	8002192 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800211a:	4b71      	ldr	r3, [pc, #452]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2204      	movs	r2, #4
 8002120:	4013      	ands	r3, r2
 8002122:	d004      	beq.n	800212e <HAL_RCC_OscConfig+0x186>
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e2b2      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212e:	4b6c      	ldr	r3, [pc, #432]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4a6e      	ldr	r2, [pc, #440]	; (80022ec <HAL_RCC_OscConfig+0x344>)
 8002134:	4013      	ands	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	021a      	lsls	r2, r3, #8
 800213e:	4b68      	ldr	r3, [pc, #416]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002144:	4b66      	ldr	r3, [pc, #408]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2209      	movs	r2, #9
 800214a:	4393      	bics	r3, r2
 800214c:	0019      	movs	r1, r3
 800214e:	4b64      	ldr	r3, [pc, #400]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002156:	f000 fbeb 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 800215a:	0001      	movs	r1, r0
 800215c:	4b60      	ldr	r3, [pc, #384]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	220f      	movs	r2, #15
 8002164:	4013      	ands	r3, r2
 8002166:	4a62      	ldr	r2, [pc, #392]	; (80022f0 <HAL_RCC_OscConfig+0x348>)
 8002168:	5cd3      	ldrb	r3, [r2, r3]
 800216a:	000a      	movs	r2, r1
 800216c:	40da      	lsrs	r2, r3
 800216e:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <HAL_RCC_OscConfig+0x34c>)
 8002170:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002172:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <HAL_RCC_OscConfig+0x350>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2513      	movs	r5, #19
 8002178:	197c      	adds	r4, r7, r5
 800217a:	0018      	movs	r0, r3
 800217c:	f7ff fbee 	bl	800195c <HAL_InitTick>
 8002180:	0003      	movs	r3, r0
 8002182:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002184:	197b      	adds	r3, r7, r5
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d046      	beq.n	800221a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800218c:	197b      	adds	r3, r7, r5
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	e280      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	2b00      	cmp	r3, #0
 8002196:	d027      	beq.n	80021e8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002198:	4b51      	ldr	r3, [pc, #324]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2209      	movs	r2, #9
 800219e:	4393      	bics	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80021a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7ff fc1d 	bl	80019e8 <HAL_GetTick>
 80021ae:	0003      	movs	r3, r0
 80021b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b4:	f7ff fc18 	bl	80019e8 <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e266      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021c6:	4b46      	ldr	r3, [pc, #280]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2204      	movs	r2, #4
 80021cc:	4013      	ands	r3, r2
 80021ce:	d0f1      	beq.n	80021b4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b43      	ldr	r3, [pc, #268]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a45      	ldr	r2, [pc, #276]	; (80022ec <HAL_RCC_OscConfig+0x344>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	0019      	movs	r1, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	021a      	lsls	r2, r3, #8
 80021e0:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80021e2:	430a      	orrs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	e018      	b.n	800221a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e8:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b3c      	ldr	r3, [pc, #240]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80021ee:	2101      	movs	r1, #1
 80021f0:	438a      	bics	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff fbf8 	bl	80019e8 <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fe:	f7ff fbf3 	bl	80019e8 <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e241      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002210:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2204      	movs	r2, #4
 8002216:	4013      	ands	r3, r2
 8002218:	d1f1      	bne.n	80021fe <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2210      	movs	r2, #16
 8002220:	4013      	ands	r3, r2
 8002222:	d100      	bne.n	8002226 <HAL_RCC_OscConfig+0x27e>
 8002224:	e0a1      	b.n	800236a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d140      	bne.n	80022ae <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800222c:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4013      	ands	r3, r2
 8002236:	d005      	beq.n	8002244 <HAL_RCC_OscConfig+0x29c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e227      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002244:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <HAL_RCC_OscConfig+0x354>)
 800224a:	4013      	ands	r3, r2
 800224c:	0019      	movs	r1, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1a      	ldr	r2, [r3, #32]
 8002252:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002254:	430a      	orrs	r2, r1
 8002256:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002258:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	0a19      	lsrs	r1, r3, #8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	061a      	lsls	r2, r3, #24
 8002266:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002268:	430a      	orrs	r2, r1
 800226a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	0b5b      	lsrs	r3, r3, #13
 8002272:	3301      	adds	r3, #1
 8002274:	2280      	movs	r2, #128	; 0x80
 8002276:	0212      	lsls	r2, r2, #8
 8002278:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	210f      	movs	r1, #15
 8002282:	400b      	ands	r3, r1
 8002284:	491a      	ldr	r1, [pc, #104]	; (80022f0 <HAL_RCC_OscConfig+0x348>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800228a:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <HAL_RCC_OscConfig+0x34c>)
 800228c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <HAL_RCC_OscConfig+0x350>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2513      	movs	r5, #19
 8002294:	197c      	adds	r4, r7, r5
 8002296:	0018      	movs	r0, r3
 8002298:	f7ff fb60 	bl	800195c <HAL_InitTick>
 800229c:	0003      	movs	r3, r0
 800229e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80022a0:	197b      	adds	r3, r7, r5
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d060      	beq.n	800236a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80022a8:	197b      	adds	r3, r7, r5
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	e1f2      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d03f      	beq.n	8002336 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80022bc:	2180      	movs	r1, #128	; 0x80
 80022be:	0049      	lsls	r1, r1, #1
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff fb90 	bl	80019e8 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022cc:	e018      	b.n	8002300 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ce:	f7ff fb8b 	bl	80019e8 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d911      	bls.n	8002300 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1d9      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
 80022e0:	40021000 	.word	0x40021000
 80022e4:	fffeffff 	.word	0xfffeffff
 80022e8:	fffbffff 	.word	0xfffbffff
 80022ec:	ffffe0ff 	.word	0xffffe0ff
 80022f0:	080049f4 	.word	0x080049f4
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000004 	.word	0x20000004
 80022fc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002300:	4bc9      	ldr	r3, [pc, #804]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4013      	ands	r3, r2
 800230a:	d0e0      	beq.n	80022ce <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800230c:	4bc6      	ldr	r3, [pc, #792]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4ac6      	ldr	r2, [pc, #792]	; (800262c <HAL_RCC_OscConfig+0x684>)
 8002312:	4013      	ands	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	4bc3      	ldr	r3, [pc, #780]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002320:	4bc1      	ldr	r3, [pc, #772]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	0a19      	lsrs	r1, r3, #8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	061a      	lsls	r2, r3, #24
 800232e:	4bbe      	ldr	r3, [pc, #760]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002330:	430a      	orrs	r2, r1
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	e019      	b.n	800236a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002336:	4bbc      	ldr	r3, [pc, #752]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4bbb      	ldr	r3, [pc, #748]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 800233c:	49bc      	ldr	r1, [pc, #752]	; (8002630 <HAL_RCC_OscConfig+0x688>)
 800233e:	400a      	ands	r2, r1
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7ff fb51 	bl	80019e8 <HAL_GetTick>
 8002346:	0003      	movs	r3, r0
 8002348:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800234c:	f7ff fb4c 	bl	80019e8 <HAL_GetTick>
 8002350:	0002      	movs	r2, r0
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e19a      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800235e:	4bb2      	ldr	r3, [pc, #712]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4013      	ands	r3, r2
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2208      	movs	r2, #8
 8002370:	4013      	ands	r3, r2
 8002372:	d036      	beq.n	80023e2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d019      	beq.n	80023b0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237c:	4baa      	ldr	r3, [pc, #680]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 800237e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002380:	4ba9      	ldr	r3, [pc, #676]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002382:	2101      	movs	r1, #1
 8002384:	430a      	orrs	r2, r1
 8002386:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002388:	f7ff fb2e 	bl	80019e8 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002392:	f7ff fb29 	bl	80019e8 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e177      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023a4:	4ba0      	ldr	r3, [pc, #640]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80023a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a8:	2202      	movs	r2, #2
 80023aa:	4013      	ands	r3, r2
 80023ac:	d0f1      	beq.n	8002392 <HAL_RCC_OscConfig+0x3ea>
 80023ae:	e018      	b.n	80023e2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b0:	4b9d      	ldr	r3, [pc, #628]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80023b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023b4:	4b9c      	ldr	r3, [pc, #624]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80023b6:	2101      	movs	r1, #1
 80023b8:	438a      	bics	r2, r1
 80023ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023bc:	f7ff fb14 	bl	80019e8 <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c6:	f7ff fb0f 	bl	80019e8 <HAL_GetTick>
 80023ca:	0002      	movs	r2, r0
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e15d      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023d8:	4b93      	ldr	r3, [pc, #588]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80023da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023dc:	2202      	movs	r2, #2
 80023de:	4013      	ands	r3, r2
 80023e0:	d1f1      	bne.n	80023c6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2204      	movs	r2, #4
 80023e8:	4013      	ands	r3, r2
 80023ea:	d100      	bne.n	80023ee <HAL_RCC_OscConfig+0x446>
 80023ec:	e0ae      	b.n	800254c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2023      	movs	r0, #35	; 0x23
 80023f0:	183b      	adds	r3, r7, r0
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f6:	4b8c      	ldr	r3, [pc, #560]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80023f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	055b      	lsls	r3, r3, #21
 80023fe:	4013      	ands	r3, r2
 8002400:	d109      	bne.n	8002416 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b89      	ldr	r3, [pc, #548]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002406:	4b88      	ldr	r3, [pc, #544]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	0549      	lsls	r1, r1, #21
 800240c:	430a      	orrs	r2, r1
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002410:	183b      	adds	r3, r7, r0
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b87      	ldr	r3, [pc, #540]	; (8002634 <HAL_RCC_OscConfig+0x68c>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4013      	ands	r3, r2
 8002420:	d11a      	bne.n	8002458 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002422:	4b84      	ldr	r3, [pc, #528]	; (8002634 <HAL_RCC_OscConfig+0x68c>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b83      	ldr	r3, [pc, #524]	; (8002634 <HAL_RCC_OscConfig+0x68c>)
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	0049      	lsls	r1, r1, #1
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002430:	f7ff fada 	bl	80019e8 <HAL_GetTick>
 8002434:	0003      	movs	r3, r0
 8002436:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7ff fad5 	bl	80019e8 <HAL_GetTick>
 800243e:	0002      	movs	r2, r0
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e123      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b79      	ldr	r3, [pc, #484]	; (8002634 <HAL_RCC_OscConfig+0x68c>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4013      	ands	r3, r2
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	429a      	cmp	r2, r3
 8002462:	d107      	bne.n	8002474 <HAL_RCC_OscConfig+0x4cc>
 8002464:	4b70      	ldr	r3, [pc, #448]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002468:	4b6f      	ldr	r3, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 800246a:	2180      	movs	r1, #128	; 0x80
 800246c:	0049      	lsls	r1, r1, #1
 800246e:	430a      	orrs	r2, r1
 8002470:	651a      	str	r2, [r3, #80]	; 0x50
 8002472:	e031      	b.n	80024d8 <HAL_RCC_OscConfig+0x530>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10c      	bne.n	8002496 <HAL_RCC_OscConfig+0x4ee>
 800247c:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 800247e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002480:	4b69      	ldr	r3, [pc, #420]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002482:	496b      	ldr	r1, [pc, #428]	; (8002630 <HAL_RCC_OscConfig+0x688>)
 8002484:	400a      	ands	r2, r1
 8002486:	651a      	str	r2, [r3, #80]	; 0x50
 8002488:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 800248a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800248c:	4b66      	ldr	r3, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 800248e:	496a      	ldr	r1, [pc, #424]	; (8002638 <HAL_RCC_OscConfig+0x690>)
 8002490:	400a      	ands	r2, r1
 8002492:	651a      	str	r2, [r3, #80]	; 0x50
 8002494:	e020      	b.n	80024d8 <HAL_RCC_OscConfig+0x530>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	23a0      	movs	r3, #160	; 0xa0
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	429a      	cmp	r2, r3
 80024a0:	d10e      	bne.n	80024c0 <HAL_RCC_OscConfig+0x518>
 80024a2:	4b61      	ldr	r3, [pc, #388]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80024a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024a6:	4b60      	ldr	r3, [pc, #384]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	00c9      	lsls	r1, r1, #3
 80024ac:	430a      	orrs	r2, r1
 80024ae:	651a      	str	r2, [r3, #80]	; 0x50
 80024b0:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80024b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024b4:	4b5c      	ldr	r3, [pc, #368]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	0049      	lsls	r1, r1, #1
 80024ba:	430a      	orrs	r2, r1
 80024bc:	651a      	str	r2, [r3, #80]	; 0x50
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0x530>
 80024c0:	4b59      	ldr	r3, [pc, #356]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80024c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024c4:	4b58      	ldr	r3, [pc, #352]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80024c6:	495a      	ldr	r1, [pc, #360]	; (8002630 <HAL_RCC_OscConfig+0x688>)
 80024c8:	400a      	ands	r2, r1
 80024ca:	651a      	str	r2, [r3, #80]	; 0x50
 80024cc:	4b56      	ldr	r3, [pc, #344]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80024ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024d0:	4b55      	ldr	r3, [pc, #340]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80024d2:	4959      	ldr	r1, [pc, #356]	; (8002638 <HAL_RCC_OscConfig+0x690>)
 80024d4:	400a      	ands	r2, r1
 80024d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d015      	beq.n	800250c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7ff fa82 	bl	80019e8 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e8:	e009      	b.n	80024fe <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7ff fa7d 	bl	80019e8 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	4a51      	ldr	r2, [pc, #324]	; (800263c <HAL_RCC_OscConfig+0x694>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e0ca      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024fe:	4b4a      	ldr	r3, [pc, #296]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4013      	ands	r3, r2
 8002508:	d0ef      	beq.n	80024ea <HAL_RCC_OscConfig+0x542>
 800250a:	e014      	b.n	8002536 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250c:	f7ff fa6c 	bl	80019e8 <HAL_GetTick>
 8002510:	0003      	movs	r3, r0
 8002512:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002514:	e009      	b.n	800252a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7ff fa67 	bl	80019e8 <HAL_GetTick>
 800251a:	0002      	movs	r2, r0
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	4a46      	ldr	r2, [pc, #280]	; (800263c <HAL_RCC_OscConfig+0x694>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e0b4      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800252a:	4b3f      	ldr	r3, [pc, #252]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 800252c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4013      	ands	r3, r2
 8002534:	d1ef      	bne.n	8002516 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002536:	2323      	movs	r3, #35	; 0x23
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d105      	bne.n	800254c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002540:	4b39      	ldr	r3, [pc, #228]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002544:	4b38      	ldr	r3, [pc, #224]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002546:	493e      	ldr	r1, [pc, #248]	; (8002640 <HAL_RCC_OscConfig+0x698>)
 8002548:	400a      	ands	r2, r1
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	2b00      	cmp	r3, #0
 8002552:	d100      	bne.n	8002556 <HAL_RCC_OscConfig+0x5ae>
 8002554:	e09d      	b.n	8002692 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	2b0c      	cmp	r3, #12
 800255a:	d100      	bne.n	800255e <HAL_RCC_OscConfig+0x5b6>
 800255c:	e076      	b.n	800264c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	2b02      	cmp	r3, #2
 8002564:	d145      	bne.n	80025f2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 800256c:	4935      	ldr	r1, [pc, #212]	; (8002644 <HAL_RCC_OscConfig+0x69c>)
 800256e:	400a      	ands	r2, r1
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7ff fa39 	bl	80019e8 <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7ff fa34 	bl	80019e8 <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e082      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800258e:	4b26      	ldr	r3, [pc, #152]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	049b      	lsls	r3, r3, #18
 8002596:	4013      	ands	r3, r2
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	4a2a      	ldr	r2, [pc, #168]	; (8002648 <HAL_RCC_OscConfig+0x6a0>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	431a      	orrs	r2, r3
 80025b4:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80025b6:	430a      	orrs	r2, r1
 80025b8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	0449      	lsls	r1, r1, #17
 80025c4:	430a      	orrs	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff fa0e 	bl	80019e8 <HAL_GetTick>
 80025cc:	0003      	movs	r3, r0
 80025ce:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d2:	f7ff fa09 	bl	80019e8 <HAL_GetTick>
 80025d6:	0002      	movs	r2, r0
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e057      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	049b      	lsls	r3, r3, #18
 80025ec:	4013      	ands	r3, r2
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x62a>
 80025f0:	e04f      	b.n	8002692 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 80025f8:	4912      	ldr	r1, [pc, #72]	; (8002644 <HAL_RCC_OscConfig+0x69c>)
 80025fa:	400a      	ands	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7ff f9f3 	bl	80019e8 <HAL_GetTick>
 8002602:	0003      	movs	r3, r0
 8002604:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002608:	f7ff f9ee 	bl	80019e8 <HAL_GetTick>
 800260c:	0002      	movs	r2, r0
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e03c      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800261a:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_RCC_OscConfig+0x680>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	049b      	lsls	r3, r3, #18
 8002622:	4013      	ands	r3, r2
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x660>
 8002626:	e034      	b.n	8002692 <HAL_RCC_OscConfig+0x6ea>
 8002628:	40021000 	.word	0x40021000
 800262c:	ffff1fff 	.word	0xffff1fff
 8002630:	fffffeff 	.word	0xfffffeff
 8002634:	40007000 	.word	0x40007000
 8002638:	fffffbff 	.word	0xfffffbff
 800263c:	00001388 	.word	0x00001388
 8002640:	efffffff 	.word	0xefffffff
 8002644:	feffffff 	.word	0xfeffffff
 8002648:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e01d      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_RCC_OscConfig+0x6f4>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	025b      	lsls	r3, r3, #9
 8002664:	401a      	ands	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	429a      	cmp	r2, r3
 800266c:	d10f      	bne.n	800268e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	23f0      	movs	r3, #240	; 0xf0
 8002672:	039b      	lsls	r3, r3, #14
 8002674:	401a      	ands	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d107      	bne.n	800268e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	23c0      	movs	r3, #192	; 0xc0
 8002682:	041b      	lsls	r3, r3, #16
 8002684:	401a      	ands	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	b00a      	add	sp, #40	; 0x28
 800269a:	bdb0      	pop	{r4, r5, r7, pc}
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b5b0      	push	{r4, r5, r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e128      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b96      	ldr	r3, [pc, #600]	; (8002910 <HAL_RCC_ClockConfig+0x270>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d91e      	bls.n	8002700 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b93      	ldr	r3, [pc, #588]	; (8002910 <HAL_RCC_ClockConfig+0x270>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	4393      	bics	r3, r2
 80026ca:	0019      	movs	r1, r3
 80026cc:	4b90      	ldr	r3, [pc, #576]	; (8002910 <HAL_RCC_ClockConfig+0x270>)
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026d4:	f7ff f988 	bl	80019e8 <HAL_GetTick>
 80026d8:	0003      	movs	r3, r0
 80026da:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026dc:	e009      	b.n	80026f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026de:	f7ff f983 	bl	80019e8 <HAL_GetTick>
 80026e2:	0002      	movs	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	4a8a      	ldr	r2, [pc, #552]	; (8002914 <HAL_RCC_ClockConfig+0x274>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e109      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b87      	ldr	r3, [pc, #540]	; (8002910 <HAL_RCC_ClockConfig+0x270>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2201      	movs	r2, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1ee      	bne.n	80026de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2202      	movs	r2, #2
 8002706:	4013      	ands	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270a:	4b83      	ldr	r3, [pc, #524]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	22f0      	movs	r2, #240	; 0xf0
 8002710:	4393      	bics	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	4b7f      	ldr	r3, [pc, #508]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 800271a:	430a      	orrs	r2, r1
 800271c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	d100      	bne.n	800272a <HAL_RCC_ClockConfig+0x8a>
 8002728:	e089      	b.n	800283e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002732:	4b79      	ldr	r3, [pc, #484]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	029b      	lsls	r3, r3, #10
 800273a:	4013      	ands	r3, r2
 800273c:	d120      	bne.n	8002780 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0e1      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800274a:	4b73      	ldr	r3, [pc, #460]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	049b      	lsls	r3, r3, #18
 8002752:	4013      	ands	r3, r2
 8002754:	d114      	bne.n	8002780 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e0d5      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d106      	bne.n	8002770 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002762:	4b6d      	ldr	r3, [pc, #436]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2204      	movs	r2, #4
 8002768:	4013      	ands	r3, r2
 800276a:	d109      	bne.n	8002780 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0ca      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002770:	4b69      	ldr	r3, [pc, #420]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4013      	ands	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0c2      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002780:	4b65      	ldr	r3, [pc, #404]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2203      	movs	r2, #3
 8002786:	4393      	bics	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4b62      	ldr	r3, [pc, #392]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002790:	430a      	orrs	r2, r1
 8002792:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002794:	f7ff f928 	bl	80019e8 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d111      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	e009      	b.n	80027ba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a6:	f7ff f91f 	bl	80019e8 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	4a58      	ldr	r2, [pc, #352]	; (8002914 <HAL_RCC_ClockConfig+0x274>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0a5      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ba:	4b57      	ldr	r3, [pc, #348]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	220c      	movs	r2, #12
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d1ef      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x106>
 80027c6:	e03a      	b.n	800283e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d111      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d0:	e009      	b.n	80027e6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d2:	f7ff f909 	bl	80019e8 <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	4a4d      	ldr	r2, [pc, #308]	; (8002914 <HAL_RCC_ClockConfig+0x274>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e08f      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e6:	4b4c      	ldr	r3, [pc, #304]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	220c      	movs	r2, #12
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d1ef      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x132>
 80027f2:	e024      	b.n	800283e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d11b      	bne.n	8002834 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027fc:	e009      	b.n	8002812 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fe:	f7ff f8f3 	bl	80019e8 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	4a42      	ldr	r2, [pc, #264]	; (8002914 <HAL_RCC_ClockConfig+0x274>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e079      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002812:	4b41      	ldr	r3, [pc, #260]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	220c      	movs	r2, #12
 8002818:	4013      	ands	r3, r2
 800281a:	2b04      	cmp	r3, #4
 800281c:	d1ef      	bne.n	80027fe <HAL_RCC_ClockConfig+0x15e>
 800281e:	e00e      	b.n	800283e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7ff f8e2 	bl	80019e8 <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <HAL_RCC_ClockConfig+0x274>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e068      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002834:	4b38      	ldr	r3, [pc, #224]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	220c      	movs	r2, #12
 800283a:	4013      	ands	r3, r2
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800283e:	4b34      	ldr	r3, [pc, #208]	; (8002910 <HAL_RCC_ClockConfig+0x270>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	4013      	ands	r3, r2
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d21e      	bcs.n	800288a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284c:	4b30      	ldr	r3, [pc, #192]	; (8002910 <HAL_RCC_ClockConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2201      	movs	r2, #1
 8002852:	4393      	bics	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <HAL_RCC_ClockConfig+0x270>)
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800285e:	f7ff f8c3 	bl	80019e8 <HAL_GetTick>
 8002862:	0003      	movs	r3, r0
 8002864:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	e009      	b.n	800287c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7ff f8be 	bl	80019e8 <HAL_GetTick>
 800286c:	0002      	movs	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	4a28      	ldr	r2, [pc, #160]	; (8002914 <HAL_RCC_ClockConfig+0x274>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e044      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287c:	4b24      	ldr	r3, [pc, #144]	; (8002910 <HAL_RCC_ClockConfig+0x270>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2201      	movs	r2, #1
 8002882:	4013      	ands	r3, r2
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d1ee      	bne.n	8002868 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d009      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002894:	4b20      	ldr	r3, [pc, #128]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4a20      	ldr	r2, [pc, #128]	; (800291c <HAL_RCC_ClockConfig+0x27c>)
 800289a:	4013      	ands	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 80028a4:	430a      	orrs	r2, r1
 80028a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2208      	movs	r2, #8
 80028ae:	4013      	ands	r3, r2
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028b2:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_RCC_ClockConfig+0x280>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	0019      	movs	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	00da      	lsls	r2, r3, #3
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 80028c4:	430a      	orrs	r2, r1
 80028c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028c8:	f000 f832 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028cc:	0001      	movs	r1, r0
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_RCC_ClockConfig+0x278>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	220f      	movs	r2, #15
 80028d6:	4013      	ands	r3, r2
 80028d8:	4a12      	ldr	r2, [pc, #72]	; (8002924 <HAL_RCC_ClockConfig+0x284>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	000a      	movs	r2, r1
 80028de:	40da      	lsrs	r2, r3
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_RCC_ClockConfig+0x288>)
 80028e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_RCC_ClockConfig+0x28c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	250b      	movs	r5, #11
 80028ea:	197c      	adds	r4, r7, r5
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7ff f835 	bl	800195c <HAL_InitTick>
 80028f2:	0003      	movs	r3, r0
 80028f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80028f6:	197b      	adds	r3, r7, r5
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80028fe:	197b      	adds	r3, r7, r5
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	e000      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bdb0      	pop	{r4, r5, r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	40022000 	.word	0x40022000
 8002914:	00001388 	.word	0x00001388
 8002918:	40021000 	.word	0x40021000
 800291c:	fffff8ff 	.word	0xfffff8ff
 8002920:	ffffc7ff 	.word	0xffffc7ff
 8002924:	080049f4 	.word	0x080049f4
 8002928:	20000000 	.word	0x20000000
 800292c:	20000004 	.word	0x20000004

08002930 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b5b0      	push	{r4, r5, r7, lr}
 8002932:	b08e      	sub	sp, #56	; 0x38
 8002934:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002936:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x138>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800293c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800293e:	230c      	movs	r3, #12
 8002940:	4013      	ands	r3, r2
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d014      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x40>
 8002946:	d900      	bls.n	800294a <HAL_RCC_GetSysClockFreq+0x1a>
 8002948:	e07b      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x112>
 800294a:	2b04      	cmp	r3, #4
 800294c:	d002      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x24>
 800294e:	2b08      	cmp	r3, #8
 8002950:	d00b      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x3a>
 8002952:	e076      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002954:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x138>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2210      	movs	r2, #16
 800295a:	4013      	ands	r3, r2
 800295c:	d002      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800295e:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002960:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002962:	e07c      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002964:	4b42      	ldr	r3, [pc, #264]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x140>)
 8002966:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002968:	e079      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800296a:	4b42      	ldr	r3, [pc, #264]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x144>)
 800296c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800296e:	e076      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	0c9a      	lsrs	r2, r3, #18
 8002974:	230f      	movs	r3, #15
 8002976:	401a      	ands	r2, r3
 8002978:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x148>)
 800297a:	5c9b      	ldrb	r3, [r3, r2]
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	0d9a      	lsrs	r2, r3, #22
 8002982:	2303      	movs	r3, #3
 8002984:	4013      	ands	r3, r2
 8002986:	3301      	adds	r3, #1
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800298a:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x138>)
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	025b      	lsls	r3, r3, #9
 8002992:	4013      	ands	r3, r2
 8002994:	d01a      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	4a35      	ldr	r2, [pc, #212]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x144>)
 80029a0:	2300      	movs	r3, #0
 80029a2:	69b8      	ldr	r0, [r7, #24]
 80029a4:	69f9      	ldr	r1, [r7, #28]
 80029a6:	f7fd fc6d 	bl	8000284 <__aeabi_lmul>
 80029aa:	0002      	movs	r2, r0
 80029ac:	000b      	movs	r3, r1
 80029ae:	0010      	movs	r0, r2
 80029b0:	0019      	movs	r1, r3
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f7fd fc41 	bl	8000244 <__aeabi_uldivmod>
 80029c2:	0002      	movs	r2, r0
 80029c4:	000b      	movs	r3, r1
 80029c6:	0013      	movs	r3, r2
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
 80029ca:	e037      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x138>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2210      	movs	r2, #16
 80029d2:	4013      	ands	r3, r2
 80029d4:	d01a      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x13c>)
 80029e0:	2300      	movs	r3, #0
 80029e2:	68b8      	ldr	r0, [r7, #8]
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	f7fd fc4d 	bl	8000284 <__aeabi_lmul>
 80029ea:	0002      	movs	r2, r0
 80029ec:	000b      	movs	r3, r1
 80029ee:	0010      	movs	r0, r2
 80029f0:	0019      	movs	r1, r3
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f7fd fc21 	bl	8000244 <__aeabi_uldivmod>
 8002a02:	0002      	movs	r2, r0
 8002a04:	000b      	movs	r3, r1
 8002a06:	0013      	movs	r3, r2
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0a:	e017      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0e:	0018      	movs	r0, r3
 8002a10:	2300      	movs	r3, #0
 8002a12:	0019      	movs	r1, r3
 8002a14:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x140>)
 8002a16:	2300      	movs	r3, #0
 8002a18:	f7fd fc34 	bl	8000284 <__aeabi_lmul>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	000b      	movs	r3, r1
 8002a20:	0010      	movs	r0, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	001c      	movs	r4, r3
 8002a28:	2300      	movs	r3, #0
 8002a2a:	001d      	movs	r5, r3
 8002a2c:	0022      	movs	r2, r4
 8002a2e:	002b      	movs	r3, r5
 8002a30:	f7fd fc08 	bl	8000244 <__aeabi_uldivmod>
 8002a34:	0002      	movs	r2, r0
 8002a36:	000b      	movs	r3, r1
 8002a38:	0013      	movs	r3, r2
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a40:	e00d      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	0b5b      	lsrs	r3, r3, #13
 8002a48:	2207      	movs	r2, #7
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	3301      	adds	r3, #1
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	0212      	lsls	r2, r2, #8
 8002a56:	409a      	lsls	r2, r3
 8002a58:	0013      	movs	r3, r2
 8002a5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a5c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b00e      	add	sp, #56	; 0x38
 8002a66:	bdb0      	pop	{r4, r5, r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	003d0900 	.word	0x003d0900
 8002a70:	00f42400 	.word	0x00f42400
 8002a74:	007a1200 	.word	0x007a1200
 8002a78:	08004a0c 	.word	0x08004a0c

08002a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b02      	ldr	r3, [pc, #8]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	20000000 	.word	0x20000000

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff2 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a98:	0001      	movs	r1, r0
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	40d9      	lsrs	r1, r3
 8002aaa:	000b      	movs	r3, r1
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08004a04 	.word	0x08004a04

08002abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac0:	f7ff ffdc 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002ac4:	0001      	movs	r1, r0
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	0adb      	lsrs	r3, r3, #11
 8002acc:	2207      	movs	r2, #7
 8002ace:	4013      	ands	r3, r2
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ad2:	5cd3      	ldrb	r3, [r2, r3]
 8002ad4:	40d9      	lsrs	r1, r3
 8002ad6:	000b      	movs	r3, r1
}
 8002ad8:	0018      	movs	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	08004a04 	.word	0x08004a04

08002ae8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002af0:	2017      	movs	r0, #23
 8002af2:	183b      	adds	r3, r7, r0
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2220      	movs	r2, #32
 8002afe:	4013      	ands	r3, r2
 8002b00:	d100      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002b02:	e0c2      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b04:	4b81      	ldr	r3, [pc, #516]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	055b      	lsls	r3, r3, #21
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d109      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b7e      	ldr	r3, [pc, #504]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b14:	4b7d      	ldr	r3, [pc, #500]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	0549      	lsls	r1, r1, #21
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b1e:	183b      	adds	r3, r7, r0
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	4b7a      	ldr	r3, [pc, #488]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d11a      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b30:	4b77      	ldr	r3, [pc, #476]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b36:	2180      	movs	r1, #128	; 0x80
 8002b38:	0049      	lsls	r1, r1, #1
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3e:	f7fe ff53 	bl	80019e8 <HAL_GetTick>
 8002b42:	0003      	movs	r3, r0
 8002b44:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b46:	e008      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b48:	f7fe ff4e 	bl	80019e8 <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e0d4      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002b66:	4b69      	ldr	r3, [pc, #420]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	23c0      	movs	r3, #192	; 0xc0
 8002b6c:	039b      	lsls	r3, r3, #14
 8002b6e:	4013      	ands	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	23c0      	movs	r3, #192	; 0xc0
 8002b78:	039b      	lsls	r3, r3, #14
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d013      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	23c0      	movs	r3, #192	; 0xc0
 8002b88:	029b      	lsls	r3, r3, #10
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	23c0      	movs	r3, #192	; 0xc0
 8002b8e:	029b      	lsls	r3, r3, #10
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d10a      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b94:	4b5d      	ldr	r3, [pc, #372]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	029b      	lsls	r3, r3, #10
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	029b      	lsls	r3, r3, #10
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d101      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e0ac      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002baa:	4b58      	ldr	r3, [pc, #352]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bae:	23c0      	movs	r3, #192	; 0xc0
 8002bb0:	029b      	lsls	r3, r3, #10
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d03b      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	23c0      	movs	r3, #192	; 0xc0
 8002bc2:	029b      	lsls	r3, r3, #10
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d033      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d02e      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002bd6:	4b4d      	ldr	r3, [pc, #308]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bda:	4a4e      	ldr	r2, [pc, #312]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002be0:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002be2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be4:	4b49      	ldr	r3, [pc, #292]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002be6:	2180      	movs	r1, #128	; 0x80
 8002be8:	0309      	lsls	r1, r1, #12
 8002bea:	430a      	orrs	r2, r1
 8002bec:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bf2:	4b46      	ldr	r3, [pc, #280]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bf4:	4948      	ldr	r1, [pc, #288]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002bfa:	4b44      	ldr	r3, [pc, #272]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4013      	ands	r3, r2
 8002c08:	d014      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe feed 	bl	80019e8 <HAL_GetTick>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c12:	e009      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe fee8 	bl	80019e8 <HAL_GetTick>
 8002c18:	0002      	movs	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	4a3f      	ldr	r2, [pc, #252]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e06d      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c28:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4013      	ands	r3, r2
 8002c32:	d0ef      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	23c0      	movs	r3, #192	; 0xc0
 8002c3a:	029b      	lsls	r3, r3, #10
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	23c0      	movs	r3, #192	; 0xc0
 8002c40:	029b      	lsls	r3, r3, #10
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002c46:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a35      	ldr	r2, [pc, #212]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	23c0      	movs	r3, #192	; 0xc0
 8002c56:	039b      	lsls	r3, r3, #14
 8002c58:	401a      	ands	r2, r3
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c62:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	23c0      	movs	r3, #192	; 0xc0
 8002c6a:	029b      	lsls	r3, r3, #10
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c70:	430a      	orrs	r2, r1
 8002c72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c74:	2317      	movs	r3, #23
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7e:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c84:	4927      	ldr	r1, [pc, #156]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c86:	400a      	ands	r2, r1
 8002c88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	d009      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c98:	220c      	movs	r2, #12
 8002c9a:	4393      	bics	r3, r2
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2204      	movs	r2, #4
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d009      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	4a1c      	ldr	r2, [pc, #112]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2208      	movs	r2, #8
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d009      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd4:	4a15      	ldr	r2, [pc, #84]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	4013      	ands	r3, r2
 8002cec:	d009      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf2:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b006      	add	sp, #24
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40007000 	.word	0x40007000
 8002d14:	fffcffff 	.word	0xfffcffff
 8002d18:	fff7ffff 	.word	0xfff7ffff
 8002d1c:	00001388 	.word	0x00001388
 8002d20:	ffcfffff 	.word	0xffcfffff
 8002d24:	efffffff 	.word	0xefffffff
 8002d28:	fffff3ff 	.word	0xfffff3ff
 8002d2c:	ffffcfff 	.word	0xffffcfff
 8002d30:	fff3ffff 	.word	0xfff3ffff

08002d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e032      	b.n	8002dac <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2239      	movs	r2, #57	; 0x39
 8002d4a:	5c9b      	ldrb	r3, [r3, r2]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d107      	bne.n	8002d62 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2238      	movs	r2, #56	; 0x38
 8002d56:	2100      	movs	r1, #0
 8002d58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f7fe fc41 	bl	80015e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2239      	movs	r2, #57	; 0x39
 8002d66:	2102      	movs	r1, #2
 8002d68:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3304      	adds	r3, #4
 8002d72:	0019      	movs	r1, r3
 8002d74:	0010      	movs	r0, r2
 8002d76:	f000 fa7f 	bl	8003278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	223e      	movs	r2, #62	; 0x3e
 8002d7e:	2101      	movs	r1, #1
 8002d80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	223a      	movs	r2, #58	; 0x3a
 8002d86:	2101      	movs	r1, #1
 8002d88:	5499      	strb	r1, [r3, r2]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	223b      	movs	r2, #59	; 0x3b
 8002d8e:	2101      	movs	r1, #1
 8002d90:	5499      	strb	r1, [r3, r2]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	223c      	movs	r2, #60	; 0x3c
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	223d      	movs	r2, #61	; 0x3d
 8002d9e:	2101      	movs	r1, #1
 8002da0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2239      	movs	r2, #57	; 0x39
 8002da6:	2101      	movs	r1, #1
 8002da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2239      	movs	r2, #57	; 0x39
 8002dc0:	5c9b      	ldrb	r3, [r3, r2]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d001      	beq.n	8002dcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e02e      	b.n	8002e2a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2239      	movs	r2, #57	; 0x39
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	05db      	lsls	r3, r3, #23
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d009      	beq.n	8002df4 <HAL_TIM_Base_Start+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <HAL_TIM_Base_Start+0x80>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_TIM_Base_Start+0x40>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_TIM_Base_Start+0x84>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d111      	bne.n	8002e18 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d010      	beq.n	8002e28 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2101      	movs	r1, #1
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	e007      	b.n	8002e28 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2101      	movs	r1, #1
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b004      	add	sp, #16
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	40010800 	.word	0x40010800
 8002e38:	40011400 	.word	0x40011400

08002e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2239      	movs	r2, #57	; 0x39
 8002e48:	5c9b      	ldrb	r3, [r3, r2]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d001      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e036      	b.n	8002ec2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2239      	movs	r2, #57	; 0x39
 8002e58:	2102      	movs	r1, #2
 8002e5a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2101      	movs	r1, #1
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	05db      	lsls	r3, r3, #23
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d009      	beq.n	8002e8c <HAL_TIM_Base_Start_IT+0x50>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a13      	ldr	r2, [pc, #76]	; (8002ecc <HAL_TIM_Base_Start_IT+0x90>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d004      	beq.n	8002e8c <HAL_TIM_Base_Start_IT+0x50>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <HAL_TIM_Base_Start_IT+0x94>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d111      	bne.n	8002eb0 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2207      	movs	r2, #7
 8002e94:	4013      	ands	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d010      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eae:	e007      	b.n	8002ec0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2101      	movs	r1, #1
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b004      	add	sp, #16
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	40010800 	.word	0x40010800
 8002ed0:	40011400 	.word	0x40011400

08002ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d124      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d11d      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2203      	movs	r2, #3
 8002efe:	4252      	negs	r2, r2
 8002f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	4013      	ands	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 f996 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 8002f1c:	e007      	b.n	8002f2e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 f989 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 f995 	bl	8003258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d125      	bne.n	8002f8e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d11e      	bne.n	8002f8e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2205      	movs	r2, #5
 8002f56:	4252      	negs	r2, r2
 8002f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	23c0      	movs	r3, #192	; 0xc0
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 f969 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 8002f76:	e007      	b.n	8002f88 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 f95c 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 f968 	bl	8003258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2208      	movs	r2, #8
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d124      	bne.n	8002fe6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11d      	bne.n	8002fe6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2209      	movs	r2, #9
 8002fb0:	4252      	negs	r2, r2
 8002fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 f93d 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 8002fce:	e007      	b.n	8002fe0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 f930 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 f93c 	bl	8003258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2210      	movs	r2, #16
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d125      	bne.n	8003040 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d11e      	bne.n	8003040 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2211      	movs	r2, #17
 8003008:	4252      	negs	r2, r2
 800300a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2208      	movs	r2, #8
 8003010:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	23c0      	movs	r3, #192	; 0xc0
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4013      	ands	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f910 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 8003028:	e007      	b.n	800303a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f000 f903 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	0018      	movs	r0, r3
 8003036:	f000 f90f 	bl	8003258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2201      	movs	r2, #1
 8003048:	4013      	ands	r3, r2
 800304a:	2b01      	cmp	r3, #1
 800304c:	d10f      	bne.n	800306e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	4013      	ands	r3, r2
 8003058:	2b01      	cmp	r3, #1
 800305a:	d108      	bne.n	800306e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2202      	movs	r2, #2
 8003062:	4252      	negs	r2, r2
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f7fe f9db 	bl	8001424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2240      	movs	r2, #64	; 0x40
 8003076:	4013      	ands	r3, r2
 8003078:	2b40      	cmp	r3, #64	; 0x40
 800307a:	d10f      	bne.n	800309c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2240      	movs	r2, #64	; 0x40
 8003084:	4013      	ands	r3, r2
 8003086:	2b40      	cmp	r3, #64	; 0x40
 8003088:	d108      	bne.n	800309c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2241      	movs	r2, #65	; 0x41
 8003090:	4252      	negs	r2, r2
 8003092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0018      	movs	r0, r3
 8003098:	f000 f8e6 	bl	8003268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2238      	movs	r2, #56	; 0x38
 80030b2:	5c9b      	ldrb	r3, [r3, r2]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_TIM_ConfigClockSource+0x18>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e0b7      	b.n	800322c <HAL_TIM_ConfigClockSource+0x188>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2238      	movs	r2, #56	; 0x38
 80030c0:	2101      	movs	r1, #1
 80030c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2239      	movs	r2, #57	; 0x39
 80030c8:	2102      	movs	r1, #2
 80030ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2277      	movs	r2, #119	; 0x77
 80030d8:	4393      	bics	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a55      	ldr	r2, [pc, #340]	; (8003234 <HAL_TIM_ConfigClockSource+0x190>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2280      	movs	r2, #128	; 0x80
 80030f2:	0192      	lsls	r2, r2, #6
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d040      	beq.n	800317a <HAL_TIM_ConfigClockSource+0xd6>
 80030f8:	2280      	movs	r2, #128	; 0x80
 80030fa:	0192      	lsls	r2, r2, #6
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d900      	bls.n	8003102 <HAL_TIM_ConfigClockSource+0x5e>
 8003100:	e088      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x170>
 8003102:	2280      	movs	r2, #128	; 0x80
 8003104:	0152      	lsls	r2, r2, #5
 8003106:	4293      	cmp	r3, r2
 8003108:	d100      	bne.n	800310c <HAL_TIM_ConfigClockSource+0x68>
 800310a:	e085      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x174>
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	0152      	lsls	r2, r2, #5
 8003110:	4293      	cmp	r3, r2
 8003112:	d900      	bls.n	8003116 <HAL_TIM_ConfigClockSource+0x72>
 8003114:	e07e      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x170>
 8003116:	2b70      	cmp	r3, #112	; 0x70
 8003118:	d018      	beq.n	800314c <HAL_TIM_ConfigClockSource+0xa8>
 800311a:	d900      	bls.n	800311e <HAL_TIM_ConfigClockSource+0x7a>
 800311c:	e07a      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x170>
 800311e:	2b60      	cmp	r3, #96	; 0x60
 8003120:	d04f      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x11e>
 8003122:	d900      	bls.n	8003126 <HAL_TIM_ConfigClockSource+0x82>
 8003124:	e076      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x170>
 8003126:	2b50      	cmp	r3, #80	; 0x50
 8003128:	d03b      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0xfe>
 800312a:	d900      	bls.n	800312e <HAL_TIM_ConfigClockSource+0x8a>
 800312c:	e072      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x170>
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d057      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x13e>
 8003132:	d900      	bls.n	8003136 <HAL_TIM_ConfigClockSource+0x92>
 8003134:	e06e      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x170>
 8003136:	2b30      	cmp	r3, #48	; 0x30
 8003138:	d063      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0x15e>
 800313a:	d86b      	bhi.n	8003214 <HAL_TIM_ConfigClockSource+0x170>
 800313c:	2b20      	cmp	r3, #32
 800313e:	d060      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0x15e>
 8003140:	d868      	bhi.n	8003214 <HAL_TIM_ConfigClockSource+0x170>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d05d      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0x15e>
 8003146:	2b10      	cmp	r3, #16
 8003148:	d05b      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800314a:	e063      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f000 f95a 	bl	8003414 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2277      	movs	r2, #119	; 0x77
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	609a      	str	r2, [r3, #8]
      break;
 8003178:	e04f      	b.n	800321a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6899      	ldr	r1, [r3, #8]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f000 f943 	bl	8003414 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	01c9      	lsls	r1, r1, #7
 800319c:	430a      	orrs	r2, r1
 800319e:	609a      	str	r2, [r3, #8]
      break;
 80031a0:	e03b      	b.n	800321a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	001a      	movs	r2, r3
 80031b0:	f000 f8b6 	bl	8003320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2150      	movs	r1, #80	; 0x50
 80031ba:	0018      	movs	r0, r3
 80031bc:	f000 f910 	bl	80033e0 <TIM_ITRx_SetConfig>
      break;
 80031c0:	e02b      	b.n	800321a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6859      	ldr	r1, [r3, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	001a      	movs	r2, r3
 80031d0:	f000 f8d4 	bl	800337c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2160      	movs	r1, #96	; 0x60
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 f900 	bl	80033e0 <TIM_ITRx_SetConfig>
      break;
 80031e0:	e01b      	b.n	800321a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	001a      	movs	r2, r3
 80031f0:	f000 f896 	bl	8003320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2140      	movs	r1, #64	; 0x40
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 f8f0 	bl	80033e0 <TIM_ITRx_SetConfig>
      break;
 8003200:	e00b      	b.n	800321a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	0019      	movs	r1, r3
 800320c:	0010      	movs	r0, r2
 800320e:	f000 f8e7 	bl	80033e0 <TIM_ITRx_SetConfig>
        break;
 8003212:	e002      	b.n	800321a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	e000      	b.n	800321a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003218:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2239      	movs	r2, #57	; 0x39
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2238      	movs	r2, #56	; 0x38
 8003226:	2100      	movs	r1, #0
 8003228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	b004      	add	sp, #16
 8003232:	bd80      	pop	{r7, pc}
 8003234:	ffff00ff 	.word	0xffff00ff

08003238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b002      	add	sp, #8
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}

08003278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	05db      	lsls	r3, r3, #23
 800328e:	429a      	cmp	r2, r3
 8003290:	d007      	beq.n	80032a2 <TIM_Base_SetConfig+0x2a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <TIM_Base_SetConfig+0x9c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d003      	beq.n	80032a2 <TIM_Base_SetConfig+0x2a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a1e      	ldr	r2, [pc, #120]	; (8003318 <TIM_Base_SetConfig+0xa0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d108      	bne.n	80032b4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2270      	movs	r2, #112	; 0x70
 80032a6:	4393      	bics	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	05db      	lsls	r3, r3, #23
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d007      	beq.n	80032ce <TIM_Base_SetConfig+0x56>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a14      	ldr	r2, [pc, #80]	; (8003314 <TIM_Base_SetConfig+0x9c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d003      	beq.n	80032ce <TIM_Base_SetConfig+0x56>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a13      	ldr	r2, [pc, #76]	; (8003318 <TIM_Base_SetConfig+0xa0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d108      	bne.n	80032e0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a12      	ldr	r2, [pc, #72]	; (800331c <TIM_Base_SetConfig+0xa4>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2280      	movs	r2, #128	; 0x80
 80032e4:	4393      	bics	r3, r2
 80032e6:	001a      	movs	r2, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	615a      	str	r2, [r3, #20]
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b004      	add	sp, #16
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40010800 	.word	0x40010800
 8003318:	40011400 	.word	0x40011400
 800331c:	fffffcff 	.word	0xfffffcff

08003320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	2201      	movs	r2, #1
 8003338:	4393      	bics	r3, r2
 800333a:	001a      	movs	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	22f0      	movs	r2, #240	; 0xf0
 800334a:	4393      	bics	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	220a      	movs	r2, #10
 800335c:	4393      	bics	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	621a      	str	r2, [r3, #32]
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b006      	add	sp, #24
 800337a:	bd80      	pop	{r7, pc}

0800337c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	2210      	movs	r2, #16
 800338e:	4393      	bics	r3, r2
 8003390:	001a      	movs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <TIM_TI2_ConfigInputStage+0x60>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	031b      	lsls	r3, r3, #12
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	22a0      	movs	r2, #160	; 0xa0
 80033b8:	4393      	bics	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	621a      	str	r2, [r3, #32]
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b006      	add	sp, #24
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	ffff0fff 	.word	0xffff0fff

080033e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2270      	movs	r2, #112	; 0x70
 80033f4:	4393      	bics	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	2207      	movs	r2, #7
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	609a      	str	r2, [r3, #8]
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b004      	add	sp, #16
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4a09      	ldr	r2, [pc, #36]	; (8003450 <TIM_ETR_SetConfig+0x3c>)
 800342c:	4013      	ands	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	021a      	lsls	r2, r3, #8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	431a      	orrs	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4313      	orrs	r3, r2
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	609a      	str	r2, [r3, #8]
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b006      	add	sp, #24
 800344e:	bd80      	pop	{r7, pc}
 8003450:	ffff00ff 	.word	0xffff00ff

08003454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2238      	movs	r2, #56	; 0x38
 8003462:	5c9b      	ldrb	r3, [r3, r2]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003468:	2302      	movs	r3, #2
 800346a:	e042      	b.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2238      	movs	r2, #56	; 0x38
 8003470:	2101      	movs	r1, #1
 8003472:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2239      	movs	r2, #57	; 0x39
 8003478:	2102      	movs	r1, #2
 800347a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2270      	movs	r2, #112	; 0x70
 8003490:	4393      	bics	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	05db      	lsls	r3, r3, #23
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d009      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a11      	ldr	r2, [pc, #68]	; (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a0f      	ldr	r2, [pc, #60]	; (8003500 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10c      	bne.n	80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	4393      	bics	r3, r2
 80034cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2239      	movs	r2, #57	; 0x39
 80034e4:	2101      	movs	r1, #1
 80034e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2238      	movs	r2, #56	; 0x38
 80034ec:	2100      	movs	r1, #0
 80034ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b004      	add	sp, #16
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	40010800 	.word	0x40010800
 8003500:	40011400 	.word	0x40011400

08003504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e044      	b.n	80035a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800351a:	2b00      	cmp	r3, #0
 800351c:	d107      	bne.n	800352e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2274      	movs	r2, #116	; 0x74
 8003522:	2100      	movs	r1, #0
 8003524:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	0018      	movs	r0, r3
 800352a:	f7fe f8c3 	bl	80016b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2224      	movs	r2, #36	; 0x24
 8003532:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2101      	movs	r1, #1
 8003540:	438a      	bics	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	0018      	movs	r0, r3
 8003548:	f000 f8d8 	bl	80036fc <UART_SetConfig>
 800354c:	0003      	movs	r3, r0
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e024      	b.n	80035a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f000 fb2d 	bl	8003bc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	490d      	ldr	r1, [pc, #52]	; (80035a8 <HAL_UART_Init+0xa4>)
 8003572:	400a      	ands	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	212a      	movs	r1, #42	; 0x2a
 8003582:	438a      	bics	r2, r1
 8003584:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2101      	movs	r1, #1
 8003592:	430a      	orrs	r2, r1
 8003594:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	0018      	movs	r0, r3
 800359a:	f000 fbc5 	bl	8003d28 <UART_CheckIdleState>
 800359e:	0003      	movs	r3, r0
}
 80035a0:	0018      	movs	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b002      	add	sp, #8
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	ffffb7ff 	.word	0xffffb7ff

080035ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08a      	sub	sp, #40	; 0x28
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	1dbb      	adds	r3, r7, #6
 80035ba:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d000      	beq.n	80035c6 <HAL_UART_Transmit+0x1a>
 80035c4:	e095      	b.n	80036f2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_UART_Transmit+0x28>
 80035cc:	1dbb      	adds	r3, r7, #6
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e08d      	b.n	80036f4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	015b      	lsls	r3, r3, #5
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d109      	bne.n	80035f8 <HAL_UART_Transmit+0x4c>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2201      	movs	r2, #1
 80035f0:	4013      	ands	r3, r2
 80035f2:	d001      	beq.n	80035f8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e07d      	b.n	80036f4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2274      	movs	r2, #116	; 0x74
 80035fc:	5c9b      	ldrb	r3, [r3, r2]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_UART_Transmit+0x5a>
 8003602:	2302      	movs	r3, #2
 8003604:	e076      	b.n	80036f4 <HAL_UART_Transmit+0x148>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2274      	movs	r2, #116	; 0x74
 800360a:	2101      	movs	r1, #1
 800360c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2280      	movs	r2, #128	; 0x80
 8003612:	2100      	movs	r1, #0
 8003614:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2221      	movs	r2, #33	; 0x21
 800361a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800361c:	f7fe f9e4 	bl	80019e8 <HAL_GetTick>
 8003620:	0003      	movs	r3, r0
 8003622:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1dba      	adds	r2, r7, #6
 8003628:	2150      	movs	r1, #80	; 0x50
 800362a:	8812      	ldrh	r2, [r2, #0]
 800362c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1dba      	adds	r2, r7, #6
 8003632:	2152      	movs	r1, #82	; 0x52
 8003634:	8812      	ldrh	r2, [r2, #0]
 8003636:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	015b      	lsls	r3, r3, #5
 8003640:	429a      	cmp	r2, r3
 8003642:	d108      	bne.n	8003656 <HAL_UART_Transmit+0xaa>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	e003      	b.n	800365e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2274      	movs	r2, #116	; 0x74
 8003662:	2100      	movs	r1, #0
 8003664:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003666:	e02c      	b.n	80036c2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	0013      	movs	r3, r2
 8003672:	2200      	movs	r2, #0
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	f000 fb9f 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 800367a:	1e03      	subs	r3, r0, #0
 800367c:	d001      	beq.n	8003682 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e038      	b.n	80036f4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	001a      	movs	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	05d2      	lsls	r2, r2, #23
 8003694:	0dd2      	lsrs	r2, r2, #23
 8003696:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	3302      	adds	r3, #2
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	e007      	b.n	80036b0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3301      	adds	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2252      	movs	r2, #82	; 0x52
 80036b4:	5a9b      	ldrh	r3, [r3, r2]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b299      	uxth	r1, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2252      	movs	r2, #82	; 0x52
 80036c0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2252      	movs	r2, #82	; 0x52
 80036c6:	5a9b      	ldrh	r3, [r3, r2]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1cc      	bne.n	8003668 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	0013      	movs	r3, r2
 80036d8:	2200      	movs	r2, #0
 80036da:	2140      	movs	r1, #64	; 0x40
 80036dc:	f000 fb6c 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 80036e0:	1e03      	subs	r3, r0, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e005      	b.n	80036f4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
  }
}
 80036f4:	0018      	movs	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b008      	add	sp, #32
 80036fa:	bd80      	pop	{r7, pc}

080036fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036fc:	b5b0      	push	{r4, r5, r7, lr}
 80036fe:	b08e      	sub	sp, #56	; 0x38
 8003700:	af00      	add	r7, sp, #0
 8003702:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003704:	231a      	movs	r3, #26
 8003706:	2218      	movs	r2, #24
 8003708:	4694      	mov	ip, r2
 800370a:	44bc      	add	ip, r7
 800370c:	4463      	add	r3, ip
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	431a      	orrs	r2, r3
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	431a      	orrs	r2, r3
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4313      	orrs	r3, r2
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4abc      	ldr	r2, [pc, #752]	; (8003a24 <UART_SetConfig+0x328>)
 8003732:	4013      	ands	r3, r2
 8003734:	0019      	movs	r1, r3
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4ab8      	ldr	r2, [pc, #736]	; (8003a28 <UART_SetConfig+0x32c>)
 8003748:	4013      	ands	r3, r2
 800374a:	0019      	movs	r1, r3
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4ab2      	ldr	r2, [pc, #712]	; (8003a2c <UART_SetConfig+0x330>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d004      	beq.n	8003772 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800376e:	4313      	orrs	r3, r2
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4aad      	ldr	r2, [pc, #692]	; (8003a30 <UART_SetConfig+0x334>)
 800377a:	4013      	ands	r3, r2
 800377c:	0019      	movs	r1, r3
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003784:	430a      	orrs	r2, r1
 8003786:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4aa9      	ldr	r2, [pc, #676]	; (8003a34 <UART_SetConfig+0x338>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d136      	bne.n	8003800 <UART_SetConfig+0x104>
 8003792:	4ba9      	ldr	r3, [pc, #676]	; (8003a38 <UART_SetConfig+0x33c>)
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	220c      	movs	r2, #12
 8003798:	4013      	ands	r3, r2
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d020      	beq.n	80037e0 <UART_SetConfig+0xe4>
 800379e:	d827      	bhi.n	80037f0 <UART_SetConfig+0xf4>
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d00d      	beq.n	80037c0 <UART_SetConfig+0xc4>
 80037a4:	d824      	bhi.n	80037f0 <UART_SetConfig+0xf4>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <UART_SetConfig+0xb4>
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d010      	beq.n	80037d0 <UART_SetConfig+0xd4>
 80037ae:	e01f      	b.n	80037f0 <UART_SetConfig+0xf4>
 80037b0:	231b      	movs	r3, #27
 80037b2:	2218      	movs	r2, #24
 80037b4:	4694      	mov	ip, r2
 80037b6:	44bc      	add	ip, r7
 80037b8:	4463      	add	r3, ip
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	e06f      	b.n	80038a0 <UART_SetConfig+0x1a4>
 80037c0:	231b      	movs	r3, #27
 80037c2:	2218      	movs	r2, #24
 80037c4:	4694      	mov	ip, r2
 80037c6:	44bc      	add	ip, r7
 80037c8:	4463      	add	r3, ip
 80037ca:	2202      	movs	r2, #2
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e067      	b.n	80038a0 <UART_SetConfig+0x1a4>
 80037d0:	231b      	movs	r3, #27
 80037d2:	2218      	movs	r2, #24
 80037d4:	4694      	mov	ip, r2
 80037d6:	44bc      	add	ip, r7
 80037d8:	4463      	add	r3, ip
 80037da:	2204      	movs	r2, #4
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e05f      	b.n	80038a0 <UART_SetConfig+0x1a4>
 80037e0:	231b      	movs	r3, #27
 80037e2:	2218      	movs	r2, #24
 80037e4:	4694      	mov	ip, r2
 80037e6:	44bc      	add	ip, r7
 80037e8:	4463      	add	r3, ip
 80037ea:	2208      	movs	r2, #8
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	e057      	b.n	80038a0 <UART_SetConfig+0x1a4>
 80037f0:	231b      	movs	r3, #27
 80037f2:	2218      	movs	r2, #24
 80037f4:	4694      	mov	ip, r2
 80037f6:	44bc      	add	ip, r7
 80037f8:	4463      	add	r3, ip
 80037fa:	2210      	movs	r2, #16
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	e04f      	b.n	80038a0 <UART_SetConfig+0x1a4>
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a89      	ldr	r2, [pc, #548]	; (8003a2c <UART_SetConfig+0x330>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d143      	bne.n	8003892 <UART_SetConfig+0x196>
 800380a:	4b8b      	ldr	r3, [pc, #556]	; (8003a38 <UART_SetConfig+0x33c>)
 800380c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800380e:	23c0      	movs	r3, #192	; 0xc0
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	4013      	ands	r3, r2
 8003814:	22c0      	movs	r2, #192	; 0xc0
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	4293      	cmp	r3, r2
 800381a:	d02a      	beq.n	8003872 <UART_SetConfig+0x176>
 800381c:	22c0      	movs	r2, #192	; 0xc0
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	4293      	cmp	r3, r2
 8003822:	d82e      	bhi.n	8003882 <UART_SetConfig+0x186>
 8003824:	2280      	movs	r2, #128	; 0x80
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	4293      	cmp	r3, r2
 800382a:	d012      	beq.n	8003852 <UART_SetConfig+0x156>
 800382c:	2280      	movs	r2, #128	; 0x80
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	4293      	cmp	r3, r2
 8003832:	d826      	bhi.n	8003882 <UART_SetConfig+0x186>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <UART_SetConfig+0x146>
 8003838:	2280      	movs	r2, #128	; 0x80
 800383a:	00d2      	lsls	r2, r2, #3
 800383c:	4293      	cmp	r3, r2
 800383e:	d010      	beq.n	8003862 <UART_SetConfig+0x166>
 8003840:	e01f      	b.n	8003882 <UART_SetConfig+0x186>
 8003842:	231b      	movs	r3, #27
 8003844:	2218      	movs	r2, #24
 8003846:	4694      	mov	ip, r2
 8003848:	44bc      	add	ip, r7
 800384a:	4463      	add	r3, ip
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	e026      	b.n	80038a0 <UART_SetConfig+0x1a4>
 8003852:	231b      	movs	r3, #27
 8003854:	2218      	movs	r2, #24
 8003856:	4694      	mov	ip, r2
 8003858:	44bc      	add	ip, r7
 800385a:	4463      	add	r3, ip
 800385c:	2202      	movs	r2, #2
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e01e      	b.n	80038a0 <UART_SetConfig+0x1a4>
 8003862:	231b      	movs	r3, #27
 8003864:	2218      	movs	r2, #24
 8003866:	4694      	mov	ip, r2
 8003868:	44bc      	add	ip, r7
 800386a:	4463      	add	r3, ip
 800386c:	2204      	movs	r2, #4
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e016      	b.n	80038a0 <UART_SetConfig+0x1a4>
 8003872:	231b      	movs	r3, #27
 8003874:	2218      	movs	r2, #24
 8003876:	4694      	mov	ip, r2
 8003878:	44bc      	add	ip, r7
 800387a:	4463      	add	r3, ip
 800387c:	2208      	movs	r2, #8
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e00e      	b.n	80038a0 <UART_SetConfig+0x1a4>
 8003882:	231b      	movs	r3, #27
 8003884:	2218      	movs	r2, #24
 8003886:	4694      	mov	ip, r2
 8003888:	44bc      	add	ip, r7
 800388a:	4463      	add	r3, ip
 800388c:	2210      	movs	r2, #16
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e006      	b.n	80038a0 <UART_SetConfig+0x1a4>
 8003892:	231b      	movs	r3, #27
 8003894:	2218      	movs	r2, #24
 8003896:	4694      	mov	ip, r2
 8003898:	44bc      	add	ip, r7
 800389a:	4463      	add	r3, ip
 800389c:	2210      	movs	r2, #16
 800389e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a61      	ldr	r2, [pc, #388]	; (8003a2c <UART_SetConfig+0x330>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d000      	beq.n	80038ac <UART_SetConfig+0x1b0>
 80038aa:	e088      	b.n	80039be <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038ac:	231b      	movs	r3, #27
 80038ae:	2218      	movs	r2, #24
 80038b0:	4694      	mov	ip, r2
 80038b2:	44bc      	add	ip, r7
 80038b4:	4463      	add	r3, ip
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d01d      	beq.n	80038f8 <UART_SetConfig+0x1fc>
 80038bc:	dc20      	bgt.n	8003900 <UART_SetConfig+0x204>
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d015      	beq.n	80038ee <UART_SetConfig+0x1f2>
 80038c2:	dc1d      	bgt.n	8003900 <UART_SetConfig+0x204>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <UART_SetConfig+0x1d2>
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d005      	beq.n	80038d8 <UART_SetConfig+0x1dc>
 80038cc:	e018      	b.n	8003900 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ce:	f7ff f8df 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 80038d2:	0003      	movs	r3, r0
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038d6:	e01d      	b.n	8003914 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d8:	4b57      	ldr	r3, [pc, #348]	; (8003a38 <UART_SetConfig+0x33c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2210      	movs	r2, #16
 80038de:	4013      	ands	r3, r2
 80038e0:	d002      	beq.n	80038e8 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80038e2:	4b56      	ldr	r3, [pc, #344]	; (8003a3c <UART_SetConfig+0x340>)
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80038e6:	e015      	b.n	8003914 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80038e8:	4b55      	ldr	r3, [pc, #340]	; (8003a40 <UART_SetConfig+0x344>)
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038ec:	e012      	b.n	8003914 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ee:	f7ff f81f 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80038f2:	0003      	movs	r3, r0
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038f6:	e00d      	b.n	8003914 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038fe:	e009      	b.n	8003914 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003904:	231a      	movs	r3, #26
 8003906:	2218      	movs	r2, #24
 8003908:	4694      	mov	ip, r2
 800390a:	44bc      	add	ip, r7
 800390c:	4463      	add	r3, ip
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
        break;
 8003912:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d100      	bne.n	800391c <UART_SetConfig+0x220>
 800391a:	e139      	b.n	8003b90 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	0013      	movs	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	189b      	adds	r3, r3, r2
 8003926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003928:	429a      	cmp	r2, r3
 800392a:	d305      	bcc.n	8003938 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003934:	429a      	cmp	r2, r3
 8003936:	d907      	bls.n	8003948 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8003938:	231a      	movs	r3, #26
 800393a:	2218      	movs	r2, #24
 800393c:	4694      	mov	ip, r2
 800393e:	44bc      	add	ip, r7
 8003940:	4463      	add	r3, ip
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e123      	b.n	8003b90 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	6939      	ldr	r1, [r7, #16]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	000b      	movs	r3, r1
 8003956:	0e1b      	lsrs	r3, r3, #24
 8003958:	0010      	movs	r0, r2
 800395a:	0205      	lsls	r5, r0, #8
 800395c:	431d      	orrs	r5, r3
 800395e:	000b      	movs	r3, r1
 8003960:	021c      	lsls	r4, r3, #8
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68b8      	ldr	r0, [r7, #8]
 8003970:	68f9      	ldr	r1, [r7, #12]
 8003972:	1900      	adds	r0, r0, r4
 8003974:	4169      	adcs	r1, r5
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	2300      	movs	r3, #0
 800397e:	607b      	str	r3, [r7, #4]
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f7fc fc5e 	bl	8000244 <__aeabi_uldivmod>
 8003988:	0002      	movs	r2, r0
 800398a:	000b      	movs	r3, r1
 800398c:	0013      	movs	r3, r2
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003992:	23c0      	movs	r3, #192	; 0xc0
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	429a      	cmp	r2, r3
 8003998:	d309      	bcc.n	80039ae <UART_SetConfig+0x2b2>
 800399a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	035b      	lsls	r3, r3, #13
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d204      	bcs.n	80039ae <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	e0f0      	b.n	8003b90 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80039ae:	231a      	movs	r3, #26
 80039b0:	2218      	movs	r2, #24
 80039b2:	4694      	mov	ip, r2
 80039b4:	44bc      	add	ip, r7
 80039b6:	4463      	add	r3, ip
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e0e8      	b.n	8003b90 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d000      	beq.n	80039cc <UART_SetConfig+0x2d0>
 80039ca:	e087      	b.n	8003adc <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 80039cc:	231b      	movs	r3, #27
 80039ce:	2218      	movs	r2, #24
 80039d0:	4694      	mov	ip, r2
 80039d2:	44bc      	add	ip, r7
 80039d4:	4463      	add	r3, ip
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d835      	bhi.n	8003a48 <UART_SetConfig+0x34c>
 80039dc:	009a      	lsls	r2, r3, #2
 80039de:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <UART_SetConfig+0x348>)
 80039e0:	18d3      	adds	r3, r2, r3
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e6:	f7ff f853 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 80039ea:	0003      	movs	r3, r0
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039ee:	e035      	b.n	8003a5c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f0:	f7ff f864 	bl	8002abc <HAL_RCC_GetPCLK2Freq>
 80039f4:	0003      	movs	r3, r0
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039f8:	e030      	b.n	8003a5c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <UART_SetConfig+0x33c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2210      	movs	r2, #16
 8003a00:	4013      	ands	r3, r2
 8003a02:	d002      	beq.n	8003a0a <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a04:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <UART_SetConfig+0x340>)
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a08:	e028      	b.n	8003a5c <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <UART_SetConfig+0x344>)
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a0e:	e025      	b.n	8003a5c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a10:	f7fe ff8e 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8003a14:	0003      	movs	r3, r0
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a18:	e020      	b.n	8003a5c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a20:	e01c      	b.n	8003a5c <UART_SetConfig+0x360>
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	efff69f3 	.word	0xefff69f3
 8003a28:	ffffcfff 	.word	0xffffcfff
 8003a2c:	40004800 	.word	0x40004800
 8003a30:	fffff4ff 	.word	0xfffff4ff
 8003a34:	40004400 	.word	0x40004400
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	003d0900 	.word	0x003d0900
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	08004a18 	.word	0x08004a18
      default:
        pclk = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003a4c:	231a      	movs	r3, #26
 8003a4e:	2218      	movs	r2, #24
 8003a50:	4694      	mov	ip, r2
 8003a52:	44bc      	add	ip, r7
 8003a54:	4463      	add	r3, ip
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
        break;
 8003a5a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d100      	bne.n	8003a64 <UART_SetConfig+0x368>
 8003a62:	e095      	b.n	8003b90 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a66:	005a      	lsls	r2, r3, #1
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	18d2      	adds	r2, r2, r3
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	0019      	movs	r1, r3
 8003a76:	0010      	movs	r0, r2
 8003a78:	f7fc fb58 	bl	800012c <__udivsi3>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a84:	2b0f      	cmp	r3, #15
 8003a86:	d921      	bls.n	8003acc <UART_SetConfig+0x3d0>
 8003a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	025b      	lsls	r3, r3, #9
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d21c      	bcs.n	8003acc <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	200e      	movs	r0, #14
 8003a98:	2418      	movs	r4, #24
 8003a9a:	193b      	adds	r3, r7, r4
 8003a9c:	181b      	adds	r3, r3, r0
 8003a9e:	210f      	movs	r1, #15
 8003aa0:	438a      	bics	r2, r1
 8003aa2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2207      	movs	r2, #7
 8003aac:	4013      	ands	r3, r2
 8003aae:	b299      	uxth	r1, r3
 8003ab0:	193b      	adds	r3, r7, r4
 8003ab2:	181b      	adds	r3, r3, r0
 8003ab4:	193a      	adds	r2, r7, r4
 8003ab6:	1812      	adds	r2, r2, r0
 8003ab8:	8812      	ldrh	r2, [r2, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	193a      	adds	r2, r7, r4
 8003ac4:	1812      	adds	r2, r2, r0
 8003ac6:	8812      	ldrh	r2, [r2, #0]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	e061      	b.n	8003b90 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003acc:	231a      	movs	r3, #26
 8003ace:	2218      	movs	r2, #24
 8003ad0:	4694      	mov	ip, r2
 8003ad2:	44bc      	add	ip, r7
 8003ad4:	4463      	add	r3, ip
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e059      	b.n	8003b90 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003adc:	231b      	movs	r3, #27
 8003ade:	2218      	movs	r2, #24
 8003ae0:	4694      	mov	ip, r2
 8003ae2:	44bc      	add	ip, r7
 8003ae4:	4463      	add	r3, ip
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d822      	bhi.n	8003b32 <UART_SetConfig+0x436>
 8003aec:	009a      	lsls	r2, r3, #2
 8003aee:	4b30      	ldr	r3, [pc, #192]	; (8003bb0 <UART_SetConfig+0x4b4>)
 8003af0:	18d3      	adds	r3, r2, r3
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af6:	f7fe ffcb 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8003afa:	0003      	movs	r3, r0
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003afe:	e022      	b.n	8003b46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b00:	f7fe ffdc 	bl	8002abc <HAL_RCC_GetPCLK2Freq>
 8003b04:	0003      	movs	r3, r0
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b08:	e01d      	b.n	8003b46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	; (8003bb4 <UART_SetConfig+0x4b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2210      	movs	r2, #16
 8003b10:	4013      	ands	r3, r2
 8003b12:	d002      	beq.n	8003b1a <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b14:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <UART_SetConfig+0x4bc>)
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b18:	e015      	b.n	8003b46 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8003b1a:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <UART_SetConfig+0x4c0>)
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b1e:	e012      	b.n	8003b46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b20:	f7fe ff06 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8003b24:	0003      	movs	r3, r0
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b28:	e00d      	b.n	8003b46 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b30:	e009      	b.n	8003b46 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b36:	231a      	movs	r3, #26
 8003b38:	2218      	movs	r2, #24
 8003b3a:	4694      	mov	ip, r2
 8003b3c:	44bc      	add	ip, r7
 8003b3e:	4463      	add	r3, ip
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
        break;
 8003b44:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d021      	beq.n	8003b90 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	085a      	lsrs	r2, r3, #1
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	18d2      	adds	r2, r2, r3
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	0010      	movs	r0, r2
 8003b5e:	f7fc fae5 	bl	800012c <__udivsi3>
 8003b62:	0003      	movs	r3, r0
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	d909      	bls.n	8003b82 <UART_SetConfig+0x486>
 8003b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	025b      	lsls	r3, r3, #9
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d204      	bcs.n	8003b82 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	e006      	b.n	8003b90 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003b82:	231a      	movs	r3, #26
 8003b84:	2218      	movs	r2, #24
 8003b86:	4694      	mov	ip, r2
 8003b88:	44bc      	add	ip, r7
 8003b8a:	4463      	add	r3, ip
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2200      	movs	r2, #0
 8003b94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b9c:	231a      	movs	r3, #26
 8003b9e:	2218      	movs	r2, #24
 8003ba0:	4694      	mov	ip, r2
 8003ba2:	44bc      	add	ip, r7
 8003ba4:	4463      	add	r3, ip
 8003ba6:	781b      	ldrb	r3, [r3, #0]
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b00e      	add	sp, #56	; 0x38
 8003bae:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb0:	08004a3c 	.word	0x08004a3c
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	003d0900 	.word	0x003d0900
 8003bbc:	00f42400 	.word	0x00f42400

08003bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2201      	movs	r2, #1
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d00b      	beq.n	8003bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4a4a      	ldr	r2, [pc, #296]	; (8003d04 <UART_AdvFeatureConfig+0x144>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	0019      	movs	r1, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	2202      	movs	r2, #2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d00b      	beq.n	8003c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4a43      	ldr	r2, [pc, #268]	; (8003d08 <UART_AdvFeatureConfig+0x148>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	2204      	movs	r2, #4
 8003c12:	4013      	ands	r3, r2
 8003c14:	d00b      	beq.n	8003c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a3b      	ldr	r2, [pc, #236]	; (8003d0c <UART_AdvFeatureConfig+0x14c>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	0019      	movs	r1, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	2208      	movs	r2, #8
 8003c34:	4013      	ands	r3, r2
 8003c36:	d00b      	beq.n	8003c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4a34      	ldr	r2, [pc, #208]	; (8003d10 <UART_AdvFeatureConfig+0x150>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	0019      	movs	r1, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	2210      	movs	r2, #16
 8003c56:	4013      	ands	r3, r2
 8003c58:	d00b      	beq.n	8003c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a2c      	ldr	r2, [pc, #176]	; (8003d14 <UART_AdvFeatureConfig+0x154>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	0019      	movs	r1, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	2220      	movs	r2, #32
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d00b      	beq.n	8003c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	4a25      	ldr	r2, [pc, #148]	; (8003d18 <UART_AdvFeatureConfig+0x158>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	0019      	movs	r1, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	2240      	movs	r2, #64	; 0x40
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d01d      	beq.n	8003cda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <UART_AdvFeatureConfig+0x15c>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	0019      	movs	r1, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	035b      	lsls	r3, r3, #13
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d10b      	bne.n	8003cda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a15      	ldr	r2, [pc, #84]	; (8003d20 <UART_AdvFeatureConfig+0x160>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	0019      	movs	r1, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2280      	movs	r2, #128	; 0x80
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d00b      	beq.n	8003cfc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <UART_AdvFeatureConfig+0x164>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]
  }
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	fffdffff 	.word	0xfffdffff
 8003d08:	fffeffff 	.word	0xfffeffff
 8003d0c:	fffbffff 	.word	0xfffbffff
 8003d10:	ffff7fff 	.word	0xffff7fff
 8003d14:	ffffefff 	.word	0xffffefff
 8003d18:	ffffdfff 	.word	0xffffdfff
 8003d1c:	ffefffff 	.word	0xffefffff
 8003d20:	ff9fffff 	.word	0xff9fffff
 8003d24:	fff7ffff 	.word	0xfff7ffff

08003d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2280      	movs	r2, #128	; 0x80
 8003d34:	2100      	movs	r1, #0
 8003d36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d38:	f7fd fe56 	bl	80019e8 <HAL_GetTick>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2208      	movs	r2, #8
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d10c      	bne.n	8003d68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	0391      	lsls	r1, r2, #14
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <UART_CheckIdleState+0x8c>)
 8003d58:	9200      	str	r2, [sp, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f000 f82c 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003d60:	1e03      	subs	r3, r0, #0
 8003d62:	d001      	beq.n	8003d68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e021      	b.n	8003dac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2204      	movs	r2, #4
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d10c      	bne.n	8003d90 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2280      	movs	r2, #128	; 0x80
 8003d7a:	03d1      	lsls	r1, r2, #15
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <UART_CheckIdleState+0x8c>)
 8003d80:	9200      	str	r2, [sp, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f000 f818 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d001      	beq.n	8003d90 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e00d      	b.n	8003dac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2274      	movs	r2, #116	; 0x74
 8003da6:	2100      	movs	r1, #0
 8003da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b004      	add	sp, #16
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	01ffffff 	.word	0x01ffffff

08003db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	1dfb      	adds	r3, r7, #7
 8003dc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc8:	e05e      	b.n	8003e88 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	d05b      	beq.n	8003e88 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd0:	f7fd fe0a 	bl	80019e8 <HAL_GetTick>
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d302      	bcc.n	8003de6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d11b      	bne.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	492f      	ldr	r1, [pc, #188]	; (8003eb0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003df2:	400a      	ands	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2101      	movs	r1, #1
 8003e02:	438a      	bics	r2, r1
 8003e04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2274      	movs	r2, #116	; 0x74
 8003e16:	2100      	movs	r1, #0
 8003e18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e044      	b.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2204      	movs	r2, #4
 8003e26:	4013      	ands	r3, r2
 8003e28:	d02e      	beq.n	8003e88 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	401a      	ands	r2, r3
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d124      	bne.n	8003e88 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4917      	ldr	r1, [pc, #92]	; (8003eb0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003e54:	400a      	ands	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2101      	movs	r1, #1
 8003e64:	438a      	bics	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2280      	movs	r2, #128	; 0x80
 8003e78:	2120      	movs	r1, #32
 8003e7a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2274      	movs	r2, #116	; 0x74
 8003e80:	2100      	movs	r1, #0
 8003e82:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e00f      	b.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	425a      	negs	r2, r3
 8003e98:	4153      	adcs	r3, r2
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	001a      	movs	r2, r3
 8003e9e:	1dfb      	adds	r3, r7, #7
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d091      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b004      	add	sp, #16
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	fffffe5f 	.word	0xfffffe5f

08003eb4 <__errno>:
 8003eb4:	4b01      	ldr	r3, [pc, #4]	; (8003ebc <__errno+0x8>)
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	4770      	bx	lr
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	2000000c 	.word	0x2000000c

08003ec0 <__libc_init_array>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	2600      	movs	r6, #0
 8003ec4:	4d0c      	ldr	r5, [pc, #48]	; (8003ef8 <__libc_init_array+0x38>)
 8003ec6:	4c0d      	ldr	r4, [pc, #52]	; (8003efc <__libc_init_array+0x3c>)
 8003ec8:	1b64      	subs	r4, r4, r5
 8003eca:	10a4      	asrs	r4, r4, #2
 8003ecc:	42a6      	cmp	r6, r4
 8003ece:	d109      	bne.n	8003ee4 <__libc_init_array+0x24>
 8003ed0:	2600      	movs	r6, #0
 8003ed2:	f000 fc49 	bl	8004768 <_init>
 8003ed6:	4d0a      	ldr	r5, [pc, #40]	; (8003f00 <__libc_init_array+0x40>)
 8003ed8:	4c0a      	ldr	r4, [pc, #40]	; (8003f04 <__libc_init_array+0x44>)
 8003eda:	1b64      	subs	r4, r4, r5
 8003edc:	10a4      	asrs	r4, r4, #2
 8003ede:	42a6      	cmp	r6, r4
 8003ee0:	d105      	bne.n	8003eee <__libc_init_array+0x2e>
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	00b3      	lsls	r3, r6, #2
 8003ee6:	58eb      	ldr	r3, [r5, r3]
 8003ee8:	4798      	blx	r3
 8003eea:	3601      	adds	r6, #1
 8003eec:	e7ee      	b.n	8003ecc <__libc_init_array+0xc>
 8003eee:	00b3      	lsls	r3, r6, #2
 8003ef0:	58eb      	ldr	r3, [r5, r3]
 8003ef2:	4798      	blx	r3
 8003ef4:	3601      	adds	r6, #1
 8003ef6:	e7f2      	b.n	8003ede <__libc_init_array+0x1e>
 8003ef8:	08004a9c 	.word	0x08004a9c
 8003efc:	08004a9c 	.word	0x08004a9c
 8003f00:	08004a9c 	.word	0x08004a9c
 8003f04:	08004aa0 	.word	0x08004aa0

08003f08 <memset>:
 8003f08:	0003      	movs	r3, r0
 8003f0a:	1882      	adds	r2, r0, r2
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	7019      	strb	r1, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <_vsiprintf_r>:
 8003f18:	b500      	push	{lr}
 8003f1a:	b09b      	sub	sp, #108	; 0x6c
 8003f1c:	9100      	str	r1, [sp, #0]
 8003f1e:	9104      	str	r1, [sp, #16]
 8003f20:	4906      	ldr	r1, [pc, #24]	; (8003f3c <_vsiprintf_r+0x24>)
 8003f22:	9105      	str	r1, [sp, #20]
 8003f24:	9102      	str	r1, [sp, #8]
 8003f26:	4906      	ldr	r1, [pc, #24]	; (8003f40 <_vsiprintf_r+0x28>)
 8003f28:	9103      	str	r1, [sp, #12]
 8003f2a:	4669      	mov	r1, sp
 8003f2c:	f000 f878 	bl	8004020 <_svfiprintf_r>
 8003f30:	2300      	movs	r3, #0
 8003f32:	9a00      	ldr	r2, [sp, #0]
 8003f34:	7013      	strb	r3, [r2, #0]
 8003f36:	b01b      	add	sp, #108	; 0x6c
 8003f38:	bd00      	pop	{pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	7fffffff 	.word	0x7fffffff
 8003f40:	ffff0208 	.word	0xffff0208

08003f44 <vsiprintf>:
 8003f44:	b510      	push	{r4, lr}
 8003f46:	0013      	movs	r3, r2
 8003f48:	000a      	movs	r2, r1
 8003f4a:	0001      	movs	r1, r0
 8003f4c:	4802      	ldr	r0, [pc, #8]	; (8003f58 <vsiprintf+0x14>)
 8003f4e:	6800      	ldr	r0, [r0, #0]
 8003f50:	f7ff ffe2 	bl	8003f18 <_vsiprintf_r>
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	2000000c 	.word	0x2000000c

08003f5c <__ssputs_r>:
 8003f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5e:	688e      	ldr	r6, [r1, #8]
 8003f60:	b085      	sub	sp, #20
 8003f62:	0007      	movs	r7, r0
 8003f64:	000c      	movs	r4, r1
 8003f66:	9203      	str	r2, [sp, #12]
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	429e      	cmp	r6, r3
 8003f6c:	d83c      	bhi.n	8003fe8 <__ssputs_r+0x8c>
 8003f6e:	2390      	movs	r3, #144	; 0x90
 8003f70:	898a      	ldrh	r2, [r1, #12]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	421a      	tst	r2, r3
 8003f76:	d034      	beq.n	8003fe2 <__ssputs_r+0x86>
 8003f78:	2503      	movs	r5, #3
 8003f7a:	6909      	ldr	r1, [r1, #16]
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	1a5b      	subs	r3, r3, r1
 8003f80:	9302      	str	r3, [sp, #8]
 8003f82:	6963      	ldr	r3, [r4, #20]
 8003f84:	9802      	ldr	r0, [sp, #8]
 8003f86:	435d      	muls	r5, r3
 8003f88:	0feb      	lsrs	r3, r5, #31
 8003f8a:	195d      	adds	r5, r3, r5
 8003f8c:	9b01      	ldr	r3, [sp, #4]
 8003f8e:	106d      	asrs	r5, r5, #1
 8003f90:	3301      	adds	r3, #1
 8003f92:	181b      	adds	r3, r3, r0
 8003f94:	42ab      	cmp	r3, r5
 8003f96:	d900      	bls.n	8003f9a <__ssputs_r+0x3e>
 8003f98:	001d      	movs	r5, r3
 8003f9a:	0553      	lsls	r3, r2, #21
 8003f9c:	d532      	bpl.n	8004004 <__ssputs_r+0xa8>
 8003f9e:	0029      	movs	r1, r5
 8003fa0:	0038      	movs	r0, r7
 8003fa2:	f000 fb31 	bl	8004608 <_malloc_r>
 8003fa6:	1e06      	subs	r6, r0, #0
 8003fa8:	d109      	bne.n	8003fbe <__ssputs_r+0x62>
 8003faa:	230c      	movs	r3, #12
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	2340      	movs	r3, #64	; 0x40
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	89a2      	ldrh	r2, [r4, #12]
 8003fb4:	4240      	negs	r0, r0
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	81a3      	strh	r3, [r4, #12]
 8003fba:	b005      	add	sp, #20
 8003fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fbe:	9a02      	ldr	r2, [sp, #8]
 8003fc0:	6921      	ldr	r1, [r4, #16]
 8003fc2:	f000 faba 	bl	800453a <memcpy>
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	4a14      	ldr	r2, [pc, #80]	; (800401c <__ssputs_r+0xc0>)
 8003fca:	401a      	ands	r2, r3
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	81a3      	strh	r3, [r4, #12]
 8003fd2:	9b02      	ldr	r3, [sp, #8]
 8003fd4:	6126      	str	r6, [r4, #16]
 8003fd6:	18f6      	adds	r6, r6, r3
 8003fd8:	6026      	str	r6, [r4, #0]
 8003fda:	6165      	str	r5, [r4, #20]
 8003fdc:	9e01      	ldr	r6, [sp, #4]
 8003fde:	1aed      	subs	r5, r5, r3
 8003fe0:	60a5      	str	r5, [r4, #8]
 8003fe2:	9b01      	ldr	r3, [sp, #4]
 8003fe4:	429e      	cmp	r6, r3
 8003fe6:	d900      	bls.n	8003fea <__ssputs_r+0x8e>
 8003fe8:	9e01      	ldr	r6, [sp, #4]
 8003fea:	0032      	movs	r2, r6
 8003fec:	9903      	ldr	r1, [sp, #12]
 8003fee:	6820      	ldr	r0, [r4, #0]
 8003ff0:	f000 faac 	bl	800454c <memmove>
 8003ff4:	68a3      	ldr	r3, [r4, #8]
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	1b9b      	subs	r3, r3, r6
 8003ffa:	60a3      	str	r3, [r4, #8]
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	199e      	adds	r6, r3, r6
 8004000:	6026      	str	r6, [r4, #0]
 8004002:	e7da      	b.n	8003fba <__ssputs_r+0x5e>
 8004004:	002a      	movs	r2, r5
 8004006:	0038      	movs	r0, r7
 8004008:	f000 fb5c 	bl	80046c4 <_realloc_r>
 800400c:	1e06      	subs	r6, r0, #0
 800400e:	d1e0      	bne.n	8003fd2 <__ssputs_r+0x76>
 8004010:	0038      	movs	r0, r7
 8004012:	6921      	ldr	r1, [r4, #16]
 8004014:	f000 faae 	bl	8004574 <_free_r>
 8004018:	e7c7      	b.n	8003faa <__ssputs_r+0x4e>
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	fffffb7f 	.word	0xfffffb7f

08004020 <_svfiprintf_r>:
 8004020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004022:	b0a1      	sub	sp, #132	; 0x84
 8004024:	9003      	str	r0, [sp, #12]
 8004026:	001d      	movs	r5, r3
 8004028:	898b      	ldrh	r3, [r1, #12]
 800402a:	000f      	movs	r7, r1
 800402c:	0016      	movs	r6, r2
 800402e:	061b      	lsls	r3, r3, #24
 8004030:	d511      	bpl.n	8004056 <_svfiprintf_r+0x36>
 8004032:	690b      	ldr	r3, [r1, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10e      	bne.n	8004056 <_svfiprintf_r+0x36>
 8004038:	2140      	movs	r1, #64	; 0x40
 800403a:	f000 fae5 	bl	8004608 <_malloc_r>
 800403e:	6038      	str	r0, [r7, #0]
 8004040:	6138      	str	r0, [r7, #16]
 8004042:	2800      	cmp	r0, #0
 8004044:	d105      	bne.n	8004052 <_svfiprintf_r+0x32>
 8004046:	230c      	movs	r3, #12
 8004048:	9a03      	ldr	r2, [sp, #12]
 800404a:	3801      	subs	r0, #1
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	b021      	add	sp, #132	; 0x84
 8004050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004052:	2340      	movs	r3, #64	; 0x40
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	2300      	movs	r3, #0
 8004058:	ac08      	add	r4, sp, #32
 800405a:	6163      	str	r3, [r4, #20]
 800405c:	3320      	adds	r3, #32
 800405e:	7663      	strb	r3, [r4, #25]
 8004060:	3310      	adds	r3, #16
 8004062:	76a3      	strb	r3, [r4, #26]
 8004064:	9507      	str	r5, [sp, #28]
 8004066:	0035      	movs	r5, r6
 8004068:	782b      	ldrb	r3, [r5, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <_svfiprintf_r+0x52>
 800406e:	2b25      	cmp	r3, #37	; 0x25
 8004070:	d147      	bne.n	8004102 <_svfiprintf_r+0xe2>
 8004072:	1bab      	subs	r3, r5, r6
 8004074:	9305      	str	r3, [sp, #20]
 8004076:	42b5      	cmp	r5, r6
 8004078:	d00c      	beq.n	8004094 <_svfiprintf_r+0x74>
 800407a:	0032      	movs	r2, r6
 800407c:	0039      	movs	r1, r7
 800407e:	9803      	ldr	r0, [sp, #12]
 8004080:	f7ff ff6c 	bl	8003f5c <__ssputs_r>
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d100      	bne.n	800408a <_svfiprintf_r+0x6a>
 8004088:	e0ae      	b.n	80041e8 <_svfiprintf_r+0x1c8>
 800408a:	6962      	ldr	r2, [r4, #20]
 800408c:	9b05      	ldr	r3, [sp, #20]
 800408e:	4694      	mov	ip, r2
 8004090:	4463      	add	r3, ip
 8004092:	6163      	str	r3, [r4, #20]
 8004094:	782b      	ldrb	r3, [r5, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d100      	bne.n	800409c <_svfiprintf_r+0x7c>
 800409a:	e0a5      	b.n	80041e8 <_svfiprintf_r+0x1c8>
 800409c:	2201      	movs	r2, #1
 800409e:	2300      	movs	r3, #0
 80040a0:	4252      	negs	r2, r2
 80040a2:	6062      	str	r2, [r4, #4]
 80040a4:	a904      	add	r1, sp, #16
 80040a6:	3254      	adds	r2, #84	; 0x54
 80040a8:	1852      	adds	r2, r2, r1
 80040aa:	1c6e      	adds	r6, r5, #1
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	60e3      	str	r3, [r4, #12]
 80040b0:	60a3      	str	r3, [r4, #8]
 80040b2:	7013      	strb	r3, [r2, #0]
 80040b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80040b6:	2205      	movs	r2, #5
 80040b8:	7831      	ldrb	r1, [r6, #0]
 80040ba:	4854      	ldr	r0, [pc, #336]	; (800420c <_svfiprintf_r+0x1ec>)
 80040bc:	f000 fa32 	bl	8004524 <memchr>
 80040c0:	1c75      	adds	r5, r6, #1
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d11f      	bne.n	8004106 <_svfiprintf_r+0xe6>
 80040c6:	6822      	ldr	r2, [r4, #0]
 80040c8:	06d3      	lsls	r3, r2, #27
 80040ca:	d504      	bpl.n	80040d6 <_svfiprintf_r+0xb6>
 80040cc:	2353      	movs	r3, #83	; 0x53
 80040ce:	a904      	add	r1, sp, #16
 80040d0:	185b      	adds	r3, r3, r1
 80040d2:	2120      	movs	r1, #32
 80040d4:	7019      	strb	r1, [r3, #0]
 80040d6:	0713      	lsls	r3, r2, #28
 80040d8:	d504      	bpl.n	80040e4 <_svfiprintf_r+0xc4>
 80040da:	2353      	movs	r3, #83	; 0x53
 80040dc:	a904      	add	r1, sp, #16
 80040de:	185b      	adds	r3, r3, r1
 80040e0:	212b      	movs	r1, #43	; 0x2b
 80040e2:	7019      	strb	r1, [r3, #0]
 80040e4:	7833      	ldrb	r3, [r6, #0]
 80040e6:	2b2a      	cmp	r3, #42	; 0x2a
 80040e8:	d016      	beq.n	8004118 <_svfiprintf_r+0xf8>
 80040ea:	0035      	movs	r5, r6
 80040ec:	2100      	movs	r1, #0
 80040ee:	200a      	movs	r0, #10
 80040f0:	68e3      	ldr	r3, [r4, #12]
 80040f2:	782a      	ldrb	r2, [r5, #0]
 80040f4:	1c6e      	adds	r6, r5, #1
 80040f6:	3a30      	subs	r2, #48	; 0x30
 80040f8:	2a09      	cmp	r2, #9
 80040fa:	d94e      	bls.n	800419a <_svfiprintf_r+0x17a>
 80040fc:	2900      	cmp	r1, #0
 80040fe:	d111      	bne.n	8004124 <_svfiprintf_r+0x104>
 8004100:	e017      	b.n	8004132 <_svfiprintf_r+0x112>
 8004102:	3501      	adds	r5, #1
 8004104:	e7b0      	b.n	8004068 <_svfiprintf_r+0x48>
 8004106:	4b41      	ldr	r3, [pc, #260]	; (800420c <_svfiprintf_r+0x1ec>)
 8004108:	6822      	ldr	r2, [r4, #0]
 800410a:	1ac0      	subs	r0, r0, r3
 800410c:	2301      	movs	r3, #1
 800410e:	4083      	lsls	r3, r0
 8004110:	4313      	orrs	r3, r2
 8004112:	002e      	movs	r6, r5
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	e7ce      	b.n	80040b6 <_svfiprintf_r+0x96>
 8004118:	9b07      	ldr	r3, [sp, #28]
 800411a:	1d19      	adds	r1, r3, #4
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	9107      	str	r1, [sp, #28]
 8004120:	2b00      	cmp	r3, #0
 8004122:	db01      	blt.n	8004128 <_svfiprintf_r+0x108>
 8004124:	930b      	str	r3, [sp, #44]	; 0x2c
 8004126:	e004      	b.n	8004132 <_svfiprintf_r+0x112>
 8004128:	425b      	negs	r3, r3
 800412a:	60e3      	str	r3, [r4, #12]
 800412c:	2302      	movs	r3, #2
 800412e:	4313      	orrs	r3, r2
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	782b      	ldrb	r3, [r5, #0]
 8004134:	2b2e      	cmp	r3, #46	; 0x2e
 8004136:	d10a      	bne.n	800414e <_svfiprintf_r+0x12e>
 8004138:	786b      	ldrb	r3, [r5, #1]
 800413a:	2b2a      	cmp	r3, #42	; 0x2a
 800413c:	d135      	bne.n	80041aa <_svfiprintf_r+0x18a>
 800413e:	9b07      	ldr	r3, [sp, #28]
 8004140:	3502      	adds	r5, #2
 8004142:	1d1a      	adds	r2, r3, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	9207      	str	r2, [sp, #28]
 8004148:	2b00      	cmp	r3, #0
 800414a:	db2b      	blt.n	80041a4 <_svfiprintf_r+0x184>
 800414c:	9309      	str	r3, [sp, #36]	; 0x24
 800414e:	4e30      	ldr	r6, [pc, #192]	; (8004210 <_svfiprintf_r+0x1f0>)
 8004150:	2203      	movs	r2, #3
 8004152:	0030      	movs	r0, r6
 8004154:	7829      	ldrb	r1, [r5, #0]
 8004156:	f000 f9e5 	bl	8004524 <memchr>
 800415a:	2800      	cmp	r0, #0
 800415c:	d006      	beq.n	800416c <_svfiprintf_r+0x14c>
 800415e:	2340      	movs	r3, #64	; 0x40
 8004160:	1b80      	subs	r0, r0, r6
 8004162:	4083      	lsls	r3, r0
 8004164:	6822      	ldr	r2, [r4, #0]
 8004166:	3501      	adds	r5, #1
 8004168:	4313      	orrs	r3, r2
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	7829      	ldrb	r1, [r5, #0]
 800416e:	2206      	movs	r2, #6
 8004170:	4828      	ldr	r0, [pc, #160]	; (8004214 <_svfiprintf_r+0x1f4>)
 8004172:	1c6e      	adds	r6, r5, #1
 8004174:	7621      	strb	r1, [r4, #24]
 8004176:	f000 f9d5 	bl	8004524 <memchr>
 800417a:	2800      	cmp	r0, #0
 800417c:	d03c      	beq.n	80041f8 <_svfiprintf_r+0x1d8>
 800417e:	4b26      	ldr	r3, [pc, #152]	; (8004218 <_svfiprintf_r+0x1f8>)
 8004180:	2b00      	cmp	r3, #0
 8004182:	d125      	bne.n	80041d0 <_svfiprintf_r+0x1b0>
 8004184:	2207      	movs	r2, #7
 8004186:	9b07      	ldr	r3, [sp, #28]
 8004188:	3307      	adds	r3, #7
 800418a:	4393      	bics	r3, r2
 800418c:	3308      	adds	r3, #8
 800418e:	9307      	str	r3, [sp, #28]
 8004190:	6963      	ldr	r3, [r4, #20]
 8004192:	9a04      	ldr	r2, [sp, #16]
 8004194:	189b      	adds	r3, r3, r2
 8004196:	6163      	str	r3, [r4, #20]
 8004198:	e765      	b.n	8004066 <_svfiprintf_r+0x46>
 800419a:	4343      	muls	r3, r0
 800419c:	0035      	movs	r5, r6
 800419e:	2101      	movs	r1, #1
 80041a0:	189b      	adds	r3, r3, r2
 80041a2:	e7a6      	b.n	80040f2 <_svfiprintf_r+0xd2>
 80041a4:	2301      	movs	r3, #1
 80041a6:	425b      	negs	r3, r3
 80041a8:	e7d0      	b.n	800414c <_svfiprintf_r+0x12c>
 80041aa:	2300      	movs	r3, #0
 80041ac:	200a      	movs	r0, #10
 80041ae:	001a      	movs	r2, r3
 80041b0:	3501      	adds	r5, #1
 80041b2:	6063      	str	r3, [r4, #4]
 80041b4:	7829      	ldrb	r1, [r5, #0]
 80041b6:	1c6e      	adds	r6, r5, #1
 80041b8:	3930      	subs	r1, #48	; 0x30
 80041ba:	2909      	cmp	r1, #9
 80041bc:	d903      	bls.n	80041c6 <_svfiprintf_r+0x1a6>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0c5      	beq.n	800414e <_svfiprintf_r+0x12e>
 80041c2:	9209      	str	r2, [sp, #36]	; 0x24
 80041c4:	e7c3      	b.n	800414e <_svfiprintf_r+0x12e>
 80041c6:	4342      	muls	r2, r0
 80041c8:	0035      	movs	r5, r6
 80041ca:	2301      	movs	r3, #1
 80041cc:	1852      	adds	r2, r2, r1
 80041ce:	e7f1      	b.n	80041b4 <_svfiprintf_r+0x194>
 80041d0:	ab07      	add	r3, sp, #28
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	003a      	movs	r2, r7
 80041d6:	0021      	movs	r1, r4
 80041d8:	4b10      	ldr	r3, [pc, #64]	; (800421c <_svfiprintf_r+0x1fc>)
 80041da:	9803      	ldr	r0, [sp, #12]
 80041dc:	e000      	b.n	80041e0 <_svfiprintf_r+0x1c0>
 80041de:	bf00      	nop
 80041e0:	9004      	str	r0, [sp, #16]
 80041e2:	9b04      	ldr	r3, [sp, #16]
 80041e4:	3301      	adds	r3, #1
 80041e6:	d1d3      	bne.n	8004190 <_svfiprintf_r+0x170>
 80041e8:	89bb      	ldrh	r3, [r7, #12]
 80041ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 80041ec:	065b      	lsls	r3, r3, #25
 80041ee:	d400      	bmi.n	80041f2 <_svfiprintf_r+0x1d2>
 80041f0:	e72d      	b.n	800404e <_svfiprintf_r+0x2e>
 80041f2:	2001      	movs	r0, #1
 80041f4:	4240      	negs	r0, r0
 80041f6:	e72a      	b.n	800404e <_svfiprintf_r+0x2e>
 80041f8:	ab07      	add	r3, sp, #28
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	003a      	movs	r2, r7
 80041fe:	0021      	movs	r1, r4
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <_svfiprintf_r+0x1fc>)
 8004202:	9803      	ldr	r0, [sp, #12]
 8004204:	f000 f87c 	bl	8004300 <_printf_i>
 8004208:	e7ea      	b.n	80041e0 <_svfiprintf_r+0x1c0>
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	08004a60 	.word	0x08004a60
 8004210:	08004a66 	.word	0x08004a66
 8004214:	08004a6a 	.word	0x08004a6a
 8004218:	00000000 	.word	0x00000000
 800421c:	08003f5d 	.word	0x08003f5d

08004220 <_printf_common>:
 8004220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004222:	0015      	movs	r5, r2
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	688a      	ldr	r2, [r1, #8]
 8004228:	690b      	ldr	r3, [r1, #16]
 800422a:	000c      	movs	r4, r1
 800422c:	9000      	str	r0, [sp, #0]
 800422e:	4293      	cmp	r3, r2
 8004230:	da00      	bge.n	8004234 <_printf_common+0x14>
 8004232:	0013      	movs	r3, r2
 8004234:	0022      	movs	r2, r4
 8004236:	602b      	str	r3, [r5, #0]
 8004238:	3243      	adds	r2, #67	; 0x43
 800423a:	7812      	ldrb	r2, [r2, #0]
 800423c:	2a00      	cmp	r2, #0
 800423e:	d001      	beq.n	8004244 <_printf_common+0x24>
 8004240:	3301      	adds	r3, #1
 8004242:	602b      	str	r3, [r5, #0]
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	069b      	lsls	r3, r3, #26
 8004248:	d502      	bpl.n	8004250 <_printf_common+0x30>
 800424a:	682b      	ldr	r3, [r5, #0]
 800424c:	3302      	adds	r3, #2
 800424e:	602b      	str	r3, [r5, #0]
 8004250:	6822      	ldr	r2, [r4, #0]
 8004252:	2306      	movs	r3, #6
 8004254:	0017      	movs	r7, r2
 8004256:	401f      	ands	r7, r3
 8004258:	421a      	tst	r2, r3
 800425a:	d027      	beq.n	80042ac <_printf_common+0x8c>
 800425c:	0023      	movs	r3, r4
 800425e:	3343      	adds	r3, #67	; 0x43
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	1e5a      	subs	r2, r3, #1
 8004264:	4193      	sbcs	r3, r2
 8004266:	6822      	ldr	r2, [r4, #0]
 8004268:	0692      	lsls	r2, r2, #26
 800426a:	d430      	bmi.n	80042ce <_printf_common+0xae>
 800426c:	0022      	movs	r2, r4
 800426e:	9901      	ldr	r1, [sp, #4]
 8004270:	9800      	ldr	r0, [sp, #0]
 8004272:	9e08      	ldr	r6, [sp, #32]
 8004274:	3243      	adds	r2, #67	; 0x43
 8004276:	47b0      	blx	r6
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d025      	beq.n	80042c8 <_printf_common+0xa8>
 800427c:	2306      	movs	r3, #6
 800427e:	6820      	ldr	r0, [r4, #0]
 8004280:	682a      	ldr	r2, [r5, #0]
 8004282:	68e1      	ldr	r1, [r4, #12]
 8004284:	2500      	movs	r5, #0
 8004286:	4003      	ands	r3, r0
 8004288:	2b04      	cmp	r3, #4
 800428a:	d103      	bne.n	8004294 <_printf_common+0x74>
 800428c:	1a8d      	subs	r5, r1, r2
 800428e:	43eb      	mvns	r3, r5
 8004290:	17db      	asrs	r3, r3, #31
 8004292:	401d      	ands	r5, r3
 8004294:	68a3      	ldr	r3, [r4, #8]
 8004296:	6922      	ldr	r2, [r4, #16]
 8004298:	4293      	cmp	r3, r2
 800429a:	dd01      	ble.n	80042a0 <_printf_common+0x80>
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	18ed      	adds	r5, r5, r3
 80042a0:	2700      	movs	r7, #0
 80042a2:	42bd      	cmp	r5, r7
 80042a4:	d120      	bne.n	80042e8 <_printf_common+0xc8>
 80042a6:	2000      	movs	r0, #0
 80042a8:	e010      	b.n	80042cc <_printf_common+0xac>
 80042aa:	3701      	adds	r7, #1
 80042ac:	68e3      	ldr	r3, [r4, #12]
 80042ae:	682a      	ldr	r2, [r5, #0]
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	42bb      	cmp	r3, r7
 80042b4:	ddd2      	ble.n	800425c <_printf_common+0x3c>
 80042b6:	0022      	movs	r2, r4
 80042b8:	2301      	movs	r3, #1
 80042ba:	9901      	ldr	r1, [sp, #4]
 80042bc:	9800      	ldr	r0, [sp, #0]
 80042be:	9e08      	ldr	r6, [sp, #32]
 80042c0:	3219      	adds	r2, #25
 80042c2:	47b0      	blx	r6
 80042c4:	1c43      	adds	r3, r0, #1
 80042c6:	d1f0      	bne.n	80042aa <_printf_common+0x8a>
 80042c8:	2001      	movs	r0, #1
 80042ca:	4240      	negs	r0, r0
 80042cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042ce:	2030      	movs	r0, #48	; 0x30
 80042d0:	18e1      	adds	r1, r4, r3
 80042d2:	3143      	adds	r1, #67	; 0x43
 80042d4:	7008      	strb	r0, [r1, #0]
 80042d6:	0021      	movs	r1, r4
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	3145      	adds	r1, #69	; 0x45
 80042dc:	7809      	ldrb	r1, [r1, #0]
 80042de:	18a2      	adds	r2, r4, r2
 80042e0:	3243      	adds	r2, #67	; 0x43
 80042e2:	3302      	adds	r3, #2
 80042e4:	7011      	strb	r1, [r2, #0]
 80042e6:	e7c1      	b.n	800426c <_printf_common+0x4c>
 80042e8:	0022      	movs	r2, r4
 80042ea:	2301      	movs	r3, #1
 80042ec:	9901      	ldr	r1, [sp, #4]
 80042ee:	9800      	ldr	r0, [sp, #0]
 80042f0:	9e08      	ldr	r6, [sp, #32]
 80042f2:	321a      	adds	r2, #26
 80042f4:	47b0      	blx	r6
 80042f6:	1c43      	adds	r3, r0, #1
 80042f8:	d0e6      	beq.n	80042c8 <_printf_common+0xa8>
 80042fa:	3701      	adds	r7, #1
 80042fc:	e7d1      	b.n	80042a2 <_printf_common+0x82>
	...

08004300 <_printf_i>:
 8004300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004302:	b08b      	sub	sp, #44	; 0x2c
 8004304:	9206      	str	r2, [sp, #24]
 8004306:	000a      	movs	r2, r1
 8004308:	3243      	adds	r2, #67	; 0x43
 800430a:	9307      	str	r3, [sp, #28]
 800430c:	9005      	str	r0, [sp, #20]
 800430e:	9204      	str	r2, [sp, #16]
 8004310:	7e0a      	ldrb	r2, [r1, #24]
 8004312:	000c      	movs	r4, r1
 8004314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004316:	2a78      	cmp	r2, #120	; 0x78
 8004318:	d806      	bhi.n	8004328 <_printf_i+0x28>
 800431a:	2a62      	cmp	r2, #98	; 0x62
 800431c:	d808      	bhi.n	8004330 <_printf_i+0x30>
 800431e:	2a00      	cmp	r2, #0
 8004320:	d100      	bne.n	8004324 <_printf_i+0x24>
 8004322:	e0c0      	b.n	80044a6 <_printf_i+0x1a6>
 8004324:	2a58      	cmp	r2, #88	; 0x58
 8004326:	d052      	beq.n	80043ce <_printf_i+0xce>
 8004328:	0026      	movs	r6, r4
 800432a:	3642      	adds	r6, #66	; 0x42
 800432c:	7032      	strb	r2, [r6, #0]
 800432e:	e022      	b.n	8004376 <_printf_i+0x76>
 8004330:	0010      	movs	r0, r2
 8004332:	3863      	subs	r0, #99	; 0x63
 8004334:	2815      	cmp	r0, #21
 8004336:	d8f7      	bhi.n	8004328 <_printf_i+0x28>
 8004338:	f7fb feee 	bl	8000118 <__gnu_thumb1_case_shi>
 800433c:	001f0016 	.word	0x001f0016
 8004340:	fff6fff6 	.word	0xfff6fff6
 8004344:	fff6fff6 	.word	0xfff6fff6
 8004348:	fff6001f 	.word	0xfff6001f
 800434c:	fff6fff6 	.word	0xfff6fff6
 8004350:	00a8fff6 	.word	0x00a8fff6
 8004354:	009a0036 	.word	0x009a0036
 8004358:	fff6fff6 	.word	0xfff6fff6
 800435c:	fff600b9 	.word	0xfff600b9
 8004360:	fff60036 	.word	0xfff60036
 8004364:	009efff6 	.word	0x009efff6
 8004368:	0026      	movs	r6, r4
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	3642      	adds	r6, #66	; 0x42
 800436e:	1d11      	adds	r1, r2, #4
 8004370:	6019      	str	r1, [r3, #0]
 8004372:	6813      	ldr	r3, [r2, #0]
 8004374:	7033      	strb	r3, [r6, #0]
 8004376:	2301      	movs	r3, #1
 8004378:	e0a7      	b.n	80044ca <_printf_i+0x1ca>
 800437a:	6808      	ldr	r0, [r1, #0]
 800437c:	6819      	ldr	r1, [r3, #0]
 800437e:	1d0a      	adds	r2, r1, #4
 8004380:	0605      	lsls	r5, r0, #24
 8004382:	d50b      	bpl.n	800439c <_printf_i+0x9c>
 8004384:	680d      	ldr	r5, [r1, #0]
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	2d00      	cmp	r5, #0
 800438a:	da03      	bge.n	8004394 <_printf_i+0x94>
 800438c:	232d      	movs	r3, #45	; 0x2d
 800438e:	9a04      	ldr	r2, [sp, #16]
 8004390:	426d      	negs	r5, r5
 8004392:	7013      	strb	r3, [r2, #0]
 8004394:	4b61      	ldr	r3, [pc, #388]	; (800451c <_printf_i+0x21c>)
 8004396:	270a      	movs	r7, #10
 8004398:	9303      	str	r3, [sp, #12]
 800439a:	e032      	b.n	8004402 <_printf_i+0x102>
 800439c:	680d      	ldr	r5, [r1, #0]
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	0641      	lsls	r1, r0, #25
 80043a2:	d5f1      	bpl.n	8004388 <_printf_i+0x88>
 80043a4:	b22d      	sxth	r5, r5
 80043a6:	e7ef      	b.n	8004388 <_printf_i+0x88>
 80043a8:	680d      	ldr	r5, [r1, #0]
 80043aa:	6819      	ldr	r1, [r3, #0]
 80043ac:	1d08      	adds	r0, r1, #4
 80043ae:	6018      	str	r0, [r3, #0]
 80043b0:	062e      	lsls	r6, r5, #24
 80043b2:	d501      	bpl.n	80043b8 <_printf_i+0xb8>
 80043b4:	680d      	ldr	r5, [r1, #0]
 80043b6:	e003      	b.n	80043c0 <_printf_i+0xc0>
 80043b8:	066d      	lsls	r5, r5, #25
 80043ba:	d5fb      	bpl.n	80043b4 <_printf_i+0xb4>
 80043bc:	680d      	ldr	r5, [r1, #0]
 80043be:	b2ad      	uxth	r5, r5
 80043c0:	4b56      	ldr	r3, [pc, #344]	; (800451c <_printf_i+0x21c>)
 80043c2:	270a      	movs	r7, #10
 80043c4:	9303      	str	r3, [sp, #12]
 80043c6:	2a6f      	cmp	r2, #111	; 0x6f
 80043c8:	d117      	bne.n	80043fa <_printf_i+0xfa>
 80043ca:	2708      	movs	r7, #8
 80043cc:	e015      	b.n	80043fa <_printf_i+0xfa>
 80043ce:	3145      	adds	r1, #69	; 0x45
 80043d0:	700a      	strb	r2, [r1, #0]
 80043d2:	4a52      	ldr	r2, [pc, #328]	; (800451c <_printf_i+0x21c>)
 80043d4:	9203      	str	r2, [sp, #12]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	6821      	ldr	r1, [r4, #0]
 80043da:	ca20      	ldmia	r2!, {r5}
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	0608      	lsls	r0, r1, #24
 80043e0:	d550      	bpl.n	8004484 <_printf_i+0x184>
 80043e2:	07cb      	lsls	r3, r1, #31
 80043e4:	d502      	bpl.n	80043ec <_printf_i+0xec>
 80043e6:	2320      	movs	r3, #32
 80043e8:	4319      	orrs	r1, r3
 80043ea:	6021      	str	r1, [r4, #0]
 80043ec:	2710      	movs	r7, #16
 80043ee:	2d00      	cmp	r5, #0
 80043f0:	d103      	bne.n	80043fa <_printf_i+0xfa>
 80043f2:	2320      	movs	r3, #32
 80043f4:	6822      	ldr	r2, [r4, #0]
 80043f6:	439a      	bics	r2, r3
 80043f8:	6022      	str	r2, [r4, #0]
 80043fa:	0023      	movs	r3, r4
 80043fc:	2200      	movs	r2, #0
 80043fe:	3343      	adds	r3, #67	; 0x43
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	6863      	ldr	r3, [r4, #4]
 8004404:	60a3      	str	r3, [r4, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	db03      	blt.n	8004412 <_printf_i+0x112>
 800440a:	2204      	movs	r2, #4
 800440c:	6821      	ldr	r1, [r4, #0]
 800440e:	4391      	bics	r1, r2
 8004410:	6021      	str	r1, [r4, #0]
 8004412:	2d00      	cmp	r5, #0
 8004414:	d102      	bne.n	800441c <_printf_i+0x11c>
 8004416:	9e04      	ldr	r6, [sp, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00c      	beq.n	8004436 <_printf_i+0x136>
 800441c:	9e04      	ldr	r6, [sp, #16]
 800441e:	0028      	movs	r0, r5
 8004420:	0039      	movs	r1, r7
 8004422:	f7fb ff09 	bl	8000238 <__aeabi_uidivmod>
 8004426:	9b03      	ldr	r3, [sp, #12]
 8004428:	3e01      	subs	r6, #1
 800442a:	5c5b      	ldrb	r3, [r3, r1]
 800442c:	7033      	strb	r3, [r6, #0]
 800442e:	002b      	movs	r3, r5
 8004430:	0005      	movs	r5, r0
 8004432:	429f      	cmp	r7, r3
 8004434:	d9f3      	bls.n	800441e <_printf_i+0x11e>
 8004436:	2f08      	cmp	r7, #8
 8004438:	d109      	bne.n	800444e <_printf_i+0x14e>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	07db      	lsls	r3, r3, #31
 800443e:	d506      	bpl.n	800444e <_printf_i+0x14e>
 8004440:	6863      	ldr	r3, [r4, #4]
 8004442:	6922      	ldr	r2, [r4, #16]
 8004444:	4293      	cmp	r3, r2
 8004446:	dc02      	bgt.n	800444e <_printf_i+0x14e>
 8004448:	2330      	movs	r3, #48	; 0x30
 800444a:	3e01      	subs	r6, #1
 800444c:	7033      	strb	r3, [r6, #0]
 800444e:	9b04      	ldr	r3, [sp, #16]
 8004450:	1b9b      	subs	r3, r3, r6
 8004452:	6123      	str	r3, [r4, #16]
 8004454:	9b07      	ldr	r3, [sp, #28]
 8004456:	0021      	movs	r1, r4
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	9805      	ldr	r0, [sp, #20]
 800445c:	9b06      	ldr	r3, [sp, #24]
 800445e:	aa09      	add	r2, sp, #36	; 0x24
 8004460:	f7ff fede 	bl	8004220 <_printf_common>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d135      	bne.n	80044d4 <_printf_i+0x1d4>
 8004468:	2001      	movs	r0, #1
 800446a:	4240      	negs	r0, r0
 800446c:	b00b      	add	sp, #44	; 0x2c
 800446e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004470:	2220      	movs	r2, #32
 8004472:	6809      	ldr	r1, [r1, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	6022      	str	r2, [r4, #0]
 8004478:	0022      	movs	r2, r4
 800447a:	2178      	movs	r1, #120	; 0x78
 800447c:	3245      	adds	r2, #69	; 0x45
 800447e:	7011      	strb	r1, [r2, #0]
 8004480:	4a27      	ldr	r2, [pc, #156]	; (8004520 <_printf_i+0x220>)
 8004482:	e7a7      	b.n	80043d4 <_printf_i+0xd4>
 8004484:	0648      	lsls	r0, r1, #25
 8004486:	d5ac      	bpl.n	80043e2 <_printf_i+0xe2>
 8004488:	b2ad      	uxth	r5, r5
 800448a:	e7aa      	b.n	80043e2 <_printf_i+0xe2>
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	680d      	ldr	r5, [r1, #0]
 8004490:	1d10      	adds	r0, r2, #4
 8004492:	6949      	ldr	r1, [r1, #20]
 8004494:	6018      	str	r0, [r3, #0]
 8004496:	6813      	ldr	r3, [r2, #0]
 8004498:	062e      	lsls	r6, r5, #24
 800449a:	d501      	bpl.n	80044a0 <_printf_i+0x1a0>
 800449c:	6019      	str	r1, [r3, #0]
 800449e:	e002      	b.n	80044a6 <_printf_i+0x1a6>
 80044a0:	066d      	lsls	r5, r5, #25
 80044a2:	d5fb      	bpl.n	800449c <_printf_i+0x19c>
 80044a4:	8019      	strh	r1, [r3, #0]
 80044a6:	2300      	movs	r3, #0
 80044a8:	9e04      	ldr	r6, [sp, #16]
 80044aa:	6123      	str	r3, [r4, #16]
 80044ac:	e7d2      	b.n	8004454 <_printf_i+0x154>
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	1d11      	adds	r1, r2, #4
 80044b2:	6019      	str	r1, [r3, #0]
 80044b4:	6816      	ldr	r6, [r2, #0]
 80044b6:	2100      	movs	r1, #0
 80044b8:	0030      	movs	r0, r6
 80044ba:	6862      	ldr	r2, [r4, #4]
 80044bc:	f000 f832 	bl	8004524 <memchr>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d001      	beq.n	80044c8 <_printf_i+0x1c8>
 80044c4:	1b80      	subs	r0, r0, r6
 80044c6:	6060      	str	r0, [r4, #4]
 80044c8:	6863      	ldr	r3, [r4, #4]
 80044ca:	6123      	str	r3, [r4, #16]
 80044cc:	2300      	movs	r3, #0
 80044ce:	9a04      	ldr	r2, [sp, #16]
 80044d0:	7013      	strb	r3, [r2, #0]
 80044d2:	e7bf      	b.n	8004454 <_printf_i+0x154>
 80044d4:	6923      	ldr	r3, [r4, #16]
 80044d6:	0032      	movs	r2, r6
 80044d8:	9906      	ldr	r1, [sp, #24]
 80044da:	9805      	ldr	r0, [sp, #20]
 80044dc:	9d07      	ldr	r5, [sp, #28]
 80044de:	47a8      	blx	r5
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	d0c1      	beq.n	8004468 <_printf_i+0x168>
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	079b      	lsls	r3, r3, #30
 80044e8:	d415      	bmi.n	8004516 <_printf_i+0x216>
 80044ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ec:	68e0      	ldr	r0, [r4, #12]
 80044ee:	4298      	cmp	r0, r3
 80044f0:	dabc      	bge.n	800446c <_printf_i+0x16c>
 80044f2:	0018      	movs	r0, r3
 80044f4:	e7ba      	b.n	800446c <_printf_i+0x16c>
 80044f6:	0022      	movs	r2, r4
 80044f8:	2301      	movs	r3, #1
 80044fa:	9906      	ldr	r1, [sp, #24]
 80044fc:	9805      	ldr	r0, [sp, #20]
 80044fe:	9e07      	ldr	r6, [sp, #28]
 8004500:	3219      	adds	r2, #25
 8004502:	47b0      	blx	r6
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d0af      	beq.n	8004468 <_printf_i+0x168>
 8004508:	3501      	adds	r5, #1
 800450a:	68e3      	ldr	r3, [r4, #12]
 800450c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	42ab      	cmp	r3, r5
 8004512:	dcf0      	bgt.n	80044f6 <_printf_i+0x1f6>
 8004514:	e7e9      	b.n	80044ea <_printf_i+0x1ea>
 8004516:	2500      	movs	r5, #0
 8004518:	e7f7      	b.n	800450a <_printf_i+0x20a>
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	08004a71 	.word	0x08004a71
 8004520:	08004a82 	.word	0x08004a82

08004524 <memchr>:
 8004524:	b2c9      	uxtb	r1, r1
 8004526:	1882      	adds	r2, r0, r2
 8004528:	4290      	cmp	r0, r2
 800452a:	d101      	bne.n	8004530 <memchr+0xc>
 800452c:	2000      	movs	r0, #0
 800452e:	4770      	bx	lr
 8004530:	7803      	ldrb	r3, [r0, #0]
 8004532:	428b      	cmp	r3, r1
 8004534:	d0fb      	beq.n	800452e <memchr+0xa>
 8004536:	3001      	adds	r0, #1
 8004538:	e7f6      	b.n	8004528 <memchr+0x4>

0800453a <memcpy>:
 800453a:	2300      	movs	r3, #0
 800453c:	b510      	push	{r4, lr}
 800453e:	429a      	cmp	r2, r3
 8004540:	d100      	bne.n	8004544 <memcpy+0xa>
 8004542:	bd10      	pop	{r4, pc}
 8004544:	5ccc      	ldrb	r4, [r1, r3]
 8004546:	54c4      	strb	r4, [r0, r3]
 8004548:	3301      	adds	r3, #1
 800454a:	e7f8      	b.n	800453e <memcpy+0x4>

0800454c <memmove>:
 800454c:	b510      	push	{r4, lr}
 800454e:	4288      	cmp	r0, r1
 8004550:	d902      	bls.n	8004558 <memmove+0xc>
 8004552:	188b      	adds	r3, r1, r2
 8004554:	4298      	cmp	r0, r3
 8004556:	d303      	bcc.n	8004560 <memmove+0x14>
 8004558:	2300      	movs	r3, #0
 800455a:	e007      	b.n	800456c <memmove+0x20>
 800455c:	5c8b      	ldrb	r3, [r1, r2]
 800455e:	5483      	strb	r3, [r0, r2]
 8004560:	3a01      	subs	r2, #1
 8004562:	d2fb      	bcs.n	800455c <memmove+0x10>
 8004564:	bd10      	pop	{r4, pc}
 8004566:	5ccc      	ldrb	r4, [r1, r3]
 8004568:	54c4      	strb	r4, [r0, r3]
 800456a:	3301      	adds	r3, #1
 800456c:	429a      	cmp	r2, r3
 800456e:	d1fa      	bne.n	8004566 <memmove+0x1a>
 8004570:	e7f8      	b.n	8004564 <memmove+0x18>
	...

08004574 <_free_r>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	0005      	movs	r5, r0
 8004578:	2900      	cmp	r1, #0
 800457a:	d010      	beq.n	800459e <_free_r+0x2a>
 800457c:	1f0c      	subs	r4, r1, #4
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	da00      	bge.n	8004586 <_free_r+0x12>
 8004584:	18e4      	adds	r4, r4, r3
 8004586:	0028      	movs	r0, r5
 8004588:	f000 f8d4 	bl	8004734 <__malloc_lock>
 800458c:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <_free_r+0x90>)
 800458e:	6813      	ldr	r3, [r2, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <_free_r+0x2c>
 8004594:	6063      	str	r3, [r4, #4]
 8004596:	6014      	str	r4, [r2, #0]
 8004598:	0028      	movs	r0, r5
 800459a:	f000 f8d3 	bl	8004744 <__malloc_unlock>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	d908      	bls.n	80045b6 <_free_r+0x42>
 80045a4:	6821      	ldr	r1, [r4, #0]
 80045a6:	1860      	adds	r0, r4, r1
 80045a8:	4283      	cmp	r3, r0
 80045aa:	d1f3      	bne.n	8004594 <_free_r+0x20>
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	1841      	adds	r1, r0, r1
 80045b2:	6021      	str	r1, [r4, #0]
 80045b4:	e7ee      	b.n	8004594 <_free_r+0x20>
 80045b6:	001a      	movs	r2, r3
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <_free_r+0x4e>
 80045be:	42a3      	cmp	r3, r4
 80045c0:	d9f9      	bls.n	80045b6 <_free_r+0x42>
 80045c2:	6811      	ldr	r1, [r2, #0]
 80045c4:	1850      	adds	r0, r2, r1
 80045c6:	42a0      	cmp	r0, r4
 80045c8:	d10b      	bne.n	80045e2 <_free_r+0x6e>
 80045ca:	6820      	ldr	r0, [r4, #0]
 80045cc:	1809      	adds	r1, r1, r0
 80045ce:	1850      	adds	r0, r2, r1
 80045d0:	6011      	str	r1, [r2, #0]
 80045d2:	4283      	cmp	r3, r0
 80045d4:	d1e0      	bne.n	8004598 <_free_r+0x24>
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	1841      	adds	r1, r0, r1
 80045dc:	6011      	str	r1, [r2, #0]
 80045de:	6053      	str	r3, [r2, #4]
 80045e0:	e7da      	b.n	8004598 <_free_r+0x24>
 80045e2:	42a0      	cmp	r0, r4
 80045e4:	d902      	bls.n	80045ec <_free_r+0x78>
 80045e6:	230c      	movs	r3, #12
 80045e8:	602b      	str	r3, [r5, #0]
 80045ea:	e7d5      	b.n	8004598 <_free_r+0x24>
 80045ec:	6821      	ldr	r1, [r4, #0]
 80045ee:	1860      	adds	r0, r4, r1
 80045f0:	4283      	cmp	r3, r0
 80045f2:	d103      	bne.n	80045fc <_free_r+0x88>
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	1841      	adds	r1, r0, r1
 80045fa:	6021      	str	r1, [r4, #0]
 80045fc:	6063      	str	r3, [r4, #4]
 80045fe:	6054      	str	r4, [r2, #4]
 8004600:	e7ca      	b.n	8004598 <_free_r+0x24>
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	20000098 	.word	0x20000098

08004608 <_malloc_r>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	2303      	movs	r3, #3
 800460c:	1ccd      	adds	r5, r1, #3
 800460e:	439d      	bics	r5, r3
 8004610:	3508      	adds	r5, #8
 8004612:	0006      	movs	r6, r0
 8004614:	2d0c      	cmp	r5, #12
 8004616:	d21f      	bcs.n	8004658 <_malloc_r+0x50>
 8004618:	250c      	movs	r5, #12
 800461a:	42a9      	cmp	r1, r5
 800461c:	d81e      	bhi.n	800465c <_malloc_r+0x54>
 800461e:	0030      	movs	r0, r6
 8004620:	f000 f888 	bl	8004734 <__malloc_lock>
 8004624:	4925      	ldr	r1, [pc, #148]	; (80046bc <_malloc_r+0xb4>)
 8004626:	680a      	ldr	r2, [r1, #0]
 8004628:	0014      	movs	r4, r2
 800462a:	2c00      	cmp	r4, #0
 800462c:	d11a      	bne.n	8004664 <_malloc_r+0x5c>
 800462e:	4f24      	ldr	r7, [pc, #144]	; (80046c0 <_malloc_r+0xb8>)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d104      	bne.n	8004640 <_malloc_r+0x38>
 8004636:	0021      	movs	r1, r4
 8004638:	0030      	movs	r0, r6
 800463a:	f000 f869 	bl	8004710 <_sbrk_r>
 800463e:	6038      	str	r0, [r7, #0]
 8004640:	0029      	movs	r1, r5
 8004642:	0030      	movs	r0, r6
 8004644:	f000 f864 	bl	8004710 <_sbrk_r>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d12b      	bne.n	80046a4 <_malloc_r+0x9c>
 800464c:	230c      	movs	r3, #12
 800464e:	0030      	movs	r0, r6
 8004650:	6033      	str	r3, [r6, #0]
 8004652:	f000 f877 	bl	8004744 <__malloc_unlock>
 8004656:	e003      	b.n	8004660 <_malloc_r+0x58>
 8004658:	2d00      	cmp	r5, #0
 800465a:	dade      	bge.n	800461a <_malloc_r+0x12>
 800465c:	230c      	movs	r3, #12
 800465e:	6033      	str	r3, [r6, #0]
 8004660:	2000      	movs	r0, #0
 8004662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	1b5b      	subs	r3, r3, r5
 8004668:	d419      	bmi.n	800469e <_malloc_r+0x96>
 800466a:	2b0b      	cmp	r3, #11
 800466c:	d903      	bls.n	8004676 <_malloc_r+0x6e>
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	18e4      	adds	r4, r4, r3
 8004672:	6025      	str	r5, [r4, #0]
 8004674:	e003      	b.n	800467e <_malloc_r+0x76>
 8004676:	6863      	ldr	r3, [r4, #4]
 8004678:	42a2      	cmp	r2, r4
 800467a:	d10e      	bne.n	800469a <_malloc_r+0x92>
 800467c:	600b      	str	r3, [r1, #0]
 800467e:	0030      	movs	r0, r6
 8004680:	f000 f860 	bl	8004744 <__malloc_unlock>
 8004684:	0020      	movs	r0, r4
 8004686:	2207      	movs	r2, #7
 8004688:	300b      	adds	r0, #11
 800468a:	1d23      	adds	r3, r4, #4
 800468c:	4390      	bics	r0, r2
 800468e:	1ac2      	subs	r2, r0, r3
 8004690:	4298      	cmp	r0, r3
 8004692:	d0e6      	beq.n	8004662 <_malloc_r+0x5a>
 8004694:	1a1b      	subs	r3, r3, r0
 8004696:	50a3      	str	r3, [r4, r2]
 8004698:	e7e3      	b.n	8004662 <_malloc_r+0x5a>
 800469a:	6053      	str	r3, [r2, #4]
 800469c:	e7ef      	b.n	800467e <_malloc_r+0x76>
 800469e:	0022      	movs	r2, r4
 80046a0:	6864      	ldr	r4, [r4, #4]
 80046a2:	e7c2      	b.n	800462a <_malloc_r+0x22>
 80046a4:	2303      	movs	r3, #3
 80046a6:	1cc4      	adds	r4, r0, #3
 80046a8:	439c      	bics	r4, r3
 80046aa:	42a0      	cmp	r0, r4
 80046ac:	d0e1      	beq.n	8004672 <_malloc_r+0x6a>
 80046ae:	1a21      	subs	r1, r4, r0
 80046b0:	0030      	movs	r0, r6
 80046b2:	f000 f82d 	bl	8004710 <_sbrk_r>
 80046b6:	1c43      	adds	r3, r0, #1
 80046b8:	d1db      	bne.n	8004672 <_malloc_r+0x6a>
 80046ba:	e7c7      	b.n	800464c <_malloc_r+0x44>
 80046bc:	20000098 	.word	0x20000098
 80046c0:	2000009c 	.word	0x2000009c

080046c4 <_realloc_r>:
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	0007      	movs	r7, r0
 80046c8:	000d      	movs	r5, r1
 80046ca:	0016      	movs	r6, r2
 80046cc:	2900      	cmp	r1, #0
 80046ce:	d105      	bne.n	80046dc <_realloc_r+0x18>
 80046d0:	0011      	movs	r1, r2
 80046d2:	f7ff ff99 	bl	8004608 <_malloc_r>
 80046d6:	0004      	movs	r4, r0
 80046d8:	0020      	movs	r0, r4
 80046da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046dc:	2a00      	cmp	r2, #0
 80046de:	d103      	bne.n	80046e8 <_realloc_r+0x24>
 80046e0:	f7ff ff48 	bl	8004574 <_free_r>
 80046e4:	0034      	movs	r4, r6
 80046e6:	e7f7      	b.n	80046d8 <_realloc_r+0x14>
 80046e8:	f000 f834 	bl	8004754 <_malloc_usable_size_r>
 80046ec:	002c      	movs	r4, r5
 80046ee:	42b0      	cmp	r0, r6
 80046f0:	d2f2      	bcs.n	80046d8 <_realloc_r+0x14>
 80046f2:	0031      	movs	r1, r6
 80046f4:	0038      	movs	r0, r7
 80046f6:	f7ff ff87 	bl	8004608 <_malloc_r>
 80046fa:	1e04      	subs	r4, r0, #0
 80046fc:	d0ec      	beq.n	80046d8 <_realloc_r+0x14>
 80046fe:	0029      	movs	r1, r5
 8004700:	0032      	movs	r2, r6
 8004702:	f7ff ff1a 	bl	800453a <memcpy>
 8004706:	0029      	movs	r1, r5
 8004708:	0038      	movs	r0, r7
 800470a:	f7ff ff33 	bl	8004574 <_free_r>
 800470e:	e7e3      	b.n	80046d8 <_realloc_r+0x14>

08004710 <_sbrk_r>:
 8004710:	2300      	movs	r3, #0
 8004712:	b570      	push	{r4, r5, r6, lr}
 8004714:	4d06      	ldr	r5, [pc, #24]	; (8004730 <_sbrk_r+0x20>)
 8004716:	0004      	movs	r4, r0
 8004718:	0008      	movs	r0, r1
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	f7fd f826 	bl	800176c <_sbrk>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d103      	bne.n	800472c <_sbrk_r+0x1c>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d000      	beq.n	800472c <_sbrk_r+0x1c>
 800472a:	6023      	str	r3, [r4, #0]
 800472c:	bd70      	pop	{r4, r5, r6, pc}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	200001a8 	.word	0x200001a8

08004734 <__malloc_lock>:
 8004734:	b510      	push	{r4, lr}
 8004736:	4802      	ldr	r0, [pc, #8]	; (8004740 <__malloc_lock+0xc>)
 8004738:	f000 f814 	bl	8004764 <__retarget_lock_acquire_recursive>
 800473c:	bd10      	pop	{r4, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	200001b0 	.word	0x200001b0

08004744 <__malloc_unlock>:
 8004744:	b510      	push	{r4, lr}
 8004746:	4802      	ldr	r0, [pc, #8]	; (8004750 <__malloc_unlock+0xc>)
 8004748:	f000 f80d 	bl	8004766 <__retarget_lock_release_recursive>
 800474c:	bd10      	pop	{r4, pc}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	200001b0 	.word	0x200001b0

08004754 <_malloc_usable_size_r>:
 8004754:	1f0b      	subs	r3, r1, #4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	1f18      	subs	r0, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	da01      	bge.n	8004762 <_malloc_usable_size_r+0xe>
 800475e:	580b      	ldr	r3, [r1, r0]
 8004760:	18c0      	adds	r0, r0, r3
 8004762:	4770      	bx	lr

08004764 <__retarget_lock_acquire_recursive>:
 8004764:	4770      	bx	lr

08004766 <__retarget_lock_release_recursive>:
 8004766:	4770      	bx	lr

08004768 <_init>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr

08004774 <_fini>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr
