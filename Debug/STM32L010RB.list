
STM32L010RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004320  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c4  080045c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080045c4  080045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045cc  080045cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  08004644  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004644  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbc3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af5  00000000  00000000  0002bc5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d54  00000000  00000000  0002ed18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc6d  00000000  00000000  00040a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fdc7  00000000  00000000  0004c6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bc4a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c34  00000000  00000000  000bc4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080043c8 	.word	0x080043c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080043c8 	.word	0x080043c8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <Print>:
ADC_HandleTypeDef hadc;

// ----- Functions ----- 

static void Print(char* msg)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	0018      	movs	r0, r3
 80004cc:	f7ff fe1c 	bl	8000108 <strlen>
 80004d0:	0003      	movs	r3, r0
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	6879      	ldr	r1, [r7, #4]
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <Print+0x28>)
 80004d8:	2364      	movs	r3, #100	; 0x64
 80004da:	f002 fe99 	bl	8003210 <HAL_UART_Transmit>
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	200000f0 	.word	0x200000f0

080004ec <Error_Handler>:

void Error_Handler(char* err_msg)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	46c0      	nop			; (mov r8, r8)
     __disable_irq();
    while (1)
	{
    	Print(err_msg);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	0018      	movs	r0, r3
 80004fc:	f7ff ffe0 	bl	80004c0 <Print>
 8000500:	e7fa      	b.n	80004f8 <Error_Handler+0xc>
	...

08000504 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b093      	sub	sp, #76	; 0x4c
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	2414      	movs	r4, #20
 800050c:	193b      	adds	r3, r7, r4
 800050e:	0018      	movs	r0, r3
 8000510:	2334      	movs	r3, #52	; 0x34
 8000512:	001a      	movs	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f003 fb29 	bl	8003b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051a:	003b      	movs	r3, r7
 800051c:	0018      	movs	r0, r3
 800051e:	2314      	movs	r3, #20
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f003 fb22 	bl	8003b6c <memset>

  //Configure the main internal regulator output voltage
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <SystemClock_Config+0xa8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <SystemClock_Config+0xac>)
 800052e:	401a      	ands	r2, r3
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <SystemClock_Config+0xa8>)
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	0109      	lsls	r1, r1, #4
 8000536:	430a      	orrs	r2, r1
 8000538:	601a      	str	r2, [r3, #0]

  //Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800053a:	0021      	movs	r1, r4
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2210      	movs	r2, #16
 8000540:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2201      	movs	r2, #1
 8000546:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	22a0      	movs	r2, #160	; 0xa0
 8000552:	0212      	lsls	r2, r2, #8
 8000554:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	187b      	adds	r3, r7, r1
 800055e:	0018      	movs	r0, r3
 8000560:	f001 fa06 	bl	8001970 <HAL_RCC_OscConfig>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d003      	beq.n	8000570 <SystemClock_Config+0x6c>
  {
    Error_Handler("HAL_RCC_OscConfig failed!");
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <SystemClock_Config+0xb0>)
 800056a:	0018      	movs	r0, r3
 800056c:	f7ff ffbe 	bl	80004ec <Error_Handler>
  }
  
  //Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	003b      	movs	r3, r7
 8000572:	220f      	movs	r2, #15
 8000574:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000576:	003b      	movs	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	003b      	movs	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000588:	003b      	movs	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058e:	003b      	movs	r3, r7
 8000590:	2100      	movs	r1, #0
 8000592:	0018      	movs	r0, r3
 8000594:	f001 fd68 	bl	8002068 <HAL_RCC_ClockConfig>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d003      	beq.n	80005a4 <SystemClock_Config+0xa0>
  {
    Error_Handler("HAL_RCC_ClockConfig failed!");
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <SystemClock_Config+0xb4>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f7ff ffa4 	bl	80004ec <Error_Handler>
  }
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b013      	add	sp, #76	; 0x4c
 80005aa:	bd90      	pop	{r4, r7, pc}
 80005ac:	40007000 	.word	0x40007000
 80005b0:	ffffe7ff 	.word	0xffffe7ff
 80005b4:	080043e0 	.word	0x080043e0
 80005b8:	080043fc 	.word	0x080043fc

080005bc <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <MX_USART2_UART_Init+0x5c>)
 80005c2:	4a16      	ldr	r2, [pc, #88]	; (800061c <MX_USART2_UART_Init+0x60>)
 80005c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_USART2_UART_Init+0x5c>)
 80005c8:	22e1      	movs	r2, #225	; 0xe1
 80005ca:	0252      	lsls	r2, r2, #9
 80005cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_USART2_UART_Init+0x5c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_USART2_UART_Init+0x5c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_USART2_UART_Init+0x5c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_USART2_UART_Init+0x5c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART2_UART_Init+0x5c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_USART2_UART_Init+0x5c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART2_UART_Init+0x5c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_USART2_UART_Init+0x5c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart2) != HAL_OK)
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART2_UART_Init+0x5c>)
 8000600:	0018      	movs	r0, r3
 8000602:	f002 fdb1 	bl	8003168 <HAL_UART_Init>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d003      	beq.n	8000612 <MX_USART2_UART_Init+0x56>
	{
		Error_Handler("HAL_UART_Init failed!");
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <MX_USART2_UART_Init+0x64>)
 800060c:	0018      	movs	r0, r3
 800060e:	f7ff ff6d 	bl	80004ec <Error_Handler>
	}
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000f0 	.word	0x200000f0
 800061c:	40004400 	.word	0x40004400
 8000620:	08004418 	.word	0x08004418

08000624 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062a:	2318      	movs	r3, #24
 800062c:	18fb      	adds	r3, r7, r3
 800062e:	0018      	movs	r0, r3
 8000630:	2310      	movs	r3, #16
 8000632:	001a      	movs	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f003 fa99 	bl	8003b6c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063a:	2310      	movs	r3, #16
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	0018      	movs	r0, r3
 8000640:	2308      	movs	r3, #8
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f003 fa91 	bl	8003b6c <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 800064a:	003b      	movs	r3, r7
 800064c:	0018      	movs	r0, r3
 800064e:	2310      	movs	r3, #16
 8000650:	001a      	movs	r2, r3
 8000652:	2100      	movs	r1, #0
 8000654:	f003 fa8a 	bl	8003b6c <memset>

	//Configure timer 2
	htim2.Instance = TIM2;
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <MX_TIM2_Init+0x10c>)
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	05d2      	lsls	r2, r2, #23
 800065e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 209; //2.097 MHZ divided by 209 results in 10000 oscillations per second
 8000660:	4b33      	ldr	r3, [pc, #204]	; (8000730 <MX_TIM2_Init+0x10c>)
 8000662:	22d1      	movs	r2, #209	; 0xd1
 8000664:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <MX_TIM2_Init+0x10c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100; //Counter goes up to 100, then starts anew. This results in 100 counter restarts per second
 800066c:	4b30      	ldr	r3, [pc, #192]	; (8000730 <MX_TIM2_Init+0x10c>)
 800066e:	2264      	movs	r2, #100	; 0x64
 8000670:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <MX_TIM2_Init+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000678:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <MX_TIM2_Init+0x10c>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800067e:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <MX_TIM2_Init+0x10c>)
 8000680:	0018      	movs	r0, r3
 8000682:	f001 ff15 	bl	80024b0 <HAL_TIM_Base_Init>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d003      	beq.n	8000692 <MX_TIM2_Init+0x6e>
	{
		Error_Handler("HAL_TIM_Base_Init failed!");
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <MX_TIM2_Init+0x110>)
 800068c:	0018      	movs	r0, r3
 800068e:	f7ff ff2d 	bl	80004ec <Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; //Use internal clock as a clock source (at 2 MHZ, max. 32 MHZ)
 8000692:	2118      	movs	r1, #24
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	0152      	lsls	r2, r2, #5
 800069a:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800069c:	187a      	adds	r2, r7, r1
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <MX_TIM2_Init+0x10c>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 fa08 	bl	8002ab8 <HAL_TIM_ConfigClockSource>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d003      	beq.n	80006b4 <MX_TIM2_Init+0x90>
	{
		Error_Handler("HAL_TIM_ConfigClockSource failed!");
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <MX_TIM2_Init+0x114>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff ff1c 	bl	80004ec <Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_TIM2_Init+0x10c>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 ff86 	bl	80025c8 <HAL_TIM_PWM_Init>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d003      	beq.n	80006c8 <MX_TIM2_Init+0xa4>
  	{
   		Error_Handler("HAL_TIM_PWM_Init failed!");
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_TIM2_Init+0x118>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff ff12 	bl	80004ec <Error_Handler>
  	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c8:	2110      	movs	r1, #16
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d6:	187a      	adds	r2, r7, r1
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_TIM2_Init+0x10c>)
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f002 fceb 	bl	80030b8 <HAL_TIMEx_MasterConfigSynchronization>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d003      	beq.n	80006ee <MX_TIM2_Init+0xca>
	{
		Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_TIM2_Init+0x11c>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f7ff feff 	bl	80004ec <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ee:	003b      	movs	r3, r7
 80006f0:	2260      	movs	r2, #96	; 0x60
 80006f2:	601a      	str	r2, [r3, #0]
  	sConfigOC.Pulse = 50;
 80006f4:	003b      	movs	r3, r7
 80006f6:	2232      	movs	r2, #50	; 0x32
 80006f8:	605a      	str	r2, [r3, #4]
  	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fa:	003b      	movs	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000700:	003b      	movs	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000706:	0039      	movs	r1, r7
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_TIM2_Init+0x10c>)
 800070a:	2200      	movs	r2, #0
 800070c:	0018      	movs	r0, r3
 800070e:	f002 f917 	bl	8002940 <HAL_TIM_PWM_ConfigChannel>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d003      	beq.n	800071e <MX_TIM2_Init+0xfa>
  	{
   		Error_Handler("HAL_TIM_PWM_ConfigChannel failed!");
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_TIM2_Init+0x120>)
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff fee7 	bl	80004ec <Error_Handler>
  	}

	HAL_TIM_MspPostInit(&htim2);
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <MX_TIM2_Init+0x10c>)
 8000720:	0018      	movs	r0, r3
 8000722:	f000 f98d 	bl	8000a40 <HAL_TIM_MspPostInit>
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b00a      	add	sp, #40	; 0x28
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	200000b0 	.word	0x200000b0
 8000734:	08004430 	.word	0x08004430
 8000738:	0800444c 	.word	0x0800444c
 800073c:	08004470 	.word	0x08004470
 8000740:	0800448c 	.word	0x0800448c
 8000744:	080044bc 	.word	0x080044bc

08000748 <MX_ADC_Init>:

static void MX_ADC_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	003b      	movs	r3, r7
 8000750:	0018      	movs	r0, r3
 8000752:	2308      	movs	r3, #8
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f003 fa08 	bl	8003b6c <memset>

  //Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  hadc.Instance = ADC1;
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <MX_ADC_Init+0xc8>)
 800075e:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <MX_ADC_Init+0xcc>)
 8000760:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_ADC_Init+0xc8>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_ADC_Init+0xc8>)
 800076a:	22c0      	movs	r2, #192	; 0xc0
 800076c:	0612      	lsls	r2, r2, #24
 800076e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_ADC_Init+0xc8>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_ADC_Init+0xc8>)
 8000778:	2200      	movs	r2, #0
 800077a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_ADC_Init+0xc8>)
 800077e:	2201      	movs	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_ADC_Init+0xc8>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_ADC_Init+0xc8>)
 800078a:	2220      	movs	r2, #32
 800078c:	2100      	movs	r1, #0
 800078e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_ADC_Init+0xc8>)
 8000792:	2221      	movs	r2, #33	; 0x21
 8000794:	2100      	movs	r1, #0
 8000796:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_ADC_Init+0xc8>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_ADC_Init+0xc8>)
 80007a0:	22c2      	movs	r2, #194	; 0xc2
 80007a2:	32ff      	adds	r2, #255	; 0xff
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_ADC_Init+0xc8>)
 80007a8:	222c      	movs	r2, #44	; 0x2c
 80007aa:	2100      	movs	r1, #0
 80007ac:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_ADC_Init+0xc8>)
 80007b0:	2204      	movs	r2, #4
 80007b2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_ADC_Init+0xc8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_ADC_Init+0xc8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_ADC_Init+0xc8>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_ADC_Init+0xc8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_ADC_Init+0xc8>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fb04 	bl	8000ddc <HAL_ADC_Init>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d003      	beq.n	80007e0 <MX_ADC_Init+0x98>
  {
    Error_Handler("HAL_ADC_Init failed!");
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC_Init+0xd0>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff fe86 	bl	80004ec <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_0;
 80007e0:	003b      	movs	r3, r7
 80007e2:	2201      	movs	r2, #1
 80007e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007e6:	003b      	movs	r3, r7
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	0152      	lsls	r2, r2, #5
 80007ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007ee:	003a      	movs	r2, r7
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_ADC_Init+0xc8>)
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f000 fd5b 	bl	80012b0 <HAL_ADC_ConfigChannel>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d003      	beq.n	8000806 <MX_ADC_Init+0xbe>
  {
    Error_Handler("HAL_ADC_ConfigChannel failed!");
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_ADC_Init+0xd4>)
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff fe73 	bl	80004ec <Error_Handler>
  }
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000174 	.word	0x20000174
 8000814:	40012400 	.word	0x40012400
 8000818:	080044e0 	.word	0x080044e0
 800081c:	080044f8 	.word	0x080044f8

08000820 <PortInit>:

static void PortInit(void)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b08b      	sub	sp, #44	; 0x2c
 8000824:	af00      	add	r7, sp, #0
	//Enable GPIO Ports Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b31      	ldr	r3, [pc, #196]	; (80008ec <PortInit+0xcc>)
 8000828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <PortInit+0xcc>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	62da      	str	r2, [r3, #44]	; 0x2c
 8000832:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <PortInit+0xcc>)
 8000834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <PortInit+0xcc>)
 8000840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000842:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <PortInit+0xcc>)
 8000844:	2102      	movs	r1, #2
 8000846:	430a      	orrs	r2, r1
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <PortInit+0xcc>)
 800084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084e:	2202      	movs	r2, #2
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b25      	ldr	r3, [pc, #148]	; (80008ec <PortInit+0xcc>)
 8000858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <PortInit+0xcc>)
 800085c:	2104      	movs	r1, #4
 800085e:	430a      	orrs	r2, r1
 8000860:	62da      	str	r2, [r3, #44]	; 0x2c
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <PortInit+0xcc>)
 8000864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000866:	2204      	movs	r2, #4
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <PortInit+0xcc>)
 8000870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <PortInit+0xcc>)
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	430a      	orrs	r2, r1
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <PortInit+0xcc>)
 800087c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	4013      	ands	r3, r2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

	//Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	2414      	movs	r4, #20
 8000888:	193b      	adds	r3, r7, r4
 800088a:	0018      	movs	r0, r3
 800088c:	2314      	movs	r3, #20
 800088e:	001a      	movs	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	f003 f96b 	bl	8003b6c <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000896:	193b      	adds	r3, r7, r4
 8000898:	2220      	movs	r2, #32
 800089a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2201      	movs	r2, #1
 80008a0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	193a      	adds	r2, r7, r4
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fec0 	bl	800163c <HAL_GPIO_Init>

	//Initialize all Input-Pins of Port C
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008bc:	0021      	movs	r1, r4
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	0192      	lsls	r2, r2, #6
 80008c4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <PortInit+0xd0>)
 80008dc:	0019      	movs	r1, r3
 80008de:	0010      	movs	r0, r2
 80008e0:	f000 feac 	bl	800163c <HAL_GPIO_Init>
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b00b      	add	sp, #44	; 0x2c
 80008ea:	bd90      	pop	{r4, r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	50000800 	.word	0x50000800

080008f4 <HAL_TIM_PeriodElapsedCallback>:

//Timed interupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{	
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	static uint32_t val = 0;
	static char buffer[15];
	static uint32_t pulse = 0;
		
	//Get ADC value
	HAL_ADC_Start(&hadc);
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fbe0 	bl	80010c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000906:	2164      	movs	r1, #100	; 0x64
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fc2f 	bl	800116c <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(&hadc);
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000910:	0018      	movs	r0, r3
 8000912:	f000 fcc1 	bl	8001298 <HAL_ADC_GetValue>
 8000916:	0002      	movs	r2, r0
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800091a:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "val = %lu\r\n", val);
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	491b      	ldr	r1, [pc, #108]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000924:	0018      	movs	r0, r3
 8000926:	f003 f929 	bl	8003b7c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff fbeb 	bl	8000108 <strlen>
 8000932:	0003      	movs	r3, r0
 8000934:	b29a      	uxth	r2, r3
 8000936:	4917      	ldr	r1, [pc, #92]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000938:	4817      	ldr	r0, [pc, #92]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800093a:	2364      	movs	r3, #100	; 0x64
 800093c:	f002 fc68 	bl	8003210 <HAL_UART_Transmit>
	
	//Check if 1 sec. elapsed
	if((elapsedTime % 10000) == 0)
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4916      	ldr	r1, [pc, #88]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000946:	0018      	movs	r0, r3
 8000948:	f7ff fc76 	bl	8000238 <__aeabi_uidivmod>
 800094c:	1e0b      	subs	r3, r1, #0
 800094e:	d105      	bne.n	800095c <HAL_TIM_PeriodElapsedCallback+0x68>
	{
		//Toggle Onboard-LED (1 sec. on and 1 sec. off)
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);			
 8000950:	23a0      	movs	r3, #160	; 0xa0
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	2120      	movs	r1, #32
 8000956:	0018      	movs	r0, r3
 8000958:	f000 ffee 	bl	8001938 <HAL_GPIO_TogglePin>
	}	

	//Increment elapsed time
	elapsedTime += 100;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3364      	adds	r3, #100	; 0x64
 8000962:	001a      	movs	r2, r3
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000966:	601a      	str	r2, [r3, #0]

	if(elapsedTime > 10000)
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d905      	bls.n	800097e <HAL_TIM_PeriodElapsedCallback+0x8a>
		elapsedTime -= 10000;
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000978:	189a      	adds	r2, r3, r2
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800097c:	601a      	str	r2, [r3, #0]
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	20000174 	.word	0x20000174
 800098c:	2000008c 	.word	0x2000008c
 8000990:	08004518 	.word	0x08004518
 8000994:	20000090 	.word	0x20000090
 8000998:	200000f0 	.word	0x200000f0
 800099c:	200000a0 	.word	0x200000a0
 80009a0:	00002710 	.word	0x00002710
 80009a4:	ffffd8f0 	.word	0xffffd8f0

080009a8 <main>:

int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	//Init stuff
	HAL_Init();
 80009ac:	f000 f9a6 	bl	8000cfc <HAL_Init>
	SystemClock_Config();
 80009b0:	f7ff fda8 	bl	8000504 <SystemClock_Config>
	PortInit();
 80009b4:	f7ff ff34 	bl	8000820 <PortInit>
	MX_TIM2_Init();
 80009b8:	f7ff fe34 	bl	8000624 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 80009bc:	f7ff fdfe 	bl	80005bc <MX_USART2_UART_Init>
	MX_ADC_Init();
 80009c0:	f7ff fec2 	bl	8000748 <MX_ADC_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <main+0x30>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fdb2 	bl	8002530 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009cc:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <main+0x30>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	0018      	movs	r0, r3
 80009d2:	f001 fe41 	bl	8002658 <HAL_TIM_PWM_Start>

	while (1)
 80009d6:	e7fe      	b.n	80009d6 <main+0x2e>
 80009d8:	200000b0 	.word	0x200000b0

080009dc <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <HAL_MspInit+0x24>)
 80009e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x24>)
 80009e6:	2101      	movs	r1, #1
 80009e8:	430a      	orrs	r2, r1
 80009ea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <HAL_MspInit+0x24>)
 80009ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <HAL_MspInit+0x24>)
 80009f2:	2180      	movs	r1, #128	; 0x80
 80009f4:	0549      	lsls	r1, r1, #21
 80009f6:	430a      	orrs	r2, r1
 80009f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d10d      	bne.n	8000a34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_TIM_Base_MspInit+0x38>)
 8000a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <HAL_TIM_Base_MspInit+0x38>)
 8000a1e:	2101      	movs	r1, #1
 8000a20:	430a      	orrs	r2, r1
 8000a22:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	200f      	movs	r0, #15
 8000a2a:	f000 fdd5 	bl	80015d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f000 fde7 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b089      	sub	sp, #36	; 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	240c      	movs	r4, #12
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2314      	movs	r3, #20
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f003 f88a 	bl	8003b6c <memset>
  if(htim->Instance==TIM2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d123      	bne.n	8000aac <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_TIM_MspPostInit+0x74>)
 8000a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_TIM_MspPostInit+0x74>)
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_TIM_MspPostInit+0x74>)
 8000a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a74:	2201      	movs	r2, #1
 8000a76:	4013      	ands	r3, r2
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	0212      	lsls	r2, r2, #8
 8000a82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	0021      	movs	r1, r4
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2202      	movs	r2, #2
 8000a8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2205      	movs	r2, #5
 8000a9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	187a      	adds	r2, r7, r1
 8000aa0:	23a0      	movs	r3, #160	; 0xa0
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	0011      	movs	r1, r2
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fdc8 	bl	800163c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b009      	add	sp, #36	; 0x24
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	240c      	movs	r4, #12
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	2314      	movs	r3, #20
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f003 f84e 	bl	8003b6c <memset>
  if(huart->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x80>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d129      	bne.n	8000b2e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	0289      	lsls	r1, r1, #10
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000aee:	2101      	movs	r1, #1
 8000af0:	430a      	orrs	r2, r1
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af8:	2201      	movs	r2, #1
 8000afa:	4013      	ands	r3, r2
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b00:	0021      	movs	r1, r4
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	220c      	movs	r2, #12
 8000b06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2203      	movs	r2, #3
 8000b18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	187a      	adds	r2, r7, r1
 8000b22:	23a0      	movs	r3, #160	; 0xa0
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 fd87 	bl	800163c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b009      	add	sp, #36	; 0x24
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_ADC_MspInit>:
  }

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	240c      	movs	r4, #12
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2314      	movs	r3, #20
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f003 f80a 	bl	8003b6c <memset>
  if(hadc->Instance==ADC1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <HAL_ADC_MspInit+0x70>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d122      	bne.n	8000ba8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_ADC_MspInit+0x74>)
 8000b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_ADC_MspInit+0x74>)
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	0089      	lsls	r1, r1, #2
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_ADC_MspInit+0x74>)
 8000b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_ADC_MspInit+0x74>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_ADC_MspInit+0x74>)
 8000b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b80:	2201      	movs	r2, #1
 8000b82:	4013      	ands	r3, r2
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	2203      	movs	r2, #3
 8000b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	193a      	adds	r2, r7, r4
 8000b9c:	23a0      	movs	r3, #160	; 0xa0
 8000b9e:	05db      	lsls	r3, r3, #23
 8000ba0:	0011      	movs	r1, r2
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 fd4a 	bl	800163c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b009      	add	sp, #36	; 0x24
 8000bae:	bd90      	pop	{r4, r7, pc}
 8000bb0:	40012400 	.word	0x40012400
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f8e2 	bl	8000da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <TIM2_IRQHandler+0x14>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 fdbe 	bl	8002770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	200000b0 	.word	0x200000b0

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	18d3      	adds	r3, r2, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f002 ff72 	bl	8003b18 <__errno>
 8000c34:	0003      	movs	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	425b      	negs	r3, r3
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	18d2      	adds	r2, r2, r3
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b006      	add	sp, #24
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20005000 	.word	0x20005000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	200000a4 	.word	0x200000a4
 8000c68:	200001e8 	.word	0x200001e8

08000c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c7a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000c7c:	4813      	ldr	r0, [pc, #76]	; (8000ccc <LoopForever+0x6>)
    LDR R1, [R0]
 8000c7e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000c80:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <LoopForever+0xa>)
    CMP R1, R2
 8000c84:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000c86:	d105      	bne.n	8000c94 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000c88:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000c8a:	4913      	ldr	r1, [pc, #76]	; (8000cd8 <LoopForever+0x12>)
    STR R1, [R0]
 8000c8c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000c8e:	4813      	ldr	r0, [pc, #76]	; (8000cdc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000c90:	4913      	ldr	r1, [pc, #76]	; (8000ce0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000c92:	6001      	str	r1, [r0, #0]

08000c94 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000c96:	4914      	ldr	r1, [pc, #80]	; (8000ce8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <LoopForever+0x26>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a11      	ldr	r2, [pc, #68]	; (8000cf0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000cac:	4c11      	ldr	r4, [pc, #68]	; (8000cf4 <LoopForever+0x2e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cba:	f7ff ffd7 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f002 ff31 	bl	8003b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fe71 	bl	80009a8 <main>

08000cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
   ldr   r0, =_estack
 8000cc8:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000ccc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000cd0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000cd4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000cd8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000cdc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000ce0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cec:	080045d4 	.word	0x080045d4
  ldr r2, =_sbss
 8000cf0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cf4:	200001e4 	.word	0x200001e4

08000cf8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC1_IRQHandler>
	...

08000cfc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x3c>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_Init+0x3c>)
 8000d0e:	2140      	movs	r1, #64	; 0x40
 8000d10:	430a      	orrs	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 f811 	bl	8000d3c <HAL_InitTick>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
 8000d24:	e001      	b.n	8000d2a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d26:	f7ff fe59 	bl	80009dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
}
 8000d2e:	0018      	movs	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	40022000 	.word	0x40022000

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d46:	681c      	ldr	r4, [r3, #0]
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_InitTick+0x60>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	23fa      	movs	r3, #250	; 0xfa
 8000d50:	0098      	lsls	r0, r3, #2
 8000d52:	f7ff f9eb 	bl	800012c <__udivsi3>
 8000d56:	0003      	movs	r3, r0
 8000d58:	0019      	movs	r1, r3
 8000d5a:	0020      	movs	r0, r4
 8000d5c:	f7ff f9e6 	bl	800012c <__udivsi3>
 8000d60:	0003      	movs	r3, r0
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 fc5d 	bl	8001622 <HAL_SYSTICK_Config>
 8000d68:	1e03      	subs	r3, r0, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e00f      	b.n	8000d90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d80b      	bhi.n	8000d8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 fc2a 	bl	80015d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_InitTick+0x64>)
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e000      	b.n	8000d90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b003      	add	sp, #12
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000004 	.word	0x20000004

08000da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_IncTick+0x1c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	001a      	movs	r2, r3
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_IncTick+0x20>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	18d2      	adds	r2, r2, r3
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_IncTick+0x20>)
 8000db6:	601a      	str	r2, [r3, #0]
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	200001d0 	.word	0x200001d0

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <HAL_GetTick+0x10>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	200001d0 	.word	0x200001d0

08000ddc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e159      	b.n	80010a2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10a      	bne.n	8000e0c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2250      	movs	r2, #80	; 0x50
 8000e00:	2100      	movs	r1, #0
 8000e02:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff fe9a 	bl	8000b40 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e10:	2210      	movs	r2, #16
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b10      	cmp	r3, #16
 8000e16:	d005      	beq.n	8000e24 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2204      	movs	r2, #4
 8000e20:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e22:	d00b      	beq.n	8000e3c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e28:	2210      	movs	r2, #16
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2250      	movs	r2, #80	; 0x50
 8000e34:	2100      	movs	r1, #0
 8000e36:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e132      	b.n	80010a2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e40:	4a9a      	ldr	r2, [pc, #616]	; (80010ac <HAL_ADC_Init+0x2d0>)
 8000e42:	4013      	ands	r3, r2
 8000e44:	2202      	movs	r2, #2
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2203      	movs	r2, #3
 8000e54:	4013      	ands	r3, r2
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d108      	bne.n	8000e6c <HAL_ADC_Init+0x90>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2201      	movs	r2, #1
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d101      	bne.n	8000e6c <HAL_ADC_Init+0x90>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <HAL_ADC_Init+0x92>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d149      	bne.n	8000f06 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	23c0      	movs	r3, #192	; 0xc0
 8000e78:	061b      	lsls	r3, r3, #24
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d00b      	beq.n	8000e96 <HAL_ADC_Init+0xba>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d005      	beq.n	8000e96 <HAL_ADC_Init+0xba>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	061b      	lsls	r3, r3, #24
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d111      	bne.n	8000eba <HAL_ADC_Init+0xde>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	0892      	lsrs	r2, r2, #2
 8000ea4:	611a      	str	r2, [r3, #16]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6919      	ldr	r1, [r3, #16]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	e014      	b.n	8000ee4 <HAL_ADC_Init+0x108>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	0892      	lsrs	r2, r2, #2
 8000ec8:	611a      	str	r2, [r3, #16]
 8000eca:	4b79      	ldr	r3, [pc, #484]	; (80010b0 <HAL_ADC_Init+0x2d4>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b78      	ldr	r3, [pc, #480]	; (80010b0 <HAL_ADC_Init+0x2d4>)
 8000ed0:	4978      	ldr	r1, [pc, #480]	; (80010b4 <HAL_ADC_Init+0x2d8>)
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	4b76      	ldr	r3, [pc, #472]	; (80010b0 <HAL_ADC_Init+0x2d4>)
 8000ed8:	6819      	ldr	r1, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	4b74      	ldr	r3, [pc, #464]	; (80010b0 <HAL_ADC_Init+0x2d4>)
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2118      	movs	r1, #24
 8000ef0:	438a      	bics	r2, r1
 8000ef2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68d9      	ldr	r1, [r3, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000f06:	4b6a      	ldr	r3, [pc, #424]	; (80010b0 <HAL_ADC_Init+0x2d4>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b69      	ldr	r3, [pc, #420]	; (80010b0 <HAL_ADC_Init+0x2d4>)
 8000f0c:	496a      	ldr	r1, [pc, #424]	; (80010b8 <HAL_ADC_Init+0x2dc>)
 8000f0e:	400a      	ands	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000f12:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <HAL_ADC_Init+0x2d4>)
 8000f14:	6819      	ldr	r1, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1a:	065a      	lsls	r2, r3, #25
 8000f1c:	4b64      	ldr	r3, [pc, #400]	; (80010b0 <HAL_ADC_Init+0x2d4>)
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	055b      	lsls	r3, r3, #21
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d108      	bne.n	8000f42 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	0549      	lsls	r1, r1, #21
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	495b      	ldr	r1, [pc, #364]	; (80010bc <HAL_ADC_Init+0x2e0>)
 8000f4e:	400a      	ands	r2, r1
 8000f50:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68d9      	ldr	r1, [r3, #12]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d101      	bne.n	8000f68 <HAL_ADC_Init+0x18c>
 8000f64:	2304      	movs	r3, #4
 8000f66:	e000      	b.n	8000f6a <HAL_ADC_Init+0x18e>
 8000f68:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f6a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2020      	movs	r0, #32
 8000f70:	5c1b      	ldrb	r3, [r3, r0]
 8000f72:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f74:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	202c      	movs	r0, #44	; 0x2c
 8000f7a:	5c1b      	ldrb	r3, [r3, r0]
 8000f7c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f7e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f84:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000f8c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f94:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa2:	23c2      	movs	r3, #194	; 0xc2
 8000fa4:	33ff      	adds	r3, #255	; 0xff
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d00b      	beq.n	8000fc2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68d9      	ldr	r1, [r3, #12]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2221      	movs	r2, #33	; 0x21
 8000fc6:	5c9b      	ldrb	r3, [r3, r2]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d11a      	bne.n	8001002 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2220      	movs	r2, #32
 8000fd0:	5c9b      	ldrb	r3, [r3, r2]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	0249      	lsls	r1, r1, #9
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	e00b      	b.n	8001002 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fee:	2220      	movs	r2, #32
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001006:	2b01      	cmp	r3, #1
 8001008:	d11f      	bne.n	800104a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	492a      	ldr	r1, [pc, #168]	; (80010c0 <HAL_ADC_Init+0x2e4>)
 8001016:	400a      	ands	r2, r1
 8001018:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6919      	ldr	r1, [r3, #16]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001028:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800102e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	691a      	ldr	r2, [r3, #16]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2101      	movs	r1, #1
 8001044:	430a      	orrs	r2, r1
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	e00e      	b.n	8001068 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2201      	movs	r2, #1
 8001052:	4013      	ands	r3, r2
 8001054:	2b01      	cmp	r3, #1
 8001056:	d107      	bne.n	8001068 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2101      	movs	r1, #1
 8001064:	438a      	bics	r2, r1
 8001066:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	695a      	ldr	r2, [r3, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2107      	movs	r1, #7
 8001074:	438a      	bics	r2, r1
 8001076:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6959      	ldr	r1, [r3, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001094:	2203      	movs	r2, #3
 8001096:	4393      	bics	r3, r2
 8001098:	2201      	movs	r2, #1
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	fffffefd 	.word	0xfffffefd
 80010b0:	40012708 	.word	0x40012708
 80010b4:	ffc3ffff 	.word	0xffc3ffff
 80010b8:	fdffffff 	.word	0xfdffffff
 80010bc:	fffe0219 	.word	0xfffe0219
 80010c0:	fffffc03 	.word	0xfffffc03

080010c4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010cc:	230f      	movs	r3, #15
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2204      	movs	r2, #4
 80010dc:	4013      	ands	r3, r2
 80010de:	d138      	bne.n	8001152 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2250      	movs	r2, #80	; 0x50
 80010e4:	5c9b      	ldrb	r3, [r3, r2]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_ADC_Start+0x2a>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e038      	b.n	8001160 <HAL_ADC_Start+0x9c>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2250      	movs	r2, #80	; 0x50
 80010f2:	2101      	movs	r1, #1
 80010f4:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d007      	beq.n	800110e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80010fe:	230f      	movs	r3, #15
 8001100:	18fc      	adds	r4, r7, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	0018      	movs	r0, r3
 8001106:	f000 f93b 	bl	8001380 <ADC_Enable>
 800110a:	0003      	movs	r3, r0
 800110c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800110e:	230f      	movs	r3, #15
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d120      	bne.n	800115a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <HAL_ADC_Start+0xa4>)
 800111e:	4013      	ands	r3, r2
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	0052      	lsls	r2, r2, #1
 8001124:	431a      	orrs	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2250      	movs	r2, #80	; 0x50
 8001134:	2100      	movs	r1, #0
 8001136:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	221c      	movs	r2, #28
 800113e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2104      	movs	r1, #4
 800114c:	430a      	orrs	r2, r1
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	e003      	b.n	800115a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001152:	230f      	movs	r3, #15
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	2202      	movs	r2, #2
 8001158:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800115a:	230f      	movs	r3, #15
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	781b      	ldrb	r3, [r3, #0]
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b005      	add	sp, #20
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	fffff0fe 	.word	0xfffff0fe

0800116c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	2b08      	cmp	r3, #8
 8001184:	d102      	bne.n	800118c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001186:	2308      	movs	r3, #8
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	e014      	b.n	80011b6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2201      	movs	r2, #1
 8001194:	4013      	ands	r3, r2
 8001196:	2b01      	cmp	r3, #1
 8001198:	d10b      	bne.n	80011b2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119e:	2220      	movs	r2, #32
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2250      	movs	r2, #80	; 0x50
 80011aa:	2100      	movs	r1, #0
 80011ac:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e06c      	b.n	800128c <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80011b2:	230c      	movs	r3, #12
 80011b4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80011b6:	f7ff fe07 	bl	8000dc8 <HAL_GetTick>
 80011ba:	0003      	movs	r3, r0
 80011bc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80011be:	e019      	b.n	80011f4 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	d016      	beq.n	80011f4 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d007      	beq.n	80011dc <HAL_ADC_PollForConversion+0x70>
 80011cc:	f7ff fdfc 	bl	8000dc8 <HAL_GetTick>
 80011d0:	0002      	movs	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d20b      	bcs.n	80011f4 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e0:	2204      	movs	r2, #4
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2250      	movs	r2, #80	; 0x50
 80011ec:	2100      	movs	r1, #0
 80011ee:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e04b      	b.n	800128c <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4013      	ands	r3, r2
 80011fe:	d0df      	beq.n	80011c0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	23c0      	movs	r3, #192	; 0xc0
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	4013      	ands	r3, r2
 800121a:	d12e      	bne.n	800127a <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2220      	movs	r2, #32
 8001220:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001222:	2b00      	cmp	r3, #0
 8001224:	d129      	bne.n	800127a <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2208      	movs	r2, #8
 800122e:	4013      	ands	r3, r2
 8001230:	2b08      	cmp	r3, #8
 8001232:	d122      	bne.n	800127a <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2204      	movs	r2, #4
 800123c:	4013      	ands	r3, r2
 800123e:	d110      	bne.n	8001262 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	210c      	movs	r1, #12
 800124c:	438a      	bics	r2, r1
 800124e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001254:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <HAL_ADC_PollForConversion+0x128>)
 8001256:	4013      	ands	r3, r2
 8001258:	2201      	movs	r2, #1
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	655a      	str	r2, [r3, #84]	; 0x54
 8001260:	e00b      	b.n	800127a <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001266:	2220      	movs	r2, #32
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001272:	2201      	movs	r2, #1
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d103      	bne.n	800128a <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	220c      	movs	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b004      	add	sp, #16
 8001292:	bd80      	pop	{r7, pc}
 8001294:	fffffefe 	.word	0xfffffefe

08001298 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2250      	movs	r2, #80	; 0x50
 80012be:	5c9b      	ldrb	r3, [r3, r2]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x18>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e050      	b.n	800136a <HAL_ADC_ConfigChannel+0xba>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2250      	movs	r2, #80	; 0x50
 80012cc:	2101      	movs	r1, #1
 80012ce:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2204      	movs	r2, #4
 80012d8:	4013      	ands	r3, r2
 80012da:	d00b      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e0:	2220      	movs	r2, #32
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2250      	movs	r2, #80	; 0x50
 80012ec:	2100      	movs	r1, #0
 80012ee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e03a      	b.n	800136a <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <HAL_ADC_ConfigChannel+0xc4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d018      	beq.n	8001330 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	035b      	lsls	r3, r3, #13
 800130a:	0b5a      	lsrs	r2, r3, #13
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	029b      	lsls	r3, r3, #10
 800131c:	4013      	ands	r3, r2
 800131e:	d01f      	beq.n	8001360 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_ADC_ConfigChannel+0xc8>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_ADC_ConfigChannel+0xc8>)
 8001326:	2180      	movs	r1, #128	; 0x80
 8001328:	03c9      	lsls	r1, r1, #15
 800132a:	430a      	orrs	r2, r1
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e017      	b.n	8001360 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	035b      	lsls	r3, r3, #13
 800133c:	0b5b      	lsrs	r3, r3, #13
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	400a      	ands	r2, r1
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	029b      	lsls	r3, r3, #10
 8001350:	4013      	ands	r3, r2
 8001352:	d005      	beq.n	8001360 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_ADC_ConfigChannel+0xc8>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_ADC_ConfigChannel+0xc8>)
 800135a:	4908      	ldr	r1, [pc, #32]	; (800137c <HAL_ADC_ConfigChannel+0xcc>)
 800135c:	400a      	ands	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2250      	movs	r2, #80	; 0x50
 8001364:	2100      	movs	r1, #0
 8001366:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	00001001 	.word	0x00001001
 8001378:	40012708 	.word	0x40012708
 800137c:	ffbfffff 	.word	0xffbfffff

08001380 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2203      	movs	r2, #3
 8001394:	4013      	ands	r3, r2
 8001396:	2b01      	cmp	r3, #1
 8001398:	d108      	bne.n	80013ac <ADC_Enable+0x2c>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <ADC_Enable+0x2c>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <ADC_Enable+0x2e>
 80013ac:	2300      	movs	r3, #0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d13f      	bne.n	8001432 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a20      	ldr	r2, [pc, #128]	; (800143c <ADC_Enable+0xbc>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	d00d      	beq.n	80013da <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c2:	2210      	movs	r2, #16
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	2201      	movs	r2, #1
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e02c      	b.n	8001434 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	430a      	orrs	r2, r1
 80013e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f000 f828 	bl	8001440 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80013f0:	f7ff fcea 	bl	8000dc8 <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80013f8:	e014      	b.n	8001424 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013fa:	f7ff fce5 	bl	8000dc8 <HAL_GetTick>
 80013fe:	0002      	movs	r2, r0
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b0a      	cmp	r3, #10
 8001406:	d90d      	bls.n	8001424 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140c:	2210      	movs	r2, #16
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	2201      	movs	r2, #1
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e007      	b.n	8001434 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2201      	movs	r2, #1
 800142c:	4013      	ands	r3, r2
 800142e:	2b01      	cmp	r3, #1
 8001430:	d1e3      	bne.n	80013fa <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b004      	add	sp, #16
 800143a:	bd80      	pop	{r7, pc}
 800143c:	80000017 	.word	0x80000017

08001440 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <ADC_DelayMicroSecond+0x38>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	490b      	ldr	r1, [pc, #44]	; (800147c <ADC_DelayMicroSecond+0x3c>)
 800144e:	0018      	movs	r0, r3
 8001450:	f7fe fe6c 	bl	800012c <__udivsi3>
 8001454:	0003      	movs	r3, r0
 8001456:	001a      	movs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4353      	muls	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800145e:	e002      	b.n	8001466 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3b01      	subs	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f9      	bne.n	8001460 <ADC_DelayMicroSecond+0x20>
  } 
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b004      	add	sp, #16
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	20000000 	.word	0x20000000
 800147c:	000f4240 	.word	0x000f4240

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	0002      	movs	r2, r0
 8001488:	1dfb      	adds	r3, r7, #7
 800148a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800148c:	1dfb      	adds	r3, r7, #7
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b7f      	cmp	r3, #127	; 0x7f
 8001492:	d809      	bhi.n	80014a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	001a      	movs	r2, r3
 800149a:	231f      	movs	r3, #31
 800149c:	401a      	ands	r2, r3
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_EnableIRQ+0x30>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	4091      	lsls	r1, r2
 80014a4:	000a      	movs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
  }
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	0002      	movs	r2, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b7f      	cmp	r3, #127	; 0x7f
 80014c8:	d828      	bhi.n	800151c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ca:	4a2f      	ldr	r2, [pc, #188]	; (8001588 <__NVIC_SetPriority+0xd4>)
 80014cc:	1dfb      	adds	r3, r7, #7
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	33c0      	adds	r3, #192	; 0xc0
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	589b      	ldr	r3, [r3, r2]
 80014da:	1dfa      	adds	r2, r7, #7
 80014dc:	7812      	ldrb	r2, [r2, #0]
 80014de:	0011      	movs	r1, r2
 80014e0:	2203      	movs	r2, #3
 80014e2:	400a      	ands	r2, r1
 80014e4:	00d2      	lsls	r2, r2, #3
 80014e6:	21ff      	movs	r1, #255	; 0xff
 80014e8:	4091      	lsls	r1, r2
 80014ea:	000a      	movs	r2, r1
 80014ec:	43d2      	mvns	r2, r2
 80014ee:	401a      	ands	r2, r3
 80014f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	019b      	lsls	r3, r3, #6
 80014f6:	22ff      	movs	r2, #255	; 0xff
 80014f8:	401a      	ands	r2, r3
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	0018      	movs	r0, r3
 8001500:	2303      	movs	r3, #3
 8001502:	4003      	ands	r3, r0
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001508:	481f      	ldr	r0, [pc, #124]	; (8001588 <__NVIC_SetPriority+0xd4>)
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b25b      	sxtb	r3, r3
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	430a      	orrs	r2, r1
 8001514:	33c0      	adds	r3, #192	; 0xc0
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800151a:	e031      	b.n	8001580 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <__NVIC_SetPriority+0xd8>)
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	0019      	movs	r1, r3
 8001524:	230f      	movs	r3, #15
 8001526:	400b      	ands	r3, r1
 8001528:	3b08      	subs	r3, #8
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3306      	adds	r3, #6
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	18d3      	adds	r3, r2, r3
 8001532:	3304      	adds	r3, #4
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	1dfa      	adds	r2, r7, #7
 8001538:	7812      	ldrb	r2, [r2, #0]
 800153a:	0011      	movs	r1, r2
 800153c:	2203      	movs	r2, #3
 800153e:	400a      	ands	r2, r1
 8001540:	00d2      	lsls	r2, r2, #3
 8001542:	21ff      	movs	r1, #255	; 0xff
 8001544:	4091      	lsls	r1, r2
 8001546:	000a      	movs	r2, r1
 8001548:	43d2      	mvns	r2, r2
 800154a:	401a      	ands	r2, r3
 800154c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	019b      	lsls	r3, r3, #6
 8001552:	22ff      	movs	r2, #255	; 0xff
 8001554:	401a      	ands	r2, r3
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	0018      	movs	r0, r3
 800155c:	2303      	movs	r3, #3
 800155e:	4003      	ands	r3, r0
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <__NVIC_SetPriority+0xd8>)
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	001c      	movs	r4, r3
 800156c:	230f      	movs	r3, #15
 800156e:	4023      	ands	r3, r4
 8001570:	3b08      	subs	r3, #8
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	430a      	orrs	r2, r1
 8001576:	3306      	adds	r3, #6
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	18c3      	adds	r3, r0, r3
 800157c:	3304      	adds	r3, #4
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	b003      	add	sp, #12
 8001586:	bd90      	pop	{r4, r7, pc}
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	1e5a      	subs	r2, r3, #1
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	045b      	lsls	r3, r3, #17
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d301      	bcc.n	80015a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a4:	2301      	movs	r3, #1
 80015a6:	e010      	b.n	80015ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <SysTick_Config+0x44>)
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	3a01      	subs	r2, #1
 80015ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b0:	2301      	movs	r3, #1
 80015b2:	425b      	negs	r3, r3
 80015b4:	2103      	movs	r1, #3
 80015b6:	0018      	movs	r0, r3
 80015b8:	f7ff ff7c 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x44>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x44>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b002      	add	sp, #8
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	210f      	movs	r1, #15
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	1c02      	adds	r2, r0, #0
 80015e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	0011      	movs	r1, r2
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff ff5d 	bl	80014b4 <__NVIC_SetPriority>
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b004      	add	sp, #16
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	0002      	movs	r2, r0
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b25b      	sxtb	r3, r3
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff ff33 	bl	8001480 <__NVIC_EnableIRQ>
}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff ffaf 	bl	8001590 <SysTick_Config>
 8001632:	0003      	movs	r3, r0
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001652:	e155      	b.n	8001900 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2101      	movs	r1, #1
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4091      	lsls	r1, r2
 800165e:	000a      	movs	r2, r1
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d100      	bne.n	800166c <HAL_GPIO_Init+0x30>
 800166a:	e146      	b.n	80018fa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d00b      	beq.n	800168c <HAL_GPIO_Init+0x50>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d007      	beq.n	800168c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001680:	2b11      	cmp	r3, #17
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b12      	cmp	r3, #18
 800168a:	d130      	bne.n	80016ee <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	409a      	lsls	r2, r3
 800169a:	0013      	movs	r3, r2
 800169c:	43da      	mvns	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	409a      	lsls	r2, r3
 80016ae:	0013      	movs	r3, r2
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c2:	2201      	movs	r2, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
 80016c8:	0013      	movs	r3, r2
 80016ca:	43da      	mvns	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	2201      	movs	r2, #1
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	409a      	lsls	r2, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	43da      	mvns	r2, r3
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	409a      	lsls	r2, r3
 8001710:	0013      	movs	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0xf2>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b12      	cmp	r3, #18
 800172c:	d123      	bne.n	8001776 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	08da      	lsrs	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3208      	adds	r2, #8
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	58d3      	ldr	r3, [r2, r3]
 800173a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2207      	movs	r2, #7
 8001740:	4013      	ands	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	409a      	lsls	r2, r3
 8001748:	0013      	movs	r3, r2
 800174a:	43da      	mvns	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2107      	movs	r1, #7
 800175a:	400b      	ands	r3, r1
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	409a      	lsls	r2, r3
 8001760:	0013      	movs	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	6939      	ldr	r1, [r7, #16]
 8001774:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	43da      	mvns	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2203      	movs	r2, #3
 8001794:	401a      	ands	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	055b      	lsls	r3, r3, #21
 80017b2:	4013      	ands	r3, r2
 80017b4:	d100      	bne.n	80017b8 <HAL_GPIO_Init+0x17c>
 80017b6:	e0a0      	b.n	80018fa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b8:	4b57      	ldr	r3, [pc, #348]	; (8001918 <HAL_GPIO_Init+0x2dc>)
 80017ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017bc:	4b56      	ldr	r3, [pc, #344]	; (8001918 <HAL_GPIO_Init+0x2dc>)
 80017be:	2101      	movs	r1, #1
 80017c0:	430a      	orrs	r2, r1
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c4:	4a55      	ldr	r2, [pc, #340]	; (800191c <HAL_GPIO_Init+0x2e0>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	589b      	ldr	r3, [r3, r2]
 80017d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2203      	movs	r2, #3
 80017d6:	4013      	ands	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	409a      	lsls	r2, r3
 80017de:	0013      	movs	r3, r2
 80017e0:	43da      	mvns	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	23a0      	movs	r3, #160	; 0xa0
 80017ec:	05db      	lsls	r3, r3, #23
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d01f      	beq.n	8001832 <HAL_GPIO_Init+0x1f6>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4a      	ldr	r2, [pc, #296]	; (8001920 <HAL_GPIO_Init+0x2e4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d019      	beq.n	800182e <HAL_GPIO_Init+0x1f2>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a49      	ldr	r2, [pc, #292]	; (8001924 <HAL_GPIO_Init+0x2e8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0x1ee>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a48      	ldr	r2, [pc, #288]	; (8001928 <HAL_GPIO_Init+0x2ec>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00d      	beq.n	8001826 <HAL_GPIO_Init+0x1ea>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a47      	ldr	r2, [pc, #284]	; (800192c <HAL_GPIO_Init+0x2f0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d007      	beq.n	8001822 <HAL_GPIO_Init+0x1e6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a46      	ldr	r2, [pc, #280]	; (8001930 <HAL_GPIO_Init+0x2f4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d101      	bne.n	800181e <HAL_GPIO_Init+0x1e2>
 800181a:	2305      	movs	r3, #5
 800181c:	e00a      	b.n	8001834 <HAL_GPIO_Init+0x1f8>
 800181e:	2306      	movs	r3, #6
 8001820:	e008      	b.n	8001834 <HAL_GPIO_Init+0x1f8>
 8001822:	2304      	movs	r3, #4
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x1f8>
 8001826:	2303      	movs	r3, #3
 8001828:	e004      	b.n	8001834 <HAL_GPIO_Init+0x1f8>
 800182a:	2302      	movs	r3, #2
 800182c:	e002      	b.n	8001834 <HAL_GPIO_Init+0x1f8>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_GPIO_Init+0x1f8>
 8001832:	2300      	movs	r3, #0
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	2103      	movs	r1, #3
 8001838:	400a      	ands	r2, r1
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	4093      	lsls	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001844:	4935      	ldr	r1, [pc, #212]	; (800191c <HAL_GPIO_Init+0x2e0>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <HAL_GPIO_Init+0x2f8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43da      	mvns	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4013      	ands	r3, r2
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <HAL_GPIO_Init+0x2f8>)
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_GPIO_Init+0x2f8>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43da      	mvns	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	4013      	ands	r3, r2
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_GPIO_Init+0x2f8>)
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_GPIO_Init+0x2f8>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43da      	mvns	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	035b      	lsls	r3, r3, #13
 80018be:	4013      	ands	r3, r2
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_GPIO_Init+0x2f8>)
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_GPIO_Init+0x2f8>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43da      	mvns	r2, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	039b      	lsls	r3, r3, #14
 80018e8:	4013      	ands	r3, r2
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_GPIO_Init+0x2f8>)
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	40da      	lsrs	r2, r3
 8001908:	1e13      	subs	r3, r2, #0
 800190a:	d000      	beq.n	800190e <HAL_GPIO_Init+0x2d2>
 800190c:	e6a2      	b.n	8001654 <HAL_GPIO_Init+0x18>
  }
}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b006      	add	sp, #24
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000
 8001920:	50000400 	.word	0x50000400
 8001924:	50000800 	.word	0x50000800
 8001928:	50000c00 	.word	0x50000c00
 800192c:	50001000 	.word	0x50001000
 8001930:	50001c00 	.word	0x50001c00
 8001934:	40010400 	.word	0x40010400

08001938 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	000a      	movs	r2, r1
 8001942:	1cbb      	adds	r3, r7, #2
 8001944:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800194c:	1cbb      	adds	r3, r7, #2
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4013      	ands	r3, r2
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	1cb9      	adds	r1, r7, #2
 800195c:	8809      	ldrh	r1, [r1, #0]
 800195e:	400b      	ands	r3, r1
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	619a      	str	r2, [r3, #24]
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b004      	add	sp, #16
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b5b0      	push	{r4, r5, r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	f000 fb6c 	bl	800205c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001984:	4bc8      	ldr	r3, [pc, #800]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	220c      	movs	r2, #12
 800198a:	4013      	ands	r3, r2
 800198c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800198e:	4bc6      	ldr	r3, [pc, #792]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	025b      	lsls	r3, r3, #9
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2201      	movs	r2, #1
 80019a0:	4013      	ands	r3, r2
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_OscConfig+0x36>
 80019a4:	e07d      	b.n	8001aa2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d007      	beq.n	80019bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d112      	bne.n	80019d8 <HAL_RCC_OscConfig+0x68>
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	025b      	lsls	r3, r3, #9
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d10d      	bne.n	80019d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	4bba      	ldr	r3, [pc, #744]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	029b      	lsls	r3, r3, #10
 80019c4:	4013      	ands	r3, r2
 80019c6:	d100      	bne.n	80019ca <HAL_RCC_OscConfig+0x5a>
 80019c8:	e06a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x130>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d166      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f000 fb42 	bl	800205c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	025b      	lsls	r3, r3, #9
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x84>
 80019e4:	4bb0      	ldr	r3, [pc, #704]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4baf      	ldr	r3, [pc, #700]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	0249      	lsls	r1, r1, #9
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e027      	b.n	8001a44 <HAL_RCC_OscConfig+0xd4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	23a0      	movs	r3, #160	; 0xa0
 80019fa:	02db      	lsls	r3, r3, #11
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d10e      	bne.n	8001a1e <HAL_RCC_OscConfig+0xae>
 8001a00:	4ba9      	ldr	r3, [pc, #676]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4ba8      	ldr	r3, [pc, #672]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	02c9      	lsls	r1, r1, #11
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	4ba6      	ldr	r3, [pc, #664]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4ba5      	ldr	r3, [pc, #660]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0249      	lsls	r1, r1, #9
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e012      	b.n	8001a44 <HAL_RCC_OscConfig+0xd4>
 8001a1e:	4ba2      	ldr	r3, [pc, #648]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4ba1      	ldr	r3, [pc, #644]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001a24:	49a1      	ldr	r1, [pc, #644]	; (8001cac <HAL_RCC_OscConfig+0x33c>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	4b9f      	ldr	r3, [pc, #636]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	025b      	lsls	r3, r3, #9
 8001a32:	4013      	ands	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4b9b      	ldr	r3, [pc, #620]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b9a      	ldr	r3, [pc, #616]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001a3e:	499c      	ldr	r1, [pc, #624]	; (8001cb0 <HAL_RCC_OscConfig+0x340>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d014      	beq.n	8001a76 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f9bc 	bl	8000dc8 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a56:	f7ff f9b7 	bl	8000dc8 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b64      	cmp	r3, #100	; 0x64
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e2f9      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a68:	4b8f      	ldr	r3, [pc, #572]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	029b      	lsls	r3, r3, #10
 8001a70:	4013      	ands	r3, r2
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0xe6>
 8001a74:	e015      	b.n	8001aa2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff f9a7 	bl	8000dc8 <HAL_GetTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff f9a2 	bl	8000dc8 <HAL_GetTick>
 8001a84:	0002      	movs	r2, r0
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e2e4      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a92:	4b85      	ldr	r3, [pc, #532]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	029b      	lsls	r3, r3, #10
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x110>
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d100      	bne.n	8001aae <HAL_RCC_OscConfig+0x13e>
 8001aac:	e099      	b.n	8001be2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d009      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001abc:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b79      	ldr	r3, [pc, #484]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001ac2:	2120      	movs	r1, #32
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	2220      	movs	r2, #32
 8001acc:	4393      	bics	r3, r2
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d005      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	2b0c      	cmp	r3, #12
 8001ada:	d13e      	bne.n	8001b5a <HAL_RCC_OscConfig+0x1ea>
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d13b      	bne.n	8001b5a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ae2:	4b71      	ldr	r3, [pc, #452]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d004      	beq.n	8001af6 <HAL_RCC_OscConfig+0x186>
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e2b2      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b6c      	ldr	r3, [pc, #432]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4a6e      	ldr	r2, [pc, #440]	; (8001cb4 <HAL_RCC_OscConfig+0x344>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	0019      	movs	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	021a      	lsls	r2, r3, #8
 8001b06:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b0c:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2209      	movs	r2, #9
 8001b12:	4393      	bics	r3, r2
 8001b14:	0019      	movs	r1, r3
 8001b16:	4b64      	ldr	r3, [pc, #400]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b1e:	f000 fbeb 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8001b22:	0001      	movs	r1, r0
 8001b24:	4b60      	ldr	r3, [pc, #384]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	4a62      	ldr	r2, [pc, #392]	; (8001cb8 <HAL_RCC_OscConfig+0x348>)
 8001b30:	5cd3      	ldrb	r3, [r2, r3]
 8001b32:	000a      	movs	r2, r1
 8001b34:	40da      	lsrs	r2, r3
 8001b36:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <HAL_RCC_OscConfig+0x34c>)
 8001b38:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001b3a:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_RCC_OscConfig+0x350>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2513      	movs	r5, #19
 8001b40:	197c      	adds	r4, r7, r5
 8001b42:	0018      	movs	r0, r3
 8001b44:	f7ff f8fa 	bl	8000d3c <HAL_InitTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001b4c:	197b      	adds	r3, r7, r5
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d046      	beq.n	8001be2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001b54:	197b      	adds	r3, r7, r5
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	e280      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d027      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b60:	4b51      	ldr	r3, [pc, #324]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2209      	movs	r2, #9
 8001b66:	4393      	bics	r3, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff f929 	bl	8000dc8 <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7c:	f7ff f924 	bl	8000dc8 <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e266      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2204      	movs	r2, #4
 8001b94:	4013      	ands	r3, r2
 8001b96:	d0f1      	beq.n	8001b7c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4a45      	ldr	r2, [pc, #276]	; (8001cb4 <HAL_RCC_OscConfig+0x344>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	021a      	lsls	r2, r3, #8
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	e018      	b.n	8001be2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb0:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	438a      	bics	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f904 	bl	8000dc8 <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff f8ff 	bl	8000dc8 <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e241      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bd8:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	4013      	ands	r3, r2
 8001be0:	d1f1      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2210      	movs	r2, #16
 8001be8:	4013      	ands	r3, r2
 8001bea:	d100      	bne.n	8001bee <HAL_RCC_OscConfig+0x27e>
 8001bec:	e0a1      	b.n	8001d32 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d140      	bne.n	8001c76 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_OscConfig+0x29c>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e227      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c0c:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a2c      	ldr	r2, [pc, #176]	; (8001cc4 <HAL_RCC_OscConfig+0x354>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	0019      	movs	r1, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1a      	ldr	r2, [r3, #32]
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	0a19      	lsrs	r1, r3, #8
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	061a      	lsls	r2, r3, #24
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	0b5b      	lsrs	r3, r3, #13
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	2280      	movs	r2, #128	; 0x80
 8001c3e:	0212      	lsls	r2, r2, #8
 8001c40:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	210f      	movs	r1, #15
 8001c4a:	400b      	ands	r3, r1
 8001c4c:	491a      	ldr	r1, [pc, #104]	; (8001cb8 <HAL_RCC_OscConfig+0x348>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_RCC_OscConfig+0x34c>)
 8001c54:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_RCC_OscConfig+0x350>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2513      	movs	r5, #19
 8001c5c:	197c      	adds	r4, r7, r5
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7ff f86c 	bl	8000d3c <HAL_InitTick>
 8001c64:	0003      	movs	r3, r0
 8001c66:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001c68:	197b      	adds	r3, r7, r5
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d060      	beq.n	8001d32 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001c70:	197b      	adds	r3, r7, r5
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	e1f2      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d03f      	beq.n	8001cfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_OscConfig+0x338>)
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	0049      	lsls	r1, r1, #1
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f89c 	bl	8000dc8 <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c94:	e018      	b.n	8001cc8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c96:	f7ff f897 	bl	8000dc8 <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d911      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e1d9      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	fffeffff 	.word	0xfffeffff
 8001cb0:	fffbffff 	.word	0xfffbffff
 8001cb4:	ffffe0ff 	.word	0xffffe0ff
 8001cb8:	08004524 	.word	0x08004524
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000004 	.word	0x20000004
 8001cc4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cc8:	4bc9      	ldr	r3, [pc, #804]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d0e0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd4:	4bc6      	ldr	r3, [pc, #792]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4ac6      	ldr	r2, [pc, #792]	; (8001ff4 <HAL_RCC_OscConfig+0x684>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1a      	ldr	r2, [r3, #32]
 8001ce2:	4bc3      	ldr	r3, [pc, #780]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce8:	4bc1      	ldr	r3, [pc, #772]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	0a19      	lsrs	r1, r3, #8
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	061a      	lsls	r2, r3, #24
 8001cf6:	4bbe      	ldr	r3, [pc, #760]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	e019      	b.n	8001d32 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cfe:	4bbc      	ldr	r3, [pc, #752]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4bbb      	ldr	r3, [pc, #748]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001d04:	49bc      	ldr	r1, [pc, #752]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001d06:	400a      	ands	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7ff f85d 	bl	8000dc8 <HAL_GetTick>
 8001d0e:	0003      	movs	r3, r0
 8001d10:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d14:	f7ff f858 	bl	8000dc8 <HAL_GetTick>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e19a      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d26:	4bb2      	ldr	r3, [pc, #712]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2208      	movs	r2, #8
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d036      	beq.n	8001daa <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d019      	beq.n	8001d78 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d44:	4baa      	ldr	r3, [pc, #680]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001d46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d48:	4ba9      	ldr	r3, [pc, #676]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7ff f83a 	bl	8000dc8 <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d5a:	f7ff f835 	bl	8000dc8 <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e177      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d6c:	4ba0      	ldr	r3, [pc, #640]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d70:	2202      	movs	r2, #2
 8001d72:	4013      	ands	r3, r2
 8001d74:	d0f1      	beq.n	8001d5a <HAL_RCC_OscConfig+0x3ea>
 8001d76:	e018      	b.n	8001daa <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d78:	4b9d      	ldr	r3, [pc, #628]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d7c:	4b9c      	ldr	r3, [pc, #624]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001d7e:	2101      	movs	r1, #1
 8001d80:	438a      	bics	r2, r1
 8001d82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7ff f820 	bl	8000dc8 <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8e:	f7ff f81b 	bl	8000dc8 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e15d      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001da0:	4b93      	ldr	r3, [pc, #588]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da4:	2202      	movs	r2, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	d1f1      	bne.n	8001d8e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2204      	movs	r2, #4
 8001db0:	4013      	ands	r3, r2
 8001db2:	d100      	bne.n	8001db6 <HAL_RCC_OscConfig+0x446>
 8001db4:	e0ae      	b.n	8001f14 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db6:	2023      	movs	r0, #35	; 0x23
 8001db8:	183b      	adds	r3, r7, r0
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dbe:	4b8c      	ldr	r3, [pc, #560]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	055b      	lsls	r3, r3, #21
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dce:	4b88      	ldr	r3, [pc, #544]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	0549      	lsls	r1, r1, #21
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001dd8:	183b      	adds	r3, r7, r0
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4b87      	ldr	r3, [pc, #540]	; (8001ffc <HAL_RCC_OscConfig+0x68c>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	d11a      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dea:	4b84      	ldr	r3, [pc, #528]	; (8001ffc <HAL_RCC_OscConfig+0x68c>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b83      	ldr	r3, [pc, #524]	; (8001ffc <HAL_RCC_OscConfig+0x68c>)
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	0049      	lsls	r1, r1, #1
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df8:	f7fe ffe6 	bl	8000dc8 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e02:	f7fe ffe1 	bl	8000dc8 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b64      	cmp	r3, #100	; 0x64
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e123      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	4b79      	ldr	r3, [pc, #484]	; (8001ffc <HAL_RCC_OscConfig+0x68c>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4cc>
 8001e2c:	4b70      	ldr	r3, [pc, #448]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e30:	4b6f      	ldr	r3, [pc, #444]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e32:	2180      	movs	r1, #128	; 0x80
 8001e34:	0049      	lsls	r1, r1, #1
 8001e36:	430a      	orrs	r2, r1
 8001e38:	651a      	str	r2, [r3, #80]	; 0x50
 8001e3a:	e031      	b.n	8001ea0 <HAL_RCC_OscConfig+0x530>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x4ee>
 8001e44:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e48:	4b69      	ldr	r3, [pc, #420]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e4a:	496b      	ldr	r1, [pc, #428]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001e50:	4b67      	ldr	r3, [pc, #412]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e54:	4b66      	ldr	r3, [pc, #408]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e56:	496a      	ldr	r1, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x690>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001e5c:	e020      	b.n	8001ea0 <HAL_RCC_OscConfig+0x530>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	23a0      	movs	r3, #160	; 0xa0
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d10e      	bne.n	8001e88 <HAL_RCC_OscConfig+0x518>
 8001e6a:	4b61      	ldr	r3, [pc, #388]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e6e:	4b60      	ldr	r3, [pc, #384]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e70:	2180      	movs	r1, #128	; 0x80
 8001e72:	00c9      	lsls	r1, r1, #3
 8001e74:	430a      	orrs	r2, r1
 8001e76:	651a      	str	r2, [r3, #80]	; 0x50
 8001e78:	4b5d      	ldr	r3, [pc, #372]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e7c:	4b5c      	ldr	r3, [pc, #368]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	0049      	lsls	r1, r1, #1
 8001e82:	430a      	orrs	r2, r1
 8001e84:	651a      	str	r2, [r3, #80]	; 0x50
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x530>
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e8c:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e8e:	495a      	ldr	r1, [pc, #360]	; (8001ff8 <HAL_RCC_OscConfig+0x688>)
 8001e90:	400a      	ands	r2, r1
 8001e92:	651a      	str	r2, [r3, #80]	; 0x50
 8001e94:	4b56      	ldr	r3, [pc, #344]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e98:	4b55      	ldr	r3, [pc, #340]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001e9a:	4959      	ldr	r1, [pc, #356]	; (8002000 <HAL_RCC_OscConfig+0x690>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d015      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea8:	f7fe ff8e 	bl	8000dc8 <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eb0:	e009      	b.n	8001ec6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7fe ff89 	bl	8000dc8 <HAL_GetTick>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	4a51      	ldr	r2, [pc, #324]	; (8002004 <HAL_RCC_OscConfig+0x694>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e0ca      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ec6:	4b4a      	ldr	r3, [pc, #296]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d0ef      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x542>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed4:	f7fe ff78 	bl	8000dc8 <HAL_GetTick>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001edc:	e009      	b.n	8001ef2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7fe ff73 	bl	8000dc8 <HAL_GetTick>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	4a46      	ldr	r2, [pc, #280]	; (8002004 <HAL_RCC_OscConfig+0x694>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0b4      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d1ef      	bne.n	8001ede <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001efe:	2323      	movs	r3, #35	; 0x23
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f0c:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001f0e:	493e      	ldr	r1, [pc, #248]	; (8002008 <HAL_RCC_OscConfig+0x698>)
 8001f10:	400a      	ands	r2, r1
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d100      	bne.n	8001f1e <HAL_RCC_OscConfig+0x5ae>
 8001f1c:	e09d      	b.n	800205a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	d100      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5b6>
 8001f24:	e076      	b.n	8002014 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d145      	bne.n	8001fba <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_RCC_OscConfig+0x69c>)
 8001f36:	400a      	ands	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7fe ff45 	bl	8000dc8 <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe ff40 	bl	8000dc8 <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e082      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f56:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	049b      	lsls	r3, r3, #18
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <HAL_RCC_OscConfig+0x6a0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	0449      	lsls	r1, r1, #17
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7fe ff1a 	bl	8000dc8 <HAL_GetTick>
 8001f94:	0003      	movs	r3, r0
 8001f96:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7fe ff15 	bl	8000dc8 <HAL_GetTick>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e057      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001fac:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	049b      	lsls	r3, r3, #18
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x62a>
 8001fb8:	e04f      	b.n	800205a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001fc0:	4912      	ldr	r1, [pc, #72]	; (800200c <HAL_RCC_OscConfig+0x69c>)
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe feff 	bl	8000dc8 <HAL_GetTick>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7fe fefa 	bl	8000dc8 <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e03c      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fe2:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_RCC_OscConfig+0x680>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	049b      	lsls	r3, r3, #18
 8001fea:	4013      	ands	r3, r2
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x660>
 8001fee:	e034      	b.n	800205a <HAL_RCC_OscConfig+0x6ea>
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	ffff1fff 	.word	0xffff1fff
 8001ff8:	fffffeff 	.word	0xfffffeff
 8001ffc:	40007000 	.word	0x40007000
 8002000:	fffffbff 	.word	0xfffffbff
 8002004:	00001388 	.word	0x00001388
 8002008:	efffffff 	.word	0xefffffff
 800200c:	feffffff 	.word	0xfeffffff
 8002010:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e01d      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_RCC_OscConfig+0x6f4>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	025b      	lsls	r3, r3, #9
 800202c:	401a      	ands	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	429a      	cmp	r2, r3
 8002034:	d10f      	bne.n	8002056 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	23f0      	movs	r3, #240	; 0xf0
 800203a:	039b      	lsls	r3, r3, #14
 800203c:	401a      	ands	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d107      	bne.n	8002056 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	23c0      	movs	r3, #192	; 0xc0
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	401a      	ands	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b00a      	add	sp, #40	; 0x28
 8002062:	bdb0      	pop	{r4, r5, r7, pc}
 8002064:	40021000 	.word	0x40021000

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e128      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b96      	ldr	r3, [pc, #600]	; (80022d8 <HAL_RCC_ClockConfig+0x270>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	4013      	ands	r3, r2
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d91e      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b93      	ldr	r3, [pc, #588]	; (80022d8 <HAL_RCC_ClockConfig+0x270>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2201      	movs	r2, #1
 8002090:	4393      	bics	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4b90      	ldr	r3, [pc, #576]	; (80022d8 <HAL_RCC_ClockConfig+0x270>)
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800209c:	f7fe fe94 	bl	8000dc8 <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a4:	e009      	b.n	80020ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a6:	f7fe fe8f 	bl	8000dc8 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	4a8a      	ldr	r2, [pc, #552]	; (80022dc <HAL_RCC_ClockConfig+0x274>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e109      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b87      	ldr	r3, [pc, #540]	; (80022d8 <HAL_RCC_ClockConfig+0x270>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2201      	movs	r2, #1
 80020c0:	4013      	ands	r3, r2
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1ee      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2202      	movs	r2, #2
 80020ce:	4013      	ands	r3, r2
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d2:	4b83      	ldr	r3, [pc, #524]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	22f0      	movs	r2, #240	; 0xf0
 80020d8:	4393      	bics	r3, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4b7f      	ldr	r3, [pc, #508]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 80020e2:	430a      	orrs	r2, r1
 80020e4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2201      	movs	r2, #1
 80020ec:	4013      	ands	r3, r2
 80020ee:	d100      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x8a>
 80020f0:	e089      	b.n	8002206 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020fa:	4b79      	ldr	r3, [pc, #484]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	029b      	lsls	r3, r3, #10
 8002102:	4013      	ands	r3, r2
 8002104:	d120      	bne.n	8002148 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e0e1      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002112:	4b73      	ldr	r3, [pc, #460]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	049b      	lsls	r3, r3, #18
 800211a:	4013      	ands	r3, r2
 800211c:	d114      	bne.n	8002148 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0d5      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d106      	bne.n	8002138 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800212a:	4b6d      	ldr	r3, [pc, #436]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2204      	movs	r2, #4
 8002130:	4013      	ands	r3, r2
 8002132:	d109      	bne.n	8002148 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0ca      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002138:	4b69      	ldr	r3, [pc, #420]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4013      	ands	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0c2      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002148:	4b65      	ldr	r3, [pc, #404]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2203      	movs	r2, #3
 800214e:	4393      	bics	r3, r2
 8002150:	0019      	movs	r1, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 8002158:	430a      	orrs	r2, r1
 800215a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800215c:	f7fe fe34 	bl	8000dc8 <HAL_GetTick>
 8002160:	0003      	movs	r3, r0
 8002162:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d111      	bne.n	8002190 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800216c:	e009      	b.n	8002182 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216e:	f7fe fe2b 	bl	8000dc8 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_RCC_ClockConfig+0x274>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0a5      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002182:	4b57      	ldr	r3, [pc, #348]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	220c      	movs	r2, #12
 8002188:	4013      	ands	r3, r2
 800218a:	2b08      	cmp	r3, #8
 800218c:	d1ef      	bne.n	800216e <HAL_RCC_ClockConfig+0x106>
 800218e:	e03a      	b.n	8002206 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d111      	bne.n	80021bc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002198:	e009      	b.n	80021ae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219a:	f7fe fe15 	bl	8000dc8 <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	4a4d      	ldr	r2, [pc, #308]	; (80022dc <HAL_RCC_ClockConfig+0x274>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e08f      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ae:	4b4c      	ldr	r3, [pc, #304]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	220c      	movs	r2, #12
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d1ef      	bne.n	800219a <HAL_RCC_ClockConfig+0x132>
 80021ba:	e024      	b.n	8002206 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d11b      	bne.n	80021fc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c4:	e009      	b.n	80021da <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c6:	f7fe fdff 	bl	8000dc8 <HAL_GetTick>
 80021ca:	0002      	movs	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	4a42      	ldr	r2, [pc, #264]	; (80022dc <HAL_RCC_ClockConfig+0x274>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e079      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021da:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	220c      	movs	r2, #12
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d1ef      	bne.n	80021c6 <HAL_RCC_ClockConfig+0x15e>
 80021e6:	e00e      	b.n	8002206 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e8:	f7fe fdee 	bl	8000dc8 <HAL_GetTick>
 80021ec:	0002      	movs	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	4a3a      	ldr	r2, [pc, #232]	; (80022dc <HAL_RCC_ClockConfig+0x274>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e068      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021fc:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	220c      	movs	r2, #12
 8002202:	4013      	ands	r3, r2
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_RCC_ClockConfig+0x270>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2201      	movs	r2, #1
 800220c:	4013      	ands	r3, r2
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d21e      	bcs.n	8002252 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002214:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_RCC_ClockConfig+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2201      	movs	r2, #1
 800221a:	4393      	bics	r3, r2
 800221c:	0019      	movs	r1, r3
 800221e:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <HAL_RCC_ClockConfig+0x270>)
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002226:	f7fe fdcf 	bl	8000dc8 <HAL_GetTick>
 800222a:	0003      	movs	r3, r0
 800222c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	e009      	b.n	8002244 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7fe fdca 	bl	8000dc8 <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	4a28      	ldr	r2, [pc, #160]	; (80022dc <HAL_RCC_ClockConfig+0x274>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e044      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002244:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <HAL_RCC_ClockConfig+0x270>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2201      	movs	r2, #1
 800224a:	4013      	ands	r3, r2
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d1ee      	bne.n	8002230 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2204      	movs	r2, #4
 8002258:	4013      	ands	r3, r2
 800225a:	d009      	beq.n	8002270 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225c:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <HAL_RCC_ClockConfig+0x27c>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800226c:	430a      	orrs	r2, r1
 800226e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2208      	movs	r2, #8
 8002276:	4013      	ands	r3, r2
 8002278:	d00a      	beq.n	8002290 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <HAL_RCC_ClockConfig+0x280>)
 8002280:	4013      	ands	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	00da      	lsls	r2, r3, #3
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 800228c:	430a      	orrs	r2, r1
 800228e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002290:	f000 f832 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8002294:	0001      	movs	r1, r0
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_RCC_ClockConfig+0x278>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	220f      	movs	r2, #15
 800229e:	4013      	ands	r3, r2
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_RCC_ClockConfig+0x284>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	000a      	movs	r2, r1
 80022a6:	40da      	lsrs	r2, r3
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_RCC_ClockConfig+0x288>)
 80022aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_RCC_ClockConfig+0x28c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	250b      	movs	r5, #11
 80022b2:	197c      	adds	r4, r7, r5
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7fe fd41 	bl	8000d3c <HAL_InitTick>
 80022ba:	0003      	movs	r3, r0
 80022bc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80022be:	197b      	adds	r3, r7, r5
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80022c6:	197b      	adds	r3, r7, r5
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	e000      	b.n	80022ce <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b004      	add	sp, #16
 80022d4:	bdb0      	pop	{r4, r5, r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	40022000 	.word	0x40022000
 80022dc:	00001388 	.word	0x00001388
 80022e0:	40021000 	.word	0x40021000
 80022e4:	fffff8ff 	.word	0xfffff8ff
 80022e8:	ffffc7ff 	.word	0xffffc7ff
 80022ec:	08004524 	.word	0x08004524
 80022f0:	20000000 	.word	0x20000000
 80022f4:	20000004 	.word	0x20000004

080022f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f8:	b5b0      	push	{r4, r5, r7, lr}
 80022fa:	b08e      	sub	sp, #56	; 0x38
 80022fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80022fe:	4b4c      	ldr	r3, [pc, #304]	; (8002430 <HAL_RCC_GetSysClockFreq+0x138>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002306:	230c      	movs	r3, #12
 8002308:	4013      	ands	r3, r2
 800230a:	2b0c      	cmp	r3, #12
 800230c:	d014      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x40>
 800230e:	d900      	bls.n	8002312 <HAL_RCC_GetSysClockFreq+0x1a>
 8002310:	e07b      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x112>
 8002312:	2b04      	cmp	r3, #4
 8002314:	d002      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x24>
 8002316:	2b08      	cmp	r3, #8
 8002318:	d00b      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x3a>
 800231a:	e076      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800231c:	4b44      	ldr	r3, [pc, #272]	; (8002430 <HAL_RCC_GetSysClockFreq+0x138>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2210      	movs	r2, #16
 8002322:	4013      	ands	r3, r2
 8002324:	d002      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002326:	4b43      	ldr	r3, [pc, #268]	; (8002434 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800232a:	e07c      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800232c:	4b42      	ldr	r3, [pc, #264]	; (8002438 <HAL_RCC_GetSysClockFreq+0x140>)
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002330:	e079      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002332:	4b42      	ldr	r3, [pc, #264]	; (800243c <HAL_RCC_GetSysClockFreq+0x144>)
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002336:	e076      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	0c9a      	lsrs	r2, r3, #18
 800233c:	230f      	movs	r3, #15
 800233e:	401a      	ands	r2, r3
 8002340:	4b3f      	ldr	r3, [pc, #252]	; (8002440 <HAL_RCC_GetSysClockFreq+0x148>)
 8002342:	5c9b      	ldrb	r3, [r3, r2]
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	0d9a      	lsrs	r2, r3, #22
 800234a:	2303      	movs	r3, #3
 800234c:	4013      	ands	r3, r2
 800234e:	3301      	adds	r3, #1
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002352:	4b37      	ldr	r3, [pc, #220]	; (8002430 <HAL_RCC_GetSysClockFreq+0x138>)
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	025b      	lsls	r3, r3, #9
 800235a:	4013      	ands	r3, r2
 800235c:	d01a      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	4a35      	ldr	r2, [pc, #212]	; (800243c <HAL_RCC_GetSysClockFreq+0x144>)
 8002368:	2300      	movs	r3, #0
 800236a:	69b8      	ldr	r0, [r7, #24]
 800236c:	69f9      	ldr	r1, [r7, #28]
 800236e:	f7fd ff89 	bl	8000284 <__aeabi_lmul>
 8002372:	0002      	movs	r2, r0
 8002374:	000b      	movs	r3, r1
 8002376:	0010      	movs	r0, r2
 8002378:	0019      	movs	r1, r3
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f7fd ff5d 	bl	8000244 <__aeabi_uldivmod>
 800238a:	0002      	movs	r2, r0
 800238c:	000b      	movs	r3, r1
 800238e:	0013      	movs	r3, r2
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
 8002392:	e037      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002394:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_RCC_GetSysClockFreq+0x138>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2210      	movs	r2, #16
 800239a:	4013      	ands	r3, r2
 800239c:	d01a      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4a23      	ldr	r2, [pc, #140]	; (8002434 <HAL_RCC_GetSysClockFreq+0x13c>)
 80023a8:	2300      	movs	r3, #0
 80023aa:	68b8      	ldr	r0, [r7, #8]
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	f7fd ff69 	bl	8000284 <__aeabi_lmul>
 80023b2:	0002      	movs	r2, r0
 80023b4:	000b      	movs	r3, r1
 80023b6:	0010      	movs	r0, r2
 80023b8:	0019      	movs	r1, r3
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f7fd ff3d 	bl	8000244 <__aeabi_uldivmod>
 80023ca:	0002      	movs	r2, r0
 80023cc:	000b      	movs	r3, r1
 80023ce:	0013      	movs	r3, r2
 80023d0:	637b      	str	r3, [r7, #52]	; 0x34
 80023d2:	e017      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	0018      	movs	r0, r3
 80023d8:	2300      	movs	r3, #0
 80023da:	0019      	movs	r1, r3
 80023dc:	4a16      	ldr	r2, [pc, #88]	; (8002438 <HAL_RCC_GetSysClockFreq+0x140>)
 80023de:	2300      	movs	r3, #0
 80023e0:	f7fd ff50 	bl	8000284 <__aeabi_lmul>
 80023e4:	0002      	movs	r2, r0
 80023e6:	000b      	movs	r3, r1
 80023e8:	0010      	movs	r0, r2
 80023ea:	0019      	movs	r1, r3
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	001c      	movs	r4, r3
 80023f0:	2300      	movs	r3, #0
 80023f2:	001d      	movs	r5, r3
 80023f4:	0022      	movs	r2, r4
 80023f6:	002b      	movs	r3, r5
 80023f8:	f7fd ff24 	bl	8000244 <__aeabi_uldivmod>
 80023fc:	0002      	movs	r2, r0
 80023fe:	000b      	movs	r3, r1
 8002400:	0013      	movs	r3, r2
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002408:	e00d      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_RCC_GetSysClockFreq+0x138>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	0b5b      	lsrs	r3, r3, #13
 8002410:	2207      	movs	r2, #7
 8002412:	4013      	ands	r3, r2
 8002414:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	3301      	adds	r3, #1
 800241a:	2280      	movs	r2, #128	; 0x80
 800241c:	0212      	lsls	r2, r2, #8
 800241e:	409a      	lsls	r2, r3
 8002420:	0013      	movs	r3, r2
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002424:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b00e      	add	sp, #56	; 0x38
 800242e:	bdb0      	pop	{r4, r5, r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	003d0900 	.word	0x003d0900
 8002438:	00f42400 	.word	0x00f42400
 800243c:	007a1200 	.word	0x007a1200
 8002440:	0800453c 	.word	0x0800453c

08002444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b02      	ldr	r3, [pc, #8]	; (8002454 <HAL_RCC_GetHCLKFreq+0x10>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	0018      	movs	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800245c:	f7ff fff2 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002460:	0001      	movs	r1, r0
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	2207      	movs	r2, #7
 800246a:	4013      	ands	r3, r2
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	40d9      	lsrs	r1, r3
 8002472:	000b      	movs	r3, r1
}
 8002474:	0018      	movs	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	40021000 	.word	0x40021000
 8002480:	08004534 	.word	0x08004534

08002484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002488:	f7ff ffdc 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 800248c:	0001      	movs	r1, r0
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	0adb      	lsrs	r3, r3, #11
 8002494:	2207      	movs	r2, #7
 8002496:	4013      	ands	r3, r2
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800249a:	5cd3      	ldrb	r3, [r2, r3]
 800249c:	40d9      	lsrs	r1, r3
 800249e:	000b      	movs	r3, r1
}
 80024a0:	0018      	movs	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	40021000 	.word	0x40021000
 80024ac:	08004534 	.word	0x08004534

080024b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e032      	b.n	8002528 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2239      	movs	r2, #57	; 0x39
 80024c6:	5c9b      	ldrb	r3, [r3, r2]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2238      	movs	r2, #56	; 0x38
 80024d2:	2100      	movs	r1, #0
 80024d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0018      	movs	r0, r3
 80024da:	f7fe fa93 	bl	8000a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2239      	movs	r2, #57	; 0x39
 80024e2:	2102      	movs	r1, #2
 80024e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3304      	adds	r3, #4
 80024ee:	0019      	movs	r1, r3
 80024f0:	0010      	movs	r0, r2
 80024f2:	f000 fbcb 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	223e      	movs	r2, #62	; 0x3e
 80024fa:	2101      	movs	r1, #1
 80024fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	223a      	movs	r2, #58	; 0x3a
 8002502:	2101      	movs	r1, #1
 8002504:	5499      	strb	r1, [r3, r2]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	223b      	movs	r2, #59	; 0x3b
 800250a:	2101      	movs	r1, #1
 800250c:	5499      	strb	r1, [r3, r2]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	223c      	movs	r2, #60	; 0x3c
 8002512:	2101      	movs	r1, #1
 8002514:	5499      	strb	r1, [r3, r2]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	223d      	movs	r2, #61	; 0x3d
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2239      	movs	r2, #57	; 0x39
 8002522:	2101      	movs	r1, #1
 8002524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2239      	movs	r2, #57	; 0x39
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d001      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e036      	b.n	80025b6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2239      	movs	r2, #57	; 0x39
 800254c:	2102      	movs	r1, #2
 800254e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2101      	movs	r1, #1
 800255c:	430a      	orrs	r2, r1
 800255e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	05db      	lsls	r3, r3, #23
 8002568:	429a      	cmp	r2, r3
 800256a:	d009      	beq.n	8002580 <HAL_TIM_Base_Start_IT+0x50>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <HAL_TIM_Base_Start_IT+0x90>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_TIM_Base_Start_IT+0x50>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_TIM_Base_Start_IT+0x94>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d111      	bne.n	80025a4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2207      	movs	r2, #7
 8002588:	4013      	ands	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b06      	cmp	r3, #6
 8002590:	d010      	beq.n	80025b4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a2:	e007      	b.n	80025b4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2101      	movs	r1, #1
 80025b0:	430a      	orrs	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b004      	add	sp, #16
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	40010800 	.word	0x40010800
 80025c4:	40011400 	.word	0x40011400

080025c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e032      	b.n	8002640 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2239      	movs	r2, #57	; 0x39
 80025de:	5c9b      	ldrb	r3, [r3, r2]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d107      	bne.n	80025f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2238      	movs	r2, #56	; 0x38
 80025ea:	2100      	movs	r1, #0
 80025ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 f829 	bl	8002648 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2239      	movs	r2, #57	; 0x39
 80025fa:	2102      	movs	r1, #2
 80025fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	0019      	movs	r1, r3
 8002608:	0010      	movs	r0, r2
 800260a:	f000 fb3f 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	223e      	movs	r2, #62	; 0x3e
 8002612:	2101      	movs	r1, #1
 8002614:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	223a      	movs	r2, #58	; 0x3a
 800261a:	2101      	movs	r1, #1
 800261c:	5499      	strb	r1, [r3, r2]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	223b      	movs	r2, #59	; 0x3b
 8002622:	2101      	movs	r1, #1
 8002624:	5499      	strb	r1, [r3, r2]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	223c      	movs	r2, #60	; 0x3c
 800262a:	2101      	movs	r1, #1
 800262c:	5499      	strb	r1, [r3, r2]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	223d      	movs	r2, #61	; 0x3d
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2239      	movs	r2, #57	; 0x39
 800263a:	2101      	movs	r1, #1
 800263c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b002      	add	sp, #8
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d108      	bne.n	800267a <HAL_TIM_PWM_Start+0x22>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	223a      	movs	r2, #58	; 0x3a
 800266c:	5c9b      	ldrb	r3, [r3, r2]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	1e5a      	subs	r2, r3, #1
 8002674:	4193      	sbcs	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	e01f      	b.n	80026ba <HAL_TIM_PWM_Start+0x62>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b04      	cmp	r3, #4
 800267e:	d108      	bne.n	8002692 <HAL_TIM_PWM_Start+0x3a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	223b      	movs	r2, #59	; 0x3b
 8002684:	5c9b      	ldrb	r3, [r3, r2]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	4193      	sbcs	r3, r2
 800268e:	b2db      	uxtb	r3, r3
 8002690:	e013      	b.n	80026ba <HAL_TIM_PWM_Start+0x62>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d108      	bne.n	80026aa <HAL_TIM_PWM_Start+0x52>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	223c      	movs	r2, #60	; 0x3c
 800269c:	5c9b      	ldrb	r3, [r3, r2]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	4193      	sbcs	r3, r2
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	e007      	b.n	80026ba <HAL_TIM_PWM_Start+0x62>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	223d      	movs	r2, #61	; 0x3d
 80026ae:	5c9b      	ldrb	r3, [r3, r2]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	1e5a      	subs	r2, r3, #1
 80026b6:	4193      	sbcs	r3, r2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e04d      	b.n	800275e <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d104      	bne.n	80026d2 <HAL_TIM_PWM_Start+0x7a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	223a      	movs	r2, #58	; 0x3a
 80026cc:	2102      	movs	r1, #2
 80026ce:	5499      	strb	r1, [r3, r2]
 80026d0:	e013      	b.n	80026fa <HAL_TIM_PWM_Start+0xa2>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d104      	bne.n	80026e2 <HAL_TIM_PWM_Start+0x8a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	223b      	movs	r2, #59	; 0x3b
 80026dc:	2102      	movs	r1, #2
 80026de:	5499      	strb	r1, [r3, r2]
 80026e0:	e00b      	b.n	80026fa <HAL_TIM_PWM_Start+0xa2>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d104      	bne.n	80026f2 <HAL_TIM_PWM_Start+0x9a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	223c      	movs	r2, #60	; 0x3c
 80026ec:	2102      	movs	r1, #2
 80026ee:	5499      	strb	r1, [r3, r2]
 80026f0:	e003      	b.n	80026fa <HAL_TIM_PWM_Start+0xa2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	223d      	movs	r2, #61	; 0x3d
 80026f6:	2102      	movs	r1, #2
 80026f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6839      	ldr	r1, [r7, #0]
 8002700:	2201      	movs	r2, #1
 8002702:	0018      	movs	r0, r3
 8002704:	f000 fcb4 	bl	8003070 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	05db      	lsls	r3, r3, #23
 8002710:	429a      	cmp	r2, r3
 8002712:	d009      	beq.n	8002728 <HAL_TIM_PWM_Start+0xd0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_TIM_PWM_Start+0x110>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d004      	beq.n	8002728 <HAL_TIM_PWM_Start+0xd0>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_TIM_PWM_Start+0x114>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d111      	bne.n	800274c <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2207      	movs	r2, #7
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b06      	cmp	r3, #6
 8002738:	d010      	beq.n	800275c <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2101      	movs	r1, #1
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274a:	e007      	b.n	800275c <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2101      	movs	r1, #1
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	40010800 	.word	0x40010800
 800276c:	40011400 	.word	0x40011400

08002770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2202      	movs	r2, #2
 8002780:	4013      	ands	r3, r2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d124      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2202      	movs	r2, #2
 800278e:	4013      	ands	r3, r2
 8002790:	2b02      	cmp	r3, #2
 8002792:	d11d      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2203      	movs	r2, #3
 800279a:	4252      	negs	r2, r2
 800279c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2203      	movs	r2, #3
 80027ac:	4013      	ands	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 fa52 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 80027b8:	e007      	b.n	80027ca <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 fa45 	bl	8002c4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 fa51 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2204      	movs	r2, #4
 80027d8:	4013      	ands	r3, r2
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d125      	bne.n	800282a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2204      	movs	r2, #4
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d11e      	bne.n	800282a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2205      	movs	r2, #5
 80027f2:	4252      	negs	r2, r2
 80027f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	23c0      	movs	r3, #192	; 0xc0
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4013      	ands	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 fa25 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002812:	e007      	b.n	8002824 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	0018      	movs	r0, r3
 8002818:	f000 fa18 	bl	8002c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	0018      	movs	r0, r3
 8002820:	f000 fa24 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2208      	movs	r2, #8
 8002832:	4013      	ands	r3, r2
 8002834:	2b08      	cmp	r3, #8
 8002836:	d124      	bne.n	8002882 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2208      	movs	r2, #8
 8002840:	4013      	ands	r3, r2
 8002842:	2b08      	cmp	r3, #8
 8002844:	d11d      	bne.n	8002882 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2209      	movs	r2, #9
 800284c:	4252      	negs	r2, r2
 800284e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2204      	movs	r2, #4
 8002854:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	2203      	movs	r2, #3
 800285e:	4013      	ands	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	0018      	movs	r0, r3
 8002866:	f000 f9f9 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 800286a:	e007      	b.n	800287c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	0018      	movs	r0, r3
 8002870:	f000 f9ec 	bl	8002c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f9f8 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2210      	movs	r2, #16
 800288a:	4013      	ands	r3, r2
 800288c:	2b10      	cmp	r3, #16
 800288e:	d125      	bne.n	80028dc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2210      	movs	r2, #16
 8002898:	4013      	ands	r3, r2
 800289a:	2b10      	cmp	r3, #16
 800289c:	d11e      	bne.n	80028dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2211      	movs	r2, #17
 80028a4:	4252      	negs	r2, r2
 80028a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2208      	movs	r2, #8
 80028ac:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69da      	ldr	r2, [r3, #28]
 80028b4:	23c0      	movs	r3, #192	; 0xc0
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 f9cc 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 80028c4:	e007      	b.n	80028d6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 f9bf 	bl	8002c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 f9cb 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2201      	movs	r2, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10f      	bne.n	800290a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d108      	bne.n	800290a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2202      	movs	r2, #2
 80028fe:	4252      	negs	r2, r2
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f7fd fff5 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2240      	movs	r2, #64	; 0x40
 8002912:	4013      	ands	r3, r2
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d10f      	bne.n	8002938 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2240      	movs	r2, #64	; 0x40
 8002920:	4013      	ands	r3, r2
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d108      	bne.n	8002938 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2241      	movs	r2, #65	; 0x41
 800292c:	4252      	negs	r2, r2
 800292e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f9a2 	bl	8002c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2238      	movs	r2, #56	; 0x38
 8002950:	5c9b      	ldrb	r3, [r3, r2]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002956:	2302      	movs	r3, #2
 8002958:	e0a7      	b.n	8002aaa <HAL_TIM_PWM_ConfigChannel+0x16a>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2238      	movs	r2, #56	; 0x38
 800295e:	2101      	movs	r1, #1
 8002960:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0c      	cmp	r3, #12
 8002966:	d100      	bne.n	800296a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002968:	e076      	b.n	8002a58 <HAL_TIM_PWM_ConfigChannel+0x118>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b0c      	cmp	r3, #12
 800296e:	d900      	bls.n	8002972 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002970:	e095      	b.n	8002a9e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d04e      	beq.n	8002a16 <HAL_TIM_PWM_ConfigChannel+0xd6>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b08      	cmp	r3, #8
 800297c:	d900      	bls.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x40>
 800297e:	e08e      	b.n	8002a9e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d021      	beq.n	80029d0 <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800298c:	e087      	b.n	8002a9e <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	0011      	movs	r1, r2
 8002996:	0018      	movs	r0, r3
 8002998:	f000 f9cc 	bl	8002d34 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2108      	movs	r1, #8
 80029a8:	430a      	orrs	r2, r1
 80029aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2104      	movs	r1, #4
 80029b8:	438a      	bics	r2, r1
 80029ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6999      	ldr	r1, [r3, #24]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	619a      	str	r2, [r3, #24]
      break;
 80029ce:	e067      	b.n	8002aa0 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	0011      	movs	r1, r2
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 f9e7 	bl	8002dac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	0109      	lsls	r1, r1, #4
 80029ec:	430a      	orrs	r2, r1
 80029ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	492e      	ldr	r1, [pc, #184]	; (8002ab4 <HAL_TIM_PWM_ConfigChannel+0x174>)
 80029fc:	400a      	ands	r2, r1
 80029fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6999      	ldr	r1, [r3, #24]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	619a      	str	r2, [r3, #24]
      break;
 8002a14:	e044      	b.n	8002aa0 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	0011      	movs	r1, r2
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 fa06 	bl	8002e30 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2108      	movs	r1, #8
 8002a30:	430a      	orrs	r2, r1
 8002a32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2104      	movs	r1, #4
 8002a40:	438a      	bics	r2, r1
 8002a42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69d9      	ldr	r1, [r3, #28]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	61da      	str	r2, [r3, #28]
      break;
 8002a56:	e023      	b.n	8002aa0 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	0011      	movs	r1, r2
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 fa25 	bl	8002eb0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	0109      	lsls	r1, r1, #4
 8002a74:	430a      	orrs	r2, r1
 8002a76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	490c      	ldr	r1, [pc, #48]	; (8002ab4 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69d9      	ldr	r1, [r3, #28]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	021a      	lsls	r2, r3, #8
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	61da      	str	r2, [r3, #28]
      break;
 8002a9c:	e000      	b.n	8002aa0 <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 8002a9e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2238      	movs	r2, #56	; 0x38
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b004      	add	sp, #16
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	fffffbff 	.word	0xfffffbff

08002ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2238      	movs	r2, #56	; 0x38
 8002ac6:	5c9b      	ldrb	r3, [r3, r2]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_TIM_ConfigClockSource+0x18>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e0b7      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x188>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2238      	movs	r2, #56	; 0x38
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2239      	movs	r2, #57	; 0x39
 8002adc:	2102      	movs	r1, #2
 8002ade:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2277      	movs	r2, #119	; 0x77
 8002aec:	4393      	bics	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4a55      	ldr	r2, [pc, #340]	; (8002c48 <HAL_TIM_ConfigClockSource+0x190>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	0192      	lsls	r2, r2, #6
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d040      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xd6>
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	0192      	lsls	r2, r2, #6
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d900      	bls.n	8002b16 <HAL_TIM_ConfigClockSource+0x5e>
 8002b14:	e088      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x170>
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	0152      	lsls	r2, r2, #5
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d100      	bne.n	8002b20 <HAL_TIM_ConfigClockSource+0x68>
 8002b1e:	e085      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x174>
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	0152      	lsls	r2, r2, #5
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d900      	bls.n	8002b2a <HAL_TIM_ConfigClockSource+0x72>
 8002b28:	e07e      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x170>
 8002b2a:	2b70      	cmp	r3, #112	; 0x70
 8002b2c:	d018      	beq.n	8002b60 <HAL_TIM_ConfigClockSource+0xa8>
 8002b2e:	d900      	bls.n	8002b32 <HAL_TIM_ConfigClockSource+0x7a>
 8002b30:	e07a      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x170>
 8002b32:	2b60      	cmp	r3, #96	; 0x60
 8002b34:	d04f      	beq.n	8002bd6 <HAL_TIM_ConfigClockSource+0x11e>
 8002b36:	d900      	bls.n	8002b3a <HAL_TIM_ConfigClockSource+0x82>
 8002b38:	e076      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x170>
 8002b3a:	2b50      	cmp	r3, #80	; 0x50
 8002b3c:	d03b      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0xfe>
 8002b3e:	d900      	bls.n	8002b42 <HAL_TIM_ConfigClockSource+0x8a>
 8002b40:	e072      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x170>
 8002b42:	2b40      	cmp	r3, #64	; 0x40
 8002b44:	d057      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x13e>
 8002b46:	d900      	bls.n	8002b4a <HAL_TIM_ConfigClockSource+0x92>
 8002b48:	e06e      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x170>
 8002b4a:	2b30      	cmp	r3, #48	; 0x30
 8002b4c:	d063      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x15e>
 8002b4e:	d86b      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x170>
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d060      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x15e>
 8002b54:	d868      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x170>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d05d      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x15e>
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d05b      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b5e:	e063      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6899      	ldr	r1, [r3, #8]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f000 fa5e 	bl	8003030 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2277      	movs	r2, #119	; 0x77
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]
      break;
 8002b8c:	e04f      	b.n	8002c2e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6899      	ldr	r1, [r3, #8]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f000 fa47 	bl	8003030 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	01c9      	lsls	r1, r1, #7
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	609a      	str	r2, [r3, #8]
      break;
 8002bb4:	e03b      	b.n	8002c2e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	f000 f9ba 	bl	8002f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2150      	movs	r1, #80	; 0x50
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 fa14 	bl	8002ffc <TIM_ITRx_SetConfig>
      break;
 8002bd4:	e02b      	b.n	8002c2e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6859      	ldr	r1, [r3, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	001a      	movs	r2, r3
 8002be4:	f000 f9d8 	bl	8002f98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2160      	movs	r1, #96	; 0x60
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fa04 	bl	8002ffc <TIM_ITRx_SetConfig>
      break;
 8002bf4:	e01b      	b.n	8002c2e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6859      	ldr	r1, [r3, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	001a      	movs	r2, r3
 8002c04:	f000 f99a 	bl	8002f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2140      	movs	r1, #64	; 0x40
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 f9f4 	bl	8002ffc <TIM_ITRx_SetConfig>
      break;
 8002c14:	e00b      	b.n	8002c2e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0019      	movs	r1, r3
 8002c20:	0010      	movs	r0, r2
 8002c22:	f000 f9eb 	bl	8002ffc <TIM_ITRx_SetConfig>
        break;
 8002c26:	e002      	b.n	8002c2e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	e000      	b.n	8002c2e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002c2c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2239      	movs	r2, #57	; 0x39
 8002c32:	2101      	movs	r1, #1
 8002c34:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2238      	movs	r2, #56	; 0x38
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b004      	add	sp, #16
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	ffff00ff 	.word	0xffff00ff

08002c4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b002      	add	sp, #8
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	05db      	lsls	r3, r3, #23
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d007      	beq.n	8002cb6 <TIM_Base_SetConfig+0x2a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <TIM_Base_SetConfig+0x9c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_Base_SetConfig+0x2a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <TIM_Base_SetConfig+0xa0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d108      	bne.n	8002cc8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2270      	movs	r2, #112	; 0x70
 8002cba:	4393      	bics	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	05db      	lsls	r3, r3, #23
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d007      	beq.n	8002ce2 <TIM_Base_SetConfig+0x56>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <TIM_Base_SetConfig+0x9c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d003      	beq.n	8002ce2 <TIM_Base_SetConfig+0x56>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <TIM_Base_SetConfig+0xa0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d108      	bne.n	8002cf4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a12      	ldr	r2, [pc, #72]	; (8002d30 <TIM_Base_SetConfig+0xa4>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	4393      	bics	r3, r2
 8002cfa:	001a      	movs	r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	615a      	str	r2, [r3, #20]
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b004      	add	sp, #16
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40010800 	.word	0x40010800
 8002d2c:	40011400 	.word	0x40011400
 8002d30:	fffffcff 	.word	0xfffffcff

08002d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	2201      	movs	r2, #1
 8002d44:	4393      	bics	r3, r2
 8002d46:	001a      	movs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2270      	movs	r2, #112	; 0x70
 8002d62:	4393      	bics	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2203      	movs	r2, #3
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	621a      	str	r2, [r3, #32]
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b006      	add	sp, #24
 8002daa:	bd80      	pop	{r7, pc}

08002dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	2210      	movs	r2, #16
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	001a      	movs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <TIM_OC2_SetConfig+0x7c>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <TIM_OC2_SetConfig+0x80>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2220      	movs	r2, #32
 8002df6:	4393      	bics	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	621a      	str	r2, [r3, #32]
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b006      	add	sp, #24
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	ffff8fff 	.word	0xffff8fff
 8002e2c:	fffffcff 	.word	0xfffffcff

08002e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <TIM_OC3_SetConfig+0x78>)
 8002e40:	401a      	ands	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2270      	movs	r2, #112	; 0x70
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2203      	movs	r2, #3
 8002e64:	4393      	bics	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <TIM_OC3_SetConfig+0x7c>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	621a      	str	r2, [r3, #32]
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b006      	add	sp, #24
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	fffffeff 	.word	0xfffffeff
 8002eac:	fffffdff 	.word	0xfffffdff

08002eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <TIM_OC4_SetConfig+0x7c>)
 8002ec0:	401a      	ands	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <TIM_OC4_SetConfig+0x80>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <TIM_OC4_SetConfig+0x84>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <TIM_OC4_SetConfig+0x88>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	031b      	lsls	r3, r3, #12
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	621a      	str	r2, [r3, #32]
}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b006      	add	sp, #24
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	ffffefff 	.word	0xffffefff
 8002f30:	ffff8fff 	.word	0xffff8fff
 8002f34:	fffffcff 	.word	0xfffffcff
 8002f38:	ffffdfff 	.word	0xffffdfff

08002f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	2201      	movs	r2, #1
 8002f54:	4393      	bics	r3, r2
 8002f56:	001a      	movs	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	22f0      	movs	r2, #240	; 0xf0
 8002f66:	4393      	bics	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	220a      	movs	r2, #10
 8002f78:	4393      	bics	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	621a      	str	r2, [r3, #32]
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b006      	add	sp, #24
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	2210      	movs	r2, #16
 8002faa:	4393      	bics	r3, r2
 8002fac:	001a      	movs	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <TIM_TI2_ConfigInputStage+0x60>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	031b      	lsls	r3, r3, #12
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	22a0      	movs	r2, #160	; 0xa0
 8002fd4:	4393      	bics	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	621a      	str	r2, [r3, #32]
}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b006      	add	sp, #24
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	ffff0fff 	.word	0xffff0fff

08002ffc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2270      	movs	r2, #112	; 0x70
 8003010:	4393      	bics	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	2207      	movs	r2, #7
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	609a      	str	r2, [r3, #8]
}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	b004      	add	sp, #16
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <TIM_ETR_SetConfig+0x3c>)
 8003048:	4013      	ands	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	021a      	lsls	r2, r3, #8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	431a      	orrs	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b006      	add	sp, #24
 800306a:	bd80      	pop	{r7, pc}
 800306c:	ffff00ff 	.word	0xffff00ff

08003070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	221f      	movs	r2, #31
 8003080:	4013      	ands	r3, r2
 8003082:	2201      	movs	r2, #1
 8003084:	409a      	lsls	r2, r3
 8003086:	0013      	movs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	43d2      	mvns	r2, r2
 8003092:	401a      	ands	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	211f      	movs	r1, #31
 80030a0:	400b      	ands	r3, r1
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4099      	lsls	r1, r3
 80030a6:	000b      	movs	r3, r1
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b006      	add	sp, #24
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2238      	movs	r2, #56	; 0x38
 80030c6:	5c9b      	ldrb	r3, [r3, r2]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e042      	b.n	8003156 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2238      	movs	r2, #56	; 0x38
 80030d4:	2101      	movs	r1, #1
 80030d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2239      	movs	r2, #57	; 0x39
 80030dc:	2102      	movs	r1, #2
 80030de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2270      	movs	r2, #112	; 0x70
 80030f4:	4393      	bics	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	05db      	lsls	r3, r3, #23
 8003112:	429a      	cmp	r2, r3
 8003114:	d009      	beq.n	800312a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a11      	ldr	r2, [pc, #68]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d004      	beq.n	800312a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0f      	ldr	r2, [pc, #60]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10c      	bne.n	8003144 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2280      	movs	r2, #128	; 0x80
 800312e:	4393      	bics	r3, r2
 8003130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	4313      	orrs	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2239      	movs	r2, #57	; 0x39
 8003148:	2101      	movs	r1, #1
 800314a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2238      	movs	r2, #56	; 0x38
 8003150:	2100      	movs	r1, #0
 8003152:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	0018      	movs	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	b004      	add	sp, #16
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	40010800 	.word	0x40010800
 8003164:	40011400 	.word	0x40011400

08003168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e044      	b.n	8003204 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2274      	movs	r2, #116	; 0x74
 8003186:	2100      	movs	r1, #0
 8003188:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	0018      	movs	r0, r3
 800318e:	f7fd fc93 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2224      	movs	r2, #36	; 0x24
 8003196:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2101      	movs	r1, #1
 80031a4:	438a      	bics	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 f8d8 	bl	8003360 <UART_SetConfig>
 80031b0:	0003      	movs	r3, r0
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e024      	b.n	8003204 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 fb2d 	bl	8003824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	490d      	ldr	r1, [pc, #52]	; (800320c <HAL_UART_Init+0xa4>)
 80031d6:	400a      	ands	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	212a      	movs	r1, #42	; 0x2a
 80031e6:	438a      	bics	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2101      	movs	r1, #1
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f000 fbc5 	bl	800398c <UART_CheckIdleState>
 8003202:	0003      	movs	r3, r0
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b002      	add	sp, #8
 800320a:	bd80      	pop	{r7, pc}
 800320c:	ffffb7ff 	.word	0xffffb7ff

08003210 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	1dbb      	adds	r3, r7, #6
 800321e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003224:	2b20      	cmp	r3, #32
 8003226:	d000      	beq.n	800322a <HAL_UART_Transmit+0x1a>
 8003228:	e095      	b.n	8003356 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_UART_Transmit+0x28>
 8003230:	1dbb      	adds	r3, r7, #6
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e08d      	b.n	8003358 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	015b      	lsls	r3, r3, #5
 8003244:	429a      	cmp	r2, r3
 8003246:	d109      	bne.n	800325c <HAL_UART_Transmit+0x4c>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2201      	movs	r2, #1
 8003254:	4013      	ands	r3, r2
 8003256:	d001      	beq.n	800325c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e07d      	b.n	8003358 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2274      	movs	r2, #116	; 0x74
 8003260:	5c9b      	ldrb	r3, [r3, r2]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_UART_Transmit+0x5a>
 8003266:	2302      	movs	r3, #2
 8003268:	e076      	b.n	8003358 <HAL_UART_Transmit+0x148>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2274      	movs	r2, #116	; 0x74
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2280      	movs	r2, #128	; 0x80
 8003276:	2100      	movs	r1, #0
 8003278:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2221      	movs	r2, #33	; 0x21
 800327e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003280:	f7fd fda2 	bl	8000dc8 <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1dba      	adds	r2, r7, #6
 800328c:	2150      	movs	r1, #80	; 0x50
 800328e:	8812      	ldrh	r2, [r2, #0]
 8003290:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1dba      	adds	r2, r7, #6
 8003296:	2152      	movs	r1, #82	; 0x52
 8003298:	8812      	ldrh	r2, [r2, #0]
 800329a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	015b      	lsls	r3, r3, #5
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d108      	bne.n	80032ba <HAL_UART_Transmit+0xaa>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	e003      	b.n	80032c2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2274      	movs	r2, #116	; 0x74
 80032c6:	2100      	movs	r1, #0
 80032c8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80032ca:	e02c      	b.n	8003326 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	0013      	movs	r3, r2
 80032d6:	2200      	movs	r2, #0
 80032d8:	2180      	movs	r1, #128	; 0x80
 80032da:	f000 fb9f 	bl	8003a1c <UART_WaitOnFlagUntilTimeout>
 80032de:	1e03      	subs	r3, r0, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e038      	b.n	8003358 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	001a      	movs	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	05d2      	lsls	r2, r2, #23
 80032f8:	0dd2      	lsrs	r2, r2, #23
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	3302      	adds	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e007      	b.n	8003314 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	781a      	ldrb	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3301      	adds	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2252      	movs	r2, #82	; 0x52
 8003318:	5a9b      	ldrh	r3, [r3, r2]
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b299      	uxth	r1, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2252      	movs	r2, #82	; 0x52
 8003324:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2252      	movs	r2, #82	; 0x52
 800332a:	5a9b      	ldrh	r3, [r3, r2]
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1cc      	bne.n	80032cc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	0013      	movs	r3, r2
 800333c:	2200      	movs	r2, #0
 800333e:	2140      	movs	r1, #64	; 0x40
 8003340:	f000 fb6c 	bl	8003a1c <UART_WaitOnFlagUntilTimeout>
 8003344:	1e03      	subs	r3, r0, #0
 8003346:	d001      	beq.n	800334c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e005      	b.n	8003358 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
  }
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b008      	add	sp, #32
 800335e:	bd80      	pop	{r7, pc}

08003360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003360:	b5b0      	push	{r4, r5, r7, lr}
 8003362:	b08e      	sub	sp, #56	; 0x38
 8003364:	af00      	add	r7, sp, #0
 8003366:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003368:	231a      	movs	r3, #26
 800336a:	2218      	movs	r2, #24
 800336c:	4694      	mov	ip, r2
 800336e:	44bc      	add	ip, r7
 8003370:	4463      	add	r3, ip
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	431a      	orrs	r2, r3
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	431a      	orrs	r2, r3
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4313      	orrs	r3, r2
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4abc      	ldr	r2, [pc, #752]	; (8003688 <UART_SetConfig+0x328>)
 8003396:	4013      	ands	r3, r2
 8003398:	0019      	movs	r1, r3
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4ab8      	ldr	r2, [pc, #736]	; (800368c <UART_SetConfig+0x32c>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4ab2      	ldr	r2, [pc, #712]	; (8003690 <UART_SetConfig+0x330>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033d2:	4313      	orrs	r3, r2
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4aad      	ldr	r2, [pc, #692]	; (8003694 <UART_SetConfig+0x334>)
 80033de:	4013      	ands	r3, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033e8:	430a      	orrs	r2, r1
 80033ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4aa9      	ldr	r2, [pc, #676]	; (8003698 <UART_SetConfig+0x338>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d136      	bne.n	8003464 <UART_SetConfig+0x104>
 80033f6:	4ba9      	ldr	r3, [pc, #676]	; (800369c <UART_SetConfig+0x33c>)
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	220c      	movs	r2, #12
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d020      	beq.n	8003444 <UART_SetConfig+0xe4>
 8003402:	d827      	bhi.n	8003454 <UART_SetConfig+0xf4>
 8003404:	2b08      	cmp	r3, #8
 8003406:	d00d      	beq.n	8003424 <UART_SetConfig+0xc4>
 8003408:	d824      	bhi.n	8003454 <UART_SetConfig+0xf4>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <UART_SetConfig+0xb4>
 800340e:	2b04      	cmp	r3, #4
 8003410:	d010      	beq.n	8003434 <UART_SetConfig+0xd4>
 8003412:	e01f      	b.n	8003454 <UART_SetConfig+0xf4>
 8003414:	231b      	movs	r3, #27
 8003416:	2218      	movs	r2, #24
 8003418:	4694      	mov	ip, r2
 800341a:	44bc      	add	ip, r7
 800341c:	4463      	add	r3, ip
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e06f      	b.n	8003504 <UART_SetConfig+0x1a4>
 8003424:	231b      	movs	r3, #27
 8003426:	2218      	movs	r2, #24
 8003428:	4694      	mov	ip, r2
 800342a:	44bc      	add	ip, r7
 800342c:	4463      	add	r3, ip
 800342e:	2202      	movs	r2, #2
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	e067      	b.n	8003504 <UART_SetConfig+0x1a4>
 8003434:	231b      	movs	r3, #27
 8003436:	2218      	movs	r2, #24
 8003438:	4694      	mov	ip, r2
 800343a:	44bc      	add	ip, r7
 800343c:	4463      	add	r3, ip
 800343e:	2204      	movs	r2, #4
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	e05f      	b.n	8003504 <UART_SetConfig+0x1a4>
 8003444:	231b      	movs	r3, #27
 8003446:	2218      	movs	r2, #24
 8003448:	4694      	mov	ip, r2
 800344a:	44bc      	add	ip, r7
 800344c:	4463      	add	r3, ip
 800344e:	2208      	movs	r2, #8
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e057      	b.n	8003504 <UART_SetConfig+0x1a4>
 8003454:	231b      	movs	r3, #27
 8003456:	2218      	movs	r2, #24
 8003458:	4694      	mov	ip, r2
 800345a:	44bc      	add	ip, r7
 800345c:	4463      	add	r3, ip
 800345e:	2210      	movs	r2, #16
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	e04f      	b.n	8003504 <UART_SetConfig+0x1a4>
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a89      	ldr	r2, [pc, #548]	; (8003690 <UART_SetConfig+0x330>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d143      	bne.n	80034f6 <UART_SetConfig+0x196>
 800346e:	4b8b      	ldr	r3, [pc, #556]	; (800369c <UART_SetConfig+0x33c>)
 8003470:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003472:	23c0      	movs	r3, #192	; 0xc0
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	4013      	ands	r3, r2
 8003478:	22c0      	movs	r2, #192	; 0xc0
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	4293      	cmp	r3, r2
 800347e:	d02a      	beq.n	80034d6 <UART_SetConfig+0x176>
 8003480:	22c0      	movs	r2, #192	; 0xc0
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	4293      	cmp	r3, r2
 8003486:	d82e      	bhi.n	80034e6 <UART_SetConfig+0x186>
 8003488:	2280      	movs	r2, #128	; 0x80
 800348a:	0112      	lsls	r2, r2, #4
 800348c:	4293      	cmp	r3, r2
 800348e:	d012      	beq.n	80034b6 <UART_SetConfig+0x156>
 8003490:	2280      	movs	r2, #128	; 0x80
 8003492:	0112      	lsls	r2, r2, #4
 8003494:	4293      	cmp	r3, r2
 8003496:	d826      	bhi.n	80034e6 <UART_SetConfig+0x186>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d004      	beq.n	80034a6 <UART_SetConfig+0x146>
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	00d2      	lsls	r2, r2, #3
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d010      	beq.n	80034c6 <UART_SetConfig+0x166>
 80034a4:	e01f      	b.n	80034e6 <UART_SetConfig+0x186>
 80034a6:	231b      	movs	r3, #27
 80034a8:	2218      	movs	r2, #24
 80034aa:	4694      	mov	ip, r2
 80034ac:	44bc      	add	ip, r7
 80034ae:	4463      	add	r3, ip
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e026      	b.n	8003504 <UART_SetConfig+0x1a4>
 80034b6:	231b      	movs	r3, #27
 80034b8:	2218      	movs	r2, #24
 80034ba:	4694      	mov	ip, r2
 80034bc:	44bc      	add	ip, r7
 80034be:	4463      	add	r3, ip
 80034c0:	2202      	movs	r2, #2
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e01e      	b.n	8003504 <UART_SetConfig+0x1a4>
 80034c6:	231b      	movs	r3, #27
 80034c8:	2218      	movs	r2, #24
 80034ca:	4694      	mov	ip, r2
 80034cc:	44bc      	add	ip, r7
 80034ce:	4463      	add	r3, ip
 80034d0:	2204      	movs	r2, #4
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	e016      	b.n	8003504 <UART_SetConfig+0x1a4>
 80034d6:	231b      	movs	r3, #27
 80034d8:	2218      	movs	r2, #24
 80034da:	4694      	mov	ip, r2
 80034dc:	44bc      	add	ip, r7
 80034de:	4463      	add	r3, ip
 80034e0:	2208      	movs	r2, #8
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	e00e      	b.n	8003504 <UART_SetConfig+0x1a4>
 80034e6:	231b      	movs	r3, #27
 80034e8:	2218      	movs	r2, #24
 80034ea:	4694      	mov	ip, r2
 80034ec:	44bc      	add	ip, r7
 80034ee:	4463      	add	r3, ip
 80034f0:	2210      	movs	r2, #16
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	e006      	b.n	8003504 <UART_SetConfig+0x1a4>
 80034f6:	231b      	movs	r3, #27
 80034f8:	2218      	movs	r2, #24
 80034fa:	4694      	mov	ip, r2
 80034fc:	44bc      	add	ip, r7
 80034fe:	4463      	add	r3, ip
 8003500:	2210      	movs	r2, #16
 8003502:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a61      	ldr	r2, [pc, #388]	; (8003690 <UART_SetConfig+0x330>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d000      	beq.n	8003510 <UART_SetConfig+0x1b0>
 800350e:	e088      	b.n	8003622 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003510:	231b      	movs	r3, #27
 8003512:	2218      	movs	r2, #24
 8003514:	4694      	mov	ip, r2
 8003516:	44bc      	add	ip, r7
 8003518:	4463      	add	r3, ip
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d01d      	beq.n	800355c <UART_SetConfig+0x1fc>
 8003520:	dc20      	bgt.n	8003564 <UART_SetConfig+0x204>
 8003522:	2b04      	cmp	r3, #4
 8003524:	d015      	beq.n	8003552 <UART_SetConfig+0x1f2>
 8003526:	dc1d      	bgt.n	8003564 <UART_SetConfig+0x204>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <UART_SetConfig+0x1d2>
 800352c:	2b02      	cmp	r3, #2
 800352e:	d005      	beq.n	800353c <UART_SetConfig+0x1dc>
 8003530:	e018      	b.n	8003564 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003532:	f7fe ff91 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8003536:	0003      	movs	r3, r0
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800353a:	e01d      	b.n	8003578 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800353c:	4b57      	ldr	r3, [pc, #348]	; (800369c <UART_SetConfig+0x33c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2210      	movs	r2, #16
 8003542:	4013      	ands	r3, r2
 8003544:	d002      	beq.n	800354c <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003546:	4b56      	ldr	r3, [pc, #344]	; (80036a0 <UART_SetConfig+0x340>)
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800354a:	e015      	b.n	8003578 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 800354c:	4b55      	ldr	r3, [pc, #340]	; (80036a4 <UART_SetConfig+0x344>)
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003550:	e012      	b.n	8003578 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003552:	f7fe fed1 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8003556:	0003      	movs	r3, r0
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800355a:	e00d      	b.n	8003578 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003562:	e009      	b.n	8003578 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003568:	231a      	movs	r3, #26
 800356a:	2218      	movs	r2, #24
 800356c:	4694      	mov	ip, r2
 800356e:	44bc      	add	ip, r7
 8003570:	4463      	add	r3, ip
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
        break;
 8003576:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d100      	bne.n	8003580 <UART_SetConfig+0x220>
 800357e:	e139      	b.n	80037f4 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	0013      	movs	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	189b      	adds	r3, r3, r2
 800358a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800358c:	429a      	cmp	r2, r3
 800358e:	d305      	bcc.n	800359c <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003598:	429a      	cmp	r2, r3
 800359a:	d907      	bls.n	80035ac <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 800359c:	231a      	movs	r3, #26
 800359e:	2218      	movs	r2, #24
 80035a0:	4694      	mov	ip, r2
 80035a2:	44bc      	add	ip, r7
 80035a4:	4463      	add	r3, ip
 80035a6:	2201      	movs	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	e123      	b.n	80037f4 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	6939      	ldr	r1, [r7, #16]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	000b      	movs	r3, r1
 80035ba:	0e1b      	lsrs	r3, r3, #24
 80035bc:	0010      	movs	r0, r2
 80035be:	0205      	lsls	r5, r0, #8
 80035c0:	431d      	orrs	r5, r3
 80035c2:	000b      	movs	r3, r1
 80035c4:	021c      	lsls	r4, r3, #8
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68b8      	ldr	r0, [r7, #8]
 80035d4:	68f9      	ldr	r1, [r7, #12]
 80035d6:	1900      	adds	r0, r0, r4
 80035d8:	4169      	adcs	r1, r5
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	2300      	movs	r3, #0
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f7fc fe2c 	bl	8000244 <__aeabi_uldivmod>
 80035ec:	0002      	movs	r2, r0
 80035ee:	000b      	movs	r3, r1
 80035f0:	0013      	movs	r3, r2
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f6:	23c0      	movs	r3, #192	; 0xc0
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d309      	bcc.n	8003612 <UART_SetConfig+0x2b2>
 80035fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	035b      	lsls	r3, r3, #13
 8003604:	429a      	cmp	r2, r3
 8003606:	d204      	bcs.n	8003612 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800360e:	60da      	str	r2, [r3, #12]
 8003610:	e0f0      	b.n	80037f4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003612:	231a      	movs	r3, #26
 8003614:	2218      	movs	r2, #24
 8003616:	4694      	mov	ip, r2
 8003618:	44bc      	add	ip, r7
 800361a:	4463      	add	r3, ip
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	e0e8      	b.n	80037f4 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	429a      	cmp	r2, r3
 800362c:	d000      	beq.n	8003630 <UART_SetConfig+0x2d0>
 800362e:	e087      	b.n	8003740 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8003630:	231b      	movs	r3, #27
 8003632:	2218      	movs	r2, #24
 8003634:	4694      	mov	ip, r2
 8003636:	44bc      	add	ip, r7
 8003638:	4463      	add	r3, ip
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d835      	bhi.n	80036ac <UART_SetConfig+0x34c>
 8003640:	009a      	lsls	r2, r3, #2
 8003642:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <UART_SetConfig+0x348>)
 8003644:	18d3      	adds	r3, r2, r3
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800364a:	f7fe ff05 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 800364e:	0003      	movs	r3, r0
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003652:	e035      	b.n	80036c0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003654:	f7fe ff16 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8003658:	0003      	movs	r3, r0
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800365c:	e030      	b.n	80036c0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800365e:	4b0f      	ldr	r3, [pc, #60]	; (800369c <UART_SetConfig+0x33c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2210      	movs	r2, #16
 8003664:	4013      	ands	r3, r2
 8003666:	d002      	beq.n	800366e <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <UART_SetConfig+0x340>)
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800366c:	e028      	b.n	80036c0 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <UART_SetConfig+0x344>)
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003672:	e025      	b.n	80036c0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003674:	f7fe fe40 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8003678:	0003      	movs	r3, r0
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800367c:	e020      	b.n	80036c0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003684:	e01c      	b.n	80036c0 <UART_SetConfig+0x360>
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	efff69f3 	.word	0xefff69f3
 800368c:	ffffcfff 	.word	0xffffcfff
 8003690:	40004800 	.word	0x40004800
 8003694:	fffff4ff 	.word	0xfffff4ff
 8003698:	40004400 	.word	0x40004400
 800369c:	40021000 	.word	0x40021000
 80036a0:	003d0900 	.word	0x003d0900
 80036a4:	00f42400 	.word	0x00f42400
 80036a8:	08004548 	.word	0x08004548
      default:
        pclk = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80036b0:	231a      	movs	r3, #26
 80036b2:	2218      	movs	r2, #24
 80036b4:	4694      	mov	ip, r2
 80036b6:	44bc      	add	ip, r7
 80036b8:	4463      	add	r3, ip
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
        break;
 80036be:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d100      	bne.n	80036c8 <UART_SetConfig+0x368>
 80036c6:	e095      	b.n	80037f4 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	005a      	lsls	r2, r3, #1
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	18d2      	adds	r2, r2, r3
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	0019      	movs	r1, r3
 80036da:	0010      	movs	r0, r2
 80036dc:	f7fc fd26 	bl	800012c <__udivsi3>
 80036e0:	0003      	movs	r3, r0
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	2b0f      	cmp	r3, #15
 80036ea:	d921      	bls.n	8003730 <UART_SetConfig+0x3d0>
 80036ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	025b      	lsls	r3, r3, #9
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d21c      	bcs.n	8003730 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	200e      	movs	r0, #14
 80036fc:	2418      	movs	r4, #24
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	181b      	adds	r3, r3, r0
 8003702:	210f      	movs	r1, #15
 8003704:	438a      	bics	r2, r1
 8003706:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	b29b      	uxth	r3, r3
 800370e:	2207      	movs	r2, #7
 8003710:	4013      	ands	r3, r2
 8003712:	b299      	uxth	r1, r3
 8003714:	193b      	adds	r3, r7, r4
 8003716:	181b      	adds	r3, r3, r0
 8003718:	193a      	adds	r2, r7, r4
 800371a:	1812      	adds	r2, r2, r0
 800371c:	8812      	ldrh	r2, [r2, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	193a      	adds	r2, r7, r4
 8003728:	1812      	adds	r2, r2, r0
 800372a:	8812      	ldrh	r2, [r2, #0]
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	e061      	b.n	80037f4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003730:	231a      	movs	r3, #26
 8003732:	2218      	movs	r2, #24
 8003734:	4694      	mov	ip, r2
 8003736:	44bc      	add	ip, r7
 8003738:	4463      	add	r3, ip
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e059      	b.n	80037f4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003740:	231b      	movs	r3, #27
 8003742:	2218      	movs	r2, #24
 8003744:	4694      	mov	ip, r2
 8003746:	44bc      	add	ip, r7
 8003748:	4463      	add	r3, ip
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d822      	bhi.n	8003796 <UART_SetConfig+0x436>
 8003750:	009a      	lsls	r2, r3, #2
 8003752:	4b30      	ldr	r3, [pc, #192]	; (8003814 <UART_SetConfig+0x4b4>)
 8003754:	18d3      	adds	r3, r2, r3
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375a:	f7fe fe7d 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 800375e:	0003      	movs	r3, r0
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003762:	e022      	b.n	80037aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003764:	f7fe fe8e 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8003768:	0003      	movs	r3, r0
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800376c:	e01d      	b.n	80037aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800376e:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <UART_SetConfig+0x4b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2210      	movs	r2, #16
 8003774:	4013      	ands	r3, r2
 8003776:	d002      	beq.n	800377e <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003778:	4b28      	ldr	r3, [pc, #160]	; (800381c <UART_SetConfig+0x4bc>)
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800377c:	e015      	b.n	80037aa <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 800377e:	4b28      	ldr	r3, [pc, #160]	; (8003820 <UART_SetConfig+0x4c0>)
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003782:	e012      	b.n	80037aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003784:	f7fe fdb8 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8003788:	0003      	movs	r3, r0
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800378c:	e00d      	b.n	80037aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003794:	e009      	b.n	80037aa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800379a:	231a      	movs	r3, #26
 800379c:	2218      	movs	r2, #24
 800379e:	4694      	mov	ip, r2
 80037a0:	44bc      	add	ip, r7
 80037a2:	4463      	add	r3, ip
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
        break;
 80037a8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d021      	beq.n	80037f4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	085a      	lsrs	r2, r3, #1
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	18d2      	adds	r2, r2, r3
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	0019      	movs	r1, r3
 80037c0:	0010      	movs	r0, r2
 80037c2:	f7fc fcb3 	bl	800012c <__udivsi3>
 80037c6:	0003      	movs	r3, r0
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	2b0f      	cmp	r3, #15
 80037d0:	d909      	bls.n	80037e6 <UART_SetConfig+0x486>
 80037d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	025b      	lsls	r3, r3, #9
 80037d8:	429a      	cmp	r2, r3
 80037da:	d204      	bcs.n	80037e6 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e2:	60da      	str	r2, [r3, #12]
 80037e4:	e006      	b.n	80037f4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80037e6:	231a      	movs	r3, #26
 80037e8:	2218      	movs	r2, #24
 80037ea:	4694      	mov	ip, r2
 80037ec:	44bc      	add	ip, r7
 80037ee:	4463      	add	r3, ip
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2200      	movs	r2, #0
 80037f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	2200      	movs	r2, #0
 80037fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003800:	231a      	movs	r3, #26
 8003802:	2218      	movs	r2, #24
 8003804:	4694      	mov	ip, r2
 8003806:	44bc      	add	ip, r7
 8003808:	4463      	add	r3, ip
 800380a:	781b      	ldrb	r3, [r3, #0]
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b00e      	add	sp, #56	; 0x38
 8003812:	bdb0      	pop	{r4, r5, r7, pc}
 8003814:	0800456c 	.word	0x0800456c
 8003818:	40021000 	.word	0x40021000
 800381c:	003d0900 	.word	0x003d0900
 8003820:	00f42400 	.word	0x00f42400

08003824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	2201      	movs	r2, #1
 8003832:	4013      	ands	r3, r2
 8003834:	d00b      	beq.n	800384e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a4a      	ldr	r2, [pc, #296]	; (8003968 <UART_AdvFeatureConfig+0x144>)
 800383e:	4013      	ands	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2202      	movs	r2, #2
 8003854:	4013      	ands	r3, r2
 8003856:	d00b      	beq.n	8003870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4a43      	ldr	r2, [pc, #268]	; (800396c <UART_AdvFeatureConfig+0x148>)
 8003860:	4013      	ands	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	2204      	movs	r2, #4
 8003876:	4013      	ands	r3, r2
 8003878:	d00b      	beq.n	8003892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a3b      	ldr	r2, [pc, #236]	; (8003970 <UART_AdvFeatureConfig+0x14c>)
 8003882:	4013      	ands	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	2208      	movs	r2, #8
 8003898:	4013      	ands	r3, r2
 800389a:	d00b      	beq.n	80038b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4a34      	ldr	r2, [pc, #208]	; (8003974 <UART_AdvFeatureConfig+0x150>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	2210      	movs	r2, #16
 80038ba:	4013      	ands	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <UART_AdvFeatureConfig+0x154>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	0019      	movs	r1, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	2220      	movs	r2, #32
 80038dc:	4013      	ands	r3, r2
 80038de:	d00b      	beq.n	80038f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4a25      	ldr	r2, [pc, #148]	; (800397c <UART_AdvFeatureConfig+0x158>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	0019      	movs	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	2240      	movs	r2, #64	; 0x40
 80038fe:	4013      	ands	r3, r2
 8003900:	d01d      	beq.n	800393e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a1d      	ldr	r2, [pc, #116]	; (8003980 <UART_AdvFeatureConfig+0x15c>)
 800390a:	4013      	ands	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	035b      	lsls	r3, r3, #13
 8003922:	429a      	cmp	r2, r3
 8003924:	d10b      	bne.n	800393e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a15      	ldr	r2, [pc, #84]	; (8003984 <UART_AdvFeatureConfig+0x160>)
 800392e:	4013      	ands	r3, r2
 8003930:	0019      	movs	r1, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	4013      	ands	r3, r2
 8003946:	d00b      	beq.n	8003960 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4a0e      	ldr	r2, [pc, #56]	; (8003988 <UART_AdvFeatureConfig+0x164>)
 8003950:	4013      	ands	r3, r2
 8003952:	0019      	movs	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]
  }
}
 8003960:	46c0      	nop			; (mov r8, r8)
 8003962:	46bd      	mov	sp, r7
 8003964:	b002      	add	sp, #8
 8003966:	bd80      	pop	{r7, pc}
 8003968:	fffdffff 	.word	0xfffdffff
 800396c:	fffeffff 	.word	0xfffeffff
 8003970:	fffbffff 	.word	0xfffbffff
 8003974:	ffff7fff 	.word	0xffff7fff
 8003978:	ffffefff 	.word	0xffffefff
 800397c:	ffffdfff 	.word	0xffffdfff
 8003980:	ffefffff 	.word	0xffefffff
 8003984:	ff9fffff 	.word	0xff9fffff
 8003988:	fff7ffff 	.word	0xfff7ffff

0800398c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af02      	add	r7, sp, #8
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2280      	movs	r2, #128	; 0x80
 8003998:	2100      	movs	r1, #0
 800399a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800399c:	f7fd fa14 	bl	8000dc8 <HAL_GetTick>
 80039a0:	0003      	movs	r3, r0
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2208      	movs	r2, #8
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d10c      	bne.n	80039cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	0391      	lsls	r1, r2, #14
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <UART_CheckIdleState+0x8c>)
 80039bc:	9200      	str	r2, [sp, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	f000 f82c 	bl	8003a1c <UART_WaitOnFlagUntilTimeout>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d001      	beq.n	80039cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e021      	b.n	8003a10 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2204      	movs	r2, #4
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d10c      	bne.n	80039f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2280      	movs	r2, #128	; 0x80
 80039de:	03d1      	lsls	r1, r2, #15
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4a0d      	ldr	r2, [pc, #52]	; (8003a18 <UART_CheckIdleState+0x8c>)
 80039e4:	9200      	str	r2, [sp, #0]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f000 f818 	bl	8003a1c <UART_WaitOnFlagUntilTimeout>
 80039ec:	1e03      	subs	r3, r0, #0
 80039ee:	d001      	beq.n	80039f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e00d      	b.n	8003a10 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2274      	movs	r2, #116	; 0x74
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b004      	add	sp, #16
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	01ffffff 	.word	0x01ffffff

08003a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	1dfb      	adds	r3, r7, #7
 8003a2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2c:	e05e      	b.n	8003aec <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	3301      	adds	r3, #1
 8003a32:	d05b      	beq.n	8003aec <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a34:	f7fd f9c8 	bl	8000dc8 <HAL_GetTick>
 8003a38:	0002      	movs	r2, r0
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d302      	bcc.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d11b      	bne.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	492f      	ldr	r1, [pc, #188]	; (8003b14 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2101      	movs	r1, #1
 8003a66:	438a      	bics	r2, r1
 8003a68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2274      	movs	r2, #116	; 0x74
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e044      	b.n	8003b0c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d02e      	beq.n	8003aec <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	2380      	movs	r3, #128	; 0x80
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	401a      	ands	r2, r3
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d124      	bne.n	8003aec <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	0112      	lsls	r2, r2, #4
 8003aaa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4917      	ldr	r1, [pc, #92]	; (8003b14 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003ab8:	400a      	ands	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	438a      	bics	r2, r1
 8003aca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2280      	movs	r2, #128	; 0x80
 8003adc:	2120      	movs	r1, #32
 8003ade:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2274      	movs	r2, #116	; 0x74
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e00f      	b.n	8003b0c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	4013      	ands	r3, r2
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	425a      	negs	r2, r3
 8003afc:	4153      	adcs	r3, r2
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	001a      	movs	r2, r3
 8003b02:	1dfb      	adds	r3, r7, #7
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d091      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b004      	add	sp, #16
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	fffffe5f 	.word	0xfffffe5f

08003b18 <__errno>:
 8003b18:	4b01      	ldr	r3, [pc, #4]	; (8003b20 <__errno+0x8>)
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	4770      	bx	lr
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	2000000c 	.word	0x2000000c

08003b24 <__libc_init_array>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	2600      	movs	r6, #0
 8003b28:	4d0c      	ldr	r5, [pc, #48]	; (8003b5c <__libc_init_array+0x38>)
 8003b2a:	4c0d      	ldr	r4, [pc, #52]	; (8003b60 <__libc_init_array+0x3c>)
 8003b2c:	1b64      	subs	r4, r4, r5
 8003b2e:	10a4      	asrs	r4, r4, #2
 8003b30:	42a6      	cmp	r6, r4
 8003b32:	d109      	bne.n	8003b48 <__libc_init_array+0x24>
 8003b34:	2600      	movs	r6, #0
 8003b36:	f000 fc47 	bl	80043c8 <_init>
 8003b3a:	4d0a      	ldr	r5, [pc, #40]	; (8003b64 <__libc_init_array+0x40>)
 8003b3c:	4c0a      	ldr	r4, [pc, #40]	; (8003b68 <__libc_init_array+0x44>)
 8003b3e:	1b64      	subs	r4, r4, r5
 8003b40:	10a4      	asrs	r4, r4, #2
 8003b42:	42a6      	cmp	r6, r4
 8003b44:	d105      	bne.n	8003b52 <__libc_init_array+0x2e>
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	00b3      	lsls	r3, r6, #2
 8003b4a:	58eb      	ldr	r3, [r5, r3]
 8003b4c:	4798      	blx	r3
 8003b4e:	3601      	adds	r6, #1
 8003b50:	e7ee      	b.n	8003b30 <__libc_init_array+0xc>
 8003b52:	00b3      	lsls	r3, r6, #2
 8003b54:	58eb      	ldr	r3, [r5, r3]
 8003b56:	4798      	blx	r3
 8003b58:	3601      	adds	r6, #1
 8003b5a:	e7f2      	b.n	8003b42 <__libc_init_array+0x1e>
 8003b5c:	080045cc 	.word	0x080045cc
 8003b60:	080045cc 	.word	0x080045cc
 8003b64:	080045cc 	.word	0x080045cc
 8003b68:	080045d0 	.word	0x080045d0

08003b6c <memset>:
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	1882      	adds	r2, r0, r2
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d100      	bne.n	8003b76 <memset+0xa>
 8003b74:	4770      	bx	lr
 8003b76:	7019      	strb	r1, [r3, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	e7f9      	b.n	8003b70 <memset+0x4>

08003b7c <siprintf>:
 8003b7c:	b40e      	push	{r1, r2, r3}
 8003b7e:	b500      	push	{lr}
 8003b80:	490b      	ldr	r1, [pc, #44]	; (8003bb0 <siprintf+0x34>)
 8003b82:	b09c      	sub	sp, #112	; 0x70
 8003b84:	ab1d      	add	r3, sp, #116	; 0x74
 8003b86:	9002      	str	r0, [sp, #8]
 8003b88:	9006      	str	r0, [sp, #24]
 8003b8a:	9107      	str	r1, [sp, #28]
 8003b8c:	9104      	str	r1, [sp, #16]
 8003b8e:	4809      	ldr	r0, [pc, #36]	; (8003bb4 <siprintf+0x38>)
 8003b90:	4909      	ldr	r1, [pc, #36]	; (8003bb8 <siprintf+0x3c>)
 8003b92:	cb04      	ldmia	r3!, {r2}
 8003b94:	9105      	str	r1, [sp, #20]
 8003b96:	6800      	ldr	r0, [r0, #0]
 8003b98:	a902      	add	r1, sp, #8
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	f000 f870 	bl	8003c80 <_svfiprintf_r>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9a02      	ldr	r2, [sp, #8]
 8003ba4:	7013      	strb	r3, [r2, #0]
 8003ba6:	b01c      	add	sp, #112	; 0x70
 8003ba8:	bc08      	pop	{r3}
 8003baa:	b003      	add	sp, #12
 8003bac:	4718      	bx	r3
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	7fffffff 	.word	0x7fffffff
 8003bb4:	2000000c 	.word	0x2000000c
 8003bb8:	ffff0208 	.word	0xffff0208

08003bbc <__ssputs_r>:
 8003bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bbe:	688e      	ldr	r6, [r1, #8]
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	0007      	movs	r7, r0
 8003bc4:	000c      	movs	r4, r1
 8003bc6:	9203      	str	r2, [sp, #12]
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	429e      	cmp	r6, r3
 8003bcc:	d83c      	bhi.n	8003c48 <__ssputs_r+0x8c>
 8003bce:	2390      	movs	r3, #144	; 0x90
 8003bd0:	898a      	ldrh	r2, [r1, #12]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	421a      	tst	r2, r3
 8003bd6:	d034      	beq.n	8003c42 <__ssputs_r+0x86>
 8003bd8:	2503      	movs	r5, #3
 8003bda:	6909      	ldr	r1, [r1, #16]
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	1a5b      	subs	r3, r3, r1
 8003be0:	9302      	str	r3, [sp, #8]
 8003be2:	6963      	ldr	r3, [r4, #20]
 8003be4:	9802      	ldr	r0, [sp, #8]
 8003be6:	435d      	muls	r5, r3
 8003be8:	0feb      	lsrs	r3, r5, #31
 8003bea:	195d      	adds	r5, r3, r5
 8003bec:	9b01      	ldr	r3, [sp, #4]
 8003bee:	106d      	asrs	r5, r5, #1
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	181b      	adds	r3, r3, r0
 8003bf4:	42ab      	cmp	r3, r5
 8003bf6:	d900      	bls.n	8003bfa <__ssputs_r+0x3e>
 8003bf8:	001d      	movs	r5, r3
 8003bfa:	0553      	lsls	r3, r2, #21
 8003bfc:	d532      	bpl.n	8003c64 <__ssputs_r+0xa8>
 8003bfe:	0029      	movs	r1, r5
 8003c00:	0038      	movs	r0, r7
 8003c02:	f000 fb31 	bl	8004268 <_malloc_r>
 8003c06:	1e06      	subs	r6, r0, #0
 8003c08:	d109      	bne.n	8003c1e <__ssputs_r+0x62>
 8003c0a:	230c      	movs	r3, #12
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	2340      	movs	r3, #64	; 0x40
 8003c10:	2001      	movs	r0, #1
 8003c12:	89a2      	ldrh	r2, [r4, #12]
 8003c14:	4240      	negs	r0, r0
 8003c16:	4313      	orrs	r3, r2
 8003c18:	81a3      	strh	r3, [r4, #12]
 8003c1a:	b005      	add	sp, #20
 8003c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1e:	9a02      	ldr	r2, [sp, #8]
 8003c20:	6921      	ldr	r1, [r4, #16]
 8003c22:	f000 faba 	bl	800419a <memcpy>
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <__ssputs_r+0xc0>)
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	9b02      	ldr	r3, [sp, #8]
 8003c34:	6126      	str	r6, [r4, #16]
 8003c36:	18f6      	adds	r6, r6, r3
 8003c38:	6026      	str	r6, [r4, #0]
 8003c3a:	6165      	str	r5, [r4, #20]
 8003c3c:	9e01      	ldr	r6, [sp, #4]
 8003c3e:	1aed      	subs	r5, r5, r3
 8003c40:	60a5      	str	r5, [r4, #8]
 8003c42:	9b01      	ldr	r3, [sp, #4]
 8003c44:	429e      	cmp	r6, r3
 8003c46:	d900      	bls.n	8003c4a <__ssputs_r+0x8e>
 8003c48:	9e01      	ldr	r6, [sp, #4]
 8003c4a:	0032      	movs	r2, r6
 8003c4c:	9903      	ldr	r1, [sp, #12]
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	f000 faac 	bl	80041ac <memmove>
 8003c54:	68a3      	ldr	r3, [r4, #8]
 8003c56:	2000      	movs	r0, #0
 8003c58:	1b9b      	subs	r3, r3, r6
 8003c5a:	60a3      	str	r3, [r4, #8]
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	199e      	adds	r6, r3, r6
 8003c60:	6026      	str	r6, [r4, #0]
 8003c62:	e7da      	b.n	8003c1a <__ssputs_r+0x5e>
 8003c64:	002a      	movs	r2, r5
 8003c66:	0038      	movs	r0, r7
 8003c68:	f000 fb5c 	bl	8004324 <_realloc_r>
 8003c6c:	1e06      	subs	r6, r0, #0
 8003c6e:	d1e0      	bne.n	8003c32 <__ssputs_r+0x76>
 8003c70:	0038      	movs	r0, r7
 8003c72:	6921      	ldr	r1, [r4, #16]
 8003c74:	f000 faae 	bl	80041d4 <_free_r>
 8003c78:	e7c7      	b.n	8003c0a <__ssputs_r+0x4e>
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	fffffb7f 	.word	0xfffffb7f

08003c80 <_svfiprintf_r>:
 8003c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c82:	b0a1      	sub	sp, #132	; 0x84
 8003c84:	9003      	str	r0, [sp, #12]
 8003c86:	001d      	movs	r5, r3
 8003c88:	898b      	ldrh	r3, [r1, #12]
 8003c8a:	000f      	movs	r7, r1
 8003c8c:	0016      	movs	r6, r2
 8003c8e:	061b      	lsls	r3, r3, #24
 8003c90:	d511      	bpl.n	8003cb6 <_svfiprintf_r+0x36>
 8003c92:	690b      	ldr	r3, [r1, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10e      	bne.n	8003cb6 <_svfiprintf_r+0x36>
 8003c98:	2140      	movs	r1, #64	; 0x40
 8003c9a:	f000 fae5 	bl	8004268 <_malloc_r>
 8003c9e:	6038      	str	r0, [r7, #0]
 8003ca0:	6138      	str	r0, [r7, #16]
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d105      	bne.n	8003cb2 <_svfiprintf_r+0x32>
 8003ca6:	230c      	movs	r3, #12
 8003ca8:	9a03      	ldr	r2, [sp, #12]
 8003caa:	3801      	subs	r0, #1
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	b021      	add	sp, #132	; 0x84
 8003cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb2:	2340      	movs	r3, #64	; 0x40
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	ac08      	add	r4, sp, #32
 8003cba:	6163      	str	r3, [r4, #20]
 8003cbc:	3320      	adds	r3, #32
 8003cbe:	7663      	strb	r3, [r4, #25]
 8003cc0:	3310      	adds	r3, #16
 8003cc2:	76a3      	strb	r3, [r4, #26]
 8003cc4:	9507      	str	r5, [sp, #28]
 8003cc6:	0035      	movs	r5, r6
 8003cc8:	782b      	ldrb	r3, [r5, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <_svfiprintf_r+0x52>
 8003cce:	2b25      	cmp	r3, #37	; 0x25
 8003cd0:	d147      	bne.n	8003d62 <_svfiprintf_r+0xe2>
 8003cd2:	1bab      	subs	r3, r5, r6
 8003cd4:	9305      	str	r3, [sp, #20]
 8003cd6:	42b5      	cmp	r5, r6
 8003cd8:	d00c      	beq.n	8003cf4 <_svfiprintf_r+0x74>
 8003cda:	0032      	movs	r2, r6
 8003cdc:	0039      	movs	r1, r7
 8003cde:	9803      	ldr	r0, [sp, #12]
 8003ce0:	f7ff ff6c 	bl	8003bbc <__ssputs_r>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d100      	bne.n	8003cea <_svfiprintf_r+0x6a>
 8003ce8:	e0ae      	b.n	8003e48 <_svfiprintf_r+0x1c8>
 8003cea:	6962      	ldr	r2, [r4, #20]
 8003cec:	9b05      	ldr	r3, [sp, #20]
 8003cee:	4694      	mov	ip, r2
 8003cf0:	4463      	add	r3, ip
 8003cf2:	6163      	str	r3, [r4, #20]
 8003cf4:	782b      	ldrb	r3, [r5, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d100      	bne.n	8003cfc <_svfiprintf_r+0x7c>
 8003cfa:	e0a5      	b.n	8003e48 <_svfiprintf_r+0x1c8>
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	2300      	movs	r3, #0
 8003d00:	4252      	negs	r2, r2
 8003d02:	6062      	str	r2, [r4, #4]
 8003d04:	a904      	add	r1, sp, #16
 8003d06:	3254      	adds	r2, #84	; 0x54
 8003d08:	1852      	adds	r2, r2, r1
 8003d0a:	1c6e      	adds	r6, r5, #1
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	60e3      	str	r3, [r4, #12]
 8003d10:	60a3      	str	r3, [r4, #8]
 8003d12:	7013      	strb	r3, [r2, #0]
 8003d14:	65a3      	str	r3, [r4, #88]	; 0x58
 8003d16:	2205      	movs	r2, #5
 8003d18:	7831      	ldrb	r1, [r6, #0]
 8003d1a:	4854      	ldr	r0, [pc, #336]	; (8003e6c <_svfiprintf_r+0x1ec>)
 8003d1c:	f000 fa32 	bl	8004184 <memchr>
 8003d20:	1c75      	adds	r5, r6, #1
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d11f      	bne.n	8003d66 <_svfiprintf_r+0xe6>
 8003d26:	6822      	ldr	r2, [r4, #0]
 8003d28:	06d3      	lsls	r3, r2, #27
 8003d2a:	d504      	bpl.n	8003d36 <_svfiprintf_r+0xb6>
 8003d2c:	2353      	movs	r3, #83	; 0x53
 8003d2e:	a904      	add	r1, sp, #16
 8003d30:	185b      	adds	r3, r3, r1
 8003d32:	2120      	movs	r1, #32
 8003d34:	7019      	strb	r1, [r3, #0]
 8003d36:	0713      	lsls	r3, r2, #28
 8003d38:	d504      	bpl.n	8003d44 <_svfiprintf_r+0xc4>
 8003d3a:	2353      	movs	r3, #83	; 0x53
 8003d3c:	a904      	add	r1, sp, #16
 8003d3e:	185b      	adds	r3, r3, r1
 8003d40:	212b      	movs	r1, #43	; 0x2b
 8003d42:	7019      	strb	r1, [r3, #0]
 8003d44:	7833      	ldrb	r3, [r6, #0]
 8003d46:	2b2a      	cmp	r3, #42	; 0x2a
 8003d48:	d016      	beq.n	8003d78 <_svfiprintf_r+0xf8>
 8003d4a:	0035      	movs	r5, r6
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	200a      	movs	r0, #10
 8003d50:	68e3      	ldr	r3, [r4, #12]
 8003d52:	782a      	ldrb	r2, [r5, #0]
 8003d54:	1c6e      	adds	r6, r5, #1
 8003d56:	3a30      	subs	r2, #48	; 0x30
 8003d58:	2a09      	cmp	r2, #9
 8003d5a:	d94e      	bls.n	8003dfa <_svfiprintf_r+0x17a>
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	d111      	bne.n	8003d84 <_svfiprintf_r+0x104>
 8003d60:	e017      	b.n	8003d92 <_svfiprintf_r+0x112>
 8003d62:	3501      	adds	r5, #1
 8003d64:	e7b0      	b.n	8003cc8 <_svfiprintf_r+0x48>
 8003d66:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <_svfiprintf_r+0x1ec>)
 8003d68:	6822      	ldr	r2, [r4, #0]
 8003d6a:	1ac0      	subs	r0, r0, r3
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	4083      	lsls	r3, r0
 8003d70:	4313      	orrs	r3, r2
 8003d72:	002e      	movs	r6, r5
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	e7ce      	b.n	8003d16 <_svfiprintf_r+0x96>
 8003d78:	9b07      	ldr	r3, [sp, #28]
 8003d7a:	1d19      	adds	r1, r3, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	9107      	str	r1, [sp, #28]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	db01      	blt.n	8003d88 <_svfiprintf_r+0x108>
 8003d84:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d86:	e004      	b.n	8003d92 <_svfiprintf_r+0x112>
 8003d88:	425b      	negs	r3, r3
 8003d8a:	60e3      	str	r3, [r4, #12]
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	782b      	ldrb	r3, [r5, #0]
 8003d94:	2b2e      	cmp	r3, #46	; 0x2e
 8003d96:	d10a      	bne.n	8003dae <_svfiprintf_r+0x12e>
 8003d98:	786b      	ldrb	r3, [r5, #1]
 8003d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d9c:	d135      	bne.n	8003e0a <_svfiprintf_r+0x18a>
 8003d9e:	9b07      	ldr	r3, [sp, #28]
 8003da0:	3502      	adds	r5, #2
 8003da2:	1d1a      	adds	r2, r3, #4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	9207      	str	r2, [sp, #28]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	db2b      	blt.n	8003e04 <_svfiprintf_r+0x184>
 8003dac:	9309      	str	r3, [sp, #36]	; 0x24
 8003dae:	4e30      	ldr	r6, [pc, #192]	; (8003e70 <_svfiprintf_r+0x1f0>)
 8003db0:	2203      	movs	r2, #3
 8003db2:	0030      	movs	r0, r6
 8003db4:	7829      	ldrb	r1, [r5, #0]
 8003db6:	f000 f9e5 	bl	8004184 <memchr>
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d006      	beq.n	8003dcc <_svfiprintf_r+0x14c>
 8003dbe:	2340      	movs	r3, #64	; 0x40
 8003dc0:	1b80      	subs	r0, r0, r6
 8003dc2:	4083      	lsls	r3, r0
 8003dc4:	6822      	ldr	r2, [r4, #0]
 8003dc6:	3501      	adds	r5, #1
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	7829      	ldrb	r1, [r5, #0]
 8003dce:	2206      	movs	r2, #6
 8003dd0:	4828      	ldr	r0, [pc, #160]	; (8003e74 <_svfiprintf_r+0x1f4>)
 8003dd2:	1c6e      	adds	r6, r5, #1
 8003dd4:	7621      	strb	r1, [r4, #24]
 8003dd6:	f000 f9d5 	bl	8004184 <memchr>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d03c      	beq.n	8003e58 <_svfiprintf_r+0x1d8>
 8003dde:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <_svfiprintf_r+0x1f8>)
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d125      	bne.n	8003e30 <_svfiprintf_r+0x1b0>
 8003de4:	2207      	movs	r2, #7
 8003de6:	9b07      	ldr	r3, [sp, #28]
 8003de8:	3307      	adds	r3, #7
 8003dea:	4393      	bics	r3, r2
 8003dec:	3308      	adds	r3, #8
 8003dee:	9307      	str	r3, [sp, #28]
 8003df0:	6963      	ldr	r3, [r4, #20]
 8003df2:	9a04      	ldr	r2, [sp, #16]
 8003df4:	189b      	adds	r3, r3, r2
 8003df6:	6163      	str	r3, [r4, #20]
 8003df8:	e765      	b.n	8003cc6 <_svfiprintf_r+0x46>
 8003dfa:	4343      	muls	r3, r0
 8003dfc:	0035      	movs	r5, r6
 8003dfe:	2101      	movs	r1, #1
 8003e00:	189b      	adds	r3, r3, r2
 8003e02:	e7a6      	b.n	8003d52 <_svfiprintf_r+0xd2>
 8003e04:	2301      	movs	r3, #1
 8003e06:	425b      	negs	r3, r3
 8003e08:	e7d0      	b.n	8003dac <_svfiprintf_r+0x12c>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	200a      	movs	r0, #10
 8003e0e:	001a      	movs	r2, r3
 8003e10:	3501      	adds	r5, #1
 8003e12:	6063      	str	r3, [r4, #4]
 8003e14:	7829      	ldrb	r1, [r5, #0]
 8003e16:	1c6e      	adds	r6, r5, #1
 8003e18:	3930      	subs	r1, #48	; 0x30
 8003e1a:	2909      	cmp	r1, #9
 8003e1c:	d903      	bls.n	8003e26 <_svfiprintf_r+0x1a6>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0c5      	beq.n	8003dae <_svfiprintf_r+0x12e>
 8003e22:	9209      	str	r2, [sp, #36]	; 0x24
 8003e24:	e7c3      	b.n	8003dae <_svfiprintf_r+0x12e>
 8003e26:	4342      	muls	r2, r0
 8003e28:	0035      	movs	r5, r6
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	1852      	adds	r2, r2, r1
 8003e2e:	e7f1      	b.n	8003e14 <_svfiprintf_r+0x194>
 8003e30:	ab07      	add	r3, sp, #28
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	003a      	movs	r2, r7
 8003e36:	0021      	movs	r1, r4
 8003e38:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <_svfiprintf_r+0x1fc>)
 8003e3a:	9803      	ldr	r0, [sp, #12]
 8003e3c:	e000      	b.n	8003e40 <_svfiprintf_r+0x1c0>
 8003e3e:	bf00      	nop
 8003e40:	9004      	str	r0, [sp, #16]
 8003e42:	9b04      	ldr	r3, [sp, #16]
 8003e44:	3301      	adds	r3, #1
 8003e46:	d1d3      	bne.n	8003df0 <_svfiprintf_r+0x170>
 8003e48:	89bb      	ldrh	r3, [r7, #12]
 8003e4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003e4c:	065b      	lsls	r3, r3, #25
 8003e4e:	d400      	bmi.n	8003e52 <_svfiprintf_r+0x1d2>
 8003e50:	e72d      	b.n	8003cae <_svfiprintf_r+0x2e>
 8003e52:	2001      	movs	r0, #1
 8003e54:	4240      	negs	r0, r0
 8003e56:	e72a      	b.n	8003cae <_svfiprintf_r+0x2e>
 8003e58:	ab07      	add	r3, sp, #28
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	003a      	movs	r2, r7
 8003e5e:	0021      	movs	r1, r4
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <_svfiprintf_r+0x1fc>)
 8003e62:	9803      	ldr	r0, [sp, #12]
 8003e64:	f000 f87c 	bl	8003f60 <_printf_i>
 8003e68:	e7ea      	b.n	8003e40 <_svfiprintf_r+0x1c0>
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	08004590 	.word	0x08004590
 8003e70:	08004596 	.word	0x08004596
 8003e74:	0800459a 	.word	0x0800459a
 8003e78:	00000000 	.word	0x00000000
 8003e7c:	08003bbd 	.word	0x08003bbd

08003e80 <_printf_common>:
 8003e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e82:	0015      	movs	r5, r2
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	688a      	ldr	r2, [r1, #8]
 8003e88:	690b      	ldr	r3, [r1, #16]
 8003e8a:	000c      	movs	r4, r1
 8003e8c:	9000      	str	r0, [sp, #0]
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	da00      	bge.n	8003e94 <_printf_common+0x14>
 8003e92:	0013      	movs	r3, r2
 8003e94:	0022      	movs	r2, r4
 8003e96:	602b      	str	r3, [r5, #0]
 8003e98:	3243      	adds	r2, #67	; 0x43
 8003e9a:	7812      	ldrb	r2, [r2, #0]
 8003e9c:	2a00      	cmp	r2, #0
 8003e9e:	d001      	beq.n	8003ea4 <_printf_common+0x24>
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	602b      	str	r3, [r5, #0]
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	069b      	lsls	r3, r3, #26
 8003ea8:	d502      	bpl.n	8003eb0 <_printf_common+0x30>
 8003eaa:	682b      	ldr	r3, [r5, #0]
 8003eac:	3302      	adds	r3, #2
 8003eae:	602b      	str	r3, [r5, #0]
 8003eb0:	6822      	ldr	r2, [r4, #0]
 8003eb2:	2306      	movs	r3, #6
 8003eb4:	0017      	movs	r7, r2
 8003eb6:	401f      	ands	r7, r3
 8003eb8:	421a      	tst	r2, r3
 8003eba:	d027      	beq.n	8003f0c <_printf_common+0x8c>
 8003ebc:	0023      	movs	r3, r4
 8003ebe:	3343      	adds	r3, #67	; 0x43
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	1e5a      	subs	r2, r3, #1
 8003ec4:	4193      	sbcs	r3, r2
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	0692      	lsls	r2, r2, #26
 8003eca:	d430      	bmi.n	8003f2e <_printf_common+0xae>
 8003ecc:	0022      	movs	r2, r4
 8003ece:	9901      	ldr	r1, [sp, #4]
 8003ed0:	9800      	ldr	r0, [sp, #0]
 8003ed2:	9e08      	ldr	r6, [sp, #32]
 8003ed4:	3243      	adds	r2, #67	; 0x43
 8003ed6:	47b0      	blx	r6
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d025      	beq.n	8003f28 <_printf_common+0xa8>
 8003edc:	2306      	movs	r3, #6
 8003ede:	6820      	ldr	r0, [r4, #0]
 8003ee0:	682a      	ldr	r2, [r5, #0]
 8003ee2:	68e1      	ldr	r1, [r4, #12]
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	4003      	ands	r3, r0
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d103      	bne.n	8003ef4 <_printf_common+0x74>
 8003eec:	1a8d      	subs	r5, r1, r2
 8003eee:	43eb      	mvns	r3, r5
 8003ef0:	17db      	asrs	r3, r3, #31
 8003ef2:	401d      	ands	r5, r3
 8003ef4:	68a3      	ldr	r3, [r4, #8]
 8003ef6:	6922      	ldr	r2, [r4, #16]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	dd01      	ble.n	8003f00 <_printf_common+0x80>
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	18ed      	adds	r5, r5, r3
 8003f00:	2700      	movs	r7, #0
 8003f02:	42bd      	cmp	r5, r7
 8003f04:	d120      	bne.n	8003f48 <_printf_common+0xc8>
 8003f06:	2000      	movs	r0, #0
 8003f08:	e010      	b.n	8003f2c <_printf_common+0xac>
 8003f0a:	3701      	adds	r7, #1
 8003f0c:	68e3      	ldr	r3, [r4, #12]
 8003f0e:	682a      	ldr	r2, [r5, #0]
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	42bb      	cmp	r3, r7
 8003f14:	ddd2      	ble.n	8003ebc <_printf_common+0x3c>
 8003f16:	0022      	movs	r2, r4
 8003f18:	2301      	movs	r3, #1
 8003f1a:	9901      	ldr	r1, [sp, #4]
 8003f1c:	9800      	ldr	r0, [sp, #0]
 8003f1e:	9e08      	ldr	r6, [sp, #32]
 8003f20:	3219      	adds	r2, #25
 8003f22:	47b0      	blx	r6
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d1f0      	bne.n	8003f0a <_printf_common+0x8a>
 8003f28:	2001      	movs	r0, #1
 8003f2a:	4240      	negs	r0, r0
 8003f2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f2e:	2030      	movs	r0, #48	; 0x30
 8003f30:	18e1      	adds	r1, r4, r3
 8003f32:	3143      	adds	r1, #67	; 0x43
 8003f34:	7008      	strb	r0, [r1, #0]
 8003f36:	0021      	movs	r1, r4
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	3145      	adds	r1, #69	; 0x45
 8003f3c:	7809      	ldrb	r1, [r1, #0]
 8003f3e:	18a2      	adds	r2, r4, r2
 8003f40:	3243      	adds	r2, #67	; 0x43
 8003f42:	3302      	adds	r3, #2
 8003f44:	7011      	strb	r1, [r2, #0]
 8003f46:	e7c1      	b.n	8003ecc <_printf_common+0x4c>
 8003f48:	0022      	movs	r2, r4
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	9901      	ldr	r1, [sp, #4]
 8003f4e:	9800      	ldr	r0, [sp, #0]
 8003f50:	9e08      	ldr	r6, [sp, #32]
 8003f52:	321a      	adds	r2, #26
 8003f54:	47b0      	blx	r6
 8003f56:	1c43      	adds	r3, r0, #1
 8003f58:	d0e6      	beq.n	8003f28 <_printf_common+0xa8>
 8003f5a:	3701      	adds	r7, #1
 8003f5c:	e7d1      	b.n	8003f02 <_printf_common+0x82>
	...

08003f60 <_printf_i>:
 8003f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f62:	b08b      	sub	sp, #44	; 0x2c
 8003f64:	9206      	str	r2, [sp, #24]
 8003f66:	000a      	movs	r2, r1
 8003f68:	3243      	adds	r2, #67	; 0x43
 8003f6a:	9307      	str	r3, [sp, #28]
 8003f6c:	9005      	str	r0, [sp, #20]
 8003f6e:	9204      	str	r2, [sp, #16]
 8003f70:	7e0a      	ldrb	r2, [r1, #24]
 8003f72:	000c      	movs	r4, r1
 8003f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f76:	2a78      	cmp	r2, #120	; 0x78
 8003f78:	d806      	bhi.n	8003f88 <_printf_i+0x28>
 8003f7a:	2a62      	cmp	r2, #98	; 0x62
 8003f7c:	d808      	bhi.n	8003f90 <_printf_i+0x30>
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	d100      	bne.n	8003f84 <_printf_i+0x24>
 8003f82:	e0c0      	b.n	8004106 <_printf_i+0x1a6>
 8003f84:	2a58      	cmp	r2, #88	; 0x58
 8003f86:	d052      	beq.n	800402e <_printf_i+0xce>
 8003f88:	0026      	movs	r6, r4
 8003f8a:	3642      	adds	r6, #66	; 0x42
 8003f8c:	7032      	strb	r2, [r6, #0]
 8003f8e:	e022      	b.n	8003fd6 <_printf_i+0x76>
 8003f90:	0010      	movs	r0, r2
 8003f92:	3863      	subs	r0, #99	; 0x63
 8003f94:	2815      	cmp	r0, #21
 8003f96:	d8f7      	bhi.n	8003f88 <_printf_i+0x28>
 8003f98:	f7fc f8be 	bl	8000118 <__gnu_thumb1_case_shi>
 8003f9c:	001f0016 	.word	0x001f0016
 8003fa0:	fff6fff6 	.word	0xfff6fff6
 8003fa4:	fff6fff6 	.word	0xfff6fff6
 8003fa8:	fff6001f 	.word	0xfff6001f
 8003fac:	fff6fff6 	.word	0xfff6fff6
 8003fb0:	00a8fff6 	.word	0x00a8fff6
 8003fb4:	009a0036 	.word	0x009a0036
 8003fb8:	fff6fff6 	.word	0xfff6fff6
 8003fbc:	fff600b9 	.word	0xfff600b9
 8003fc0:	fff60036 	.word	0xfff60036
 8003fc4:	009efff6 	.word	0x009efff6
 8003fc8:	0026      	movs	r6, r4
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	3642      	adds	r6, #66	; 0x42
 8003fce:	1d11      	adds	r1, r2, #4
 8003fd0:	6019      	str	r1, [r3, #0]
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	7033      	strb	r3, [r6, #0]
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e0a7      	b.n	800412a <_printf_i+0x1ca>
 8003fda:	6808      	ldr	r0, [r1, #0]
 8003fdc:	6819      	ldr	r1, [r3, #0]
 8003fde:	1d0a      	adds	r2, r1, #4
 8003fe0:	0605      	lsls	r5, r0, #24
 8003fe2:	d50b      	bpl.n	8003ffc <_printf_i+0x9c>
 8003fe4:	680d      	ldr	r5, [r1, #0]
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	da03      	bge.n	8003ff4 <_printf_i+0x94>
 8003fec:	232d      	movs	r3, #45	; 0x2d
 8003fee:	9a04      	ldr	r2, [sp, #16]
 8003ff0:	426d      	negs	r5, r5
 8003ff2:	7013      	strb	r3, [r2, #0]
 8003ff4:	4b61      	ldr	r3, [pc, #388]	; (800417c <_printf_i+0x21c>)
 8003ff6:	270a      	movs	r7, #10
 8003ff8:	9303      	str	r3, [sp, #12]
 8003ffa:	e032      	b.n	8004062 <_printf_i+0x102>
 8003ffc:	680d      	ldr	r5, [r1, #0]
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	0641      	lsls	r1, r0, #25
 8004002:	d5f1      	bpl.n	8003fe8 <_printf_i+0x88>
 8004004:	b22d      	sxth	r5, r5
 8004006:	e7ef      	b.n	8003fe8 <_printf_i+0x88>
 8004008:	680d      	ldr	r5, [r1, #0]
 800400a:	6819      	ldr	r1, [r3, #0]
 800400c:	1d08      	adds	r0, r1, #4
 800400e:	6018      	str	r0, [r3, #0]
 8004010:	062e      	lsls	r6, r5, #24
 8004012:	d501      	bpl.n	8004018 <_printf_i+0xb8>
 8004014:	680d      	ldr	r5, [r1, #0]
 8004016:	e003      	b.n	8004020 <_printf_i+0xc0>
 8004018:	066d      	lsls	r5, r5, #25
 800401a:	d5fb      	bpl.n	8004014 <_printf_i+0xb4>
 800401c:	680d      	ldr	r5, [r1, #0]
 800401e:	b2ad      	uxth	r5, r5
 8004020:	4b56      	ldr	r3, [pc, #344]	; (800417c <_printf_i+0x21c>)
 8004022:	270a      	movs	r7, #10
 8004024:	9303      	str	r3, [sp, #12]
 8004026:	2a6f      	cmp	r2, #111	; 0x6f
 8004028:	d117      	bne.n	800405a <_printf_i+0xfa>
 800402a:	2708      	movs	r7, #8
 800402c:	e015      	b.n	800405a <_printf_i+0xfa>
 800402e:	3145      	adds	r1, #69	; 0x45
 8004030:	700a      	strb	r2, [r1, #0]
 8004032:	4a52      	ldr	r2, [pc, #328]	; (800417c <_printf_i+0x21c>)
 8004034:	9203      	str	r2, [sp, #12]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	6821      	ldr	r1, [r4, #0]
 800403a:	ca20      	ldmia	r2!, {r5}
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	0608      	lsls	r0, r1, #24
 8004040:	d550      	bpl.n	80040e4 <_printf_i+0x184>
 8004042:	07cb      	lsls	r3, r1, #31
 8004044:	d502      	bpl.n	800404c <_printf_i+0xec>
 8004046:	2320      	movs	r3, #32
 8004048:	4319      	orrs	r1, r3
 800404a:	6021      	str	r1, [r4, #0]
 800404c:	2710      	movs	r7, #16
 800404e:	2d00      	cmp	r5, #0
 8004050:	d103      	bne.n	800405a <_printf_i+0xfa>
 8004052:	2320      	movs	r3, #32
 8004054:	6822      	ldr	r2, [r4, #0]
 8004056:	439a      	bics	r2, r3
 8004058:	6022      	str	r2, [r4, #0]
 800405a:	0023      	movs	r3, r4
 800405c:	2200      	movs	r2, #0
 800405e:	3343      	adds	r3, #67	; 0x43
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	6863      	ldr	r3, [r4, #4]
 8004064:	60a3      	str	r3, [r4, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	db03      	blt.n	8004072 <_printf_i+0x112>
 800406a:	2204      	movs	r2, #4
 800406c:	6821      	ldr	r1, [r4, #0]
 800406e:	4391      	bics	r1, r2
 8004070:	6021      	str	r1, [r4, #0]
 8004072:	2d00      	cmp	r5, #0
 8004074:	d102      	bne.n	800407c <_printf_i+0x11c>
 8004076:	9e04      	ldr	r6, [sp, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00c      	beq.n	8004096 <_printf_i+0x136>
 800407c:	9e04      	ldr	r6, [sp, #16]
 800407e:	0028      	movs	r0, r5
 8004080:	0039      	movs	r1, r7
 8004082:	f7fc f8d9 	bl	8000238 <__aeabi_uidivmod>
 8004086:	9b03      	ldr	r3, [sp, #12]
 8004088:	3e01      	subs	r6, #1
 800408a:	5c5b      	ldrb	r3, [r3, r1]
 800408c:	7033      	strb	r3, [r6, #0]
 800408e:	002b      	movs	r3, r5
 8004090:	0005      	movs	r5, r0
 8004092:	429f      	cmp	r7, r3
 8004094:	d9f3      	bls.n	800407e <_printf_i+0x11e>
 8004096:	2f08      	cmp	r7, #8
 8004098:	d109      	bne.n	80040ae <_printf_i+0x14e>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	07db      	lsls	r3, r3, #31
 800409e:	d506      	bpl.n	80040ae <_printf_i+0x14e>
 80040a0:	6863      	ldr	r3, [r4, #4]
 80040a2:	6922      	ldr	r2, [r4, #16]
 80040a4:	4293      	cmp	r3, r2
 80040a6:	dc02      	bgt.n	80040ae <_printf_i+0x14e>
 80040a8:	2330      	movs	r3, #48	; 0x30
 80040aa:	3e01      	subs	r6, #1
 80040ac:	7033      	strb	r3, [r6, #0]
 80040ae:	9b04      	ldr	r3, [sp, #16]
 80040b0:	1b9b      	subs	r3, r3, r6
 80040b2:	6123      	str	r3, [r4, #16]
 80040b4:	9b07      	ldr	r3, [sp, #28]
 80040b6:	0021      	movs	r1, r4
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	9805      	ldr	r0, [sp, #20]
 80040bc:	9b06      	ldr	r3, [sp, #24]
 80040be:	aa09      	add	r2, sp, #36	; 0x24
 80040c0:	f7ff fede 	bl	8003e80 <_printf_common>
 80040c4:	1c43      	adds	r3, r0, #1
 80040c6:	d135      	bne.n	8004134 <_printf_i+0x1d4>
 80040c8:	2001      	movs	r0, #1
 80040ca:	4240      	negs	r0, r0
 80040cc:	b00b      	add	sp, #44	; 0x2c
 80040ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d0:	2220      	movs	r2, #32
 80040d2:	6809      	ldr	r1, [r1, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	6022      	str	r2, [r4, #0]
 80040d8:	0022      	movs	r2, r4
 80040da:	2178      	movs	r1, #120	; 0x78
 80040dc:	3245      	adds	r2, #69	; 0x45
 80040de:	7011      	strb	r1, [r2, #0]
 80040e0:	4a27      	ldr	r2, [pc, #156]	; (8004180 <_printf_i+0x220>)
 80040e2:	e7a7      	b.n	8004034 <_printf_i+0xd4>
 80040e4:	0648      	lsls	r0, r1, #25
 80040e6:	d5ac      	bpl.n	8004042 <_printf_i+0xe2>
 80040e8:	b2ad      	uxth	r5, r5
 80040ea:	e7aa      	b.n	8004042 <_printf_i+0xe2>
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	680d      	ldr	r5, [r1, #0]
 80040f0:	1d10      	adds	r0, r2, #4
 80040f2:	6949      	ldr	r1, [r1, #20]
 80040f4:	6018      	str	r0, [r3, #0]
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	062e      	lsls	r6, r5, #24
 80040fa:	d501      	bpl.n	8004100 <_printf_i+0x1a0>
 80040fc:	6019      	str	r1, [r3, #0]
 80040fe:	e002      	b.n	8004106 <_printf_i+0x1a6>
 8004100:	066d      	lsls	r5, r5, #25
 8004102:	d5fb      	bpl.n	80040fc <_printf_i+0x19c>
 8004104:	8019      	strh	r1, [r3, #0]
 8004106:	2300      	movs	r3, #0
 8004108:	9e04      	ldr	r6, [sp, #16]
 800410a:	6123      	str	r3, [r4, #16]
 800410c:	e7d2      	b.n	80040b4 <_printf_i+0x154>
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	1d11      	adds	r1, r2, #4
 8004112:	6019      	str	r1, [r3, #0]
 8004114:	6816      	ldr	r6, [r2, #0]
 8004116:	2100      	movs	r1, #0
 8004118:	0030      	movs	r0, r6
 800411a:	6862      	ldr	r2, [r4, #4]
 800411c:	f000 f832 	bl	8004184 <memchr>
 8004120:	2800      	cmp	r0, #0
 8004122:	d001      	beq.n	8004128 <_printf_i+0x1c8>
 8004124:	1b80      	subs	r0, r0, r6
 8004126:	6060      	str	r0, [r4, #4]
 8004128:	6863      	ldr	r3, [r4, #4]
 800412a:	6123      	str	r3, [r4, #16]
 800412c:	2300      	movs	r3, #0
 800412e:	9a04      	ldr	r2, [sp, #16]
 8004130:	7013      	strb	r3, [r2, #0]
 8004132:	e7bf      	b.n	80040b4 <_printf_i+0x154>
 8004134:	6923      	ldr	r3, [r4, #16]
 8004136:	0032      	movs	r2, r6
 8004138:	9906      	ldr	r1, [sp, #24]
 800413a:	9805      	ldr	r0, [sp, #20]
 800413c:	9d07      	ldr	r5, [sp, #28]
 800413e:	47a8      	blx	r5
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d0c1      	beq.n	80040c8 <_printf_i+0x168>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	079b      	lsls	r3, r3, #30
 8004148:	d415      	bmi.n	8004176 <_printf_i+0x216>
 800414a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800414c:	68e0      	ldr	r0, [r4, #12]
 800414e:	4298      	cmp	r0, r3
 8004150:	dabc      	bge.n	80040cc <_printf_i+0x16c>
 8004152:	0018      	movs	r0, r3
 8004154:	e7ba      	b.n	80040cc <_printf_i+0x16c>
 8004156:	0022      	movs	r2, r4
 8004158:	2301      	movs	r3, #1
 800415a:	9906      	ldr	r1, [sp, #24]
 800415c:	9805      	ldr	r0, [sp, #20]
 800415e:	9e07      	ldr	r6, [sp, #28]
 8004160:	3219      	adds	r2, #25
 8004162:	47b0      	blx	r6
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d0af      	beq.n	80040c8 <_printf_i+0x168>
 8004168:	3501      	adds	r5, #1
 800416a:	68e3      	ldr	r3, [r4, #12]
 800416c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	42ab      	cmp	r3, r5
 8004172:	dcf0      	bgt.n	8004156 <_printf_i+0x1f6>
 8004174:	e7e9      	b.n	800414a <_printf_i+0x1ea>
 8004176:	2500      	movs	r5, #0
 8004178:	e7f7      	b.n	800416a <_printf_i+0x20a>
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	080045a1 	.word	0x080045a1
 8004180:	080045b2 	.word	0x080045b2

08004184 <memchr>:
 8004184:	b2c9      	uxtb	r1, r1
 8004186:	1882      	adds	r2, r0, r2
 8004188:	4290      	cmp	r0, r2
 800418a:	d101      	bne.n	8004190 <memchr+0xc>
 800418c:	2000      	movs	r0, #0
 800418e:	4770      	bx	lr
 8004190:	7803      	ldrb	r3, [r0, #0]
 8004192:	428b      	cmp	r3, r1
 8004194:	d0fb      	beq.n	800418e <memchr+0xa>
 8004196:	3001      	adds	r0, #1
 8004198:	e7f6      	b.n	8004188 <memchr+0x4>

0800419a <memcpy>:
 800419a:	2300      	movs	r3, #0
 800419c:	b510      	push	{r4, lr}
 800419e:	429a      	cmp	r2, r3
 80041a0:	d100      	bne.n	80041a4 <memcpy+0xa>
 80041a2:	bd10      	pop	{r4, pc}
 80041a4:	5ccc      	ldrb	r4, [r1, r3]
 80041a6:	54c4      	strb	r4, [r0, r3]
 80041a8:	3301      	adds	r3, #1
 80041aa:	e7f8      	b.n	800419e <memcpy+0x4>

080041ac <memmove>:
 80041ac:	b510      	push	{r4, lr}
 80041ae:	4288      	cmp	r0, r1
 80041b0:	d902      	bls.n	80041b8 <memmove+0xc>
 80041b2:	188b      	adds	r3, r1, r2
 80041b4:	4298      	cmp	r0, r3
 80041b6:	d303      	bcc.n	80041c0 <memmove+0x14>
 80041b8:	2300      	movs	r3, #0
 80041ba:	e007      	b.n	80041cc <memmove+0x20>
 80041bc:	5c8b      	ldrb	r3, [r1, r2]
 80041be:	5483      	strb	r3, [r0, r2]
 80041c0:	3a01      	subs	r2, #1
 80041c2:	d2fb      	bcs.n	80041bc <memmove+0x10>
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	5ccc      	ldrb	r4, [r1, r3]
 80041c8:	54c4      	strb	r4, [r0, r3]
 80041ca:	3301      	adds	r3, #1
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d1fa      	bne.n	80041c6 <memmove+0x1a>
 80041d0:	e7f8      	b.n	80041c4 <memmove+0x18>
	...

080041d4 <_free_r>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	0005      	movs	r5, r0
 80041d8:	2900      	cmp	r1, #0
 80041da:	d010      	beq.n	80041fe <_free_r+0x2a>
 80041dc:	1f0c      	subs	r4, r1, #4
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	da00      	bge.n	80041e6 <_free_r+0x12>
 80041e4:	18e4      	adds	r4, r4, r3
 80041e6:	0028      	movs	r0, r5
 80041e8:	f000 f8d4 	bl	8004394 <__malloc_lock>
 80041ec:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <_free_r+0x90>)
 80041ee:	6813      	ldr	r3, [r2, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <_free_r+0x2c>
 80041f4:	6063      	str	r3, [r4, #4]
 80041f6:	6014      	str	r4, [r2, #0]
 80041f8:	0028      	movs	r0, r5
 80041fa:	f000 f8d3 	bl	80043a4 <__malloc_unlock>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	42a3      	cmp	r3, r4
 8004202:	d908      	bls.n	8004216 <_free_r+0x42>
 8004204:	6821      	ldr	r1, [r4, #0]
 8004206:	1860      	adds	r0, r4, r1
 8004208:	4283      	cmp	r3, r0
 800420a:	d1f3      	bne.n	80041f4 <_free_r+0x20>
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	1841      	adds	r1, r0, r1
 8004212:	6021      	str	r1, [r4, #0]
 8004214:	e7ee      	b.n	80041f4 <_free_r+0x20>
 8004216:	001a      	movs	r2, r3
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <_free_r+0x4e>
 800421e:	42a3      	cmp	r3, r4
 8004220:	d9f9      	bls.n	8004216 <_free_r+0x42>
 8004222:	6811      	ldr	r1, [r2, #0]
 8004224:	1850      	adds	r0, r2, r1
 8004226:	42a0      	cmp	r0, r4
 8004228:	d10b      	bne.n	8004242 <_free_r+0x6e>
 800422a:	6820      	ldr	r0, [r4, #0]
 800422c:	1809      	adds	r1, r1, r0
 800422e:	1850      	adds	r0, r2, r1
 8004230:	6011      	str	r1, [r2, #0]
 8004232:	4283      	cmp	r3, r0
 8004234:	d1e0      	bne.n	80041f8 <_free_r+0x24>
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	1841      	adds	r1, r0, r1
 800423c:	6011      	str	r1, [r2, #0]
 800423e:	6053      	str	r3, [r2, #4]
 8004240:	e7da      	b.n	80041f8 <_free_r+0x24>
 8004242:	42a0      	cmp	r0, r4
 8004244:	d902      	bls.n	800424c <_free_r+0x78>
 8004246:	230c      	movs	r3, #12
 8004248:	602b      	str	r3, [r5, #0]
 800424a:	e7d5      	b.n	80041f8 <_free_r+0x24>
 800424c:	6821      	ldr	r1, [r4, #0]
 800424e:	1860      	adds	r0, r4, r1
 8004250:	4283      	cmp	r3, r0
 8004252:	d103      	bne.n	800425c <_free_r+0x88>
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	1841      	adds	r1, r0, r1
 800425a:	6021      	str	r1, [r4, #0]
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	6054      	str	r4, [r2, #4]
 8004260:	e7ca      	b.n	80041f8 <_free_r+0x24>
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	200000a8 	.word	0x200000a8

08004268 <_malloc_r>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	2303      	movs	r3, #3
 800426c:	1ccd      	adds	r5, r1, #3
 800426e:	439d      	bics	r5, r3
 8004270:	3508      	adds	r5, #8
 8004272:	0006      	movs	r6, r0
 8004274:	2d0c      	cmp	r5, #12
 8004276:	d21f      	bcs.n	80042b8 <_malloc_r+0x50>
 8004278:	250c      	movs	r5, #12
 800427a:	42a9      	cmp	r1, r5
 800427c:	d81e      	bhi.n	80042bc <_malloc_r+0x54>
 800427e:	0030      	movs	r0, r6
 8004280:	f000 f888 	bl	8004394 <__malloc_lock>
 8004284:	4925      	ldr	r1, [pc, #148]	; (800431c <_malloc_r+0xb4>)
 8004286:	680a      	ldr	r2, [r1, #0]
 8004288:	0014      	movs	r4, r2
 800428a:	2c00      	cmp	r4, #0
 800428c:	d11a      	bne.n	80042c4 <_malloc_r+0x5c>
 800428e:	4f24      	ldr	r7, [pc, #144]	; (8004320 <_malloc_r+0xb8>)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d104      	bne.n	80042a0 <_malloc_r+0x38>
 8004296:	0021      	movs	r1, r4
 8004298:	0030      	movs	r0, r6
 800429a:	f000 f869 	bl	8004370 <_sbrk_r>
 800429e:	6038      	str	r0, [r7, #0]
 80042a0:	0029      	movs	r1, r5
 80042a2:	0030      	movs	r0, r6
 80042a4:	f000 f864 	bl	8004370 <_sbrk_r>
 80042a8:	1c43      	adds	r3, r0, #1
 80042aa:	d12b      	bne.n	8004304 <_malloc_r+0x9c>
 80042ac:	230c      	movs	r3, #12
 80042ae:	0030      	movs	r0, r6
 80042b0:	6033      	str	r3, [r6, #0]
 80042b2:	f000 f877 	bl	80043a4 <__malloc_unlock>
 80042b6:	e003      	b.n	80042c0 <_malloc_r+0x58>
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	dade      	bge.n	800427a <_malloc_r+0x12>
 80042bc:	230c      	movs	r3, #12
 80042be:	6033      	str	r3, [r6, #0]
 80042c0:	2000      	movs	r0, #0
 80042c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	1b5b      	subs	r3, r3, r5
 80042c8:	d419      	bmi.n	80042fe <_malloc_r+0x96>
 80042ca:	2b0b      	cmp	r3, #11
 80042cc:	d903      	bls.n	80042d6 <_malloc_r+0x6e>
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	18e4      	adds	r4, r4, r3
 80042d2:	6025      	str	r5, [r4, #0]
 80042d4:	e003      	b.n	80042de <_malloc_r+0x76>
 80042d6:	6863      	ldr	r3, [r4, #4]
 80042d8:	42a2      	cmp	r2, r4
 80042da:	d10e      	bne.n	80042fa <_malloc_r+0x92>
 80042dc:	600b      	str	r3, [r1, #0]
 80042de:	0030      	movs	r0, r6
 80042e0:	f000 f860 	bl	80043a4 <__malloc_unlock>
 80042e4:	0020      	movs	r0, r4
 80042e6:	2207      	movs	r2, #7
 80042e8:	300b      	adds	r0, #11
 80042ea:	1d23      	adds	r3, r4, #4
 80042ec:	4390      	bics	r0, r2
 80042ee:	1ac2      	subs	r2, r0, r3
 80042f0:	4298      	cmp	r0, r3
 80042f2:	d0e6      	beq.n	80042c2 <_malloc_r+0x5a>
 80042f4:	1a1b      	subs	r3, r3, r0
 80042f6:	50a3      	str	r3, [r4, r2]
 80042f8:	e7e3      	b.n	80042c2 <_malloc_r+0x5a>
 80042fa:	6053      	str	r3, [r2, #4]
 80042fc:	e7ef      	b.n	80042de <_malloc_r+0x76>
 80042fe:	0022      	movs	r2, r4
 8004300:	6864      	ldr	r4, [r4, #4]
 8004302:	e7c2      	b.n	800428a <_malloc_r+0x22>
 8004304:	2303      	movs	r3, #3
 8004306:	1cc4      	adds	r4, r0, #3
 8004308:	439c      	bics	r4, r3
 800430a:	42a0      	cmp	r0, r4
 800430c:	d0e1      	beq.n	80042d2 <_malloc_r+0x6a>
 800430e:	1a21      	subs	r1, r4, r0
 8004310:	0030      	movs	r0, r6
 8004312:	f000 f82d 	bl	8004370 <_sbrk_r>
 8004316:	1c43      	adds	r3, r0, #1
 8004318:	d1db      	bne.n	80042d2 <_malloc_r+0x6a>
 800431a:	e7c7      	b.n	80042ac <_malloc_r+0x44>
 800431c:	200000a8 	.word	0x200000a8
 8004320:	200000ac 	.word	0x200000ac

08004324 <_realloc_r>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	0007      	movs	r7, r0
 8004328:	000d      	movs	r5, r1
 800432a:	0016      	movs	r6, r2
 800432c:	2900      	cmp	r1, #0
 800432e:	d105      	bne.n	800433c <_realloc_r+0x18>
 8004330:	0011      	movs	r1, r2
 8004332:	f7ff ff99 	bl	8004268 <_malloc_r>
 8004336:	0004      	movs	r4, r0
 8004338:	0020      	movs	r0, r4
 800433a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800433c:	2a00      	cmp	r2, #0
 800433e:	d103      	bne.n	8004348 <_realloc_r+0x24>
 8004340:	f7ff ff48 	bl	80041d4 <_free_r>
 8004344:	0034      	movs	r4, r6
 8004346:	e7f7      	b.n	8004338 <_realloc_r+0x14>
 8004348:	f000 f834 	bl	80043b4 <_malloc_usable_size_r>
 800434c:	002c      	movs	r4, r5
 800434e:	42b0      	cmp	r0, r6
 8004350:	d2f2      	bcs.n	8004338 <_realloc_r+0x14>
 8004352:	0031      	movs	r1, r6
 8004354:	0038      	movs	r0, r7
 8004356:	f7ff ff87 	bl	8004268 <_malloc_r>
 800435a:	1e04      	subs	r4, r0, #0
 800435c:	d0ec      	beq.n	8004338 <_realloc_r+0x14>
 800435e:	0029      	movs	r1, r5
 8004360:	0032      	movs	r2, r6
 8004362:	f7ff ff1a 	bl	800419a <memcpy>
 8004366:	0029      	movs	r1, r5
 8004368:	0038      	movs	r0, r7
 800436a:	f7ff ff33 	bl	80041d4 <_free_r>
 800436e:	e7e3      	b.n	8004338 <_realloc_r+0x14>

08004370 <_sbrk_r>:
 8004370:	2300      	movs	r3, #0
 8004372:	b570      	push	{r4, r5, r6, lr}
 8004374:	4d06      	ldr	r5, [pc, #24]	; (8004390 <_sbrk_r+0x20>)
 8004376:	0004      	movs	r4, r0
 8004378:	0008      	movs	r0, r1
 800437a:	602b      	str	r3, [r5, #0]
 800437c:	f7fc fc40 	bl	8000c00 <_sbrk>
 8004380:	1c43      	adds	r3, r0, #1
 8004382:	d103      	bne.n	800438c <_sbrk_r+0x1c>
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d000      	beq.n	800438c <_sbrk_r+0x1c>
 800438a:	6023      	str	r3, [r4, #0]
 800438c:	bd70      	pop	{r4, r5, r6, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	200001d4 	.word	0x200001d4

08004394 <__malloc_lock>:
 8004394:	b510      	push	{r4, lr}
 8004396:	4802      	ldr	r0, [pc, #8]	; (80043a0 <__malloc_lock+0xc>)
 8004398:	f000 f814 	bl	80043c4 <__retarget_lock_acquire_recursive>
 800439c:	bd10      	pop	{r4, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	200001dc 	.word	0x200001dc

080043a4 <__malloc_unlock>:
 80043a4:	b510      	push	{r4, lr}
 80043a6:	4802      	ldr	r0, [pc, #8]	; (80043b0 <__malloc_unlock+0xc>)
 80043a8:	f000 f80d 	bl	80043c6 <__retarget_lock_release_recursive>
 80043ac:	bd10      	pop	{r4, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	200001dc 	.word	0x200001dc

080043b4 <_malloc_usable_size_r>:
 80043b4:	1f0b      	subs	r3, r1, #4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	1f18      	subs	r0, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da01      	bge.n	80043c2 <_malloc_usable_size_r+0xe>
 80043be:	580b      	ldr	r3, [r1, r0]
 80043c0:	18c0      	adds	r0, r0, r3
 80043c2:	4770      	bx	lr

080043c4 <__retarget_lock_acquire_recursive>:
 80043c4:	4770      	bx	lr

080043c6 <__retarget_lock_release_recursive>:
 80043c6:	4770      	bx	lr

080043c8 <_init>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ce:	bc08      	pop	{r3}
 80043d0:	469e      	mov	lr, r3
 80043d2:	4770      	bx	lr

080043d4 <_fini>:
 80043d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043da:	bc08      	pop	{r3}
 80043dc:	469e      	mov	lr, r3
 80043de:	4770      	bx	lr
