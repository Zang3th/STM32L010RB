
STM32L010RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e0  080037e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037e8  080037e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e8  080037e8  000137e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  080037fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080037fc  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000feae  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002095  00000000  00000000  0002fee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00031f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00032c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002567  00000000  00000000  00033840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e69e  00000000  00000000  00035da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007163f  00000000  00000000  00044445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b5a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002de8  00000000  00000000  000b5ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003660 	.word	0x08003660

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003660 	.word	0x08003660

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	1c08      	adds	r0, r1, #0
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f82e 	bl	80002c0 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	0415      	lsls	r5, r2, #16
 8000274:	0c2d      	lsrs	r5, r5, #16
 8000276:	000f      	movs	r7, r1
 8000278:	0001      	movs	r1, r0
 800027a:	002e      	movs	r6, r5
 800027c:	46c6      	mov	lr, r8
 800027e:	4684      	mov	ip, r0
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	0c14      	lsrs	r4, r2, #16
 8000284:	0c00      	lsrs	r0, r0, #16
 8000286:	0c09      	lsrs	r1, r1, #16
 8000288:	4346      	muls	r6, r0
 800028a:	434d      	muls	r5, r1
 800028c:	4360      	muls	r0, r4
 800028e:	4361      	muls	r1, r4
 8000290:	1940      	adds	r0, r0, r5
 8000292:	0c34      	lsrs	r4, r6, #16
 8000294:	1824      	adds	r4, r4, r0
 8000296:	b500      	push	{lr}
 8000298:	42a5      	cmp	r5, r4
 800029a:	d903      	bls.n	80002a4 <__aeabi_lmul+0x34>
 800029c:	2080      	movs	r0, #128	; 0x80
 800029e:	0240      	lsls	r0, r0, #9
 80002a0:	4680      	mov	r8, r0
 80002a2:	4441      	add	r1, r8
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	186d      	adds	r5, r5, r1
 80002a8:	4661      	mov	r1, ip
 80002aa:	4359      	muls	r1, r3
 80002ac:	437a      	muls	r2, r7
 80002ae:	0430      	lsls	r0, r6, #16
 80002b0:	1949      	adds	r1, r1, r5
 80002b2:	0424      	lsls	r4, r4, #16
 80002b4:	0c00      	lsrs	r0, r0, #16
 80002b6:	1820      	adds	r0, r4, r0
 80002b8:	1889      	adds	r1, r1, r2
 80002ba:	bc80      	pop	{r7}
 80002bc:	46b8      	mov	r8, r7
 80002be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c0 <__udivmoddi4>:
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	4657      	mov	r7, sl
 80002c4:	464e      	mov	r6, r9
 80002c6:	4645      	mov	r5, r8
 80002c8:	46de      	mov	lr, fp
 80002ca:	b5e0      	push	{r5, r6, r7, lr}
 80002cc:	0004      	movs	r4, r0
 80002ce:	000d      	movs	r5, r1
 80002d0:	4692      	mov	sl, r2
 80002d2:	4699      	mov	r9, r3
 80002d4:	b083      	sub	sp, #12
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d830      	bhi.n	800033c <__udivmoddi4+0x7c>
 80002da:	d02d      	beq.n	8000338 <__udivmoddi4+0x78>
 80002dc:	4649      	mov	r1, r9
 80002de:	4650      	mov	r0, sl
 80002e0:	f000 f8ba 	bl	8000458 <__clzdi2>
 80002e4:	0029      	movs	r1, r5
 80002e6:	0006      	movs	r6, r0
 80002e8:	0020      	movs	r0, r4
 80002ea:	f000 f8b5 	bl	8000458 <__clzdi2>
 80002ee:	1a33      	subs	r3, r6, r0
 80002f0:	4698      	mov	r8, r3
 80002f2:	3b20      	subs	r3, #32
 80002f4:	469b      	mov	fp, r3
 80002f6:	d433      	bmi.n	8000360 <__udivmoddi4+0xa0>
 80002f8:	465a      	mov	r2, fp
 80002fa:	4653      	mov	r3, sl
 80002fc:	4093      	lsls	r3, r2
 80002fe:	4642      	mov	r2, r8
 8000300:	001f      	movs	r7, r3
 8000302:	4653      	mov	r3, sl
 8000304:	4093      	lsls	r3, r2
 8000306:	001e      	movs	r6, r3
 8000308:	42af      	cmp	r7, r5
 800030a:	d83a      	bhi.n	8000382 <__udivmoddi4+0xc2>
 800030c:	42af      	cmp	r7, r5
 800030e:	d100      	bne.n	8000312 <__udivmoddi4+0x52>
 8000310:	e078      	b.n	8000404 <__udivmoddi4+0x144>
 8000312:	465b      	mov	r3, fp
 8000314:	1ba4      	subs	r4, r4, r6
 8000316:	41bd      	sbcs	r5, r7
 8000318:	2b00      	cmp	r3, #0
 800031a:	da00      	bge.n	800031e <__udivmoddi4+0x5e>
 800031c:	e075      	b.n	800040a <__udivmoddi4+0x14a>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	2301      	movs	r3, #1
 8000328:	465a      	mov	r2, fp
 800032a:	4093      	lsls	r3, r2
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	2301      	movs	r3, #1
 8000330:	4642      	mov	r2, r8
 8000332:	4093      	lsls	r3, r2
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	e028      	b.n	800038a <__udivmoddi4+0xca>
 8000338:	4282      	cmp	r2, r0
 800033a:	d9cf      	bls.n	80002dc <__udivmoddi4+0x1c>
 800033c:	2200      	movs	r2, #0
 800033e:	2300      	movs	r3, #0
 8000340:	9200      	str	r2, [sp, #0]
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <__udivmoddi4+0x8e>
 800034a:	601c      	str	r4, [r3, #0]
 800034c:	605d      	str	r5, [r3, #4]
 800034e:	9800      	ldr	r0, [sp, #0]
 8000350:	9901      	ldr	r1, [sp, #4]
 8000352:	b003      	add	sp, #12
 8000354:	bcf0      	pop	{r4, r5, r6, r7}
 8000356:	46bb      	mov	fp, r7
 8000358:	46b2      	mov	sl, r6
 800035a:	46a9      	mov	r9, r5
 800035c:	46a0      	mov	r8, r4
 800035e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000360:	4642      	mov	r2, r8
 8000362:	2320      	movs	r3, #32
 8000364:	1a9b      	subs	r3, r3, r2
 8000366:	4652      	mov	r2, sl
 8000368:	40da      	lsrs	r2, r3
 800036a:	4641      	mov	r1, r8
 800036c:	0013      	movs	r3, r2
 800036e:	464a      	mov	r2, r9
 8000370:	408a      	lsls	r2, r1
 8000372:	0017      	movs	r7, r2
 8000374:	4642      	mov	r2, r8
 8000376:	431f      	orrs	r7, r3
 8000378:	4653      	mov	r3, sl
 800037a:	4093      	lsls	r3, r2
 800037c:	001e      	movs	r6, r3
 800037e:	42af      	cmp	r7, r5
 8000380:	d9c4      	bls.n	800030c <__udivmoddi4+0x4c>
 8000382:	2200      	movs	r2, #0
 8000384:	2300      	movs	r3, #0
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	4643      	mov	r3, r8
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0d9      	beq.n	8000344 <__udivmoddi4+0x84>
 8000390:	07fb      	lsls	r3, r7, #31
 8000392:	0872      	lsrs	r2, r6, #1
 8000394:	431a      	orrs	r2, r3
 8000396:	4646      	mov	r6, r8
 8000398:	087b      	lsrs	r3, r7, #1
 800039a:	e00e      	b.n	80003ba <__udivmoddi4+0xfa>
 800039c:	42ab      	cmp	r3, r5
 800039e:	d101      	bne.n	80003a4 <__udivmoddi4+0xe4>
 80003a0:	42a2      	cmp	r2, r4
 80003a2:	d80c      	bhi.n	80003be <__udivmoddi4+0xfe>
 80003a4:	1aa4      	subs	r4, r4, r2
 80003a6:	419d      	sbcs	r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	1924      	adds	r4, r4, r4
 80003ac:	416d      	adcs	r5, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	3e01      	subs	r6, #1
 80003b2:	1824      	adds	r4, r4, r0
 80003b4:	414d      	adcs	r5, r1
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d006      	beq.n	80003c8 <__udivmoddi4+0x108>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	d9ee      	bls.n	800039c <__udivmoddi4+0xdc>
 80003be:	3e01      	subs	r6, #1
 80003c0:	1924      	adds	r4, r4, r4
 80003c2:	416d      	adcs	r5, r5
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d1f8      	bne.n	80003ba <__udivmoddi4+0xfa>
 80003c8:	9800      	ldr	r0, [sp, #0]
 80003ca:	9901      	ldr	r1, [sp, #4]
 80003cc:	465b      	mov	r3, fp
 80003ce:	1900      	adds	r0, r0, r4
 80003d0:	4169      	adcs	r1, r5
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	db24      	blt.n	8000420 <__udivmoddi4+0x160>
 80003d6:	002b      	movs	r3, r5
 80003d8:	465a      	mov	r2, fp
 80003da:	4644      	mov	r4, r8
 80003dc:	40d3      	lsrs	r3, r2
 80003de:	002a      	movs	r2, r5
 80003e0:	40e2      	lsrs	r2, r4
 80003e2:	001c      	movs	r4, r3
 80003e4:	465b      	mov	r3, fp
 80003e6:	0015      	movs	r5, r2
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	db2a      	blt.n	8000442 <__udivmoddi4+0x182>
 80003ec:	0026      	movs	r6, r4
 80003ee:	409e      	lsls	r6, r3
 80003f0:	0033      	movs	r3, r6
 80003f2:	0026      	movs	r6, r4
 80003f4:	4647      	mov	r7, r8
 80003f6:	40be      	lsls	r6, r7
 80003f8:	0032      	movs	r2, r6
 80003fa:	1a80      	subs	r0, r0, r2
 80003fc:	4199      	sbcs	r1, r3
 80003fe:	9000      	str	r0, [sp, #0]
 8000400:	9101      	str	r1, [sp, #4]
 8000402:	e79f      	b.n	8000344 <__udivmoddi4+0x84>
 8000404:	42a3      	cmp	r3, r4
 8000406:	d8bc      	bhi.n	8000382 <__udivmoddi4+0xc2>
 8000408:	e783      	b.n	8000312 <__udivmoddi4+0x52>
 800040a:	4642      	mov	r2, r8
 800040c:	2320      	movs	r3, #32
 800040e:	2100      	movs	r1, #0
 8000410:	1a9b      	subs	r3, r3, r2
 8000412:	2200      	movs	r2, #0
 8000414:	9100      	str	r1, [sp, #0]
 8000416:	9201      	str	r2, [sp, #4]
 8000418:	2201      	movs	r2, #1
 800041a:	40da      	lsrs	r2, r3
 800041c:	9201      	str	r2, [sp, #4]
 800041e:	e786      	b.n	800032e <__udivmoddi4+0x6e>
 8000420:	4642      	mov	r2, r8
 8000422:	2320      	movs	r3, #32
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	002a      	movs	r2, r5
 8000428:	4646      	mov	r6, r8
 800042a:	409a      	lsls	r2, r3
 800042c:	0023      	movs	r3, r4
 800042e:	40f3      	lsrs	r3, r6
 8000430:	4644      	mov	r4, r8
 8000432:	4313      	orrs	r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	40e2      	lsrs	r2, r4
 8000438:	001c      	movs	r4, r3
 800043a:	465b      	mov	r3, fp
 800043c:	0015      	movs	r5, r2
 800043e:	2b00      	cmp	r3, #0
 8000440:	dad4      	bge.n	80003ec <__udivmoddi4+0x12c>
 8000442:	4642      	mov	r2, r8
 8000444:	002f      	movs	r7, r5
 8000446:	2320      	movs	r3, #32
 8000448:	0026      	movs	r6, r4
 800044a:	4097      	lsls	r7, r2
 800044c:	1a9b      	subs	r3, r3, r2
 800044e:	40de      	lsrs	r6, r3
 8000450:	003b      	movs	r3, r7
 8000452:	4333      	orrs	r3, r6
 8000454:	e7cd      	b.n	80003f2 <__udivmoddi4+0x132>
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__clzdi2>:
 8000458:	b510      	push	{r4, lr}
 800045a:	2900      	cmp	r1, #0
 800045c:	d103      	bne.n	8000466 <__clzdi2+0xe>
 800045e:	f000 f807 	bl	8000470 <__clzsi2>
 8000462:	3020      	adds	r0, #32
 8000464:	e002      	b.n	800046c <__clzdi2+0x14>
 8000466:	1c08      	adds	r0, r1, #0
 8000468:	f000 f802 	bl	8000470 <__clzsi2>
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__clzsi2>:
 8000470:	211c      	movs	r1, #28
 8000472:	2301      	movs	r3, #1
 8000474:	041b      	lsls	r3, r3, #16
 8000476:	4298      	cmp	r0, r3
 8000478:	d301      	bcc.n	800047e <__clzsi2+0xe>
 800047a:	0c00      	lsrs	r0, r0, #16
 800047c:	3910      	subs	r1, #16
 800047e:	0a1b      	lsrs	r3, r3, #8
 8000480:	4298      	cmp	r0, r3
 8000482:	d301      	bcc.n	8000488 <__clzsi2+0x18>
 8000484:	0a00      	lsrs	r0, r0, #8
 8000486:	3908      	subs	r1, #8
 8000488:	091b      	lsrs	r3, r3, #4
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0x22>
 800048e:	0900      	lsrs	r0, r0, #4
 8000490:	3904      	subs	r1, #4
 8000492:	a202      	add	r2, pc, #8	; (adr r2, 800049c <__clzsi2+0x2c>)
 8000494:	5c10      	ldrb	r0, [r2, r0]
 8000496:	1840      	adds	r0, r0, r1
 8000498:	4770      	bx	lr
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	02020304 	.word	0x02020304
 80004a0:	01010101 	.word	0x01010101
	...

080004ac <SystemClock_Config>:
SPI_HandleTypeDef hspi1;

// ----- Functions ----- 

static void SystemClock_Config(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b099      	sub	sp, #100	; 0x64
 80004b0:	af00      	add	r7, sp, #0
  	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	242c      	movs	r4, #44	; 0x2c
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2334      	movs	r3, #52	; 0x34
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f003 f8c7 	bl	8003650 <memset>
  	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c2:	2318      	movs	r3, #24
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	2314      	movs	r3, #20
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f003 f8bf 	bl	8003650 <memset>
  	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d2:	003b      	movs	r3, r7
 80004d4:	0018      	movs	r0, r3
 80004d6:	2318      	movs	r3, #24
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f003 f8b8 	bl	8003650 <memset>

  	//Configure the main internal regulator output voltage
  	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e0:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <SystemClock_Config+0xe8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a2c      	ldr	r2, [pc, #176]	; (8000598 <SystemClock_Config+0xec>)
 80004e6:	401a      	ands	r2, r3
 80004e8:	4b2a      	ldr	r3, [pc, #168]	; (8000594 <SystemClock_Config+0xe8>)
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0109      	lsls	r1, r1, #4
 80004ee:	430a      	orrs	r2, r1
 80004f0:	601a      	str	r2, [r3, #0]

  	//Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure
  	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f2:	0021      	movs	r1, r4
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2202      	movs	r2, #2
 80004f8:	601a      	str	r2, [r3, #0]
  	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2201      	movs	r2, #1
 80004fe:	60da      	str	r2, [r3, #12]
  	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2210      	movs	r2, #16
 8000504:	611a      	str	r2, [r3, #16]
  	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2202      	movs	r2, #2
 800050a:	625a      	str	r2, [r3, #36]	; 0x24
  	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
  	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	02d2      	lsls	r2, r2, #11
 8000518:	62da      	str	r2, [r3, #44]	; 0x2c
  	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	03d2      	lsls	r2, r2, #15
 8000520:	631a      	str	r2, [r3, #48]	; 0x30
  	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	187b      	adds	r3, r7, r1
 8000524:	0018      	movs	r0, r3
 8000526:	f001 f85f 	bl	80015e8 <HAL_RCC_OscConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d003      	beq.n	8000536 <SystemClock_Config+0x8a>
  	{
  	  	UT_Error_Handler("HAL_RCC_OscConfig failed!");
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <SystemClock_Config+0xf0>)
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fcc9 	bl	8000ec8 <UT_Error_Handler>
  	}

  	//Initializes the CPU, AHB and APB buses clocks
  	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000536:	2118      	movs	r1, #24
 8000538:	187b      	adds	r3, r7, r1
 800053a:	220f      	movs	r2, #15
 800053c:	601a      	str	r2, [r3, #0]
  	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2203      	movs	r2, #3
 8000542:	605a      	str	r2, [r3, #4]
  	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2101      	movs	r1, #1
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fbc0 	bl	8001ce0 <HAL_RCC_ClockConfig>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d003      	beq.n	800056c <SystemClock_Config+0xc0>
  	{
  	  	UT_Error_Handler("HAL_RCC_ClockConfig failed!");
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <SystemClock_Config+0xf4>)
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fcae 	bl	8000ec8 <UT_Error_Handler>
  	}

  	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800056c:	003b      	movs	r3, r7
 800056e:	2202      	movs	r2, #2
 8000570:	601a      	str	r2, [r3, #0]
  	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000572:	003b      	movs	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000578:	003b      	movs	r3, r7
 800057a:	0018      	movs	r0, r3
 800057c:	f001 fdd4 	bl	8002128 <HAL_RCCEx_PeriphCLKConfig>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d003      	beq.n	800058c <SystemClock_Config+0xe0>
  	{
  	  	UT_Error_Handler("HAL_RCCEx_PeriphCLKConfig failed!");
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <SystemClock_Config+0xf8>)
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fc9e 	bl	8000ec8 <UT_Error_Handler>
  	}
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b019      	add	sp, #100	; 0x64
 8000592:	bd90      	pop	{r4, r7, pc}
 8000594:	40007000 	.word	0x40007000
 8000598:	ffffe7ff 	.word	0xffffe7ff
 800059c:	08003678 	.word	0x08003678
 80005a0:	08003694 	.word	0x08003694
 80005a4:	080036b0 	.word	0x080036b0

080005a8 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005ae:	4a16      	ldr	r2, [pc, #88]	; (8000608 <MX_USART2_UART_Init+0x60>)
 80005b0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005b4:	22e1      	movs	r2, #225	; 0xe1
 80005b6:	0252      	lsls	r2, r2, #9
 80005b8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 fb33 	bl	8002c58 <HAL_UART_Init>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d003      	beq.n	80005fe <MX_USART2_UART_Init+0x56>
	{
		UT_Error_Handler("HAL_UART_Init failed!");
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <MX_USART2_UART_Init+0x64>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 fc65 	bl	8000ec8 <UT_Error_Handler>
	}
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000c0 	.word	0x200000c0
 8000608:	40004400 	.word	0x40004400
 800060c:	080036d4 	.word	0x080036d4

08000610 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000616:	2308      	movs	r3, #8
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	0018      	movs	r0, r3
 800061c:	2310      	movs	r3, #16
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f003 f815 	bl	8003650 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000626:	003b      	movs	r3, r7
 8000628:	0018      	movs	r0, r3
 800062a:	2308      	movs	r3, #8
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f003 f80e 	bl	8003650 <memset>

	//Configure timer 2
	htim2.Instance = TIM2;
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_TIM2_Init+0xb8>)
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	05d2      	lsls	r2, r2, #23
 800063a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3200; //32MHZ divided by 3200. This results in 10000 oscillations per second
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_TIM2_Init+0xb8>)
 800063e:	22c8      	movs	r2, #200	; 0xc8
 8000640:	0112      	lsls	r2, r2, #4
 8000642:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_TIM2_Init+0xb8>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000; //Counter goes up to 10000, then starts anew. This results in 1 counter restarts every second
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_TIM2_Init+0xb8>)
 800064c:	4a1f      	ldr	r2, [pc, #124]	; (80006cc <MX_TIM2_Init+0xbc>)
 800064e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_TIM2_Init+0xb8>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_TIM2_Init+0xb8>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_TIM2_Init+0xb8>)
 800065e:	0018      	movs	r0, r3
 8000660:	f001 ff11 	bl	8002486 <HAL_TIM_Base_Init>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d003      	beq.n	8000670 <MX_TIM2_Init+0x60>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_TIM2_Init+0xc0>)
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fc2c 	bl	8000ec8 <UT_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; //Use internal clock as a clock source
 8000670:	2108      	movs	r1, #8
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	0152      	lsls	r2, r2, #5
 8000678:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800067a:	187a      	adds	r2, r7, r1
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_TIM2_Init+0xb8>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f002 f8b9 	bl	80027f8 <HAL_TIM_ConfigClockSource>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d003      	beq.n	8000692 <MX_TIM2_Init+0x82>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_TIM2_Init+0xc4>)
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fc1b 	bl	8000ec8 <UT_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000692:	003b      	movs	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069e:	003a      	movs	r2, r7
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_TIM2_Init+0xb8>)
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 fa7f 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d003      	beq.n	80006b6 <MX_TIM2_Init+0xa6>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_TIM2_Init+0xc8>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fc09 	bl	8000ec8 <UT_Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim2);
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <MX_TIM2_Init+0xb8>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 f985 	bl	80009c8 <HAL_TIM_MspPostInit>
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b006      	add	sp, #24
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000080 	.word	0x20000080
 80006cc:	00002710 	.word	0x00002710
 80006d0:	080036ec 	.word	0x080036ec
 80006d4:	08003708 	.word	0x08003708
 80006d8:	0800372c 	.word	0x0800372c

080006dc <MX_TIM21_Init>:

static void MX_TIM21_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	2308      	movs	r3, #8
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	0018      	movs	r0, r3
 80006e8:	2310      	movs	r3, #16
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f002 ffaf 	bl	8003650 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	003b      	movs	r3, r7
 80006f4:	0018      	movs	r0, r3
 80006f6:	2308      	movs	r3, #8
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f002 ffa8 	bl	8003650 <memset>

	//Configure timer 21
	htim21.Instance = TIM21;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_TIM21_Init+0xac>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <MX_TIM21_Init+0xb0>)
 8000704:	601a      	str	r2, [r3, #0]
	htim21.Init.Prescaler = 28; //32MHZ divided by 28. High resolution for microsecond-Delay-Function
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <MX_TIM21_Init+0xac>)
 8000708:	221c      	movs	r2, #28
 800070a:	605a      	str	r2, [r3, #4]
	htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_TIM21_Init+0xac>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
	htim21.Init.Period = 65535;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_TIM21_Init+0xac>)
 8000714:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <MX_TIM21_Init+0xb4>)
 8000716:	60da      	str	r2, [r3, #12]
	htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_TIM21_Init+0xac>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
	htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_TIM21_Init+0xac>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_TIM21_Init+0xac>)
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fead 	bl	8002486 <HAL_TIM_Base_Init>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d003      	beq.n	8000738 <MX_TIM21_Init+0x5c>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_TIM21_Init+0xb8>)
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fbc8 	bl	8000ec8 <UT_Error_Handler>
	}	

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000738:	2108      	movs	r1, #8
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0152      	lsls	r2, r2, #5
 8000740:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000742:	187a      	adds	r2, r7, r1
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_TIM21_Init+0xac>)
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f002 f855 	bl	80027f8 <HAL_TIM_ConfigClockSource>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d003      	beq.n	800075a <MX_TIM21_Init+0x7e>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_TIM21_Init+0xbc>)
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fbb7 	bl	8000ec8 <UT_Error_Handler>
	}	

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075a:	003b      	movs	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	003b      	movs	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000766:	003a      	movs	r2, r7
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_TIM21_Init+0xac>)
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f002 fa1b 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d003      	beq.n	800077e <MX_TIM21_Init+0xa2>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_TIM21_Init+0xc0>)
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fba5 	bl	8000ec8 <UT_Error_Handler>
	}
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b006      	add	sp, #24
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000144 	.word	0x20000144
 800078c:	40010800 	.word	0x40010800
 8000790:	0000ffff 	.word	0x0000ffff
 8000794:	080036ec 	.word	0x080036ec
 8000798:	08003708 	.word	0x08003708
 800079c:	0800372c 	.word	0x0800372c

080007a0 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_SPI1_Init+0x6c>)
 80007a6:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <MX_SPI1_Init+0x70>)
 80007a8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_SPI1_Init+0x6c>)
 80007ac:	2282      	movs	r2, #130	; 0x82
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x6c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_SPI1_Init+0x6c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_SPI1_Init+0x6c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x6c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_SPI1_Init+0x6c>)
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; //4 MBits/s
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x6c>)
 80007d4:	2210      	movs	r2, #16
 80007d6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x6c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_SPI1_Init+0x6c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x6c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_SPI1_Init+0x6c>)
 80007ec:	2207      	movs	r2, #7
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x6c>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fdbe 	bl	8002374 <HAL_SPI_Init>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d003      	beq.n	8000804 <MX_SPI1_Init+0x64>
	{
		UT_Error_Handler("HAL_SPI_Init failed!");
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <MX_SPI1_Init+0x74>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fb62 	bl	8000ec8 <UT_Error_Handler>
	}
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	20000028 	.word	0x20000028
 8000810:	40013000 	.word	0x40013000
 8000814:	0800375c 	.word	0x0800375c

08000818 <Port_Init>:

static void Port_Init(void)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b08b      	sub	sp, #44	; 0x2c
 800081c:	af00      	add	r7, sp, #0
	//Enable GPIO Ports Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <Port_Init+0xa8>)
 8000820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <Port_Init+0xa8>)
 8000824:	2101      	movs	r1, #1
 8000826:	430a      	orrs	r2, r1
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
 800082a:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <Port_Init+0xa8>)
 800082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082e:	2201      	movs	r2, #1
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <Port_Init+0xa8>)
 8000838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <Port_Init+0xa8>)
 800083c:	2102      	movs	r1, #2
 800083e:	430a      	orrs	r2, r1
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <Port_Init+0xa8>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	2202      	movs	r2, #2
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <Port_Init+0xa8>)
 8000850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <Port_Init+0xa8>)
 8000854:	2104      	movs	r1, #4
 8000856:	430a      	orrs	r2, r1
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <Port_Init+0xa8>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	2204      	movs	r2, #4
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <Port_Init+0xa8>)
 8000868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <Port_Init+0xa8>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	430a      	orrs	r2, r1
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <Port_Init+0xa8>)
 8000874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	4013      	ands	r3, r2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

	//Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	2414      	movs	r4, #20
 8000880:	193b      	adds	r3, r7, r4
 8000882:	0018      	movs	r0, r3
 8000884:	2314      	movs	r3, #20
 8000886:	001a      	movs	r2, r3
 8000888:	2100      	movs	r1, #0
 800088a:	f002 fee1 	bl	8003650 <memset>

	//Initialize all Output-Pins of Port B
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800088e:	0021      	movs	r1, r4
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	0052      	lsls	r2, r2, #1
 8000896:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2201      	movs	r2, #1
 800089c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2203      	movs	r2, #3
 80008a8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <Port_Init+0xac>)
 80008ae:	0019      	movs	r1, r3
 80008b0:	0010      	movs	r0, r2
 80008b2:	f000 fce3 	bl	800127c <HAL_GPIO_Init>
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b00b      	add	sp, #44	; 0x2c
 80008bc:	bd90      	pop	{r4, r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40021000 	.word	0x40021000
 80008c4:	50000400 	.word	0x50000400

080008c8 <HAL_TIM_PeriodElapsedCallback>:

//Timed interupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{	
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	//Toggle Onboard-LED (1 sec. on and 1 sec. off)
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d6:	0019      	movs	r1, r3
 80008d8:	0010      	movs	r0, r2
 80008da:	f000 fe6a 	bl	80015b2 <HAL_GPIO_TogglePin>
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	50000400 	.word	0x50000400

080008ec <main>:

int main(void)
{		
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	//Init stuff
	HAL_Init();
 80008f0:	f000 fb52 	bl	8000f98 <HAL_Init>
	SystemClock_Config();
 80008f4:	f7ff fdda 	bl	80004ac <SystemClock_Config>
	Port_Init();
 80008f8:	f7ff ff8e 	bl	8000818 <Port_Init>
	MX_TIM2_Init();
 80008fc:	f7ff fe88 	bl	8000610 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8000900:	f7ff fe52 	bl	80005a8 <MX_USART2_UART_Init>
	MX_TIM21_Init();	
 8000904:	f7ff feea 	bl	80006dc <MX_TIM21_Init>
	MX_SPI1_Init();
 8000908:	f7ff ff4a 	bl	80007a0 <MX_SPI1_Init>

	//Start timers
	HAL_TIM_Base_Start_IT(&htim2);	
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <main+0x54>)
 800090e:	0018      	movs	r0, r3
 8000910:	f001 fe3e 	bl	8002590 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim21);
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <main+0x58>)
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fdf6 	bl	8002508 <HAL_TIM_Base_Start>

	//TFT stuff
	TFT_Init();
 800091c:	f000 f992 	bl	8000c44 <TFT_Init>

	while (1)
	{				
		TFT_TurnDisplayOff();
 8000920:	f000 fa72 	bl	8000e08 <TFT_TurnDisplayOff>
		HAL_Delay(500);
 8000924:	23fa      	movs	r3, #250	; 0xfa
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fba5 	bl	8001078 <HAL_Delay>
		TFT_TurnDisplayOn();
 800092e:	f000 fa1b 	bl	8000d68 <TFT_TurnDisplayOn>
		HAL_Delay(500);
 8000932:	23fa      	movs	r3, #250	; 0xfa
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fb9e 	bl	8001078 <HAL_Delay>
		TFT_TurnDisplayOff();
 800093c:	e7f0      	b.n	8000920 <main+0x34>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	20000080 	.word	0x20000080
 8000944:	20000144 	.word	0x20000144

08000948 <HAL_MspInit>:
#include "main.h"

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <HAL_MspInit+0x24>)
 800094e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x24>)
 8000952:	2101      	movs	r1, #1
 8000954:	430a      	orrs	r2, r1
 8000956:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <HAL_MspInit+0x24>)
 800095a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_MspInit+0x24>)
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	0549      	lsls	r1, r1, #21
 8000962:	430a      	orrs	r2, r1
 8000964:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	429a      	cmp	r2, r3
 8000982:	d10e      	bne.n	80009a2 <HAL_TIM_Base_MspInit+0x32>
  {
    //Peripheral clock enable
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_TIM_Base_MspInit+0x50>)
 8000986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_TIM_Base_MspInit+0x50>)
 800098a:	2101      	movs	r1, #1
 800098c:	430a      	orrs	r2, r1
 800098e:	639a      	str	r2, [r3, #56]	; 0x38

    //Enable timed interrupts based on timer 2
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	200f      	movs	r0, #15
 8000996:	f000 fc3f 	bl	8001218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800099a:	200f      	movs	r0, #15
 800099c:	f000 fc51 	bl	8001242 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM21)
  {
    //Peripheral clock enable
    __HAL_RCC_TIM21_CLK_ENABLE();
  }
}
 80009a0:	e00a      	b.n	80009b8 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_TIM_Base_MspInit+0x54>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d105      	bne.n	80009b8 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <HAL_TIM_Base_MspInit+0x50>)
 80009ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <HAL_TIM_Base_MspInit+0x50>)
 80009b2:	2104      	movs	r1, #4
 80009b4:	430a      	orrs	r2, r1
 80009b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010800 	.word	0x40010800

080009c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b002      	add	sp, #8
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <HAL_UART_MspInit>:
    __HAL_RCC_TIM21_CLK_DISABLE();
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	240c      	movs	r4, #12
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	0018      	movs	r0, r3
 80009e6:	2314      	movs	r3, #20
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f002 fe30 	bl	8003650 <memset>
  if(huart->Instance==USART2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <HAL_UART_MspInit+0x68>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d11d      	bne.n	8000a36 <HAL_UART_MspInit+0x5e>
  {
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_UART_MspInit+0x6c>)
 80009fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_UART_MspInit+0x6c>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	0289      	lsls	r1, r1, #10
 8000a04:	430a      	orrs	r2, r1
 8000a06:	639a      	str	r2, [r3, #56]	; 0x38

    //USART2 GPIO Configuration
    //PA2     ------> USART2_TX
    //PA3     ------> USART2_RX
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000a08:	0021      	movs	r1, r4
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	220c      	movs	r2, #12
 8000a0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2202      	movs	r2, #2
 8000a14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2204      	movs	r2, #4
 8000a26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	187a      	adds	r2, r7, r1
 8000a2a:	23a0      	movs	r3, #160	; 0xa0
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	0011      	movs	r1, r2
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 fc23 	bl	800127c <HAL_GPIO_Init>
  }
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b009      	add	sp, #36	; 0x24
 8000a3c:	bd90      	pop	{r4, r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40004400 	.word	0x40004400
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	240c      	movs	r4, #12
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2314      	movs	r3, #20
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f002 fdf8 	bl	8003650 <memset>
  if(hspi->Instance==SPI1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a18      	ldr	r2, [pc, #96]	; (8000ac8 <HAL_SPI_MspInit+0x80>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d129      	bne.n	8000abe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_SPI_MspInit+0x84>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_SPI_MspInit+0x84>)
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0149      	lsls	r1, r1, #5
 8000a74:	430a      	orrs	r2, r1
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_SPI_MspInit+0x84>)
 8000a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <HAL_SPI_MspInit+0x84>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	430a      	orrs	r2, r1
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_SPI_MspInit+0x84>)
 8000a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a90:	0021      	movs	r1, r4
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	22e0      	movs	r2, #224	; 0xe0
 8000a96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	187a      	adds	r2, r7, r1
 8000ab2:	23a0      	movs	r3, #160	; 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 fbdf 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b009      	add	sp, #36	; 0x24
 8000ac4:	bd90      	pop	{r4, r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40013000 	.word	0x40013000
 8000acc:	40021000 	.word	0x40021000

08000ad0 <NMI_Handler>:
#include "stm32l0xx_it.h"

extern TIM_HandleTypeDef htim2;

void NMI_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

  }
}

void HardFault_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <PendSV_Handler>:


void PendSV_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0

}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000af4:	f000 faa4 	bl	8001040 <HAL_IncTick>
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <EXTI4_15_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l0xx.s).                    */
/******************************************************************************/

void EXTI4_15_IRQHandler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <TIM2_IRQHandler+0x14>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 fd8a 	bl	8002628 <HAL_TIM_IRQHandler>
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	20000080 	.word	0x20000080

08000b20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <TFT_Reset>:
#define D7  GPIOB, GPIO_PIN_7

// ----- Private functions ----- 

void TFT_Reset()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST, 1);
 8000b30:	23a0      	movs	r3, #160	; 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	2201      	movs	r2, #1
 8000b36:	2120      	movs	r1, #32
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 fd1d 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS, 1);
 8000b3e:	23a0      	movs	r3, #160	; 0xa0
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	2201      	movs	r2, #1
 8000b44:	2140      	movs	r1, #64	; 0x40
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 fd16 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS, 1);
 8000b4c:	23a0      	movs	r3, #160	; 0xa0
 8000b4e:	05db      	lsls	r3, r3, #23
 8000b50:	2201      	movs	r2, #1
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	0018      	movs	r0, r3
 8000b56:	f000 fd0f 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WR, 1);
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	0059      	lsls	r1, r3, #1
 8000b5e:	23a0      	movs	r3, #160	; 0xa0
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	2201      	movs	r2, #1
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fd07 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RD, 1);
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	0099      	lsls	r1, r3, #2
 8000b6e:	23a0      	movs	r3, #160	; 0xa0
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	2201      	movs	r2, #1
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 fcff 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D0, 0);
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <TFT_Reset+0xb4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2101      	movs	r1, #1
 8000b80:	0018      	movs	r0, r3
 8000b82:	f000 fcf9 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D1, 0);
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <TFT_Reset+0xb4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 fcf3 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D2, 0);
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <TFT_Reset+0xb4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	2104      	movs	r1, #4
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f000 fced 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D3, 0);
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <TFT_Reset+0xb4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2108      	movs	r1, #8
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fce7 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4, 0);
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <TFT_Reset+0xb4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	2110      	movs	r1, #16
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fce1 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5, 0);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <TFT_Reset+0xb4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2120      	movs	r1, #32
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 fcdb 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6, 0);
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <TFT_Reset+0xb4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2140      	movs	r1, #64	; 0x40
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 fcd5 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7, 0);
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <TFT_Reset+0xb4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f000 fccf 	bl	8001578 <HAL_GPIO_WritePin>
}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	50000400 	.word	0x50000400

08000be4 <TFT_PortInit>:

void TFT_PortInit()
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
    //Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	0018      	movs	r0, r3
 8000bee:	2314      	movs	r3, #20
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f002 fd2c 	bl	8003650 <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	22f8      	movs	r2, #248	; 0xf8
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2201      	movs	r2, #1
 8000c04:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	1d3a      	adds	r2, r7, #4
 8000c0e:	23a0      	movs	r3, #160	; 0xa0
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	0011      	movs	r1, r2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f000 fb31 	bl	800127c <HAL_GPIO_Init>

	//Initialize all Output-Pins of Port B
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2201      	movs	r2, #1
 8000c24:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <TFT_PortInit+0x5c>)
 8000c30:	0019      	movs	r1, r3
 8000c32:	0010      	movs	r0, r2
 8000c34:	f000 fb22 	bl	800127c <HAL_GPIO_Init>
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b006      	add	sp, #24
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	50000400 	.word	0x50000400

08000c44 <TFT_Init>:

// ----- Public Functions ----- 

void TFT_Init()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    TFT_PortInit();
 8000c48:	f7ff ffcc 	bl	8000be4 <TFT_PortInit>
    TFT_Reset();
 8000c4c:	f7ff ff6e 	bl	8000b2c <TFT_Reset>

    //Software reset
    HAL_GPIO_WritePin(CS, 0);   //Begin transmission
 8000c50:	23a0      	movs	r3, #160	; 0xa0
 8000c52:	05db      	lsls	r3, r3, #23
 8000c54:	2200      	movs	r2, #0
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 fc8d 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS, 0);   //Begin writing command 
 8000c5e:	23a0      	movs	r3, #160	; 0xa0
 8000c60:	05db      	lsls	r3, r3, #23
 8000c62:	2200      	movs	r2, #0
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fc86 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WR, 0);
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	0059      	lsls	r1, r3, #1
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	05db      	lsls	r3, r3, #23
 8000c74:	2200      	movs	r2, #0
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 fc7e 	bl	8001578 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(20);
 8000c7c:	2014      	movs	r0, #20
 8000c7e:	f000 f92f 	bl	8000ee0 <UT_Delay_MicroSeconds>

    HAL_GPIO_WritePin(D0, 1);   //Set data
 8000c82:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <TFT_Init+0x120>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	2101      	movs	r1, #1
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 fc75 	bl	8001578 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(20);
 8000c8e:	2014      	movs	r0, #20
 8000c90:	f000 f926 	bl	8000ee0 <UT_Delay_MicroSeconds>

    HAL_GPIO_WritePin(WR, 1);   //Send data    
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	0059      	lsls	r1, r3, #1
 8000c98:	23a0      	movs	r3, #160	; 0xa0
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 fc6a 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS, 1);   //End writing command 
 8000ca4:	23a0      	movs	r3, #160	; 0xa0
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 fc63 	bl	8001578 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(20);
 8000cb2:	2014      	movs	r0, #20
 8000cb4:	f000 f914 	bl	8000ee0 <UT_Delay_MicroSeconds>
    HAL_GPIO_WritePin(CS, 1);   //End transmission    
 8000cb8:	23a0      	movs	r3, #160	; 0xa0
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2140      	movs	r1, #64	; 0x40
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 fc59 	bl	8001578 <HAL_GPIO_WritePin>
    TFT_Reset();
 8000cc6:	f7ff ff31 	bl	8000b2c <TFT_Reset>

    HAL_Delay(50);
 8000cca:	2032      	movs	r0, #50	; 0x32
 8000ccc:	f000 f9d4 	bl	8001078 <HAL_Delay>

    //Exit sleep
    HAL_GPIO_WritePin(CS, 0);   //Begin transmission
 8000cd0:	23a0      	movs	r3, #160	; 0xa0
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f000 fc4d 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS, 0);   //Begin writing command 
 8000cde:	23a0      	movs	r3, #160	; 0xa0
 8000ce0:	05db      	lsls	r3, r3, #23
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f000 fc46 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WR, 0);
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	0059      	lsls	r1, r3, #1
 8000cf0:	23a0      	movs	r3, #160	; 0xa0
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fc3e 	bl	8001578 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(20);
 8000cfc:	2014      	movs	r0, #20
 8000cfe:	f000 f8ef 	bl	8000ee0 <UT_Delay_MicroSeconds>

    HAL_GPIO_WritePin(D0, 1);   //Set data
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <TFT_Init+0x120>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	2101      	movs	r1, #1
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 fc35 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4, 1);   //Set data
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <TFT_Init+0x120>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	2110      	movs	r1, #16
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 fc2f 	bl	8001578 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(20);
 8000d1a:	2014      	movs	r0, #20
 8000d1c:	f000 f8e0 	bl	8000ee0 <UT_Delay_MicroSeconds>

    HAL_GPIO_WritePin(WR, 1);   //Send data    
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	0059      	lsls	r1, r3, #1
 8000d24:	23a0      	movs	r3, #160	; 0xa0
 8000d26:	05db      	lsls	r3, r3, #23
 8000d28:	2201      	movs	r2, #1
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 fc24 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS, 1);   //End writing command 
 8000d30:	23a0      	movs	r3, #160	; 0xa0
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	2201      	movs	r2, #1
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 fc1d 	bl	8001578 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(20);
 8000d3e:	2014      	movs	r0, #20
 8000d40:	f000 f8ce 	bl	8000ee0 <UT_Delay_MicroSeconds>
    HAL_GPIO_WritePin(CS, 1);   //End transmission    
 8000d44:	23a0      	movs	r3, #160	; 0xa0
 8000d46:	05db      	lsls	r3, r3, #23
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2140      	movs	r1, #64	; 0x40
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 fc13 	bl	8001578 <HAL_GPIO_WritePin>
    TFT_Reset();
 8000d52:	f7ff feeb 	bl	8000b2c <TFT_Reset>

    HAL_Delay(50);
 8000d56:	2032      	movs	r0, #50	; 0x32
 8000d58:	f000 f98e 	bl	8001078 <HAL_Delay>
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	50000400 	.word	0x50000400

08000d68 <TFT_TurnDisplayOn>:

void TFT_TurnDisplayOn()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS, 0);   //Begin transmission
 8000d6c:	23a0      	movs	r3, #160	; 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	2200      	movs	r2, #0
 8000d72:	2140      	movs	r1, #64	; 0x40
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 fbff 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS, 0);   //Begin writing command 
 8000d7a:	23a0      	movs	r3, #160	; 0xa0
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 fbf8 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WR, 0);
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	0059      	lsls	r1, r3, #1
 8000d8c:	23a0      	movs	r3, #160	; 0xa0
 8000d8e:	05db      	lsls	r3, r3, #23
 8000d90:	2200      	movs	r2, #0
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 fbf0 	bl	8001578 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(20);
 8000d98:	2014      	movs	r0, #20
 8000d9a:	f000 f8a1 	bl	8000ee0 <UT_Delay_MicroSeconds>

    HAL_GPIO_WritePin(D0, 1);   //Set data
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <TFT_TurnDisplayOn+0x9c>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	2101      	movs	r1, #1
 8000da4:	0018      	movs	r0, r3
 8000da6:	f000 fbe7 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D3, 1);   //Set data
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <TFT_TurnDisplayOn+0x9c>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	2108      	movs	r1, #8
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 fbe1 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5, 1);   //Set data
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <TFT_TurnDisplayOn+0x9c>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	2120      	movs	r1, #32
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 fbdb 	bl	8001578 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(20);
 8000dc2:	2014      	movs	r0, #20
 8000dc4:	f000 f88c 	bl	8000ee0 <UT_Delay_MicroSeconds>

    HAL_GPIO_WritePin(WR, 1);   //Send data    
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	0059      	lsls	r1, r3, #1
 8000dcc:	23a0      	movs	r3, #160	; 0xa0
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 fbd0 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS, 1);   //End writing command 
 8000dd8:	23a0      	movs	r3, #160	; 0xa0
 8000dda:	05db      	lsls	r3, r3, #23
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	0018      	movs	r0, r3
 8000de2:	f000 fbc9 	bl	8001578 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(20);
 8000de6:	2014      	movs	r0, #20
 8000de8:	f000 f87a 	bl	8000ee0 <UT_Delay_MicroSeconds>
    HAL_GPIO_WritePin(CS, 1);   //End transmission    
 8000dec:	23a0      	movs	r3, #160	; 0xa0
 8000dee:	05db      	lsls	r3, r3, #23
 8000df0:	2201      	movs	r2, #1
 8000df2:	2140      	movs	r1, #64	; 0x40
 8000df4:	0018      	movs	r0, r3
 8000df6:	f000 fbbf 	bl	8001578 <HAL_GPIO_WritePin>
    TFT_Reset();
 8000dfa:	f7ff fe97 	bl	8000b2c <TFT_Reset>
}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	50000400 	.word	0x50000400

08000e08 <TFT_TurnDisplayOff>:

void TFT_TurnDisplayOff()
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS, 0);   //Begin transmission
 8000e0c:	23a0      	movs	r3, #160	; 0xa0
 8000e0e:	05db      	lsls	r3, r3, #23
 8000e10:	2200      	movs	r2, #0
 8000e12:	2140      	movs	r1, #64	; 0x40
 8000e14:	0018      	movs	r0, r3
 8000e16:	f000 fbaf 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS, 0);   //Begin writing command 
 8000e1a:	23a0      	movs	r3, #160	; 0xa0
 8000e1c:	05db      	lsls	r3, r3, #23
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 fba8 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WR, 0);
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	0059      	lsls	r1, r3, #1
 8000e2c:	23a0      	movs	r3, #160	; 0xa0
 8000e2e:	05db      	lsls	r3, r3, #23
 8000e30:	2200      	movs	r2, #0
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 fba0 	bl	8001578 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(20);
 8000e38:	2014      	movs	r0, #20
 8000e3a:	f000 f851 	bl	8000ee0 <UT_Delay_MicroSeconds>

    HAL_GPIO_WritePin(D3, 1);   //Set data
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <TFT_TurnDisplayOff+0x90>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	2108      	movs	r1, #8
 8000e44:	0018      	movs	r0, r3
 8000e46:	f000 fb97 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5, 1);   //Set data
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <TFT_TurnDisplayOff+0x90>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2120      	movs	r1, #32
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 fb91 	bl	8001578 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(20);
 8000e56:	2014      	movs	r0, #20
 8000e58:	f000 f842 	bl	8000ee0 <UT_Delay_MicroSeconds>

    HAL_GPIO_WritePin(WR, 1);   //Send data    
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	0059      	lsls	r1, r3, #1
 8000e60:	23a0      	movs	r3, #160	; 0xa0
 8000e62:	05db      	lsls	r3, r3, #23
 8000e64:	2201      	movs	r2, #1
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 fb86 	bl	8001578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS, 1);   //End writing command 
 8000e6c:	23a0      	movs	r3, #160	; 0xa0
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	2201      	movs	r2, #1
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	0018      	movs	r0, r3
 8000e76:	f000 fb7f 	bl	8001578 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(20);
 8000e7a:	2014      	movs	r0, #20
 8000e7c:	f000 f830 	bl	8000ee0 <UT_Delay_MicroSeconds>
    HAL_GPIO_WritePin(CS, 1);   //End transmission    
 8000e80:	23a0      	movs	r3, #160	; 0xa0
 8000e82:	05db      	lsls	r3, r3, #23
 8000e84:	2201      	movs	r2, #1
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f000 fb75 	bl	8001578 <HAL_GPIO_WritePin>
    TFT_Reset();
 8000e8e:	f7ff fe4d 	bl	8000b2c <TFT_Reset>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	50000400 	.word	0x50000400

08000e9c <UT_PrintMsg>:
#include "utility.h"

void UT_PrintMsg(char* msg)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff f92e 	bl	8000108 <strlen>
 8000eac:	0003      	movs	r3, r0
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <UT_PrintMsg+0x28>)
 8000eb8:	f001 ff22 	bl	8002d00 <HAL_UART_Transmit>
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000c0 	.word	0x200000c0

08000ec8 <UT_Error_Handler>:
	UT_PrintMsg(buffer);
	va_end(args);
}

void UT_Error_Handler(char* err_msg)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
    __disable_irq();
    while (1)
	{
    	UT_PrintMsg(err_msg);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff ffe0 	bl	8000e9c <UT_PrintMsg>
 8000edc:	e7fa      	b.n	8000ed4 <UT_Error_Handler+0xc>
	...

08000ee0 <UT_Delay_MicroSeconds>:
	}
}

void UT_Delay_MicroSeconds(uint16_t uSec)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	1dbb      	adds	r3, r7, #6
 8000eea:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim21, 0);
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <UT_Delay_MicroSeconds+0x30>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim21) < uSec);
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <UT_Delay_MicroSeconds+0x30>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000efc:	1dbb      	adds	r3, r7, #6
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d3f8      	bcc.n	8000ef6 <UT_Delay_MicroSeconds+0x16>
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	20000144 	.word	0x20000144

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000f14:	4813      	ldr	r0, [pc, #76]	; (8000f64 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000f16:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000f18:	4813      	ldr	r0, [pc, #76]	; (8000f68 <LoopForever+0x6>)
    LDR R1, [R0]
 8000f1a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000f1c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <LoopForever+0xa>)
    CMP R1, R2
 8000f20:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000f22:	d105      	bne.n	8000f30 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000f24:	4812      	ldr	r0, [pc, #72]	; (8000f70 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000f26:	4913      	ldr	r1, [pc, #76]	; (8000f74 <LoopForever+0x12>)
    STR R1, [R0]
 8000f28:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000f2a:	4813      	ldr	r0, [pc, #76]	; (8000f78 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000f2c:	4913      	ldr	r1, [pc, #76]	; (8000f7c <LoopForever+0x1a>)
    STR R1, [R0]
 8000f2e:	6001      	str	r1, [r0, #0]

08000f30 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f30:	4813      	ldr	r0, [pc, #76]	; (8000f80 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000f32:	4914      	ldr	r1, [pc, #80]	; (8000f84 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <LoopForever+0x26>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000f48:	4c11      	ldr	r4, [pc, #68]	; (8000f90 <LoopForever+0x2e>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f56:	f7ff fde3 	bl	8000b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f002 fb55 	bl	8003608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5e:	f7ff fcc5 	bl	80008ec <main>

08000f62 <LoopForever>:

LoopForever:
    b LoopForever
 8000f62:	e7fe      	b.n	8000f62 <LoopForever>
   ldr   r0, =_estack
 8000f64:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000f68:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000f6c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000f70:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000f74:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000f78:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f7c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f88:	080037f0 	.word	0x080037f0
  ldr r2, =_sbss
 8000f8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f90:	20000188 	.word	0x20000188

08000f94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_IRQHandler>
	...

08000f98 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_Init+0x3c>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Init+0x3c>)
 8000faa:	2140      	movs	r1, #64	; 0x40
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f811 	bl	8000fd8 <HAL_InitTick>
 8000fb6:	1e03      	subs	r3, r0, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e001      	b.n	8000fc6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc2:	f7ff fcc1 	bl	8000948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
}
 8000fca:	0018      	movs	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_InitTick+0x5c>)
 8000fe2:	681c      	ldr	r4, [r3, #0]
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_InitTick+0x60>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	0019      	movs	r1, r3
 8000fea:	23fa      	movs	r3, #250	; 0xfa
 8000fec:	0098      	lsls	r0, r3, #2
 8000fee:	f7ff f893 	bl	8000118 <__udivsi3>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	0020      	movs	r0, r4
 8000ff8:	f7ff f88e 	bl	8000118 <__udivsi3>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 f92f 	bl	8001262 <HAL_SYSTICK_Config>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d001      	beq.n	800100c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e00f      	b.n	800102c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b03      	cmp	r3, #3
 8001010:	d80b      	bhi.n	800102a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	2301      	movs	r3, #1
 8001016:	425b      	negs	r3, r3
 8001018:	2200      	movs	r2, #0
 800101a:	0018      	movs	r0, r3
 800101c:	f000 f8fc 	bl	8001218 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_InitTick+0x64>)
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	b003      	add	sp, #12
 8001032:	bd90      	pop	{r4, r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	20000008 	.word	0x20000008
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	001a      	movs	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	18d2      	adds	r2, r2, r3
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	20000008 	.word	0x20000008
 8001060:	20000184 	.word	0x20000184

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	20000184 	.word	0x20000184

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff fff0 	bl	8001064 <HAL_GetTick>
 8001084:	0003      	movs	r3, r0
 8001086:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	001a      	movs	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	189b      	adds	r3, r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	f7ff ffe0 	bl	8001064 <HAL_GetTick>
 80010a4:	0002      	movs	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	20000008 	.word	0x20000008

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	0002      	movs	r2, r0
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b7f      	cmp	r3, #127	; 0x7f
 80010d2:	d809      	bhi.n	80010e8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	001a      	movs	r2, r3
 80010da:	231f      	movs	r3, #31
 80010dc:	401a      	ands	r2, r3
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_EnableIRQ+0x30>)
 80010e0:	2101      	movs	r1, #1
 80010e2:	4091      	lsls	r1, r2
 80010e4:	000a      	movs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
  }
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b002      	add	sp, #8
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	0002      	movs	r2, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b7f      	cmp	r3, #127	; 0x7f
 8001108:	d828      	bhi.n	800115c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800110a:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <__NVIC_SetPriority+0xd4>)
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b25b      	sxtb	r3, r3
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	33c0      	adds	r3, #192	; 0xc0
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	589b      	ldr	r3, [r3, r2]
 800111a:	1dfa      	adds	r2, r7, #7
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	0011      	movs	r1, r2
 8001120:	2203      	movs	r2, #3
 8001122:	400a      	ands	r2, r1
 8001124:	00d2      	lsls	r2, r2, #3
 8001126:	21ff      	movs	r1, #255	; 0xff
 8001128:	4091      	lsls	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	43d2      	mvns	r2, r2
 800112e:	401a      	ands	r2, r3
 8001130:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	019b      	lsls	r3, r3, #6
 8001136:	22ff      	movs	r2, #255	; 0xff
 8001138:	401a      	ands	r2, r3
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	0018      	movs	r0, r3
 8001140:	2303      	movs	r3, #3
 8001142:	4003      	ands	r3, r0
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001148:	481f      	ldr	r0, [pc, #124]	; (80011c8 <__NVIC_SetPriority+0xd4>)
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b25b      	sxtb	r3, r3
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	430a      	orrs	r2, r1
 8001154:	33c0      	adds	r3, #192	; 0xc0
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800115a:	e031      	b.n	80011c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <__NVIC_SetPriority+0xd8>)
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	0019      	movs	r1, r3
 8001164:	230f      	movs	r3, #15
 8001166:	400b      	ands	r3, r1
 8001168:	3b08      	subs	r3, #8
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3306      	adds	r3, #6
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	18d3      	adds	r3, r2, r3
 8001172:	3304      	adds	r3, #4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	1dfa      	adds	r2, r7, #7
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	0011      	movs	r1, r2
 800117c:	2203      	movs	r2, #3
 800117e:	400a      	ands	r2, r1
 8001180:	00d2      	lsls	r2, r2, #3
 8001182:	21ff      	movs	r1, #255	; 0xff
 8001184:	4091      	lsls	r1, r2
 8001186:	000a      	movs	r2, r1
 8001188:	43d2      	mvns	r2, r2
 800118a:	401a      	ands	r2, r3
 800118c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	019b      	lsls	r3, r3, #6
 8001192:	22ff      	movs	r2, #255	; 0xff
 8001194:	401a      	ands	r2, r3
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	0018      	movs	r0, r3
 800119c:	2303      	movs	r3, #3
 800119e:	4003      	ands	r3, r0
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <__NVIC_SetPriority+0xd8>)
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	001c      	movs	r4, r3
 80011ac:	230f      	movs	r3, #15
 80011ae:	4023      	ands	r3, r4
 80011b0:	3b08      	subs	r3, #8
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	430a      	orrs	r2, r1
 80011b6:	3306      	adds	r3, #6
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	18c3      	adds	r3, r0, r3
 80011bc:	3304      	adds	r3, #4
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b003      	add	sp, #12
 80011c6:	bd90      	pop	{r4, r7, pc}
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	1e5a      	subs	r2, r3, #1
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	045b      	lsls	r3, r3, #17
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d301      	bcc.n	80011e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e4:	2301      	movs	r3, #1
 80011e6:	e010      	b.n	800120a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <SysTick_Config+0x44>)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	3a01      	subs	r2, #1
 80011ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f0:	2301      	movs	r3, #1
 80011f2:	425b      	negs	r3, r3
 80011f4:	2103      	movs	r1, #3
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff ff7c 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x44>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x44>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	210f      	movs	r1, #15
 8001224:	187b      	adds	r3, r7, r1
 8001226:	1c02      	adds	r2, r0, #0
 8001228:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	187b      	adds	r3, r7, r1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b25b      	sxtb	r3, r3
 8001232:	0011      	movs	r1, r2
 8001234:	0018      	movs	r0, r3
 8001236:	f7ff ff5d 	bl	80010f4 <__NVIC_SetPriority>
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b004      	add	sp, #16
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	0002      	movs	r2, r0
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b25b      	sxtb	r3, r3
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ff33 	bl	80010c0 <__NVIC_EnableIRQ>
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b002      	add	sp, #8
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff ffaf 	bl	80011d0 <SysTick_Config>
 8001272:	0003      	movs	r3, r0
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001292:	e155      	b.n	8001540 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4091      	lsls	r1, r2
 800129e:	000a      	movs	r2, r1
 80012a0:	4013      	ands	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d100      	bne.n	80012ac <HAL_GPIO_Init+0x30>
 80012aa:	e146      	b.n	800153a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d00b      	beq.n	80012cc <HAL_GPIO_Init+0x50>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d007      	beq.n	80012cc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c0:	2b11      	cmp	r3, #17
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b12      	cmp	r3, #18
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	409a      	lsls	r2, r3
 80012da:	0013      	movs	r3, r2
 80012dc:	43da      	mvns	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	409a      	lsls	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	2201      	movs	r2, #1
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	43da      	mvns	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0xf2>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b12      	cmp	r3, #18
 800136c:	d123      	bne.n	80013b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	58d3      	ldr	r3, [r2, r3]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2207      	movs	r2, #7
 8001380:	4013      	ands	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2107      	movs	r1, #7
 800139a:	400b      	ands	r3, r1
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	0092      	lsls	r2, r2, #2
 80013b2:	6939      	ldr	r1, [r7, #16]
 80013b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	43da      	mvns	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	401a      	ands	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	409a      	lsls	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	055b      	lsls	r3, r3, #21
 80013f2:	4013      	ands	r3, r2
 80013f4:	d100      	bne.n	80013f8 <HAL_GPIO_Init+0x17c>
 80013f6:	e0a0      	b.n	800153a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f8:	4b57      	ldr	r3, [pc, #348]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80013fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013fc:	4b56      	ldr	r3, [pc, #344]	; (8001558 <HAL_GPIO_Init+0x2dc>)
 80013fe:	2101      	movs	r1, #1
 8001400:	430a      	orrs	r2, r1
 8001402:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001404:	4a55      	ldr	r2, [pc, #340]	; (800155c <HAL_GPIO_Init+0x2e0>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	589b      	ldr	r3, [r3, r2]
 8001410:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2203      	movs	r2, #3
 8001416:	4013      	ands	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	409a      	lsls	r2, r3
 800141e:	0013      	movs	r3, r2
 8001420:	43da      	mvns	r2, r3
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	23a0      	movs	r3, #160	; 0xa0
 800142c:	05db      	lsls	r3, r3, #23
 800142e:	429a      	cmp	r2, r3
 8001430:	d01f      	beq.n	8001472 <HAL_GPIO_Init+0x1f6>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <HAL_GPIO_Init+0x2e4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x1f2>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a49      	ldr	r2, [pc, #292]	; (8001564 <HAL_GPIO_Init+0x2e8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x1ee>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a48      	ldr	r2, [pc, #288]	; (8001568 <HAL_GPIO_Init+0x2ec>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x1ea>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a47      	ldr	r2, [pc, #284]	; (800156c <HAL_GPIO_Init+0x2f0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x1e6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a46      	ldr	r2, [pc, #280]	; (8001570 <HAL_GPIO_Init+0x2f4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x1e2>
 800145a:	2305      	movs	r3, #5
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x1f8>
 800145e:	2306      	movs	r3, #6
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x1f8>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x1f8>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x1f8>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x1f8>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x1f8>
 8001472:	2300      	movs	r3, #0
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	2103      	movs	r1, #3
 8001478:	400a      	ands	r2, r1
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4935      	ldr	r1, [pc, #212]	; (800155c <HAL_GPIO_Init+0x2e0>)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <HAL_GPIO_Init+0x2f8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	025b      	lsls	r3, r3, #9
 80014aa:	4013      	ands	r3, r2
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_GPIO_Init+0x2f8>)
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_GPIO_Init+0x2f8>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43da      	mvns	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	029b      	lsls	r3, r3, #10
 80014d4:	4013      	ands	r3, r2
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <HAL_GPIO_Init+0x2f8>)
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <HAL_GPIO_Init+0x2f8>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43da      	mvns	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	035b      	lsls	r3, r3, #13
 80014fe:	4013      	ands	r3, r2
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_GPIO_Init+0x2f8>)
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_GPIO_Init+0x2f8>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43da      	mvns	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	039b      	lsls	r3, r3, #14
 8001528:	4013      	ands	r3, r2
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_GPIO_Init+0x2f8>)
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	40da      	lsrs	r2, r3
 8001548:	1e13      	subs	r3, r2, #0
 800154a:	d000      	beq.n	800154e <HAL_GPIO_Init+0x2d2>
 800154c:	e6a2      	b.n	8001294 <HAL_GPIO_Init+0x18>
  }
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46c0      	nop			; (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	b006      	add	sp, #24
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000
 8001560:	50000400 	.word	0x50000400
 8001564:	50000800 	.word	0x50000800
 8001568:	50000c00 	.word	0x50000c00
 800156c:	50001000 	.word	0x50001000
 8001570:	50001c00 	.word	0x50001c00
 8001574:	40010400 	.word	0x40010400

08001578 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	0008      	movs	r0, r1
 8001582:	0011      	movs	r1, r2
 8001584:	1cbb      	adds	r3, r7, #2
 8001586:	1c02      	adds	r2, r0, #0
 8001588:	801a      	strh	r2, [r3, #0]
 800158a:	1c7b      	adds	r3, r7, #1
 800158c:	1c0a      	adds	r2, r1, #0
 800158e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001590:	1c7b      	adds	r3, r7, #1
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d004      	beq.n	80015a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001598:	1cbb      	adds	r3, r7, #2
 800159a:	881a      	ldrh	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80015a0:	e003      	b.n	80015aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80015a2:	1cbb      	adds	r3, r7, #2
 80015a4:	881a      	ldrh	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	000a      	movs	r2, r1
 80015bc:	1cbb      	adds	r3, r7, #2
 80015be:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015c6:	1cbb      	adds	r3, r7, #2
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4013      	ands	r3, r2
 80015ce:	041a      	lsls	r2, r3, #16
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	1cb9      	adds	r1, r7, #2
 80015d6:	8809      	ldrh	r1, [r1, #0]
 80015d8:	400b      	ands	r3, r1
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	619a      	str	r2, [r3, #24]
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b004      	add	sp, #16
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f000 fb6c 	bl	8001cd4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015fc:	4bc8      	ldr	r3, [pc, #800]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	220c      	movs	r2, #12
 8001602:	4013      	ands	r3, r2
 8001604:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001606:	4bc6      	ldr	r3, [pc, #792]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	025b      	lsls	r3, r3, #9
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2201      	movs	r2, #1
 8001618:	4013      	ands	r3, r2
 800161a:	d100      	bne.n	800161e <HAL_RCC_OscConfig+0x36>
 800161c:	e07d      	b.n	800171a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	2b08      	cmp	r3, #8
 8001622:	d007      	beq.n	8001634 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d112      	bne.n	8001650 <HAL_RCC_OscConfig+0x68>
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	429a      	cmp	r2, r3
 8001632:	d10d      	bne.n	8001650 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	4bba      	ldr	r3, [pc, #744]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	029b      	lsls	r3, r3, #10
 800163c:	4013      	ands	r3, r2
 800163e:	d100      	bne.n	8001642 <HAL_RCC_OscConfig+0x5a>
 8001640:	e06a      	b.n	8001718 <HAL_RCC_OscConfig+0x130>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d166      	bne.n	8001718 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	f000 fb42 	bl	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	025b      	lsls	r3, r3, #9
 8001658:	429a      	cmp	r2, r3
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x84>
 800165c:	4bb0      	ldr	r3, [pc, #704]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4baf      	ldr	r3, [pc, #700]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	0249      	lsls	r1, r1, #9
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	e027      	b.n	80016bc <HAL_RCC_OscConfig+0xd4>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	23a0      	movs	r3, #160	; 0xa0
 8001672:	02db      	lsls	r3, r3, #11
 8001674:	429a      	cmp	r2, r3
 8001676:	d10e      	bne.n	8001696 <HAL_RCC_OscConfig+0xae>
 8001678:	4ba9      	ldr	r3, [pc, #676]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4ba8      	ldr	r3, [pc, #672]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	02c9      	lsls	r1, r1, #11
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	4ba6      	ldr	r3, [pc, #664]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4ba5      	ldr	r3, [pc, #660]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	0249      	lsls	r1, r1, #9
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e012      	b.n	80016bc <HAL_RCC_OscConfig+0xd4>
 8001696:	4ba2      	ldr	r3, [pc, #648]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4ba1      	ldr	r3, [pc, #644]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800169c:	49a1      	ldr	r1, [pc, #644]	; (8001924 <HAL_RCC_OscConfig+0x33c>)
 800169e:	400a      	ands	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	4b9f      	ldr	r3, [pc, #636]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	025b      	lsls	r3, r3, #9
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4b9b      	ldr	r3, [pc, #620]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b9a      	ldr	r3, [pc, #616]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80016b6:	499c      	ldr	r1, [pc, #624]	; (8001928 <HAL_RCC_OscConfig+0x340>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d014      	beq.n	80016ee <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fcce 	bl	8001064 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ce:	f7ff fcc9 	bl	8001064 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b64      	cmp	r3, #100	; 0x64
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e2f9      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016e0:	4b8f      	ldr	r3, [pc, #572]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	029b      	lsls	r3, r3, #10
 80016e8:	4013      	ands	r3, r2
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0xe6>
 80016ec:	e015      	b.n	800171a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fcb9 	bl	8001064 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fcb4 	bl	8001064 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e2e4      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800170a:	4b85      	ldr	r3, [pc, #532]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	029b      	lsls	r3, r3, #10
 8001712:	4013      	ands	r3, r2
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x110>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2202      	movs	r2, #2
 8001720:	4013      	ands	r3, r2
 8001722:	d100      	bne.n	8001726 <HAL_RCC_OscConfig+0x13e>
 8001724:	e099      	b.n	800185a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	2220      	movs	r2, #32
 8001730:	4013      	ands	r3, r2
 8001732:	d009      	beq.n	8001748 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001734:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b79      	ldr	r3, [pc, #484]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800173a:	2120      	movs	r1, #32
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	2220      	movs	r2, #32
 8001744:	4393      	bics	r3, r2
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b04      	cmp	r3, #4
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	2b0c      	cmp	r3, #12
 8001752:	d13e      	bne.n	80017d2 <HAL_RCC_OscConfig+0x1ea>
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d13b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800175a:	4b71      	ldr	r3, [pc, #452]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2204      	movs	r2, #4
 8001760:	4013      	ands	r3, r2
 8001762:	d004      	beq.n	800176e <HAL_RCC_OscConfig+0x186>
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e2b2      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b6c      	ldr	r3, [pc, #432]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4a6e      	ldr	r2, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x344>)
 8001774:	4013      	ands	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	021a      	lsls	r2, r3, #8
 800177e:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001780:	430a      	orrs	r2, r1
 8001782:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001784:	4b66      	ldr	r3, [pc, #408]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2209      	movs	r2, #9
 800178a:	4393      	bics	r3, r2
 800178c:	0019      	movs	r1, r3
 800178e:	4b64      	ldr	r3, [pc, #400]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001796:	f000 fbeb 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 800179a:	0001      	movs	r1, r0
 800179c:	4b60      	ldr	r3, [pc, #384]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	220f      	movs	r2, #15
 80017a4:	4013      	ands	r3, r2
 80017a6:	4a62      	ldr	r2, [pc, #392]	; (8001930 <HAL_RCC_OscConfig+0x348>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	000a      	movs	r2, r1
 80017ac:	40da      	lsrs	r2, r3
 80017ae:	4b61      	ldr	r3, [pc, #388]	; (8001934 <HAL_RCC_OscConfig+0x34c>)
 80017b0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80017b2:	4b61      	ldr	r3, [pc, #388]	; (8001938 <HAL_RCC_OscConfig+0x350>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2513      	movs	r5, #19
 80017b8:	197c      	adds	r4, r7, r5
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7ff fc0c 	bl	8000fd8 <HAL_InitTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80017c4:	197b      	adds	r3, r7, r5
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d046      	beq.n	800185a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80017cc:	197b      	adds	r3, r7, r5
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	e280      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d027      	beq.n	8001828 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017d8:	4b51      	ldr	r3, [pc, #324]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2209      	movs	r2, #9
 80017de:	4393      	bics	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	4b4f      	ldr	r3, [pc, #316]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80017e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fc3b 	bl	8001064 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f4:	f7ff fc36 	bl	8001064 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e266      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001806:	4b46      	ldr	r3, [pc, #280]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2204      	movs	r2, #4
 800180c:	4013      	ands	r3, r2
 800180e:	d0f1      	beq.n	80017f4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a45      	ldr	r2, [pc, #276]	; (800192c <HAL_RCC_OscConfig+0x344>)
 8001816:	4013      	ands	r3, r2
 8001818:	0019      	movs	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	021a      	lsls	r2, r3, #8
 8001820:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	e018      	b.n	800185a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001828:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800182e:	2101      	movs	r1, #1
 8001830:	438a      	bics	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fc16 	bl	8001064 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff fc11 	bl	8001064 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e241      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001850:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2204      	movs	r2, #4
 8001856:	4013      	ands	r3, r2
 8001858:	d1f1      	bne.n	800183e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2210      	movs	r2, #16
 8001860:	4013      	ands	r3, r2
 8001862:	d100      	bne.n	8001866 <HAL_RCC_OscConfig+0x27e>
 8001864:	e0a1      	b.n	80019aa <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d140      	bne.n	80018ee <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d005      	beq.n	8001884 <HAL_RCC_OscConfig+0x29c>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e227      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a2c      	ldr	r2, [pc, #176]	; (800193c <HAL_RCC_OscConfig+0x354>)
 800188a:	4013      	ands	r3, r2
 800188c:	0019      	movs	r1, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1a      	ldr	r2, [r3, #32]
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001894:	430a      	orrs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	0a19      	lsrs	r1, r3, #8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	061a      	lsls	r2, r3, #24
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80018a8:	430a      	orrs	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	0b5b      	lsrs	r3, r3, #13
 80018b2:	3301      	adds	r3, #1
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	0212      	lsls	r2, r2, #8
 80018b8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	210f      	movs	r1, #15
 80018c2:	400b      	ands	r3, r1
 80018c4:	491a      	ldr	r1, [pc, #104]	; (8001930 <HAL_RCC_OscConfig+0x348>)
 80018c6:	5ccb      	ldrb	r3, [r1, r3]
 80018c8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_RCC_OscConfig+0x34c>)
 80018cc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_RCC_OscConfig+0x350>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2513      	movs	r5, #19
 80018d4:	197c      	adds	r4, r7, r5
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7ff fb7e 	bl	8000fd8 <HAL_InitTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80018e0:	197b      	adds	r3, r7, r5
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d060      	beq.n	80019aa <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80018e8:	197b      	adds	r3, r7, r5
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	e1f2      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d03f      	beq.n	8001976 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	0049      	lsls	r1, r1, #1
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fbae 	bl	8001064 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800190c:	e018      	b.n	8001940 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190e:	f7ff fba9 	bl	8001064 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d911      	bls.n	8001940 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1d9      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
 8001920:	40021000 	.word	0x40021000
 8001924:	fffeffff 	.word	0xfffeffff
 8001928:	fffbffff 	.word	0xfffbffff
 800192c:	ffffe0ff 	.word	0xffffe0ff
 8001930:	08003774 	.word	0x08003774
 8001934:	20000000 	.word	0x20000000
 8001938:	20000004 	.word	0x20000004
 800193c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001940:	4bc9      	ldr	r3, [pc, #804]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4013      	ands	r3, r2
 800194a:	d0e0      	beq.n	800190e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800194c:	4bc6      	ldr	r3, [pc, #792]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4ac6      	ldr	r2, [pc, #792]	; (8001c6c <HAL_RCC_OscConfig+0x684>)
 8001952:	4013      	ands	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1a      	ldr	r2, [r3, #32]
 800195a:	4bc3      	ldr	r3, [pc, #780]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 800195c:	430a      	orrs	r2, r1
 800195e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001960:	4bc1      	ldr	r3, [pc, #772]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	0a19      	lsrs	r1, r3, #8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	061a      	lsls	r2, r3, #24
 800196e:	4bbe      	ldr	r3, [pc, #760]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	e019      	b.n	80019aa <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001976:	4bbc      	ldr	r3, [pc, #752]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4bbb      	ldr	r3, [pc, #748]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 800197c:	49bc      	ldr	r1, [pc, #752]	; (8001c70 <HAL_RCC_OscConfig+0x688>)
 800197e:	400a      	ands	r2, r1
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff fb6f 	bl	8001064 <HAL_GetTick>
 8001986:	0003      	movs	r3, r0
 8001988:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198c:	f7ff fb6a 	bl	8001064 <HAL_GetTick>
 8001990:	0002      	movs	r2, r0
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e19a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800199e:	4bb2      	ldr	r3, [pc, #712]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2208      	movs	r2, #8
 80019b0:	4013      	ands	r3, r2
 80019b2:	d036      	beq.n	8001a22 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d019      	beq.n	80019f0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019bc:	4baa      	ldr	r3, [pc, #680]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 80019be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019c0:	4ba9      	ldr	r3, [pc, #676]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	430a      	orrs	r2, r1
 80019c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c8:	f7ff fb4c 	bl	8001064 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d2:	f7ff fb47 	bl	8001064 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e177      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019e4:	4ba0      	ldr	r3, [pc, #640]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 80019e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e8:	2202      	movs	r2, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	d0f1      	beq.n	80019d2 <HAL_RCC_OscConfig+0x3ea>
 80019ee:	e018      	b.n	8001a22 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f0:	4b9d      	ldr	r3, [pc, #628]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 80019f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f4:	4b9c      	ldr	r3, [pc, #624]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 80019f6:	2101      	movs	r1, #1
 80019f8:	438a      	bics	r2, r1
 80019fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fc:	f7ff fb32 	bl	8001064 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a06:	f7ff fb2d 	bl	8001064 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e15d      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a18:	4b93      	ldr	r3, [pc, #588]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d1f1      	bne.n	8001a06 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2204      	movs	r2, #4
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d100      	bne.n	8001a2e <HAL_RCC_OscConfig+0x446>
 8001a2c:	e0ae      	b.n	8001b8c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2e:	2023      	movs	r0, #35	; 0x23
 8001a30:	183b      	adds	r3, r7, r0
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	055b      	lsls	r3, r3, #21
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b89      	ldr	r3, [pc, #548]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a46:	4b88      	ldr	r3, [pc, #544]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	0549      	lsls	r1, r1, #21
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a50:	183b      	adds	r3, r7, r0
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b87      	ldr	r3, [pc, #540]	; (8001c74 <HAL_RCC_OscConfig+0x68c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d11a      	bne.n	8001a98 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a62:	4b84      	ldr	r3, [pc, #528]	; (8001c74 <HAL_RCC_OscConfig+0x68c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b83      	ldr	r3, [pc, #524]	; (8001c74 <HAL_RCC_OscConfig+0x68c>)
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	0049      	lsls	r1, r1, #1
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a70:	f7ff faf8 	bl	8001064 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7a:	f7ff faf3 	bl	8001064 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b64      	cmp	r3, #100	; 0x64
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e123      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <HAL_RCC_OscConfig+0x68c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4013      	ands	r3, r2
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4cc>
 8001aa4:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	0049      	lsls	r1, r1, #1
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ab2:	e031      	b.n	8001b18 <HAL_RCC_OscConfig+0x530>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10c      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x4ee>
 8001abc:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ac0:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001ac2:	496b      	ldr	r1, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x688>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ac8:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001acc:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001ace:	496a      	ldr	r1, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0x690>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ad4:	e020      	b.n	8001b18 <HAL_RCC_OscConfig+0x530>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	23a0      	movs	r3, #160	; 0xa0
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d10e      	bne.n	8001b00 <HAL_RCC_OscConfig+0x518>
 8001ae2:	4b61      	ldr	r3, [pc, #388]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae6:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	00c9      	lsls	r1, r1, #3
 8001aec:	430a      	orrs	r2, r1
 8001aee:	651a      	str	r2, [r3, #80]	; 0x50
 8001af0:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001af2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af4:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	0049      	lsls	r1, r1, #1
 8001afa:	430a      	orrs	r2, r1
 8001afc:	651a      	str	r2, [r3, #80]	; 0x50
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0x530>
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b04:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b06:	495a      	ldr	r1, [pc, #360]	; (8001c70 <HAL_RCC_OscConfig+0x688>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b0c:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b10:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b12:	4959      	ldr	r1, [pc, #356]	; (8001c78 <HAL_RCC_OscConfig+0x690>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d015      	beq.n	8001b4c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff faa0 	bl	8001064 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b28:	e009      	b.n	8001b3e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7ff fa9b 	bl	8001064 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	4a51      	ldr	r2, [pc, #324]	; (8001c7c <HAL_RCC_OscConfig+0x694>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0ca      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	d0ef      	beq.n	8001b2a <HAL_RCC_OscConfig+0x542>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4c:	f7ff fa8a 	bl	8001064 <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b54:	e009      	b.n	8001b6a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b56:	f7ff fa85 	bl	8001064 <HAL_GetTick>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	4a46      	ldr	r2, [pc, #280]	; (8001c7c <HAL_RCC_OscConfig+0x694>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e0b4      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	d1ef      	bne.n	8001b56 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b76:	2323      	movs	r3, #35	; 0x23
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b86:	493e      	ldr	r1, [pc, #248]	; (8001c80 <HAL_RCC_OscConfig+0x698>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d100      	bne.n	8001b96 <HAL_RCC_OscConfig+0x5ae>
 8001b94:	e09d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d100      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5b6>
 8001b9c:	e076      	b.n	8001c8c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d145      	bne.n	8001c32 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001bac:	4935      	ldr	r1, [pc, #212]	; (8001c84 <HAL_RCC_OscConfig+0x69c>)
 8001bae:	400a      	ands	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fa57 	bl	8001064 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff fa52 	bl	8001064 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e082      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	049b      	lsls	r3, r3, #18
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	4a2a      	ldr	r2, [pc, #168]	; (8001c88 <HAL_RCC_OscConfig+0x6a0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	0449      	lsls	r1, r1, #17
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fa2c 	bl	8001064 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff fa27 	bl	8001064 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e057      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	049b      	lsls	r3, r3, #18
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x62a>
 8001c30:	e04f      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001c38:	4912      	ldr	r1, [pc, #72]	; (8001c84 <HAL_RCC_OscConfig+0x69c>)
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fa11 	bl	8001064 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff fa0c 	bl	8001064 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e03c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c5a:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	049b      	lsls	r3, r3, #18
 8001c62:	4013      	ands	r3, r2
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x660>
 8001c66:	e034      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6ea>
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	ffff1fff 	.word	0xffff1fff
 8001c70:	fffffeff 	.word	0xfffffeff
 8001c74:	40007000 	.word	0x40007000
 8001c78:	fffffbff 	.word	0xfffffbff
 8001c7c:	00001388 	.word	0x00001388
 8001c80:	efffffff 	.word	0xefffffff
 8001c84:	feffffff 	.word	0xfeffffff
 8001c88:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e01d      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_RCC_OscConfig+0x6f4>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	025b      	lsls	r3, r3, #9
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d10f      	bne.n	8001cce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	23f0      	movs	r3, #240	; 0xf0
 8001cb2:	039b      	lsls	r3, r3, #14
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	23c0      	movs	r3, #192	; 0xc0
 8001cc2:	041b      	lsls	r3, r3, #16
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b00a      	add	sp, #40	; 0x28
 8001cda:	bdb0      	pop	{r4, r5, r7, pc}
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e128      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b96      	ldr	r3, [pc, #600]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d91e      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b93      	ldr	r3, [pc, #588]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2201      	movs	r2, #1
 8001d08:	4393      	bics	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	4b90      	ldr	r3, [pc, #576]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d14:	f7ff f9a6 	bl	8001064 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1c:	e009      	b.n	8001d32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1e:	f7ff f9a1 	bl	8001064 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	4a8a      	ldr	r2, [pc, #552]	; (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e109      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b87      	ldr	r3, [pc, #540]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2201      	movs	r2, #1
 8001d38:	4013      	ands	r3, r2
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d1ee      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d009      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4a:	4b83      	ldr	r3, [pc, #524]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	22f0      	movs	r2, #240	; 0xf0
 8001d50:	4393      	bics	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b7f      	ldr	r3, [pc, #508]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d100      	bne.n	8001d6a <HAL_RCC_ClockConfig+0x8a>
 8001d68:	e089      	b.n	8001e7e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d72:	4b79      	ldr	r3, [pc, #484]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	029b      	lsls	r3, r3, #10
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d120      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0e1      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d8a:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	049b      	lsls	r3, r3, #18
 8001d92:	4013      	ands	r3, r2
 8001d94:	d114      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0d5      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d106      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da2:	4b6d      	ldr	r3, [pc, #436]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2204      	movs	r2, #4
 8001da8:	4013      	ands	r3, r2
 8001daa:	d109      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0ca      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001db0:	4b69      	ldr	r3, [pc, #420]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0c2      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc0:	4b65      	ldr	r3, [pc, #404]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	4393      	bics	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	4b62      	ldr	r3, [pc, #392]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd4:	f7ff f946 	bl	8001064 <HAL_GetTick>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d111      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de4:	e009      	b.n	8001dfa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de6:	f7ff f93d 	bl	8001064 <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0a5      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfa:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	220c      	movs	r2, #12
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d1ef      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x106>
 8001e06:	e03a      	b.n	8001e7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d111      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e10:	e009      	b.n	8001e26 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e12:	f7ff f927 	bl	8001064 <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	4a4d      	ldr	r2, [pc, #308]	; (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e08f      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e26:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d1ef      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x132>
 8001e32:	e024      	b.n	8001e7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d11b      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3c:	e009      	b.n	8001e52 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3e:	f7ff f911 	bl	8001064 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	4a42      	ldr	r2, [pc, #264]	; (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e079      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e52:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	220c      	movs	r2, #12
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d1ef      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x15e>
 8001e5e:	e00e      	b.n	8001e7e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7ff f900 	bl	8001064 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	4a3a      	ldr	r2, [pc, #232]	; (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e068      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e74:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	220c      	movs	r2, #12
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2201      	movs	r2, #1
 8001e84:	4013      	ands	r3, r2
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d21e      	bcs.n	8001eca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	4393      	bics	r3, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e9e:	f7ff f8e1 	bl	8001064 <HAL_GetTick>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	e009      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea8:	f7ff f8dc 	bl	8001064 <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e044      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebc:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d1ee      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <HAL_RCC_ClockConfig+0x27c>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2208      	movs	r2, #8
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d00a      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <HAL_RCC_ClockConfig+0x280>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00da      	lsls	r2, r3, #3
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f08:	f000 f832 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001f0c:	0001      	movs	r1, r0
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	220f      	movs	r2, #15
 8001f16:	4013      	ands	r3, r2
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <HAL_RCC_ClockConfig+0x284>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	000a      	movs	r2, r1
 8001f1e:	40da      	lsrs	r2, r3
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_RCC_ClockConfig+0x288>)
 8001f22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCC_ClockConfig+0x28c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	250b      	movs	r5, #11
 8001f2a:	197c      	adds	r4, r7, r5
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff f853 	bl	8000fd8 <HAL_InitTick>
 8001f32:	0003      	movs	r3, r0
 8001f34:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f36:	197b      	adds	r3, r7, r5
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f3e:	197b      	adds	r3, r7, r5
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b004      	add	sp, #16
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	40022000 	.word	0x40022000
 8001f54:	00001388 	.word	0x00001388
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	fffff8ff 	.word	0xfffff8ff
 8001f60:	ffffc7ff 	.word	0xffffc7ff
 8001f64:	08003774 	.word	0x08003774
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b5b0      	push	{r4, r5, r7, lr}
 8001f72:	b08e      	sub	sp, #56	; 0x38
 8001f74:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f76:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f7e:	230c      	movs	r3, #12
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d014      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001f86:	d900      	bls.n	8001f8a <HAL_RCC_GetSysClockFreq+0x1a>
 8001f88:	e07b      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x112>
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d002      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x24>
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d00b      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x3a>
 8001f92:	e076      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f94:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2210      	movs	r2, #16
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f9e:	4b43      	ldr	r3, [pc, #268]	; (80020ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001fa2:	e07c      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001fa6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fa8:	e079      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001faa:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fae:	e076      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb2:	0c9a      	lsrs	r2, r3, #18
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x148>)
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc0:	0d9a      	lsrs	r2, r3, #22
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fca:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	025b      	lsls	r3, r3, #9
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d01a      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	4a35      	ldr	r2, [pc, #212]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	69b8      	ldr	r0, [r7, #24]
 8001fe4:	69f9      	ldr	r1, [r7, #28]
 8001fe6:	f7fe f943 	bl	8000270 <__aeabi_lmul>
 8001fea:	0002      	movs	r2, r0
 8001fec:	000b      	movs	r3, r1
 8001fee:	0010      	movs	r0, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f7fe f917 	bl	8000230 <__aeabi_uldivmod>
 8002002:	0002      	movs	r2, r0
 8002004:	000b      	movs	r3, r1
 8002006:	0013      	movs	r3, r2
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
 800200a:	e037      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800200c:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2210      	movs	r2, #16
 8002012:	4013      	ands	r3, r2
 8002014:	d01a      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4a23      	ldr	r2, [pc, #140]	; (80020ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002020:	2300      	movs	r3, #0
 8002022:	68b8      	ldr	r0, [r7, #8]
 8002024:	68f9      	ldr	r1, [r7, #12]
 8002026:	f7fe f923 	bl	8000270 <__aeabi_lmul>
 800202a:	0002      	movs	r2, r0
 800202c:	000b      	movs	r3, r1
 800202e:	0010      	movs	r0, r2
 8002030:	0019      	movs	r1, r3
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	603b      	str	r3, [r7, #0]
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f7fe f8f7 	bl	8000230 <__aeabi_uldivmod>
 8002042:	0002      	movs	r2, r0
 8002044:	000b      	movs	r3, r1
 8002046:	0013      	movs	r3, r2
 8002048:	637b      	str	r3, [r7, #52]	; 0x34
 800204a:	e017      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	0018      	movs	r0, r3
 8002050:	2300      	movs	r3, #0
 8002052:	0019      	movs	r1, r3
 8002054:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002056:	2300      	movs	r3, #0
 8002058:	f7fe f90a 	bl	8000270 <__aeabi_lmul>
 800205c:	0002      	movs	r2, r0
 800205e:	000b      	movs	r3, r1
 8002060:	0010      	movs	r0, r2
 8002062:	0019      	movs	r1, r3
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	001c      	movs	r4, r3
 8002068:	2300      	movs	r3, #0
 800206a:	001d      	movs	r5, r3
 800206c:	0022      	movs	r2, r4
 800206e:	002b      	movs	r3, r5
 8002070:	f7fe f8de 	bl	8000230 <__aeabi_uldivmod>
 8002074:	0002      	movs	r2, r0
 8002076:	000b      	movs	r3, r1
 8002078:	0013      	movs	r3, r2
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002080:	e00d      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	0b5b      	lsrs	r3, r3, #13
 8002088:	2207      	movs	r2, #7
 800208a:	4013      	ands	r3, r2
 800208c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	3301      	adds	r3, #1
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	0212      	lsls	r2, r2, #8
 8002096:	409a      	lsls	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800209c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b00e      	add	sp, #56	; 0x38
 80020a6:	bdb0      	pop	{r4, r5, r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	003d0900 	.word	0x003d0900
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	007a1200 	.word	0x007a1200
 80020b8:	0800378c 	.word	0x0800378c

080020bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c0:	4b02      	ldr	r3, [pc, #8]	; (80020cc <HAL_RCC_GetHCLKFreq+0x10>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	20000000 	.word	0x20000000

080020d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d4:	f7ff fff2 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 80020d8:	0001      	movs	r1, r0
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	2207      	movs	r2, #7
 80020e2:	4013      	ands	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	40d9      	lsrs	r1, r3
 80020ea:	000b      	movs	r3, r1
}
 80020ec:	0018      	movs	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08003784 	.word	0x08003784

080020fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002100:	f7ff ffdc 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 8002104:	0001      	movs	r1, r0
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	0adb      	lsrs	r3, r3, #11
 800210c:	2207      	movs	r2, #7
 800210e:	4013      	ands	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	40d9      	lsrs	r1, r3
 8002116:	000b      	movs	r3, r1
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	40021000 	.word	0x40021000
 8002124:	08003784 	.word	0x08003784

08002128 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002130:	2017      	movs	r0, #23
 8002132:	183b      	adds	r3, r7, r0
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2220      	movs	r2, #32
 800213e:	4013      	ands	r3, r2
 8002140:	d100      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002142:	e0c2      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002144:	4b81      	ldr	r3, [pc, #516]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	055b      	lsls	r3, r3, #21
 800214c:	4013      	ands	r3, r2
 800214e:	d109      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	4b7e      	ldr	r3, [pc, #504]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002154:	4b7d      	ldr	r3, [pc, #500]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	0549      	lsls	r1, r1, #21
 800215a:	430a      	orrs	r2, r1
 800215c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800215e:	183b      	adds	r3, r7, r0
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b7a      	ldr	r3, [pc, #488]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4013      	ands	r3, r2
 800216e:	d11a      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002170:	4b77      	ldr	r3, [pc, #476]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b76      	ldr	r3, [pc, #472]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002176:	2180      	movs	r1, #128	; 0x80
 8002178:	0049      	lsls	r1, r1, #1
 800217a:	430a      	orrs	r2, r1
 800217c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217e:	f7fe ff71 	bl	8001064 <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002186:	e008      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002188:	f7fe ff6c 	bl	8001064 <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0d4      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219a:	4b6d      	ldr	r3, [pc, #436]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4013      	ands	r3, r2
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80021a6:	4b69      	ldr	r3, [pc, #420]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	23c0      	movs	r3, #192	; 0xc0
 80021ac:	039b      	lsls	r3, r3, #14
 80021ae:	4013      	ands	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	23c0      	movs	r3, #192	; 0xc0
 80021b8:	039b      	lsls	r3, r3, #14
 80021ba:	4013      	ands	r3, r2
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d013      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	23c0      	movs	r3, #192	; 0xc0
 80021c8:	029b      	lsls	r3, r3, #10
 80021ca:	401a      	ands	r2, r3
 80021cc:	23c0      	movs	r3, #192	; 0xc0
 80021ce:	029b      	lsls	r3, r3, #10
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d10a      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80021d4:	4b5d      	ldr	r3, [pc, #372]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	029b      	lsls	r3, r3, #10
 80021dc:	401a      	ands	r2, r3
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	029b      	lsls	r3, r3, #10
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d101      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0ac      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021ea:	4b58      	ldr	r3, [pc, #352]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ee:	23c0      	movs	r3, #192	; 0xc0
 80021f0:	029b      	lsls	r3, r3, #10
 80021f2:	4013      	ands	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d03b      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	23c0      	movs	r3, #192	; 0xc0
 8002202:	029b      	lsls	r3, r3, #10
 8002204:	4013      	ands	r3, r2
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d033      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2220      	movs	r2, #32
 8002212:	4013      	ands	r3, r2
 8002214:	d02e      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002216:	4b4d      	ldr	r3, [pc, #308]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221a:	4a4e      	ldr	r2, [pc, #312]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800221c:	4013      	ands	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002220:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002224:	4b49      	ldr	r3, [pc, #292]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	0309      	lsls	r1, r1, #12
 800222a:	430a      	orrs	r2, r1
 800222c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002232:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002234:	4948      	ldr	r1, [pc, #288]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002236:	400a      	ands	r2, r1
 8002238:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800223a:	4b44      	ldr	r3, [pc, #272]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4013      	ands	r3, r2
 8002248:	d014      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7fe ff0b 	bl	8001064 <HAL_GetTick>
 800224e:	0003      	movs	r3, r0
 8002250:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002252:	e009      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe ff06 	bl	8001064 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	4a3f      	ldr	r2, [pc, #252]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e06d      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002268:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800226a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4013      	ands	r3, r2
 8002272:	d0ef      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	23c0      	movs	r3, #192	; 0xc0
 800227a:	029b      	lsls	r3, r3, #10
 800227c:	401a      	ands	r2, r3
 800227e:	23c0      	movs	r3, #192	; 0xc0
 8002280:	029b      	lsls	r3, r3, #10
 8002282:	429a      	cmp	r2, r3
 8002284:	d10c      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002286:	4b31      	ldr	r3, [pc, #196]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a35      	ldr	r2, [pc, #212]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800228c:	4013      	ands	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	23c0      	movs	r3, #192	; 0xc0
 8002296:	039b      	lsls	r3, r3, #14
 8002298:	401a      	ands	r2, r3
 800229a:	4b2c      	ldr	r3, [pc, #176]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022a2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	23c0      	movs	r3, #192	; 0xc0
 80022aa:	029b      	lsls	r3, r3, #10
 80022ac:	401a      	ands	r2, r3
 80022ae:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022b0:	430a      	orrs	r2, r1
 80022b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022b4:	2317      	movs	r3, #23
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d105      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022be:	4b23      	ldr	r3, [pc, #140]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c2:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022c4:	4927      	ldr	r1, [pc, #156]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80022c6:	400a      	ands	r2, r1
 80022c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2202      	movs	r2, #2
 80022d0:	4013      	ands	r3, r2
 80022d2:	d009      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d8:	220c      	movs	r2, #12
 80022da:	4393      	bics	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022e4:	430a      	orrs	r2, r1
 80022e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2204      	movs	r2, #4
 80022ee:	4013      	ands	r3, r2
 80022f0:	d009      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	0019      	movs	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002302:	430a      	orrs	r2, r1
 8002304:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2208      	movs	r2, #8
 800230c:	4013      	ands	r3, r2
 800230e:	d009      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002320:	430a      	orrs	r2, r1
 8002322:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2280      	movs	r2, #128	; 0x80
 800232a:	4013      	ands	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002334:	4013      	ands	r3, r2
 8002336:	0019      	movs	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800233e:	430a      	orrs	r2, r1
 8002340:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b006      	add	sp, #24
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	40007000 	.word	0x40007000
 8002354:	fffcffff 	.word	0xfffcffff
 8002358:	fff7ffff 	.word	0xfff7ffff
 800235c:	00001388 	.word	0x00001388
 8002360:	ffcfffff 	.word	0xffcfffff
 8002364:	efffffff 	.word	0xefffffff
 8002368:	fffff3ff 	.word	0xfffff3ff
 800236c:	ffffcfff 	.word	0xffffcfff
 8002370:	fff3ffff 	.word	0xfff3ffff

08002374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07b      	b.n	800247e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	2382      	movs	r3, #130	; 0x82
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	429a      	cmp	r2, r3
 8002398:	d009      	beq.n	80023ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	61da      	str	r2, [r3, #28]
 80023a0:	e005      	b.n	80023ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2251      	movs	r2, #81	; 0x51
 80023b8:	5c9b      	ldrb	r3, [r3, r2]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d107      	bne.n	80023d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2250      	movs	r2, #80	; 0x50
 80023c4:	2100      	movs	r1, #0
 80023c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7fe fb3c 	bl	8000a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2251      	movs	r2, #81	; 0x51
 80023d4:	2102      	movs	r1, #2
 80023d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2140      	movs	r1, #64	; 0x40
 80023e4:	438a      	bics	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	2382      	movs	r3, #130	; 0x82
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	401a      	ands	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	2384      	movs	r3, #132	; 0x84
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	400b      	ands	r3, r1
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68d9      	ldr	r1, [r3, #12]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	400b      	ands	r3, r1
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2102      	movs	r1, #2
 8002410:	400b      	ands	r3, r1
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	2101      	movs	r1, #1
 800241a:	400b      	ands	r3, r1
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6999      	ldr	r1, [r3, #24]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	400b      	ands	r3, r1
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	2138      	movs	r1, #56	; 0x38
 8002430:	400b      	ands	r3, r1
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	400b      	ands	r3, r1
 800243c:	431a      	orrs	r2, r3
 800243e:	0011      	movs	r1, r2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	019b      	lsls	r3, r3, #6
 8002448:	401a      	ands	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	0c1b      	lsrs	r3, r3, #16
 8002458:	2204      	movs	r2, #4
 800245a:	4013      	ands	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	2210      	movs	r2, #16
 8002464:	401a      	ands	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2251      	movs	r2, #81	; 0x51
 8002478:	2101      	movs	r1, #1
 800247a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b002      	add	sp, #8
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e032      	b.n	80024fe <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2239      	movs	r2, #57	; 0x39
 800249c:	5c9b      	ldrb	r3, [r3, r2]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2238      	movs	r2, #56	; 0x38
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f7fe fa5e 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2239      	movs	r2, #57	; 0x39
 80024b8:	2102      	movs	r1, #2
 80024ba:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3304      	adds	r3, #4
 80024c4:	0019      	movs	r1, r3
 80024c6:	0010      	movs	r0, r2
 80024c8:	f000 fa80 	bl	80029cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	223e      	movs	r2, #62	; 0x3e
 80024d0:	2101      	movs	r1, #1
 80024d2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	223a      	movs	r2, #58	; 0x3a
 80024d8:	2101      	movs	r1, #1
 80024da:	5499      	strb	r1, [r3, r2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	223b      	movs	r2, #59	; 0x3b
 80024e0:	2101      	movs	r1, #1
 80024e2:	5499      	strb	r1, [r3, r2]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	223c      	movs	r2, #60	; 0x3c
 80024e8:	2101      	movs	r1, #1
 80024ea:	5499      	strb	r1, [r3, r2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	223d      	movs	r2, #61	; 0x3d
 80024f0:	2101      	movs	r1, #1
 80024f2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2239      	movs	r2, #57	; 0x39
 80024f8:	2101      	movs	r1, #1
 80024fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2239      	movs	r2, #57	; 0x39
 8002514:	5c9b      	ldrb	r3, [r3, r2]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d001      	beq.n	8002520 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e02e      	b.n	800257e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2239      	movs	r2, #57	; 0x39
 8002524:	2102      	movs	r1, #2
 8002526:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	05db      	lsls	r3, r3, #23
 8002530:	429a      	cmp	r2, r3
 8002532:	d009      	beq.n	8002548 <HAL_TIM_Base_Start+0x40>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a13      	ldr	r2, [pc, #76]	; (8002588 <HAL_TIM_Base_Start+0x80>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_TIM_Base_Start+0x40>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <HAL_TIM_Base_Start+0x84>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d111      	bne.n	800256c <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2207      	movs	r2, #7
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d010      	beq.n	800257c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256a:	e007      	b.n	800257c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2101      	movs	r1, #1
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	40010800 	.word	0x40010800
 800258c:	40011400 	.word	0x40011400

08002590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2239      	movs	r2, #57	; 0x39
 800259c:	5c9b      	ldrb	r3, [r3, r2]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d001      	beq.n	80025a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e036      	b.n	8002616 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2239      	movs	r2, #57	; 0x39
 80025ac:	2102      	movs	r1, #2
 80025ae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2101      	movs	r1, #1
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	05db      	lsls	r3, r3, #23
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d009      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x50>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a13      	ldr	r2, [pc, #76]	; (8002620 <HAL_TIM_Base_Start_IT+0x90>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x50>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_TIM_Base_Start_IT+0x94>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d111      	bne.n	8002604 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2207      	movs	r2, #7
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d010      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002602:	e007      	b.n	8002614 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2101      	movs	r1, #1
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	0018      	movs	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	b004      	add	sp, #16
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	40010800 	.word	0x40010800
 8002624:	40011400 	.word	0x40011400

08002628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2202      	movs	r2, #2
 8002638:	4013      	ands	r3, r2
 800263a:	2b02      	cmp	r3, #2
 800263c:	d124      	bne.n	8002688 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2202      	movs	r2, #2
 8002646:	4013      	ands	r3, r2
 8002648:	2b02      	cmp	r3, #2
 800264a:	d11d      	bne.n	8002688 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2203      	movs	r2, #3
 8002652:	4252      	negs	r2, r2
 8002654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	2203      	movs	r2, #3
 8002664:	4013      	ands	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	0018      	movs	r0, r3
 800266c:	f000 f996 	bl	800299c <HAL_TIM_IC_CaptureCallback>
 8002670:	e007      	b.n	8002682 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	0018      	movs	r0, r3
 8002676:	f000 f989 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	0018      	movs	r0, r3
 800267e:	f000 f995 	bl	80029ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2204      	movs	r2, #4
 8002690:	4013      	ands	r3, r2
 8002692:	2b04      	cmp	r3, #4
 8002694:	d125      	bne.n	80026e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2204      	movs	r2, #4
 800269e:	4013      	ands	r3, r2
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d11e      	bne.n	80026e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2205      	movs	r2, #5
 80026aa:	4252      	negs	r2, r2
 80026ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2202      	movs	r2, #2
 80026b2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	23c0      	movs	r3, #192	; 0xc0
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4013      	ands	r3, r2
 80026c0:	d004      	beq.n	80026cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 f969 	bl	800299c <HAL_TIM_IC_CaptureCallback>
 80026ca:	e007      	b.n	80026dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 f95c 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f968 	bl	80029ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2208      	movs	r2, #8
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d124      	bne.n	800273a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2208      	movs	r2, #8
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d11d      	bne.n	800273a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2209      	movs	r2, #9
 8002704:	4252      	negs	r2, r2
 8002706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2204      	movs	r2, #4
 800270c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2203      	movs	r2, #3
 8002716:	4013      	ands	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f000 f93d 	bl	800299c <HAL_TIM_IC_CaptureCallback>
 8002722:	e007      	b.n	8002734 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	0018      	movs	r0, r3
 8002728:	f000 f930 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	0018      	movs	r0, r3
 8002730:	f000 f93c 	bl	80029ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2210      	movs	r2, #16
 8002742:	4013      	ands	r3, r2
 8002744:	2b10      	cmp	r3, #16
 8002746:	d125      	bne.n	8002794 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2210      	movs	r2, #16
 8002750:	4013      	ands	r3, r2
 8002752:	2b10      	cmp	r3, #16
 8002754:	d11e      	bne.n	8002794 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2211      	movs	r2, #17
 800275c:	4252      	negs	r2, r2
 800275e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2208      	movs	r2, #8
 8002764:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	23c0      	movs	r3, #192	; 0xc0
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4013      	ands	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	0018      	movs	r0, r3
 8002778:	f000 f910 	bl	800299c <HAL_TIM_IC_CaptureCallback>
 800277c:	e007      	b.n	800278e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0018      	movs	r0, r3
 8002782:	f000 f903 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0018      	movs	r0, r3
 800278a:	f000 f90f 	bl	80029ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2201      	movs	r2, #1
 800279c:	4013      	ands	r3, r2
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d10f      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d108      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2202      	movs	r2, #2
 80027b6:	4252      	negs	r2, r2
 80027b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7fe f883 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	2240      	movs	r2, #64	; 0x40
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d10f      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2240      	movs	r2, #64	; 0x40
 80027d8:	4013      	ands	r3, r2
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d108      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2241      	movs	r2, #65	; 0x41
 80027e4:	4252      	negs	r2, r2
 80027e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 f8e6 	bl	80029bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2238      	movs	r2, #56	; 0x38
 8002806:	5c9b      	ldrb	r3, [r3, r2]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_TIM_ConfigClockSource+0x18>
 800280c:	2302      	movs	r3, #2
 800280e:	e0b7      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x188>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2238      	movs	r2, #56	; 0x38
 8002814:	2101      	movs	r1, #1
 8002816:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2239      	movs	r2, #57	; 0x39
 800281c:	2102      	movs	r1, #2
 800281e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2277      	movs	r2, #119	; 0x77
 800282c:	4393      	bics	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a55      	ldr	r2, [pc, #340]	; (8002988 <HAL_TIM_ConfigClockSource+0x190>)
 8002834:	4013      	ands	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	0192      	lsls	r2, r2, #6
 8002848:	4293      	cmp	r3, r2
 800284a:	d040      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xd6>
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	0192      	lsls	r2, r2, #6
 8002850:	4293      	cmp	r3, r2
 8002852:	d900      	bls.n	8002856 <HAL_TIM_ConfigClockSource+0x5e>
 8002854:	e088      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x170>
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	0152      	lsls	r2, r2, #5
 800285a:	4293      	cmp	r3, r2
 800285c:	d100      	bne.n	8002860 <HAL_TIM_ConfigClockSource+0x68>
 800285e:	e085      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	0152      	lsls	r2, r2, #5
 8002864:	4293      	cmp	r3, r2
 8002866:	d900      	bls.n	800286a <HAL_TIM_ConfigClockSource+0x72>
 8002868:	e07e      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x170>
 800286a:	2b70      	cmp	r3, #112	; 0x70
 800286c:	d018      	beq.n	80028a0 <HAL_TIM_ConfigClockSource+0xa8>
 800286e:	d900      	bls.n	8002872 <HAL_TIM_ConfigClockSource+0x7a>
 8002870:	e07a      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x170>
 8002872:	2b60      	cmp	r3, #96	; 0x60
 8002874:	d04f      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x11e>
 8002876:	d900      	bls.n	800287a <HAL_TIM_ConfigClockSource+0x82>
 8002878:	e076      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x170>
 800287a:	2b50      	cmp	r3, #80	; 0x50
 800287c:	d03b      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0xfe>
 800287e:	d900      	bls.n	8002882 <HAL_TIM_ConfigClockSource+0x8a>
 8002880:	e072      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x170>
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	d057      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x13e>
 8002886:	d900      	bls.n	800288a <HAL_TIM_ConfigClockSource+0x92>
 8002888:	e06e      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x170>
 800288a:	2b30      	cmp	r3, #48	; 0x30
 800288c:	d063      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
 800288e:	d86b      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x170>
 8002890:	2b20      	cmp	r3, #32
 8002892:	d060      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
 8002894:	d868      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x170>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d05d      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
 800289a:	2b10      	cmp	r3, #16
 800289c:	d05b      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800289e:	e063      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f000 f95a 	bl	8002b68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2277      	movs	r2, #119	; 0x77
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	609a      	str	r2, [r3, #8]
      break;
 80028cc:	e04f      	b.n	800296e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f000 f943 	bl	8002b68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2180      	movs	r1, #128	; 0x80
 80028ee:	01c9      	lsls	r1, r1, #7
 80028f0:	430a      	orrs	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]
      break;
 80028f4:	e03b      	b.n	800296e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	001a      	movs	r2, r3
 8002904:	f000 f8b6 	bl	8002a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2150      	movs	r1, #80	; 0x50
 800290e:	0018      	movs	r0, r3
 8002910:	f000 f910 	bl	8002b34 <TIM_ITRx_SetConfig>
      break;
 8002914:	e02b      	b.n	800296e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	001a      	movs	r2, r3
 8002924:	f000 f8d4 	bl	8002ad0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2160      	movs	r1, #96	; 0x60
 800292e:	0018      	movs	r0, r3
 8002930:	f000 f900 	bl	8002b34 <TIM_ITRx_SetConfig>
      break;
 8002934:	e01b      	b.n	800296e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	001a      	movs	r2, r3
 8002944:	f000 f896 	bl	8002a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2140      	movs	r1, #64	; 0x40
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f8f0 	bl	8002b34 <TIM_ITRx_SetConfig>
      break;
 8002954:	e00b      	b.n	800296e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0019      	movs	r1, r3
 8002960:	0010      	movs	r0, r2
 8002962:	f000 f8e7 	bl	8002b34 <TIM_ITRx_SetConfig>
        break;
 8002966:	e002      	b.n	800296e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	e000      	b.n	800296e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800296c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2239      	movs	r2, #57	; 0x39
 8002972:	2101      	movs	r1, #1
 8002974:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2238      	movs	r2, #56	; 0x38
 800297a:	2100      	movs	r1, #0
 800297c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b004      	add	sp, #16
 8002986:	bd80      	pop	{r7, pc}
 8002988:	ffff00ff 	.word	0xffff00ff

0800298c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b002      	add	sp, #8
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b002      	add	sp, #8
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b002      	add	sp, #8
 80029ca:	bd80      	pop	{r7, pc}

080029cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	05db      	lsls	r3, r3, #23
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d007      	beq.n	80029f6 <TIM_Base_SetConfig+0x2a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a1f      	ldr	r2, [pc, #124]	; (8002a68 <TIM_Base_SetConfig+0x9c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_Base_SetConfig+0x2a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <TIM_Base_SetConfig+0xa0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d108      	bne.n	8002a08 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2270      	movs	r2, #112	; 0x70
 80029fa:	4393      	bics	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	05db      	lsls	r3, r3, #23
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d007      	beq.n	8002a22 <TIM_Base_SetConfig+0x56>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <TIM_Base_SetConfig+0x9c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <TIM_Base_SetConfig+0x56>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <TIM_Base_SetConfig+0xa0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d108      	bne.n	8002a34 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <TIM_Base_SetConfig+0xa4>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2280      	movs	r2, #128	; 0x80
 8002a38:	4393      	bics	r3, r2
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	615a      	str	r2, [r3, #20]
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40010800 	.word	0x40010800
 8002a6c:	40011400 	.word	0x40011400
 8002a70:	fffffcff 	.word	0xfffffcff

08002a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4393      	bics	r3, r2
 8002a8e:	001a      	movs	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	22f0      	movs	r2, #240	; 0xf0
 8002a9e:	4393      	bics	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	220a      	movs	r2, #10
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	621a      	str	r2, [r3, #32]
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b006      	add	sp, #24
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	4393      	bics	r3, r2
 8002ae4:	001a      	movs	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <TIM_TI2_ConfigInputStage+0x60>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	031b      	lsls	r3, r3, #12
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	22a0      	movs	r2, #160	; 0xa0
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b006      	add	sp, #24
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	ffff0fff 	.word	0xffff0fff

08002b34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2270      	movs	r2, #112	; 0x70
 8002b48:	4393      	bics	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	2207      	movs	r2, #7
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	609a      	str	r2, [r3, #8]
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b004      	add	sp, #16
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <TIM_ETR_SetConfig+0x3c>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	021a      	lsls	r2, r3, #8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	609a      	str	r2, [r3, #8]
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b006      	add	sp, #24
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	ffff00ff 	.word	0xffff00ff

08002ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2238      	movs	r2, #56	; 0x38
 8002bb6:	5c9b      	ldrb	r3, [r3, r2]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e042      	b.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2238      	movs	r2, #56	; 0x38
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2239      	movs	r2, #57	; 0x39
 8002bcc:	2102      	movs	r1, #2
 8002bce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2270      	movs	r2, #112	; 0x70
 8002be4:	4393      	bics	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	05db      	lsls	r3, r3, #23
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d009      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d004      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d10c      	bne.n	8002c34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	4393      	bics	r3, r2
 8002c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2239      	movs	r2, #57	; 0x39
 8002c38:	2101      	movs	r1, #1
 8002c3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2238      	movs	r2, #56	; 0x38
 8002c40:	2100      	movs	r1, #0
 8002c42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b004      	add	sp, #16
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	40010800 	.word	0x40010800
 8002c54:	40011400 	.word	0x40011400

08002c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e044      	b.n	8002cf4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d107      	bne.n	8002c82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2274      	movs	r2, #116	; 0x74
 8002c76:	2100      	movs	r1, #0
 8002c78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7fd feab 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2224      	movs	r2, #36	; 0x24
 8002c86:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2101      	movs	r1, #1
 8002c94:	438a      	bics	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 f8d8 	bl	8002e50 <UART_SetConfig>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e024      	b.n	8002cf4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 fb2d 	bl	8003314 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	490d      	ldr	r1, [pc, #52]	; (8002cfc <HAL_UART_Init+0xa4>)
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	212a      	movs	r1, #42	; 0x2a
 8002cd6:	438a      	bics	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	0018      	movs	r0, r3
 8002cee:	f000 fbc5 	bl	800347c <UART_CheckIdleState>
 8002cf2:	0003      	movs	r3, r0
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	ffffb7ff 	.word	0xffffb7ff

08002d00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	1dbb      	adds	r3, r7, #6
 8002d0e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d000      	beq.n	8002d1a <HAL_UART_Transmit+0x1a>
 8002d18:	e095      	b.n	8002e46 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_UART_Transmit+0x28>
 8002d20:	1dbb      	adds	r3, r7, #6
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e08d      	b.n	8002e48 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	015b      	lsls	r3, r3, #5
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d109      	bne.n	8002d4c <HAL_UART_Transmit+0x4c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2201      	movs	r2, #1
 8002d44:	4013      	ands	r3, r2
 8002d46:	d001      	beq.n	8002d4c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e07d      	b.n	8002e48 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2274      	movs	r2, #116	; 0x74
 8002d50:	5c9b      	ldrb	r3, [r3, r2]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Transmit+0x5a>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e076      	b.n	8002e48 <HAL_UART_Transmit+0x148>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2274      	movs	r2, #116	; 0x74
 8002d5e:	2101      	movs	r1, #1
 8002d60:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2280      	movs	r2, #128	; 0x80
 8002d66:	2100      	movs	r1, #0
 8002d68:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2221      	movs	r2, #33	; 0x21
 8002d6e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d70:	f7fe f978 	bl	8001064 <HAL_GetTick>
 8002d74:	0003      	movs	r3, r0
 8002d76:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1dba      	adds	r2, r7, #6
 8002d7c:	2150      	movs	r1, #80	; 0x50
 8002d7e:	8812      	ldrh	r2, [r2, #0]
 8002d80:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1dba      	adds	r2, r7, #6
 8002d86:	2152      	movs	r1, #82	; 0x52
 8002d88:	8812      	ldrh	r2, [r2, #0]
 8002d8a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	015b      	lsls	r3, r3, #5
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d108      	bne.n	8002daa <HAL_UART_Transmit+0xaa>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d104      	bne.n	8002daa <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	61bb      	str	r3, [r7, #24]
 8002da8:	e003      	b.n	8002db2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2274      	movs	r2, #116	; 0x74
 8002db6:	2100      	movs	r1, #0
 8002db8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002dba:	e02c      	b.n	8002e16 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	0013      	movs	r3, r2
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2180      	movs	r1, #128	; 0x80
 8002dca:	f000 fb9f 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8002dce:	1e03      	subs	r3, r0, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e038      	b.n	8002e48 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10b      	bne.n	8002df4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	001a      	movs	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	05d2      	lsls	r2, r2, #23
 8002de8:	0dd2      	lsrs	r2, r2, #23
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	3302      	adds	r3, #2
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	e007      	b.n	8002e04 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3301      	adds	r3, #1
 8002e02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2252      	movs	r2, #82	; 0x52
 8002e08:	5a9b      	ldrh	r3, [r3, r2]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b299      	uxth	r1, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2252      	movs	r2, #82	; 0x52
 8002e14:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2252      	movs	r2, #82	; 0x52
 8002e1a:	5a9b      	ldrh	r3, [r3, r2]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1cc      	bne.n	8002dbc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	0013      	movs	r3, r2
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2140      	movs	r1, #64	; 0x40
 8002e30:	f000 fb6c 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e005      	b.n	8002e48 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
  }
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b008      	add	sp, #32
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e50:	b5b0      	push	{r4, r5, r7, lr}
 8002e52:	b08e      	sub	sp, #56	; 0x38
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e58:	231a      	movs	r3, #26
 8002e5a:	2218      	movs	r2, #24
 8002e5c:	4694      	mov	ip, r2
 8002e5e:	44bc      	add	ip, r7
 8002e60:	4463      	add	r3, ip
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4abc      	ldr	r2, [pc, #752]	; (8003178 <UART_SetConfig+0x328>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	0019      	movs	r1, r3
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e90:	430a      	orrs	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4ab8      	ldr	r2, [pc, #736]	; (800317c <UART_SetConfig+0x32c>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4ab2      	ldr	r2, [pc, #712]	; (8003180 <UART_SetConfig+0x330>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4aad      	ldr	r2, [pc, #692]	; (8003184 <UART_SetConfig+0x334>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4aa9      	ldr	r2, [pc, #676]	; (8003188 <UART_SetConfig+0x338>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d136      	bne.n	8002f54 <UART_SetConfig+0x104>
 8002ee6:	4ba9      	ldr	r3, [pc, #676]	; (800318c <UART_SetConfig+0x33c>)
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	220c      	movs	r2, #12
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d020      	beq.n	8002f34 <UART_SetConfig+0xe4>
 8002ef2:	d827      	bhi.n	8002f44 <UART_SetConfig+0xf4>
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d00d      	beq.n	8002f14 <UART_SetConfig+0xc4>
 8002ef8:	d824      	bhi.n	8002f44 <UART_SetConfig+0xf4>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <UART_SetConfig+0xb4>
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d010      	beq.n	8002f24 <UART_SetConfig+0xd4>
 8002f02:	e01f      	b.n	8002f44 <UART_SetConfig+0xf4>
 8002f04:	231b      	movs	r3, #27
 8002f06:	2218      	movs	r2, #24
 8002f08:	4694      	mov	ip, r2
 8002f0a:	44bc      	add	ip, r7
 8002f0c:	4463      	add	r3, ip
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	e06f      	b.n	8002ff4 <UART_SetConfig+0x1a4>
 8002f14:	231b      	movs	r3, #27
 8002f16:	2218      	movs	r2, #24
 8002f18:	4694      	mov	ip, r2
 8002f1a:	44bc      	add	ip, r7
 8002f1c:	4463      	add	r3, ip
 8002f1e:	2202      	movs	r2, #2
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	e067      	b.n	8002ff4 <UART_SetConfig+0x1a4>
 8002f24:	231b      	movs	r3, #27
 8002f26:	2218      	movs	r2, #24
 8002f28:	4694      	mov	ip, r2
 8002f2a:	44bc      	add	ip, r7
 8002f2c:	4463      	add	r3, ip
 8002f2e:	2204      	movs	r2, #4
 8002f30:	701a      	strb	r2, [r3, #0]
 8002f32:	e05f      	b.n	8002ff4 <UART_SetConfig+0x1a4>
 8002f34:	231b      	movs	r3, #27
 8002f36:	2218      	movs	r2, #24
 8002f38:	4694      	mov	ip, r2
 8002f3a:	44bc      	add	ip, r7
 8002f3c:	4463      	add	r3, ip
 8002f3e:	2208      	movs	r2, #8
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	e057      	b.n	8002ff4 <UART_SetConfig+0x1a4>
 8002f44:	231b      	movs	r3, #27
 8002f46:	2218      	movs	r2, #24
 8002f48:	4694      	mov	ip, r2
 8002f4a:	44bc      	add	ip, r7
 8002f4c:	4463      	add	r3, ip
 8002f4e:	2210      	movs	r2, #16
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	e04f      	b.n	8002ff4 <UART_SetConfig+0x1a4>
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a89      	ldr	r2, [pc, #548]	; (8003180 <UART_SetConfig+0x330>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d143      	bne.n	8002fe6 <UART_SetConfig+0x196>
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <UART_SetConfig+0x33c>)
 8002f60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f62:	23c0      	movs	r3, #192	; 0xc0
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	4013      	ands	r3, r2
 8002f68:	22c0      	movs	r2, #192	; 0xc0
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d02a      	beq.n	8002fc6 <UART_SetConfig+0x176>
 8002f70:	22c0      	movs	r2, #192	; 0xc0
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d82e      	bhi.n	8002fd6 <UART_SetConfig+0x186>
 8002f78:	2280      	movs	r2, #128	; 0x80
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d012      	beq.n	8002fa6 <UART_SetConfig+0x156>
 8002f80:	2280      	movs	r2, #128	; 0x80
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d826      	bhi.n	8002fd6 <UART_SetConfig+0x186>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <UART_SetConfig+0x146>
 8002f8c:	2280      	movs	r2, #128	; 0x80
 8002f8e:	00d2      	lsls	r2, r2, #3
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d010      	beq.n	8002fb6 <UART_SetConfig+0x166>
 8002f94:	e01f      	b.n	8002fd6 <UART_SetConfig+0x186>
 8002f96:	231b      	movs	r3, #27
 8002f98:	2218      	movs	r2, #24
 8002f9a:	4694      	mov	ip, r2
 8002f9c:	44bc      	add	ip, r7
 8002f9e:	4463      	add	r3, ip
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
 8002fa4:	e026      	b.n	8002ff4 <UART_SetConfig+0x1a4>
 8002fa6:	231b      	movs	r3, #27
 8002fa8:	2218      	movs	r2, #24
 8002faa:	4694      	mov	ip, r2
 8002fac:	44bc      	add	ip, r7
 8002fae:	4463      	add	r3, ip
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e01e      	b.n	8002ff4 <UART_SetConfig+0x1a4>
 8002fb6:	231b      	movs	r3, #27
 8002fb8:	2218      	movs	r2, #24
 8002fba:	4694      	mov	ip, r2
 8002fbc:	44bc      	add	ip, r7
 8002fbe:	4463      	add	r3, ip
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	e016      	b.n	8002ff4 <UART_SetConfig+0x1a4>
 8002fc6:	231b      	movs	r3, #27
 8002fc8:	2218      	movs	r2, #24
 8002fca:	4694      	mov	ip, r2
 8002fcc:	44bc      	add	ip, r7
 8002fce:	4463      	add	r3, ip
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e00e      	b.n	8002ff4 <UART_SetConfig+0x1a4>
 8002fd6:	231b      	movs	r3, #27
 8002fd8:	2218      	movs	r2, #24
 8002fda:	4694      	mov	ip, r2
 8002fdc:	44bc      	add	ip, r7
 8002fde:	4463      	add	r3, ip
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e006      	b.n	8002ff4 <UART_SetConfig+0x1a4>
 8002fe6:	231b      	movs	r3, #27
 8002fe8:	2218      	movs	r2, #24
 8002fea:	4694      	mov	ip, r2
 8002fec:	44bc      	add	ip, r7
 8002fee:	4463      	add	r3, ip
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a61      	ldr	r2, [pc, #388]	; (8003180 <UART_SetConfig+0x330>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d000      	beq.n	8003000 <UART_SetConfig+0x1b0>
 8002ffe:	e088      	b.n	8003112 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003000:	231b      	movs	r3, #27
 8003002:	2218      	movs	r2, #24
 8003004:	4694      	mov	ip, r2
 8003006:	44bc      	add	ip, r7
 8003008:	4463      	add	r3, ip
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d01d      	beq.n	800304c <UART_SetConfig+0x1fc>
 8003010:	dc20      	bgt.n	8003054 <UART_SetConfig+0x204>
 8003012:	2b04      	cmp	r3, #4
 8003014:	d015      	beq.n	8003042 <UART_SetConfig+0x1f2>
 8003016:	dc1d      	bgt.n	8003054 <UART_SetConfig+0x204>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <UART_SetConfig+0x1d2>
 800301c:	2b02      	cmp	r3, #2
 800301e:	d005      	beq.n	800302c <UART_SetConfig+0x1dc>
 8003020:	e018      	b.n	8003054 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003022:	f7ff f855 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8003026:	0003      	movs	r3, r0
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800302a:	e01d      	b.n	8003068 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800302c:	4b57      	ldr	r3, [pc, #348]	; (800318c <UART_SetConfig+0x33c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2210      	movs	r2, #16
 8003032:	4013      	ands	r3, r2
 8003034:	d002      	beq.n	800303c <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003036:	4b56      	ldr	r3, [pc, #344]	; (8003190 <UART_SetConfig+0x340>)
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800303a:	e015      	b.n	8003068 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 800303c:	4b55      	ldr	r3, [pc, #340]	; (8003194 <UART_SetConfig+0x344>)
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003040:	e012      	b.n	8003068 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003042:	f7fe ff95 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8003046:	0003      	movs	r3, r0
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800304a:	e00d      	b.n	8003068 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003052:	e009      	b.n	8003068 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003058:	231a      	movs	r3, #26
 800305a:	2218      	movs	r2, #24
 800305c:	4694      	mov	ip, r2
 800305e:	44bc      	add	ip, r7
 8003060:	4463      	add	r3, ip
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
        break;
 8003066:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d100      	bne.n	8003070 <UART_SetConfig+0x220>
 800306e:	e139      	b.n	80032e4 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	0013      	movs	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	189b      	adds	r3, r3, r2
 800307a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800307c:	429a      	cmp	r2, r3
 800307e:	d305      	bcc.n	800308c <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003088:	429a      	cmp	r2, r3
 800308a:	d907      	bls.n	800309c <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 800308c:	231a      	movs	r3, #26
 800308e:	2218      	movs	r2, #24
 8003090:	4694      	mov	ip, r2
 8003092:	44bc      	add	ip, r7
 8003094:	4463      	add	r3, ip
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	e123      	b.n	80032e4 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	6939      	ldr	r1, [r7, #16]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	000b      	movs	r3, r1
 80030aa:	0e1b      	lsrs	r3, r3, #24
 80030ac:	0010      	movs	r0, r2
 80030ae:	0205      	lsls	r5, r0, #8
 80030b0:	431d      	orrs	r5, r3
 80030b2:	000b      	movs	r3, r1
 80030b4:	021c      	lsls	r4, r3, #8
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68b8      	ldr	r0, [r7, #8]
 80030c4:	68f9      	ldr	r1, [r7, #12]
 80030c6:	1900      	adds	r0, r0, r4
 80030c8:	4169      	adcs	r1, r5
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	2300      	movs	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f7fd f8aa 	bl	8000230 <__aeabi_uldivmod>
 80030dc:	0002      	movs	r2, r0
 80030de:	000b      	movs	r3, r1
 80030e0:	0013      	movs	r3, r2
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e6:	23c0      	movs	r3, #192	; 0xc0
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d309      	bcc.n	8003102 <UART_SetConfig+0x2b2>
 80030ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	035b      	lsls	r3, r3, #13
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d204      	bcs.n	8003102 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030fe:	60da      	str	r2, [r3, #12]
 8003100:	e0f0      	b.n	80032e4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003102:	231a      	movs	r3, #26
 8003104:	2218      	movs	r2, #24
 8003106:	4694      	mov	ip, r2
 8003108:	44bc      	add	ip, r7
 800310a:	4463      	add	r3, ip
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e0e8      	b.n	80032e4 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	429a      	cmp	r2, r3
 800311c:	d000      	beq.n	8003120 <UART_SetConfig+0x2d0>
 800311e:	e087      	b.n	8003230 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8003120:	231b      	movs	r3, #27
 8003122:	2218      	movs	r2, #24
 8003124:	4694      	mov	ip, r2
 8003126:	44bc      	add	ip, r7
 8003128:	4463      	add	r3, ip
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d835      	bhi.n	800319c <UART_SetConfig+0x34c>
 8003130:	009a      	lsls	r2, r3, #2
 8003132:	4b19      	ldr	r3, [pc, #100]	; (8003198 <UART_SetConfig+0x348>)
 8003134:	18d3      	adds	r3, r2, r3
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800313a:	f7fe ffc9 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 800313e:	0003      	movs	r3, r0
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003142:	e035      	b.n	80031b0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003144:	f7fe ffda 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 8003148:	0003      	movs	r3, r0
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800314c:	e030      	b.n	80031b0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <UART_SetConfig+0x33c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2210      	movs	r2, #16
 8003154:	4013      	ands	r3, r2
 8003156:	d002      	beq.n	800315e <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <UART_SetConfig+0x340>)
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800315c:	e028      	b.n	80031b0 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 800315e:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <UART_SetConfig+0x344>)
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003162:	e025      	b.n	80031b0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003164:	f7fe ff04 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8003168:	0003      	movs	r3, r0
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800316c:	e020      	b.n	80031b0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003174:	e01c      	b.n	80031b0 <UART_SetConfig+0x360>
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	efff69f3 	.word	0xefff69f3
 800317c:	ffffcfff 	.word	0xffffcfff
 8003180:	40004800 	.word	0x40004800
 8003184:	fffff4ff 	.word	0xfffff4ff
 8003188:	40004400 	.word	0x40004400
 800318c:	40021000 	.word	0x40021000
 8003190:	003d0900 	.word	0x003d0900
 8003194:	00f42400 	.word	0x00f42400
 8003198:	08003798 	.word	0x08003798
      default:
        pclk = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80031a0:	231a      	movs	r3, #26
 80031a2:	2218      	movs	r2, #24
 80031a4:	4694      	mov	ip, r2
 80031a6:	44bc      	add	ip, r7
 80031a8:	4463      	add	r3, ip
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
        break;
 80031ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d100      	bne.n	80031b8 <UART_SetConfig+0x368>
 80031b6:	e095      	b.n	80032e4 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	005a      	lsls	r2, r3, #1
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	18d2      	adds	r2, r2, r3
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	0019      	movs	r1, r3
 80031ca:	0010      	movs	r0, r2
 80031cc:	f7fc ffa4 	bl	8000118 <__udivsi3>
 80031d0:	0003      	movs	r3, r0
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	2b0f      	cmp	r3, #15
 80031da:	d921      	bls.n	8003220 <UART_SetConfig+0x3d0>
 80031dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	025b      	lsls	r3, r3, #9
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d21c      	bcs.n	8003220 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	200e      	movs	r0, #14
 80031ec:	2418      	movs	r4, #24
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	181b      	adds	r3, r3, r0
 80031f2:	210f      	movs	r1, #15
 80031f4:	438a      	bics	r2, r1
 80031f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2207      	movs	r2, #7
 8003200:	4013      	ands	r3, r2
 8003202:	b299      	uxth	r1, r3
 8003204:	193b      	adds	r3, r7, r4
 8003206:	181b      	adds	r3, r3, r0
 8003208:	193a      	adds	r2, r7, r4
 800320a:	1812      	adds	r2, r2, r0
 800320c:	8812      	ldrh	r2, [r2, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	193a      	adds	r2, r7, r4
 8003218:	1812      	adds	r2, r2, r0
 800321a:	8812      	ldrh	r2, [r2, #0]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	e061      	b.n	80032e4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003220:	231a      	movs	r3, #26
 8003222:	2218      	movs	r2, #24
 8003224:	4694      	mov	ip, r2
 8003226:	44bc      	add	ip, r7
 8003228:	4463      	add	r3, ip
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e059      	b.n	80032e4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003230:	231b      	movs	r3, #27
 8003232:	2218      	movs	r2, #24
 8003234:	4694      	mov	ip, r2
 8003236:	44bc      	add	ip, r7
 8003238:	4463      	add	r3, ip
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d822      	bhi.n	8003286 <UART_SetConfig+0x436>
 8003240:	009a      	lsls	r2, r3, #2
 8003242:	4b30      	ldr	r3, [pc, #192]	; (8003304 <UART_SetConfig+0x4b4>)
 8003244:	18d3      	adds	r3, r2, r3
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800324a:	f7fe ff41 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 800324e:	0003      	movs	r3, r0
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003252:	e022      	b.n	800329a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003254:	f7fe ff52 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 8003258:	0003      	movs	r3, r0
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800325c:	e01d      	b.n	800329a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800325e:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <UART_SetConfig+0x4b8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2210      	movs	r2, #16
 8003264:	4013      	ands	r3, r2
 8003266:	d002      	beq.n	800326e <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003268:	4b28      	ldr	r3, [pc, #160]	; (800330c <UART_SetConfig+0x4bc>)
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800326c:	e015      	b.n	800329a <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <UART_SetConfig+0x4c0>)
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003272:	e012      	b.n	800329a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003274:	f7fe fe7c 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8003278:	0003      	movs	r3, r0
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800327c:	e00d      	b.n	800329a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003284:	e009      	b.n	800329a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800328a:	231a      	movs	r3, #26
 800328c:	2218      	movs	r2, #24
 800328e:	4694      	mov	ip, r2
 8003290:	44bc      	add	ip, r7
 8003292:	4463      	add	r3, ip
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
        break;
 8003298:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d021      	beq.n	80032e4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	085a      	lsrs	r2, r3, #1
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	18d2      	adds	r2, r2, r3
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	0019      	movs	r1, r3
 80032b0:	0010      	movs	r0, r2
 80032b2:	f7fc ff31 	bl	8000118 <__udivsi3>
 80032b6:	0003      	movs	r3, r0
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	2b0f      	cmp	r3, #15
 80032c0:	d909      	bls.n	80032d6 <UART_SetConfig+0x486>
 80032c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	025b      	lsls	r3, r3, #9
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d204      	bcs.n	80032d6 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d2:	60da      	str	r2, [r3, #12]
 80032d4:	e006      	b.n	80032e4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80032d6:	231a      	movs	r3, #26
 80032d8:	2218      	movs	r2, #24
 80032da:	4694      	mov	ip, r2
 80032dc:	44bc      	add	ip, r7
 80032de:	4463      	add	r3, ip
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2200      	movs	r2, #0
 80032e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	2200      	movs	r2, #0
 80032ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032f0:	231a      	movs	r3, #26
 80032f2:	2218      	movs	r2, #24
 80032f4:	4694      	mov	ip, r2
 80032f6:	44bc      	add	ip, r7
 80032f8:	4463      	add	r3, ip
 80032fa:	781b      	ldrb	r3, [r3, #0]
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b00e      	add	sp, #56	; 0x38
 8003302:	bdb0      	pop	{r4, r5, r7, pc}
 8003304:	080037bc 	.word	0x080037bc
 8003308:	40021000 	.word	0x40021000
 800330c:	003d0900 	.word	0x003d0900
 8003310:	00f42400 	.word	0x00f42400

08003314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	2201      	movs	r2, #1
 8003322:	4013      	ands	r3, r2
 8003324:	d00b      	beq.n	800333e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a4a      	ldr	r2, [pc, #296]	; (8003458 <UART_AdvFeatureConfig+0x144>)
 800332e:	4013      	ands	r3, r2
 8003330:	0019      	movs	r1, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2202      	movs	r2, #2
 8003344:	4013      	ands	r3, r2
 8003346:	d00b      	beq.n	8003360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4a43      	ldr	r2, [pc, #268]	; (800345c <UART_AdvFeatureConfig+0x148>)
 8003350:	4013      	ands	r3, r2
 8003352:	0019      	movs	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	2204      	movs	r2, #4
 8003366:	4013      	ands	r3, r2
 8003368:	d00b      	beq.n	8003382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4a3b      	ldr	r2, [pc, #236]	; (8003460 <UART_AdvFeatureConfig+0x14c>)
 8003372:	4013      	ands	r3, r2
 8003374:	0019      	movs	r1, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	2208      	movs	r2, #8
 8003388:	4013      	ands	r3, r2
 800338a:	d00b      	beq.n	80033a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4a34      	ldr	r2, [pc, #208]	; (8003464 <UART_AdvFeatureConfig+0x150>)
 8003394:	4013      	ands	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2210      	movs	r2, #16
 80033aa:	4013      	ands	r3, r2
 80033ac:	d00b      	beq.n	80033c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a2c      	ldr	r2, [pc, #176]	; (8003468 <UART_AdvFeatureConfig+0x154>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	0019      	movs	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2220      	movs	r2, #32
 80033cc:	4013      	ands	r3, r2
 80033ce:	d00b      	beq.n	80033e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	4a25      	ldr	r2, [pc, #148]	; (800346c <UART_AdvFeatureConfig+0x158>)
 80033d8:	4013      	ands	r3, r2
 80033da:	0019      	movs	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	2240      	movs	r2, #64	; 0x40
 80033ee:	4013      	ands	r3, r2
 80033f0:	d01d      	beq.n	800342e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <UART_AdvFeatureConfig+0x15c>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	0019      	movs	r1, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	035b      	lsls	r3, r3, #13
 8003412:	429a      	cmp	r2, r3
 8003414:	d10b      	bne.n	800342e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <UART_AdvFeatureConfig+0x160>)
 800341e:	4013      	ands	r3, r2
 8003420:	0019      	movs	r1, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	4013      	ands	r3, r2
 8003436:	d00b      	beq.n	8003450 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <UART_AdvFeatureConfig+0x164>)
 8003440:	4013      	ands	r3, r2
 8003442:	0019      	movs	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	605a      	str	r2, [r3, #4]
  }
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	b002      	add	sp, #8
 8003456:	bd80      	pop	{r7, pc}
 8003458:	fffdffff 	.word	0xfffdffff
 800345c:	fffeffff 	.word	0xfffeffff
 8003460:	fffbffff 	.word	0xfffbffff
 8003464:	ffff7fff 	.word	0xffff7fff
 8003468:	ffffefff 	.word	0xffffefff
 800346c:	ffffdfff 	.word	0xffffdfff
 8003470:	ffefffff 	.word	0xffefffff
 8003474:	ff9fffff 	.word	0xff9fffff
 8003478:	fff7ffff 	.word	0xfff7ffff

0800347c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af02      	add	r7, sp, #8
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	2100      	movs	r1, #0
 800348a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800348c:	f7fd fdea 	bl	8001064 <HAL_GetTick>
 8003490:	0003      	movs	r3, r0
 8003492:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2208      	movs	r2, #8
 800349c:	4013      	ands	r3, r2
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d10c      	bne.n	80034bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	0391      	lsls	r1, r2, #14
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4a17      	ldr	r2, [pc, #92]	; (8003508 <UART_CheckIdleState+0x8c>)
 80034ac:	9200      	str	r2, [sp, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f000 f82c 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 80034b4:	1e03      	subs	r3, r0, #0
 80034b6:	d001      	beq.n	80034bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e021      	b.n	8003500 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2204      	movs	r2, #4
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d10c      	bne.n	80034e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	03d1      	lsls	r1, r2, #15
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4a0d      	ldr	r2, [pc, #52]	; (8003508 <UART_CheckIdleState+0x8c>)
 80034d4:	9200      	str	r2, [sp, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f000 f818 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d001      	beq.n	80034e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e00d      	b.n	8003500 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2274      	movs	r2, #116	; 0x74
 80034fa:	2100      	movs	r1, #0
 80034fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	b004      	add	sp, #16
 8003506:	bd80      	pop	{r7, pc}
 8003508:	01ffffff 	.word	0x01ffffff

0800350c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	1dfb      	adds	r3, r7, #7
 800351a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351c:	e05e      	b.n	80035dc <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	3301      	adds	r3, #1
 8003522:	d05b      	beq.n	80035dc <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003524:	f7fd fd9e 	bl	8001064 <HAL_GetTick>
 8003528:	0002      	movs	r2, r0
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	429a      	cmp	r2, r3
 8003532:	d302      	bcc.n	800353a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11b      	bne.n	8003572 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	492f      	ldr	r1, [pc, #188]	; (8003604 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003546:	400a      	ands	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2101      	movs	r1, #1
 8003556:	438a      	bics	r2, r1
 8003558:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2274      	movs	r2, #116	; 0x74
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e044      	b.n	80035fc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2204      	movs	r2, #4
 800357a:	4013      	ands	r3, r2
 800357c:	d02e      	beq.n	80035dc <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	401a      	ands	r2, r3
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	429a      	cmp	r2, r3
 8003590:	d124      	bne.n	80035dc <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	0112      	lsls	r2, r2, #4
 800359a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4917      	ldr	r1, [pc, #92]	; (8003604 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2101      	movs	r1, #1
 80035b8:	438a      	bics	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	2120      	movs	r1, #32
 80035ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2274      	movs	r2, #116	; 0x74
 80035d4:	2100      	movs	r1, #0
 80035d6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e00f      	b.n	80035fc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4013      	ands	r3, r2
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	425a      	negs	r2, r3
 80035ec:	4153      	adcs	r3, r2
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	001a      	movs	r2, r3
 80035f2:	1dfb      	adds	r3, r7, #7
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d091      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b004      	add	sp, #16
 8003602:	bd80      	pop	{r7, pc}
 8003604:	fffffe5f 	.word	0xfffffe5f

08003608 <__libc_init_array>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	2600      	movs	r6, #0
 800360c:	4d0c      	ldr	r5, [pc, #48]	; (8003640 <__libc_init_array+0x38>)
 800360e:	4c0d      	ldr	r4, [pc, #52]	; (8003644 <__libc_init_array+0x3c>)
 8003610:	1b64      	subs	r4, r4, r5
 8003612:	10a4      	asrs	r4, r4, #2
 8003614:	42a6      	cmp	r6, r4
 8003616:	d109      	bne.n	800362c <__libc_init_array+0x24>
 8003618:	2600      	movs	r6, #0
 800361a:	f000 f821 	bl	8003660 <_init>
 800361e:	4d0a      	ldr	r5, [pc, #40]	; (8003648 <__libc_init_array+0x40>)
 8003620:	4c0a      	ldr	r4, [pc, #40]	; (800364c <__libc_init_array+0x44>)
 8003622:	1b64      	subs	r4, r4, r5
 8003624:	10a4      	asrs	r4, r4, #2
 8003626:	42a6      	cmp	r6, r4
 8003628:	d105      	bne.n	8003636 <__libc_init_array+0x2e>
 800362a:	bd70      	pop	{r4, r5, r6, pc}
 800362c:	00b3      	lsls	r3, r6, #2
 800362e:	58eb      	ldr	r3, [r5, r3]
 8003630:	4798      	blx	r3
 8003632:	3601      	adds	r6, #1
 8003634:	e7ee      	b.n	8003614 <__libc_init_array+0xc>
 8003636:	00b3      	lsls	r3, r6, #2
 8003638:	58eb      	ldr	r3, [r5, r3]
 800363a:	4798      	blx	r3
 800363c:	3601      	adds	r6, #1
 800363e:	e7f2      	b.n	8003626 <__libc_init_array+0x1e>
 8003640:	080037e8 	.word	0x080037e8
 8003644:	080037e8 	.word	0x080037e8
 8003648:	080037e8 	.word	0x080037e8
 800364c:	080037ec 	.word	0x080037ec

08003650 <memset>:
 8003650:	0003      	movs	r3, r0
 8003652:	1882      	adds	r2, r0, r2
 8003654:	4293      	cmp	r3, r2
 8003656:	d100      	bne.n	800365a <memset+0xa>
 8003658:	4770      	bx	lr
 800365a:	7019      	strb	r1, [r3, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	e7f9      	b.n	8003654 <memset+0x4>

08003660 <_init>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003666:	bc08      	pop	{r3}
 8003668:	469e      	mov	lr, r3
 800366a:	4770      	bx	lr

0800366c <_fini>:
 800366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003672:	bc08      	pop	{r3}
 8003674:	469e      	mov	lr, r3
 8003676:	4770      	bx	lr
