
STM32L010RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003574  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800379c  0800379c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037a4  080037a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  080037b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080037b8  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff94  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020eb  00000000  00000000  0002ffc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  000320b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00032d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002543  00000000  00000000  000339b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e745  00000000  00000000  00035ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000715fa  00000000  00000000  00044638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b5c32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e4c  00000000  00000000  000b5c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800361c 	.word	0x0800361c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800361c 	.word	0x0800361c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	1c08      	adds	r0, r1, #0
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f82e 	bl	80002c0 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	0415      	lsls	r5, r2, #16
 8000274:	0c2d      	lsrs	r5, r5, #16
 8000276:	000f      	movs	r7, r1
 8000278:	0001      	movs	r1, r0
 800027a:	002e      	movs	r6, r5
 800027c:	46c6      	mov	lr, r8
 800027e:	4684      	mov	ip, r0
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	0c14      	lsrs	r4, r2, #16
 8000284:	0c00      	lsrs	r0, r0, #16
 8000286:	0c09      	lsrs	r1, r1, #16
 8000288:	4346      	muls	r6, r0
 800028a:	434d      	muls	r5, r1
 800028c:	4360      	muls	r0, r4
 800028e:	4361      	muls	r1, r4
 8000290:	1940      	adds	r0, r0, r5
 8000292:	0c34      	lsrs	r4, r6, #16
 8000294:	1824      	adds	r4, r4, r0
 8000296:	b500      	push	{lr}
 8000298:	42a5      	cmp	r5, r4
 800029a:	d903      	bls.n	80002a4 <__aeabi_lmul+0x34>
 800029c:	2080      	movs	r0, #128	; 0x80
 800029e:	0240      	lsls	r0, r0, #9
 80002a0:	4680      	mov	r8, r0
 80002a2:	4441      	add	r1, r8
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	186d      	adds	r5, r5, r1
 80002a8:	4661      	mov	r1, ip
 80002aa:	4359      	muls	r1, r3
 80002ac:	437a      	muls	r2, r7
 80002ae:	0430      	lsls	r0, r6, #16
 80002b0:	1949      	adds	r1, r1, r5
 80002b2:	0424      	lsls	r4, r4, #16
 80002b4:	0c00      	lsrs	r0, r0, #16
 80002b6:	1820      	adds	r0, r4, r0
 80002b8:	1889      	adds	r1, r1, r2
 80002ba:	bc80      	pop	{r7}
 80002bc:	46b8      	mov	r8, r7
 80002be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c0 <__udivmoddi4>:
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	4657      	mov	r7, sl
 80002c4:	464e      	mov	r6, r9
 80002c6:	4645      	mov	r5, r8
 80002c8:	46de      	mov	lr, fp
 80002ca:	b5e0      	push	{r5, r6, r7, lr}
 80002cc:	0004      	movs	r4, r0
 80002ce:	000d      	movs	r5, r1
 80002d0:	4692      	mov	sl, r2
 80002d2:	4699      	mov	r9, r3
 80002d4:	b083      	sub	sp, #12
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d830      	bhi.n	800033c <__udivmoddi4+0x7c>
 80002da:	d02d      	beq.n	8000338 <__udivmoddi4+0x78>
 80002dc:	4649      	mov	r1, r9
 80002de:	4650      	mov	r0, sl
 80002e0:	f000 f8ba 	bl	8000458 <__clzdi2>
 80002e4:	0029      	movs	r1, r5
 80002e6:	0006      	movs	r6, r0
 80002e8:	0020      	movs	r0, r4
 80002ea:	f000 f8b5 	bl	8000458 <__clzdi2>
 80002ee:	1a33      	subs	r3, r6, r0
 80002f0:	4698      	mov	r8, r3
 80002f2:	3b20      	subs	r3, #32
 80002f4:	469b      	mov	fp, r3
 80002f6:	d433      	bmi.n	8000360 <__udivmoddi4+0xa0>
 80002f8:	465a      	mov	r2, fp
 80002fa:	4653      	mov	r3, sl
 80002fc:	4093      	lsls	r3, r2
 80002fe:	4642      	mov	r2, r8
 8000300:	001f      	movs	r7, r3
 8000302:	4653      	mov	r3, sl
 8000304:	4093      	lsls	r3, r2
 8000306:	001e      	movs	r6, r3
 8000308:	42af      	cmp	r7, r5
 800030a:	d83a      	bhi.n	8000382 <__udivmoddi4+0xc2>
 800030c:	42af      	cmp	r7, r5
 800030e:	d100      	bne.n	8000312 <__udivmoddi4+0x52>
 8000310:	e078      	b.n	8000404 <__udivmoddi4+0x144>
 8000312:	465b      	mov	r3, fp
 8000314:	1ba4      	subs	r4, r4, r6
 8000316:	41bd      	sbcs	r5, r7
 8000318:	2b00      	cmp	r3, #0
 800031a:	da00      	bge.n	800031e <__udivmoddi4+0x5e>
 800031c:	e075      	b.n	800040a <__udivmoddi4+0x14a>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	2301      	movs	r3, #1
 8000328:	465a      	mov	r2, fp
 800032a:	4093      	lsls	r3, r2
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	2301      	movs	r3, #1
 8000330:	4642      	mov	r2, r8
 8000332:	4093      	lsls	r3, r2
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	e028      	b.n	800038a <__udivmoddi4+0xca>
 8000338:	4282      	cmp	r2, r0
 800033a:	d9cf      	bls.n	80002dc <__udivmoddi4+0x1c>
 800033c:	2200      	movs	r2, #0
 800033e:	2300      	movs	r3, #0
 8000340:	9200      	str	r2, [sp, #0]
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <__udivmoddi4+0x8e>
 800034a:	601c      	str	r4, [r3, #0]
 800034c:	605d      	str	r5, [r3, #4]
 800034e:	9800      	ldr	r0, [sp, #0]
 8000350:	9901      	ldr	r1, [sp, #4]
 8000352:	b003      	add	sp, #12
 8000354:	bcf0      	pop	{r4, r5, r6, r7}
 8000356:	46bb      	mov	fp, r7
 8000358:	46b2      	mov	sl, r6
 800035a:	46a9      	mov	r9, r5
 800035c:	46a0      	mov	r8, r4
 800035e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000360:	4642      	mov	r2, r8
 8000362:	2320      	movs	r3, #32
 8000364:	1a9b      	subs	r3, r3, r2
 8000366:	4652      	mov	r2, sl
 8000368:	40da      	lsrs	r2, r3
 800036a:	4641      	mov	r1, r8
 800036c:	0013      	movs	r3, r2
 800036e:	464a      	mov	r2, r9
 8000370:	408a      	lsls	r2, r1
 8000372:	0017      	movs	r7, r2
 8000374:	4642      	mov	r2, r8
 8000376:	431f      	orrs	r7, r3
 8000378:	4653      	mov	r3, sl
 800037a:	4093      	lsls	r3, r2
 800037c:	001e      	movs	r6, r3
 800037e:	42af      	cmp	r7, r5
 8000380:	d9c4      	bls.n	800030c <__udivmoddi4+0x4c>
 8000382:	2200      	movs	r2, #0
 8000384:	2300      	movs	r3, #0
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	4643      	mov	r3, r8
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0d9      	beq.n	8000344 <__udivmoddi4+0x84>
 8000390:	07fb      	lsls	r3, r7, #31
 8000392:	0872      	lsrs	r2, r6, #1
 8000394:	431a      	orrs	r2, r3
 8000396:	4646      	mov	r6, r8
 8000398:	087b      	lsrs	r3, r7, #1
 800039a:	e00e      	b.n	80003ba <__udivmoddi4+0xfa>
 800039c:	42ab      	cmp	r3, r5
 800039e:	d101      	bne.n	80003a4 <__udivmoddi4+0xe4>
 80003a0:	42a2      	cmp	r2, r4
 80003a2:	d80c      	bhi.n	80003be <__udivmoddi4+0xfe>
 80003a4:	1aa4      	subs	r4, r4, r2
 80003a6:	419d      	sbcs	r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	1924      	adds	r4, r4, r4
 80003ac:	416d      	adcs	r5, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	3e01      	subs	r6, #1
 80003b2:	1824      	adds	r4, r4, r0
 80003b4:	414d      	adcs	r5, r1
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d006      	beq.n	80003c8 <__udivmoddi4+0x108>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	d9ee      	bls.n	800039c <__udivmoddi4+0xdc>
 80003be:	3e01      	subs	r6, #1
 80003c0:	1924      	adds	r4, r4, r4
 80003c2:	416d      	adcs	r5, r5
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d1f8      	bne.n	80003ba <__udivmoddi4+0xfa>
 80003c8:	9800      	ldr	r0, [sp, #0]
 80003ca:	9901      	ldr	r1, [sp, #4]
 80003cc:	465b      	mov	r3, fp
 80003ce:	1900      	adds	r0, r0, r4
 80003d0:	4169      	adcs	r1, r5
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	db24      	blt.n	8000420 <__udivmoddi4+0x160>
 80003d6:	002b      	movs	r3, r5
 80003d8:	465a      	mov	r2, fp
 80003da:	4644      	mov	r4, r8
 80003dc:	40d3      	lsrs	r3, r2
 80003de:	002a      	movs	r2, r5
 80003e0:	40e2      	lsrs	r2, r4
 80003e2:	001c      	movs	r4, r3
 80003e4:	465b      	mov	r3, fp
 80003e6:	0015      	movs	r5, r2
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	db2a      	blt.n	8000442 <__udivmoddi4+0x182>
 80003ec:	0026      	movs	r6, r4
 80003ee:	409e      	lsls	r6, r3
 80003f0:	0033      	movs	r3, r6
 80003f2:	0026      	movs	r6, r4
 80003f4:	4647      	mov	r7, r8
 80003f6:	40be      	lsls	r6, r7
 80003f8:	0032      	movs	r2, r6
 80003fa:	1a80      	subs	r0, r0, r2
 80003fc:	4199      	sbcs	r1, r3
 80003fe:	9000      	str	r0, [sp, #0]
 8000400:	9101      	str	r1, [sp, #4]
 8000402:	e79f      	b.n	8000344 <__udivmoddi4+0x84>
 8000404:	42a3      	cmp	r3, r4
 8000406:	d8bc      	bhi.n	8000382 <__udivmoddi4+0xc2>
 8000408:	e783      	b.n	8000312 <__udivmoddi4+0x52>
 800040a:	4642      	mov	r2, r8
 800040c:	2320      	movs	r3, #32
 800040e:	2100      	movs	r1, #0
 8000410:	1a9b      	subs	r3, r3, r2
 8000412:	2200      	movs	r2, #0
 8000414:	9100      	str	r1, [sp, #0]
 8000416:	9201      	str	r2, [sp, #4]
 8000418:	2201      	movs	r2, #1
 800041a:	40da      	lsrs	r2, r3
 800041c:	9201      	str	r2, [sp, #4]
 800041e:	e786      	b.n	800032e <__udivmoddi4+0x6e>
 8000420:	4642      	mov	r2, r8
 8000422:	2320      	movs	r3, #32
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	002a      	movs	r2, r5
 8000428:	4646      	mov	r6, r8
 800042a:	409a      	lsls	r2, r3
 800042c:	0023      	movs	r3, r4
 800042e:	40f3      	lsrs	r3, r6
 8000430:	4644      	mov	r4, r8
 8000432:	4313      	orrs	r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	40e2      	lsrs	r2, r4
 8000438:	001c      	movs	r4, r3
 800043a:	465b      	mov	r3, fp
 800043c:	0015      	movs	r5, r2
 800043e:	2b00      	cmp	r3, #0
 8000440:	dad4      	bge.n	80003ec <__udivmoddi4+0x12c>
 8000442:	4642      	mov	r2, r8
 8000444:	002f      	movs	r7, r5
 8000446:	2320      	movs	r3, #32
 8000448:	0026      	movs	r6, r4
 800044a:	4097      	lsls	r7, r2
 800044c:	1a9b      	subs	r3, r3, r2
 800044e:	40de      	lsrs	r6, r3
 8000450:	003b      	movs	r3, r7
 8000452:	4333      	orrs	r3, r6
 8000454:	e7cd      	b.n	80003f2 <__udivmoddi4+0x132>
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__clzdi2>:
 8000458:	b510      	push	{r4, lr}
 800045a:	2900      	cmp	r1, #0
 800045c:	d103      	bne.n	8000466 <__clzdi2+0xe>
 800045e:	f000 f807 	bl	8000470 <__clzsi2>
 8000462:	3020      	adds	r0, #32
 8000464:	e002      	b.n	800046c <__clzdi2+0x14>
 8000466:	1c08      	adds	r0, r1, #0
 8000468:	f000 f802 	bl	8000470 <__clzsi2>
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__clzsi2>:
 8000470:	211c      	movs	r1, #28
 8000472:	2301      	movs	r3, #1
 8000474:	041b      	lsls	r3, r3, #16
 8000476:	4298      	cmp	r0, r3
 8000478:	d301      	bcc.n	800047e <__clzsi2+0xe>
 800047a:	0c00      	lsrs	r0, r0, #16
 800047c:	3910      	subs	r1, #16
 800047e:	0a1b      	lsrs	r3, r3, #8
 8000480:	4298      	cmp	r0, r3
 8000482:	d301      	bcc.n	8000488 <__clzsi2+0x18>
 8000484:	0a00      	lsrs	r0, r0, #8
 8000486:	3908      	subs	r1, #8
 8000488:	091b      	lsrs	r3, r3, #4
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0x22>
 800048e:	0900      	lsrs	r0, r0, #4
 8000490:	3904      	subs	r1, #4
 8000492:	a202      	add	r2, pc, #8	; (adr r2, 800049c <__clzsi2+0x2c>)
 8000494:	5c10      	ldrb	r0, [r2, r0]
 8000496:	1840      	adds	r0, r0, r1
 8000498:	4770      	bx	lr
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	02020304 	.word	0x02020304
 80004a0:	01010101 	.word	0x01010101
	...

080004ac <SystemClock_Config>:
SPI_HandleTypeDef hspi1;

// ----- Functions ----- 

static void SystemClock_Config(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b099      	sub	sp, #100	; 0x64
 80004b0:	af00      	add	r7, sp, #0
  	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	242c      	movs	r4, #44	; 0x2c
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2334      	movs	r3, #52	; 0x34
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f003 f8a5 	bl	800360c <memset>
  	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c2:	2318      	movs	r3, #24
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	2314      	movs	r3, #20
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f003 f89d 	bl	800360c <memset>
  	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d2:	003b      	movs	r3, r7
 80004d4:	0018      	movs	r0, r3
 80004d6:	2318      	movs	r3, #24
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f003 f896 	bl	800360c <memset>

  	//Configure the main internal regulator output voltage
  	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e0:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <SystemClock_Config+0xe8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a2c      	ldr	r2, [pc, #176]	; (8000598 <SystemClock_Config+0xec>)
 80004e6:	401a      	ands	r2, r3
 80004e8:	4b2a      	ldr	r3, [pc, #168]	; (8000594 <SystemClock_Config+0xe8>)
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0109      	lsls	r1, r1, #4
 80004ee:	430a      	orrs	r2, r1
 80004f0:	601a      	str	r2, [r3, #0]

  	//Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure
  	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f2:	0021      	movs	r1, r4
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2202      	movs	r2, #2
 80004f8:	601a      	str	r2, [r3, #0]
  	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2201      	movs	r2, #1
 80004fe:	60da      	str	r2, [r3, #12]
  	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2210      	movs	r2, #16
 8000504:	611a      	str	r2, [r3, #16]
  	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2202      	movs	r2, #2
 800050a:	625a      	str	r2, [r3, #36]	; 0x24
  	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
  	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	02d2      	lsls	r2, r2, #11
 8000518:	62da      	str	r2, [r3, #44]	; 0x2c
  	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	03d2      	lsls	r2, r2, #15
 8000520:	631a      	str	r2, [r3, #48]	; 0x30
  	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	187b      	adds	r3, r7, r1
 8000524:	0018      	movs	r0, r3
 8000526:	f001 f83d 	bl	80015a4 <HAL_RCC_OscConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d003      	beq.n	8000536 <SystemClock_Config+0x8a>
  	{
  	  	UT_Error_Handler("HAL_RCC_OscConfig failed!");
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <SystemClock_Config+0xf0>)
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fca7 	bl	8000e84 <UT_Error_Handler>
  	}

  	//Initializes the CPU, AHB and APB buses clocks
  	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000536:	2118      	movs	r1, #24
 8000538:	187b      	adds	r3, r7, r1
 800053a:	220f      	movs	r2, #15
 800053c:	601a      	str	r2, [r3, #0]
  	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2203      	movs	r2, #3
 8000542:	605a      	str	r2, [r3, #4]
  	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2101      	movs	r1, #1
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fb9e 	bl	8001c9c <HAL_RCC_ClockConfig>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d003      	beq.n	800056c <SystemClock_Config+0xc0>
  	{
  	  	UT_Error_Handler("HAL_RCC_ClockConfig failed!");
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <SystemClock_Config+0xf4>)
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fc8c 	bl	8000e84 <UT_Error_Handler>
  	}

  	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800056c:	003b      	movs	r3, r7
 800056e:	2202      	movs	r2, #2
 8000570:	601a      	str	r2, [r3, #0]
  	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000572:	003b      	movs	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000578:	003b      	movs	r3, r7
 800057a:	0018      	movs	r0, r3
 800057c:	f001 fdb2 	bl	80020e4 <HAL_RCCEx_PeriphCLKConfig>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d003      	beq.n	800058c <SystemClock_Config+0xe0>
  	{
  	  	UT_Error_Handler("HAL_RCCEx_PeriphCLKConfig failed!");
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <SystemClock_Config+0xf8>)
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fc7c 	bl	8000e84 <UT_Error_Handler>
  	}
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b019      	add	sp, #100	; 0x64
 8000592:	bd90      	pop	{r4, r7, pc}
 8000594:	40007000 	.word	0x40007000
 8000598:	ffffe7ff 	.word	0xffffe7ff
 800059c:	08003634 	.word	0x08003634
 80005a0:	08003650 	.word	0x08003650
 80005a4:	0800366c 	.word	0x0800366c

080005a8 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005ae:	4a16      	ldr	r2, [pc, #88]	; (8000608 <MX_USART2_UART_Init+0x60>)
 80005b0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005b4:	22e1      	movs	r2, #225	; 0xe1
 80005b6:	0252      	lsls	r2, r2, #9
 80005b8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 fb11 	bl	8002c14 <HAL_UART_Init>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d003      	beq.n	80005fe <MX_USART2_UART_Init+0x56>
	{
		UT_Error_Handler("HAL_UART_Init failed!");
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <MX_USART2_UART_Init+0x64>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 fc43 	bl	8000e84 <UT_Error_Handler>
	}
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000c0 	.word	0x200000c0
 8000608:	40004400 	.word	0x40004400
 800060c:	08003690 	.word	0x08003690

08000610 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000616:	2308      	movs	r3, #8
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	0018      	movs	r0, r3
 800061c:	2310      	movs	r3, #16
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f002 fff3 	bl	800360c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000626:	003b      	movs	r3, r7
 8000628:	0018      	movs	r0, r3
 800062a:	2308      	movs	r3, #8
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f002 ffec 	bl	800360c <memset>

	//Configure timer 2
	htim2.Instance = TIM2;
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_TIM2_Init+0xb8>)
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	05d2      	lsls	r2, r2, #23
 800063a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3200; //32MHZ divided by 3200. This results in 10000 oscillations per second
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_TIM2_Init+0xb8>)
 800063e:	22c8      	movs	r2, #200	; 0xc8
 8000640:	0112      	lsls	r2, r2, #4
 8000642:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_TIM2_Init+0xb8>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000; //Counter goes up to 10000, then starts anew. This results in 1 counter restarts every second
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_TIM2_Init+0xb8>)
 800064c:	4a1f      	ldr	r2, [pc, #124]	; (80006cc <MX_TIM2_Init+0xbc>)
 800064e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_TIM2_Init+0xb8>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_TIM2_Init+0xb8>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_TIM2_Init+0xb8>)
 800065e:	0018      	movs	r0, r3
 8000660:	f001 feef 	bl	8002442 <HAL_TIM_Base_Init>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d003      	beq.n	8000670 <MX_TIM2_Init+0x60>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_TIM2_Init+0xc0>)
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fc0a 	bl	8000e84 <UT_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; //Use internal clock as a clock source
 8000670:	2108      	movs	r1, #8
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	0152      	lsls	r2, r2, #5
 8000678:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800067a:	187a      	adds	r2, r7, r1
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_TIM2_Init+0xb8>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f002 f897 	bl	80027b4 <HAL_TIM_ConfigClockSource>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d003      	beq.n	8000692 <MX_TIM2_Init+0x82>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_TIM2_Init+0xc4>)
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fbf9 	bl	8000e84 <UT_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000692:	003b      	movs	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069e:	003a      	movs	r2, r7
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_TIM2_Init+0xb8>)
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 fa5d 	bl	8002b64 <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d003      	beq.n	80006b6 <MX_TIM2_Init+0xa6>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_TIM2_Init+0xc8>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fbe7 	bl	8000e84 <UT_Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim2);
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <MX_TIM2_Init+0xb8>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 f987 	bl	80009cc <HAL_TIM_MspPostInit>
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b006      	add	sp, #24
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000080 	.word	0x20000080
 80006cc:	00002710 	.word	0x00002710
 80006d0:	080036a8 	.word	0x080036a8
 80006d4:	080036c4 	.word	0x080036c4
 80006d8:	080036e8 	.word	0x080036e8

080006dc <MX_TIM21_Init>:

static void MX_TIM21_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	2308      	movs	r3, #8
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	0018      	movs	r0, r3
 80006e8:	2310      	movs	r3, #16
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f002 ff8d 	bl	800360c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	003b      	movs	r3, r7
 80006f4:	0018      	movs	r0, r3
 80006f6:	2308      	movs	r3, #8
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f002 ff86 	bl	800360c <memset>

	//Configure timer 21
	htim21.Instance = TIM21;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_TIM21_Init+0xac>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <MX_TIM21_Init+0xb0>)
 8000704:	601a      	str	r2, [r3, #0]
	htim21.Init.Prescaler = 28; //32MHZ divided by 28. High resolution for microsecond-Delay-Function
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <MX_TIM21_Init+0xac>)
 8000708:	221c      	movs	r2, #28
 800070a:	605a      	str	r2, [r3, #4]
	htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_TIM21_Init+0xac>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
	htim21.Init.Period = 65535;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_TIM21_Init+0xac>)
 8000714:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <MX_TIM21_Init+0xb4>)
 8000716:	60da      	str	r2, [r3, #12]
	htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_TIM21_Init+0xac>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
	htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_TIM21_Init+0xac>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_TIM21_Init+0xac>)
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fe8b 	bl	8002442 <HAL_TIM_Base_Init>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d003      	beq.n	8000738 <MX_TIM21_Init+0x5c>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_TIM21_Init+0xb8>)
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fba6 	bl	8000e84 <UT_Error_Handler>
	}	

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000738:	2108      	movs	r1, #8
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0152      	lsls	r2, r2, #5
 8000740:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000742:	187a      	adds	r2, r7, r1
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_TIM21_Init+0xac>)
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f002 f833 	bl	80027b4 <HAL_TIM_ConfigClockSource>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d003      	beq.n	800075a <MX_TIM21_Init+0x7e>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_TIM21_Init+0xbc>)
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fb95 	bl	8000e84 <UT_Error_Handler>
	}	

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075a:	003b      	movs	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	003b      	movs	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000766:	003a      	movs	r2, r7
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_TIM21_Init+0xac>)
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f002 f9f9 	bl	8002b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d003      	beq.n	800077e <MX_TIM21_Init+0xa2>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_TIM21_Init+0xc0>)
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fb83 	bl	8000e84 <UT_Error_Handler>
	}
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b006      	add	sp, #24
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000144 	.word	0x20000144
 800078c:	40010800 	.word	0x40010800
 8000790:	0000ffff 	.word	0x0000ffff
 8000794:	080036a8 	.word	0x080036a8
 8000798:	080036c4 	.word	0x080036c4
 800079c:	080036e8 	.word	0x080036e8

080007a0 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_SPI1_Init+0x6c>)
 80007a6:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <MX_SPI1_Init+0x70>)
 80007a8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_SPI1_Init+0x6c>)
 80007ac:	2282      	movs	r2, #130	; 0x82
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x6c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_SPI1_Init+0x6c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_SPI1_Init+0x6c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x6c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_SPI1_Init+0x6c>)
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; //4 MBits/s
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x6c>)
 80007d4:	2210      	movs	r2, #16
 80007d6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x6c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_SPI1_Init+0x6c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x6c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_SPI1_Init+0x6c>)
 80007ec:	2207      	movs	r2, #7
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x6c>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fd9c 	bl	8002330 <HAL_SPI_Init>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d003      	beq.n	8000804 <MX_SPI1_Init+0x64>
	{
		UT_Error_Handler("HAL_SPI_Init failed!");
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <MX_SPI1_Init+0x74>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fb40 	bl	8000e84 <UT_Error_Handler>
	}
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	20000028 	.word	0x20000028
 8000810:	40013000 	.word	0x40013000
 8000814:	08003718 	.word	0x08003718

08000818 <Port_Init>:

static void Port_Init(void)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b08b      	sub	sp, #44	; 0x2c
 800081c:	af00      	add	r7, sp, #0
	//Enable GPIO Ports Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <Port_Init+0xa8>)
 8000820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <Port_Init+0xa8>)
 8000824:	2101      	movs	r1, #1
 8000826:	430a      	orrs	r2, r1
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
 800082a:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <Port_Init+0xa8>)
 800082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082e:	2201      	movs	r2, #1
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <Port_Init+0xa8>)
 8000838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <Port_Init+0xa8>)
 800083c:	2102      	movs	r1, #2
 800083e:	430a      	orrs	r2, r1
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <Port_Init+0xa8>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	2202      	movs	r2, #2
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <Port_Init+0xa8>)
 8000850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <Port_Init+0xa8>)
 8000854:	2104      	movs	r1, #4
 8000856:	430a      	orrs	r2, r1
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <Port_Init+0xa8>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	2204      	movs	r2, #4
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <Port_Init+0xa8>)
 8000868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <Port_Init+0xa8>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	430a      	orrs	r2, r1
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <Port_Init+0xa8>)
 8000874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	4013      	ands	r3, r2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

	//Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	2414      	movs	r4, #20
 8000880:	193b      	adds	r3, r7, r4
 8000882:	0018      	movs	r0, r3
 8000884:	2314      	movs	r3, #20
 8000886:	001a      	movs	r2, r3
 8000888:	2100      	movs	r1, #0
 800088a:	f002 febf 	bl	800360c <memset>

	//Initialize all Output-Pins of Port B
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800088e:	0021      	movs	r1, r4
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	0052      	lsls	r2, r2, #1
 8000896:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2201      	movs	r2, #1
 800089c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <Port_Init+0xac>)
 80008ae:	0019      	movs	r1, r3
 80008b0:	0010      	movs	r0, r2
 80008b2:	f000 fcc1 	bl	8001238 <HAL_GPIO_Init>
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b00b      	add	sp, #44	; 0x2c
 80008bc:	bd90      	pop	{r4, r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40021000 	.word	0x40021000
 80008c4:	50000400 	.word	0x50000400

080008c8 <HAL_TIM_PeriodElapsedCallback>:

//Timed interupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{	
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	//Toggle Onboard-LED (1 sec. on and 1 sec. off)
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d6:	0019      	movs	r1, r3
 80008d8:	0010      	movs	r0, r2
 80008da:	f000 fe48 	bl	800156e <HAL_GPIO_TogglePin>
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	50000400 	.word	0x50000400

080008ec <main>:

int main(void)
{		
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	//Init stuff
	HAL_Init();
 80008f0:	f000 fb30 	bl	8000f54 <HAL_Init>
	SystemClock_Config();
 80008f4:	f7ff fdda 	bl	80004ac <SystemClock_Config>
	Port_Init();
 80008f8:	f7ff ff8e 	bl	8000818 <Port_Init>
	MX_TIM2_Init();
 80008fc:	f7ff fe88 	bl	8000610 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8000900:	f7ff fe52 	bl	80005a8 <MX_USART2_UART_Init>
	MX_TIM21_Init();	
 8000904:	f7ff feea 	bl	80006dc <MX_TIM21_Init>
	MX_SPI1_Init();
 8000908:	f7ff ff4a 	bl	80007a0 <MX_SPI1_Init>

	//Start timers
	HAL_TIM_Base_Start_IT(&htim2);	
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <main+0x58>)
 800090e:	0018      	movs	r0, r3
 8000910:	f001 fe1c 	bl	800254c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim21);
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <main+0x5c>)
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fdd4 	bl	80024c4 <HAL_TIM_Base_Start>

	//TFT stuff (Colors are RGB565, 65K color, 16-bit/pixel)
	TFT_Init();
 800091c:	f000 f9fe 	bl	8000d1c <TFT_Init>
	TFT_TurnDisplayOn();
 8000920:	f000 fa24 	bl	8000d6c <TFT_TurnDisplayOn>
	
	while (1)
	{			
		TFT_SetColor(0xff, 0x00, 0x00);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	20ff      	movs	r0, #255	; 0xff
 800092a:	f000 fa27 	bl	8000d7c <TFT_SetColor>
		TFT_SetColor(0x00, 0xff, 0x00); 
 800092e:	2200      	movs	r2, #0
 8000930:	21ff      	movs	r1, #255	; 0xff
 8000932:	2000      	movs	r0, #0
 8000934:	f000 fa22 	bl	8000d7c <TFT_SetColor>
		TFT_SetColor(0x00, 0x00, 0xff);
 8000938:	22ff      	movs	r2, #255	; 0xff
 800093a:	2100      	movs	r1, #0
 800093c:	2000      	movs	r0, #0
 800093e:	f000 fa1d 	bl	8000d7c <TFT_SetColor>
		TFT_SetColor(0xff, 0x00, 0x00);
 8000942:	e7ef      	b.n	8000924 <main+0x38>
 8000944:	20000080 	.word	0x20000080
 8000948:	20000144 	.word	0x20000144

0800094c <HAL_MspInit>:
#include "main.h"

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <HAL_MspInit+0x24>)
 8000952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x24>)
 8000956:	2101      	movs	r1, #1
 8000958:	430a      	orrs	r2, r1
 800095a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <HAL_MspInit+0x24>)
 800095e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <HAL_MspInit+0x24>)
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	0549      	lsls	r1, r1, #21
 8000966:	430a      	orrs	r2, r1
 8000968:	639a      	str	r2, [r3, #56]	; 0x38
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	429a      	cmp	r2, r3
 8000986:	d10e      	bne.n	80009a6 <HAL_TIM_Base_MspInit+0x32>
  {
    //Peripheral clock enable
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_TIM_Base_MspInit+0x50>)
 800098a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_TIM_Base_MspInit+0x50>)
 800098e:	2101      	movs	r1, #1
 8000990:	430a      	orrs	r2, r1
 8000992:	639a      	str	r2, [r3, #56]	; 0x38

    //Enable timed interrupts based on timer 2
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	200f      	movs	r0, #15
 800099a:	f000 fc1b 	bl	80011d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800099e:	200f      	movs	r0, #15
 80009a0:	f000 fc2d 	bl	80011fe <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM21)
  {
    //Peripheral clock enable
    __HAL_RCC_TIM21_CLK_ENABLE();
  }
}
 80009a4:	e00a      	b.n	80009bc <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_TIM_Base_MspInit+0x54>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d105      	bne.n	80009bc <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <HAL_TIM_Base_MspInit+0x50>)
 80009b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <HAL_TIM_Base_MspInit+0x50>)
 80009b6:	2104      	movs	r1, #4
 80009b8:	430a      	orrs	r2, r1
 80009ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b002      	add	sp, #8
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010800 	.word	0x40010800

080009cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_UART_MspInit>:
    __HAL_RCC_TIM21_CLK_DISABLE();
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b089      	sub	sp, #36	; 0x24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	240c      	movs	r4, #12
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	0018      	movs	r0, r3
 80009ea:	2314      	movs	r3, #20
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f002 fe0c 	bl	800360c <memset>
  if(huart->Instance==USART2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <HAL_UART_MspInit+0x68>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d11d      	bne.n	8000a3a <HAL_UART_MspInit+0x5e>
  {
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_UART_MspInit+0x6c>)
 8000a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_UART_MspInit+0x6c>)
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	0289      	lsls	r1, r1, #10
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	639a      	str	r2, [r3, #56]	; 0x38

    //USART2 GPIO Configuration
    //PA2     ------> USART2_TX
    //PA3     ------> USART2_RX
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000a0c:	0021      	movs	r1, r4
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	220c      	movs	r2, #12
 8000a12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2202      	movs	r2, #2
 8000a18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2203      	movs	r2, #3
 8000a24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2204      	movs	r2, #4
 8000a2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	187a      	adds	r2, r7, r1
 8000a2e:	23a0      	movs	r3, #160	; 0xa0
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fbff 	bl	8001238 <HAL_GPIO_Init>
  }
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b009      	add	sp, #36	; 0x24
 8000a40:	bd90      	pop	{r4, r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	40004400 	.word	0x40004400
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b089      	sub	sp, #36	; 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	240c      	movs	r4, #12
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	0018      	movs	r0, r3
 8000a5a:	2314      	movs	r3, #20
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f002 fdd4 	bl	800360c <memset>
  if(hspi->Instance==SPI1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a18      	ldr	r2, [pc, #96]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d129      	bne.n	8000ac2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_SPI_MspInit+0x84>)
 8000a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_SPI_MspInit+0x84>)
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	0149      	lsls	r1, r1, #5
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_SPI_MspInit+0x84>)
 8000a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <HAL_SPI_MspInit+0x84>)
 8000a82:	2101      	movs	r1, #1
 8000a84:	430a      	orrs	r2, r1
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_SPI_MspInit+0x84>)
 8000a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4013      	ands	r3, r2
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a94:	0021      	movs	r1, r4
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	22e0      	movs	r2, #224	; 0xe0
 8000a9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2203      	movs	r2, #3
 8000aac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	187a      	adds	r2, r7, r1
 8000ab6:	23a0      	movs	r3, #160	; 0xa0
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 fbbb 	bl	8001238 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b009      	add	sp, #36	; 0x24
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40013000 	.word	0x40013000
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
#include "stm32l0xx_it.h"

extern TIM_HandleTypeDef htim2;

void NMI_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

  }
}

void HardFault_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <PendSV_Handler>:


void PendSV_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0

}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000af8:	f000 fa80 	bl	8000ffc <HAL_IncTick>
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <EXTI4_15_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l0xx.s).                    */
/******************************************************************************/

void EXTI4_15_IRQHandler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <TIM2_IRQHandler+0x14>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fd66 	bl	80025e4 <HAL_TIM_IRQHandler>
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000080 	.word	0x20000080

08000b24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <TFT_PortInit>:
#define HEIGHT 240

// ----- Private functions ----- 

void TFT_PortInit()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
    //Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f002 fd64 	bl	800360c <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	22f8      	movs	r2, #248	; 0xf8
 8000b48:	0092      	lsls	r2, r2, #2
 8000b4a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2201      	movs	r2, #1
 8000b50:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2202      	movs	r2, #2
 8000b56:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	1d3a      	adds	r2, r7, #4
 8000b5a:	23a0      	movs	r3, #160	; 0xa0
 8000b5c:	05db      	lsls	r3, r3, #23
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 fb69 	bl	8001238 <HAL_GPIO_Init>

	//Initialize all Output-Pins of Port B
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2201      	movs	r2, #1
 8000b70:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2203      	movs	r2, #3
 8000b76:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <TFT_PortInit+0xa8>)
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	0010      	movs	r0, r2
 8000b80:	f000 fb5a 	bl	8001238 <HAL_GPIO_Init>

    //Set default states
    HAL_GPIO_WritePin(RST, 1);
 8000b84:	23a0      	movs	r3, #160	; 0xa0
 8000b86:	05db      	lsls	r3, r3, #23
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 fcd1 	bl	8001534 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS, 1);
 8000b92:	23a0      	movs	r3, #160	; 0xa0
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	2201      	movs	r2, #1
 8000b98:	2140      	movs	r1, #64	; 0x40
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fcca 	bl	8001534 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS, 1);
 8000ba0:	23a0      	movs	r3, #160	; 0xa0
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2180      	movs	r1, #128	; 0x80
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 fcc3 	bl	8001534 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WR, 1);
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	0059      	lsls	r1, r3, #1
 8000bb2:	23a0      	movs	r3, #160	; 0xa0
 8000bb4:	05db      	lsls	r3, r3, #23
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f000 fcbb 	bl	8001534 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RD, 1);
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	0099      	lsls	r1, r3, #2
 8000bc2:	23a0      	movs	r3, #160	; 0xa0
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 fcb3 	bl	8001534 <HAL_GPIO_WritePin>
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b006      	add	sp, #24
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	50000400 	.word	0x50000400

08000bdc <TFT_SendCmd>:

void TFT_SendCmd(uint8_t command)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	0002      	movs	r2, r0
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	701a      	strb	r2, [r3, #0]
    //Begin transmission
    HAL_GPIO_WritePin(CS, 0);
 8000be8:	23a0      	movs	r3, #160	; 0xa0
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	2200      	movs	r2, #0
 8000bee:	2140      	movs	r1, #64	; 0x40
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f000 fc9f 	bl	8001534 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS, 0);
 8000bf6:	23a0      	movs	r3, #160	; 0xa0
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 fc98 	bl	8001534 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WR, 0);
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	0059      	lsls	r1, r3, #1
 8000c08:	23a0      	movs	r3, #160	; 0xa0
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 fc90 	bl	8001534 <HAL_GPIO_WritePin>

    //Set data
    GPIOB->BRR = 0x00ff;                //Clear lower 8 bits                (GPIO bit reset register)
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <TFT_SendCmd+0x80>)
 8000c16:	22ff      	movs	r2, #255	; 0xff
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
    GPIOB->BSRR |= (command & 0x00ff);  //Set lower 8 bits to command       (GPIO port bit set/reset register)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <TFT_SendCmd+0x80>)
 8000c1c:	6999      	ldr	r1, [r3, #24]
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <TFT_SendCmd+0x80>)
 8000c24:	430a      	orrs	r2, r1
 8000c26:	619a      	str	r2, [r3, #24]

    //End transmission
    HAL_GPIO_WritePin(WR, 1);
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	0059      	lsls	r1, r3, #1
 8000c2c:	23a0      	movs	r3, #160	; 0xa0
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	2201      	movs	r2, #1
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 fc7e 	bl	8001534 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS, 1);
 8000c38:	23a0      	movs	r3, #160	; 0xa0
 8000c3a:	05db      	lsls	r3, r3, #23
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 fc77 	bl	8001534 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS, 1);
 8000c46:	23a0      	movs	r3, #160	; 0xa0
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2140      	movs	r1, #64	; 0x40
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 fc70 	bl	8001534 <HAL_GPIO_WritePin>
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	50000400 	.word	0x50000400

08000c60 <TFT_SendDataWithCS>:

void TFT_SendDataWithCS(uint8_t command)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	0002      	movs	r2, r0
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	701a      	strb	r2, [r3, #0]
    //Begin transmission
    HAL_GPIO_WritePin(CS, 0);
 8000c6c:	23a0      	movs	r3, #160	; 0xa0
 8000c6e:	05db      	lsls	r3, r3, #23
 8000c70:	2200      	movs	r2, #0
 8000c72:	2140      	movs	r1, #64	; 0x40
 8000c74:	0018      	movs	r0, r3
 8000c76:	f000 fc5d 	bl	8001534 <HAL_GPIO_WritePin>

    //Begin write
    HAL_GPIO_WritePin(WR, 0);
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	0059      	lsls	r1, r3, #1
 8000c7e:	23a0      	movs	r3, #160	; 0xa0
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	2200      	movs	r2, #0
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 fc55 	bl	8001534 <HAL_GPIO_WritePin>
    UT_Delay_MicroSeconds(10);
 8000c8a:	200a      	movs	r0, #10
 8000c8c:	f000 f906 	bl	8000e9c <UT_Delay_MicroSeconds>

    //Set data
    GPIOB->BRR = 0x00ff;                //Clear lower 8 bits                (GPIO bit reset register)
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <TFT_SendDataWithCS+0x6c>)
 8000c92:	22ff      	movs	r2, #255	; 0xff
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
    GPIOB->BSRR |= (command & 0x00ff);  //Set lower 8 bits to command       (GPIO port bit set/reset register)
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <TFT_SendDataWithCS+0x6c>)
 8000c98:	6999      	ldr	r1, [r3, #24]
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <TFT_SendDataWithCS+0x6c>)
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	619a      	str	r2, [r3, #24]

    //End write
    HAL_GPIO_WritePin(WR, 1);
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	0059      	lsls	r1, r3, #1
 8000ca8:	23a0      	movs	r3, #160	; 0xa0
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	2201      	movs	r2, #1
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 fc40 	bl	8001534 <HAL_GPIO_WritePin>

    //End transmission
    HAL_GPIO_WritePin(CS, 1);
 8000cb4:	23a0      	movs	r3, #160	; 0xa0
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2140      	movs	r1, #64	; 0x40
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f000 fc39 	bl	8001534 <HAL_GPIO_WritePin>
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	50000400 	.word	0x50000400

08000cd0 <TFT_SendDataWithoutCS>:

void TFT_SendDataWithoutCS(uint8_t command)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	701a      	strb	r2, [r3, #0]
    //Begin write
    HAL_GPIO_WritePin(WR, 0);
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	0059      	lsls	r1, r3, #1
 8000ce0:	23a0      	movs	r3, #160	; 0xa0
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f000 fc24 	bl	8001534 <HAL_GPIO_WritePin>

    //Set data
    GPIOB->BRR = 0x00ff;                //Clear lower 8 bits                (GPIO bit reset register)
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <TFT_SendDataWithoutCS+0x48>)
 8000cee:	22ff      	movs	r2, #255	; 0xff
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
    GPIOB->BSRR |= (command & 0x00ff);  //Set lower 8 bits to command       (GPIO port bit set/reset register)
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <TFT_SendDataWithoutCS+0x48>)
 8000cf4:	6999      	ldr	r1, [r3, #24]
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <TFT_SendDataWithoutCS+0x48>)
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	619a      	str	r2, [r3, #24]
   
    //End write
    HAL_GPIO_WritePin(WR, 1);
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	0059      	lsls	r1, r3, #1
 8000d04:	23a0      	movs	r3, #160	; 0xa0
 8000d06:	05db      	lsls	r3, r3, #23
 8000d08:	2201      	movs	r2, #1
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 fc12 	bl	8001534 <HAL_GPIO_WritePin>
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	50000400 	.word	0x50000400

08000d1c <TFT_Init>:

// ----- Public Functions ----- 

void TFT_Init()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
    TFT_PortInit();
 8000d20:	f7ff ff06 	bl	8000b30 <TFT_PortInit>

    //Software reset
    TFT_SendCmd(0x01);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff ff59 	bl	8000bdc <TFT_SendCmd>
    HAL_Delay(50);
 8000d2a:	2032      	movs	r0, #50	; 0x32
 8000d2c:	f000 f982 	bl	8001034 <HAL_Delay>

    //Exit sleep
    TFT_SendCmd(0x11);
 8000d30:	2011      	movs	r0, #17
 8000d32:	f7ff ff53 	bl	8000bdc <TFT_SendCmd>
    HAL_Delay(50);   
 8000d36:	2032      	movs	r0, #50	; 0x32
 8000d38:	f000 f97c 	bl	8001034 <HAL_Delay>

    //Display function control
    TFT_SendCmd(0xB6);
 8000d3c:	20b6      	movs	r0, #182	; 0xb6
 8000d3e:	f7ff ff4d 	bl	8000bdc <TFT_SendCmd>
    TFT_SendDataWithCS(0x00); //Normal scan mode, positive polarity    
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff ff8c 	bl	8000c60 <TFT_SendDataWithCS>
    TFT_SendDataWithCS(0x80); //Normally white LCD, 1 frame scan cycle
 8000d48:	2080      	movs	r0, #128	; 0x80
 8000d4a:	f7ff ff89 	bl	8000c60 <TFT_SendDataWithCS>

    //Memory access control
    TFT_SendCmd(0x36);
 8000d4e:	2036      	movs	r0, #54	; 0x36
 8000d50:	f7ff ff44 	bl	8000bdc <TFT_SendCmd>
    TFT_SendDataWithCS(0x0A); //Set RGB
 8000d54:	200a      	movs	r0, #10
 8000d56:	f7ff ff83 	bl	8000c60 <TFT_SendDataWithCS>

    //Pixel format
    TFT_SendCmd(0x3A);
 8000d5a:	203a      	movs	r0, #58	; 0x3a
 8000d5c:	f7ff ff3e 	bl	8000bdc <TFT_SendCmd>
    TFT_SendDataWithCS(0x55); //65K color: 16-bit/pixel (RGB565)
 8000d60:	2055      	movs	r0, #85	; 0x55
 8000d62:	f7ff ff7d 	bl	8000c60 <TFT_SendDataWithCS>
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <TFT_TurnDisplayOn>:

void TFT_TurnDisplayOn()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
    TFT_SendCmd(0x29);
 8000d70:	2029      	movs	r0, #41	; 0x29
 8000d72:	f7ff ff33 	bl	8000bdc <TFT_SendCmd>
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <TFT_SetColor>:
{
    TFT_SendCmd(0x28);
}

void TFT_SetColor(uint8_t r, uint8_t g, uint8_t b)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	0004      	movs	r4, r0
 8000d84:	0008      	movs	r0, r1
 8000d86:	0011      	movs	r1, r2
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	1c22      	adds	r2, r4, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	1dbb      	adds	r3, r7, #6
 8000d90:	1c02      	adds	r2, r0, #0
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	1d7b      	adds	r3, r7, #5
 8000d96:	1c0a      	adds	r2, r1, #0
 8000d98:	701a      	strb	r2, [r3, #0]
    TFT_SendCmd(0x2C);
 8000d9a:	202c      	movs	r0, #44	; 0x2c
 8000d9c:	f7ff ff1e 	bl	8000bdc <TFT_SendCmd>

    r >>= 3; //Red := Highest 5 bits
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	1dfa      	adds	r2, r7, #7
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	08d2      	lsrs	r2, r2, #3
 8000da8:	701a      	strb	r2, [r3, #0]
    g >>= 2; //Green := Highest 6 bits
 8000daa:	1dbb      	adds	r3, r7, #6
 8000dac:	1dba      	adds	r2, r7, #6
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	0892      	lsrs	r2, r2, #2
 8000db2:	701a      	strb	r2, [r3, #0]
    b >>= 3; //Blue := Highest 5 bits
 8000db4:	1d7b      	adds	r3, r7, #5
 8000db6:	1d7a      	adds	r2, r7, #5
 8000db8:	7812      	ldrb	r2, [r2, #0]
 8000dba:	08d2      	lsrs	r2, r2, #3
 8000dbc:	701a      	strb	r2, [r3, #0]

    uint8_t byte_1 = (r << 3) | (g >> 3);   
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	b25a      	sxtb	r2, r3
 8000dc6:	1dbb      	adds	r3, r7, #6
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b25a      	sxtb	r2, r3
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	701a      	strb	r2, [r3, #0]
    uint8_t byte_2 = (g & 0x07) << 5 | b;    
 8000dda:	1dbb      	adds	r3, r7, #6
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	015b      	lsls	r3, r3, #5
 8000de0:	b25a      	sxtb	r2, r3
 8000de2:	1d7b      	adds	r3, r7, #5
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	230e      	movs	r3, #14
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	701a      	strb	r2, [r3, #0]

    //Begin transmission
    HAL_GPIO_WritePin(CS, 0);
 8000df2:	23a0      	movs	r3, #160	; 0xa0
 8000df4:	05db      	lsls	r3, r3, #23
 8000df6:	2200      	movs	r2, #0
 8000df8:	2140      	movs	r1, #64	; 0x40
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 fb9a 	bl	8001534 <HAL_GPIO_WritePin>

    for(int i = 0; i < HEIGHT; i++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	e019      	b.n	8000e3a <TFT_SetColor+0xbe>
    {
        for(int j = 0; j < WIDTH; j++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e00e      	b.n	8000e2a <TFT_SetColor+0xae>
        {
            TFT_SendDataWithoutCS(byte_1);
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff ff5c 	bl	8000cd0 <TFT_SendDataWithoutCS>
            TFT_SendDataWithoutCS(byte_2);
 8000e18:	230e      	movs	r3, #14
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f7ff ff56 	bl	8000cd0 <TFT_SendDataWithoutCS>
        for(int j = 0; j < WIDTH; j++)
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	3301      	adds	r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	23a0      	movs	r3, #160	; 0xa0
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbeb      	blt.n	8000e0c <TFT_SetColor+0x90>
    for(int i = 0; i < HEIGHT; i++)
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2bef      	cmp	r3, #239	; 0xef
 8000e3e:	dde2      	ble.n	8000e06 <TFT_SetColor+0x8a>
        }
    }

    //End transmission
    HAL_GPIO_WritePin(CS, 1);
 8000e40:	23a0      	movs	r3, #160	; 0xa0
 8000e42:	05db      	lsls	r3, r3, #23
 8000e44:	2201      	movs	r2, #1
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 fb73 	bl	8001534 <HAL_GPIO_WritePin>
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b007      	add	sp, #28
 8000e54:	bd90      	pop	{r4, r7, pc}
	...

08000e58 <UT_PrintMsg>:
#include "utility.h"

void UT_PrintMsg(char* msg)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff f950 	bl	8000108 <strlen>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	425b      	negs	r3, r3
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	4803      	ldr	r0, [pc, #12]	; (8000e80 <UT_PrintMsg+0x28>)
 8000e74:	f001 ff22 	bl	8002cbc <HAL_UART_Transmit>
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200000c0 	.word	0x200000c0

08000e84 <UT_Error_Handler>:
	UT_PrintMsg(buffer);
	va_end(args);
}

void UT_Error_Handler(char* err_msg)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
    __disable_irq();
    while (1)
	{
    	UT_PrintMsg(err_msg);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	0018      	movs	r0, r3
 8000e94:	f7ff ffe0 	bl	8000e58 <UT_PrintMsg>
 8000e98:	e7fa      	b.n	8000e90 <UT_Error_Handler+0xc>
	...

08000e9c <UT_Delay_MicroSeconds>:
	}
}

void UT_Delay_MicroSeconds(uint16_t uSec)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	1dbb      	adds	r3, r7, #6
 8000ea6:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim21, 0);
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <UT_Delay_MicroSeconds+0x30>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2200      	movs	r2, #0
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim21) < uSec);
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <UT_Delay_MicroSeconds+0x30>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d3f8      	bcc.n	8000eb2 <UT_Delay_MicroSeconds+0x16>
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b002      	add	sp, #8
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	20000144 	.word	0x20000144

08000ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ed2:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <LoopForever+0x6>)
    LDR R1, [R0]
 8000ed6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ed8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <LoopForever+0xa>)
    CMP R1, R2
 8000edc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000ede:	d105      	bne.n	8000eec <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000ee0:	4812      	ldr	r0, [pc, #72]	; (8000f2c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000ee2:	4913      	ldr	r1, [pc, #76]	; (8000f30 <LoopForever+0x12>)
    STR R1, [R0]
 8000ee4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000ee6:	4813      	ldr	r0, [pc, #76]	; (8000f34 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000ee8:	4913      	ldr	r1, [pc, #76]	; (8000f38 <LoopForever+0x1a>)
    STR R1, [R0]
 8000eea:	6001      	str	r1, [r0, #0]

08000eec <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eec:	4813      	ldr	r0, [pc, #76]	; (8000f3c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000eee:	4914      	ldr	r1, [pc, #80]	; (8000f40 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <LoopForever+0x26>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000f04:	4c11      	ldr	r4, [pc, #68]	; (8000f4c <LoopForever+0x2e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f12:	f7ff fe07 	bl	8000b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f002 fb55 	bl	80035c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fce7 	bl	80008ec <main>

08000f1e <LoopForever>:

LoopForever:
    b LoopForever
 8000f1e:	e7fe      	b.n	8000f1e <LoopForever>
   ldr   r0, =_estack
 8000f20:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000f24:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000f28:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000f2c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000f30:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000f34:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f38:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f44:	080037ac 	.word	0x080037ac
  ldr r2, =_sbss
 8000f48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f4c:	20000188 	.word	0x20000188

08000f50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_IRQHandler>
	...

08000f54 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x3c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_Init+0x3c>)
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 f811 	bl	8000f94 <HAL_InitTick>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e001      	b.n	8000f82 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f7e:	f7ff fce5 	bl	800094c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
}
 8000f86:	0018      	movs	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	40022000 	.word	0x40022000

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000f9e:	681c      	ldr	r4, [r3, #0]
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_InitTick+0x60>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	0019      	movs	r1, r3
 8000fa6:	23fa      	movs	r3, #250	; 0xfa
 8000fa8:	0098      	lsls	r0, r3, #2
 8000faa:	f7ff f8b5 	bl	8000118 <__udivsi3>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	0020      	movs	r0, r4
 8000fb4:	f7ff f8b0 	bl	8000118 <__udivsi3>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 f92f 	bl	800121e <HAL_SYSTICK_Config>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e00f      	b.n	8000fe8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d80b      	bhi.n	8000fe6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 f8fc 	bl	80011d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_InitTick+0x64>)
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b003      	add	sp, #12
 8000fee:	bd90      	pop	{r4, r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_IncTick+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	001a      	movs	r2, r3
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_IncTick+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	18d2      	adds	r2, r2, r3
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_IncTick+0x20>)
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	20000008 	.word	0x20000008
 800101c:	20000184 	.word	0x20000184

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <HAL_GetTick+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	20000184 	.word	0x20000184

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	0003      	movs	r3, r0
 8001042:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3301      	adds	r3, #1
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	001a      	movs	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	189b      	adds	r3, r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	f7ff ffe0 	bl	8001020 <HAL_GetTick>
 8001060:	0002      	movs	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b004      	add	sp, #16
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	0002      	movs	r2, r0
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b7f      	cmp	r3, #127	; 0x7f
 800108e:	d809      	bhi.n	80010a4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	001a      	movs	r2, r3
 8001096:	231f      	movs	r3, #31
 8001098:	401a      	ands	r2, r3
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_EnableIRQ+0x30>)
 800109c:	2101      	movs	r1, #1
 800109e:	4091      	lsls	r1, r2
 80010a0:	000a      	movs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
  }
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	0002      	movs	r2, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b7f      	cmp	r3, #127	; 0x7f
 80010c4:	d828      	bhi.n	8001118 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c6:	4a2f      	ldr	r2, [pc, #188]	; (8001184 <__NVIC_SetPriority+0xd4>)
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	33c0      	adds	r3, #192	; 0xc0
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	589b      	ldr	r3, [r3, r2]
 80010d6:	1dfa      	adds	r2, r7, #7
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	0011      	movs	r1, r2
 80010dc:	2203      	movs	r2, #3
 80010de:	400a      	ands	r2, r1
 80010e0:	00d2      	lsls	r2, r2, #3
 80010e2:	21ff      	movs	r1, #255	; 0xff
 80010e4:	4091      	lsls	r1, r2
 80010e6:	000a      	movs	r2, r1
 80010e8:	43d2      	mvns	r2, r2
 80010ea:	401a      	ands	r2, r3
 80010ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	019b      	lsls	r3, r3, #6
 80010f2:	22ff      	movs	r2, #255	; 0xff
 80010f4:	401a      	ands	r2, r3
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	0018      	movs	r0, r3
 80010fc:	2303      	movs	r3, #3
 80010fe:	4003      	ands	r3, r0
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001104:	481f      	ldr	r0, [pc, #124]	; (8001184 <__NVIC_SetPriority+0xd4>)
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b25b      	sxtb	r3, r3
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	430a      	orrs	r2, r1
 8001110:	33c0      	adds	r3, #192	; 0xc0
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001116:	e031      	b.n	800117c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <__NVIC_SetPriority+0xd8>)
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	0019      	movs	r1, r3
 8001120:	230f      	movs	r3, #15
 8001122:	400b      	ands	r3, r1
 8001124:	3b08      	subs	r3, #8
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3306      	adds	r3, #6
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	18d3      	adds	r3, r2, r3
 800112e:	3304      	adds	r3, #4
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	1dfa      	adds	r2, r7, #7
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	0011      	movs	r1, r2
 8001138:	2203      	movs	r2, #3
 800113a:	400a      	ands	r2, r1
 800113c:	00d2      	lsls	r2, r2, #3
 800113e:	21ff      	movs	r1, #255	; 0xff
 8001140:	4091      	lsls	r1, r2
 8001142:	000a      	movs	r2, r1
 8001144:	43d2      	mvns	r2, r2
 8001146:	401a      	ands	r2, r3
 8001148:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	019b      	lsls	r3, r3, #6
 800114e:	22ff      	movs	r2, #255	; 0xff
 8001150:	401a      	ands	r2, r3
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	0018      	movs	r0, r3
 8001158:	2303      	movs	r3, #3
 800115a:	4003      	ands	r3, r0
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <__NVIC_SetPriority+0xd8>)
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	001c      	movs	r4, r3
 8001168:	230f      	movs	r3, #15
 800116a:	4023      	ands	r3, r4
 800116c:	3b08      	subs	r3, #8
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	430a      	orrs	r2, r1
 8001172:	3306      	adds	r3, #6
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	18c3      	adds	r3, r0, r3
 8001178:	3304      	adds	r3, #4
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b003      	add	sp, #12
 8001182:	bd90      	pop	{r4, r7, pc}
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	1e5a      	subs	r2, r3, #1
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	045b      	lsls	r3, r3, #17
 800119c:	429a      	cmp	r2, r3
 800119e:	d301      	bcc.n	80011a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a0:	2301      	movs	r3, #1
 80011a2:	e010      	b.n	80011c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <SysTick_Config+0x44>)
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	3a01      	subs	r2, #1
 80011aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ac:	2301      	movs	r3, #1
 80011ae:	425b      	negs	r3, r3
 80011b0:	2103      	movs	r1, #3
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff ff7c 	bl	80010b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <SysTick_Config+0x44>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <SysTick_Config+0x44>)
 80011c0:	2207      	movs	r2, #7
 80011c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b002      	add	sp, #8
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	e000e010 	.word	0xe000e010

080011d4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	210f      	movs	r1, #15
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	1c02      	adds	r2, r0, #0
 80011e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	0011      	movs	r1, r2
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ff5d 	bl	80010b0 <__NVIC_SetPriority>
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b004      	add	sp, #16
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	0002      	movs	r2, r0
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b25b      	sxtb	r3, r3
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff ff33 	bl	800107c <__NVIC_EnableIRQ>
}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b002      	add	sp, #8
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff ffaf 	bl	800118c <SysTick_Config>
 800122e:	0003      	movs	r3, r0
}
 8001230:	0018      	movs	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800124e:	e155      	b.n	80014fc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2101      	movs	r1, #1
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4091      	lsls	r1, r2
 800125a:	000a      	movs	r2, r1
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d100      	bne.n	8001268 <HAL_GPIO_Init+0x30>
 8001266:	e146      	b.n	80014f6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d00b      	beq.n	8001288 <HAL_GPIO_Init+0x50>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d007      	beq.n	8001288 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800127c:	2b11      	cmp	r3, #17
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b12      	cmp	r3, #18
 8001286:	d130      	bne.n	80012ea <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	409a      	lsls	r2, r3
 8001296:	0013      	movs	r3, r2
 8001298:	43da      	mvns	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	409a      	lsls	r2, r3
 80012aa:	0013      	movs	r3, r2
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012be:	2201      	movs	r2, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	43da      	mvns	r2, r3
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	2201      	movs	r2, #1
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
 80012dc:	0013      	movs	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0xf2>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b12      	cmp	r3, #18
 8001328:	d123      	bne.n	8001372 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	58d3      	ldr	r3, [r2, r3]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2207      	movs	r2, #7
 800133c:	4013      	ands	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	409a      	lsls	r2, r3
 8001344:	0013      	movs	r3, r2
 8001346:	43da      	mvns	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2107      	movs	r1, #7
 8001356:	400b      	ands	r3, r1
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	6939      	ldr	r1, [r7, #16]
 8001370:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	43da      	mvns	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2203      	movs	r2, #3
 8001390:	401a      	ands	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	055b      	lsls	r3, r3, #21
 80013ae:	4013      	ands	r3, r2
 80013b0:	d100      	bne.n	80013b4 <HAL_GPIO_Init+0x17c>
 80013b2:	e0a0      	b.n	80014f6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b4:	4b57      	ldr	r3, [pc, #348]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 80013b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b8:	4b56      	ldr	r3, [pc, #344]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 80013ba:	2101      	movs	r1, #1
 80013bc:	430a      	orrs	r2, r1
 80013be:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80013c0:	4a55      	ldr	r2, [pc, #340]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	589b      	ldr	r3, [r3, r2]
 80013cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2203      	movs	r2, #3
 80013d2:	4013      	ands	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	409a      	lsls	r2, r3
 80013da:	0013      	movs	r3, r2
 80013dc:	43da      	mvns	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	23a0      	movs	r3, #160	; 0xa0
 80013e8:	05db      	lsls	r3, r3, #23
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d01f      	beq.n	800142e <HAL_GPIO_Init+0x1f6>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4a      	ldr	r2, [pc, #296]	; (800151c <HAL_GPIO_Init+0x2e4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_Init+0x1f2>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a49      	ldr	r2, [pc, #292]	; (8001520 <HAL_GPIO_Init+0x2e8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x1ee>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a48      	ldr	r2, [pc, #288]	; (8001524 <HAL_GPIO_Init+0x2ec>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x1ea>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a47      	ldr	r2, [pc, #284]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x1e6>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a46      	ldr	r2, [pc, #280]	; (800152c <HAL_GPIO_Init+0x2f4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x1e2>
 8001416:	2305      	movs	r3, #5
 8001418:	e00a      	b.n	8001430 <HAL_GPIO_Init+0x1f8>
 800141a:	2306      	movs	r3, #6
 800141c:	e008      	b.n	8001430 <HAL_GPIO_Init+0x1f8>
 800141e:	2304      	movs	r3, #4
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x1f8>
 8001422:	2303      	movs	r3, #3
 8001424:	e004      	b.n	8001430 <HAL_GPIO_Init+0x1f8>
 8001426:	2302      	movs	r3, #2
 8001428:	e002      	b.n	8001430 <HAL_GPIO_Init+0x1f8>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <HAL_GPIO_Init+0x1f8>
 800142e:	2300      	movs	r3, #0
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	2103      	movs	r1, #3
 8001434:	400a      	ands	r2, r1
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	4093      	lsls	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001440:	4935      	ldr	r1, [pc, #212]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	3302      	adds	r3, #2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144e:	4b38      	ldr	r3, [pc, #224]	; (8001530 <HAL_GPIO_Init+0x2f8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43da      	mvns	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	025b      	lsls	r3, r3, #9
 8001466:	4013      	ands	r3, r2
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <HAL_GPIO_Init+0x2f8>)
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001478:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <HAL_GPIO_Init+0x2f8>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43da      	mvns	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	029b      	lsls	r3, r3, #10
 8001490:	4013      	ands	r3, r2
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_GPIO_Init+0x2f8>)
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <HAL_GPIO_Init+0x2f8>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43da      	mvns	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	035b      	lsls	r3, r3, #13
 80014ba:	4013      	ands	r3, r2
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_GPIO_Init+0x2f8>)
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_GPIO_Init+0x2f8>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43da      	mvns	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	039b      	lsls	r3, r3, #14
 80014e4:	4013      	ands	r3, r2
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_GPIO_Init+0x2f8>)
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	40da      	lsrs	r2, r3
 8001504:	1e13      	subs	r3, r2, #0
 8001506:	d000      	beq.n	800150a <HAL_GPIO_Init+0x2d2>
 8001508:	e6a2      	b.n	8001250 <HAL_GPIO_Init+0x18>
  }
}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b006      	add	sp, #24
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000
 8001518:	40010000 	.word	0x40010000
 800151c:	50000400 	.word	0x50000400
 8001520:	50000800 	.word	0x50000800
 8001524:	50000c00 	.word	0x50000c00
 8001528:	50001000 	.word	0x50001000
 800152c:	50001c00 	.word	0x50001c00
 8001530:	40010400 	.word	0x40010400

08001534 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	0008      	movs	r0, r1
 800153e:	0011      	movs	r1, r2
 8001540:	1cbb      	adds	r3, r7, #2
 8001542:	1c02      	adds	r2, r0, #0
 8001544:	801a      	strh	r2, [r3, #0]
 8001546:	1c7b      	adds	r3, r7, #1
 8001548:	1c0a      	adds	r2, r1, #0
 800154a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800154c:	1c7b      	adds	r3, r7, #1
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001554:	1cbb      	adds	r3, r7, #2
 8001556:	881a      	ldrh	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800155e:	1cbb      	adds	r3, r7, #2
 8001560:	881a      	ldrh	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b002      	add	sp, #8
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	000a      	movs	r2, r1
 8001578:	1cbb      	adds	r3, r7, #2
 800157a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001582:	1cbb      	adds	r3, r7, #2
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	041a      	lsls	r2, r3, #16
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43db      	mvns	r3, r3
 8001590:	1cb9      	adds	r1, r7, #2
 8001592:	8809      	ldrh	r1, [r1, #0]
 8001594:	400b      	ands	r3, r1
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b004      	add	sp, #16
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f000 fb6c 	bl	8001c90 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b8:	4bc8      	ldr	r3, [pc, #800]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	220c      	movs	r2, #12
 80015be:	4013      	ands	r3, r2
 80015c0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c2:	4bc6      	ldr	r3, [pc, #792]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	025b      	lsls	r3, r3, #9
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2201      	movs	r2, #1
 80015d4:	4013      	ands	r3, r2
 80015d6:	d100      	bne.n	80015da <HAL_RCC_OscConfig+0x36>
 80015d8:	e07d      	b.n	80016d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d007      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	d112      	bne.n	800160c <HAL_RCC_OscConfig+0x68>
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	025b      	lsls	r3, r3, #9
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d10d      	bne.n	800160c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	4bba      	ldr	r3, [pc, #744]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	4013      	ands	r3, r2
 80015fa:	d100      	bne.n	80015fe <HAL_RCC_OscConfig+0x5a>
 80015fc:	e06a      	b.n	80016d4 <HAL_RCC_OscConfig+0x130>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d166      	bne.n	80016d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	f000 fb42 	bl	8001c90 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	025b      	lsls	r3, r3, #9
 8001614:	429a      	cmp	r2, r3
 8001616:	d107      	bne.n	8001628 <HAL_RCC_OscConfig+0x84>
 8001618:	4bb0      	ldr	r3, [pc, #704]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4baf      	ldr	r3, [pc, #700]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800161e:	2180      	movs	r1, #128	; 0x80
 8001620:	0249      	lsls	r1, r1, #9
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e027      	b.n	8001678 <HAL_RCC_OscConfig+0xd4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	23a0      	movs	r3, #160	; 0xa0
 800162e:	02db      	lsls	r3, r3, #11
 8001630:	429a      	cmp	r2, r3
 8001632:	d10e      	bne.n	8001652 <HAL_RCC_OscConfig+0xae>
 8001634:	4ba9      	ldr	r3, [pc, #676]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4ba8      	ldr	r3, [pc, #672]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	02c9      	lsls	r1, r1, #11
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	4ba6      	ldr	r3, [pc, #664]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4ba5      	ldr	r3, [pc, #660]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	0249      	lsls	r1, r1, #9
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e012      	b.n	8001678 <HAL_RCC_OscConfig+0xd4>
 8001652:	4ba2      	ldr	r3, [pc, #648]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4ba1      	ldr	r3, [pc, #644]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001658:	49a1      	ldr	r1, [pc, #644]	; (80018e0 <HAL_RCC_OscConfig+0x33c>)
 800165a:	400a      	ands	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	4b9f      	ldr	r3, [pc, #636]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	025b      	lsls	r3, r3, #9
 8001666:	4013      	ands	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4b9b      	ldr	r3, [pc, #620]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b9a      	ldr	r3, [pc, #616]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001672:	499c      	ldr	r1, [pc, #624]	; (80018e4 <HAL_RCC_OscConfig+0x340>)
 8001674:	400a      	ands	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d014      	beq.n	80016aa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fcce 	bl	8001020 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168a:	f7ff fcc9 	bl	8001020 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b64      	cmp	r3, #100	; 0x64
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e2f9      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800169c:	4b8f      	ldr	r3, [pc, #572]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	029b      	lsls	r3, r3, #10
 80016a4:	4013      	ands	r3, r2
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0xe6>
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff fcb9 	bl	8001020 <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fcb4 	bl	8001020 <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e2e4      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016c6:	4b85      	ldr	r3, [pc, #532]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	029b      	lsls	r3, r3, #10
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x110>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d100      	bne.n	80016e2 <HAL_RCC_OscConfig+0x13e>
 80016e0:	e099      	b.n	8001816 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	2220      	movs	r2, #32
 80016ec:	4013      	ands	r3, r2
 80016ee:	d009      	beq.n	8001704 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80016f0:	4b7a      	ldr	r3, [pc, #488]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b79      	ldr	r3, [pc, #484]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80016f6:	2120      	movs	r1, #32
 80016f8:	430a      	orrs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	2220      	movs	r2, #32
 8001700:	4393      	bics	r3, r2
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b04      	cmp	r3, #4
 8001708:	d005      	beq.n	8001716 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	2b0c      	cmp	r3, #12
 800170e:	d13e      	bne.n	800178e <HAL_RCC_OscConfig+0x1ea>
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d13b      	bne.n	800178e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001716:	4b71      	ldr	r3, [pc, #452]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2204      	movs	r2, #4
 800171c:	4013      	ands	r3, r2
 800171e:	d004      	beq.n	800172a <HAL_RCC_OscConfig+0x186>
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e2b2      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b6c      	ldr	r3, [pc, #432]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a6e      	ldr	r2, [pc, #440]	; (80018e8 <HAL_RCC_OscConfig+0x344>)
 8001730:	4013      	ands	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	021a      	lsls	r2, r3, #8
 800173a:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800173c:	430a      	orrs	r2, r1
 800173e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001740:	4b66      	ldr	r3, [pc, #408]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2209      	movs	r2, #9
 8001746:	4393      	bics	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	4b64      	ldr	r3, [pc, #400]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800174c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001752:	f000 fbeb 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001756:	0001      	movs	r1, r0
 8001758:	4b60      	ldr	r3, [pc, #384]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	220f      	movs	r2, #15
 8001760:	4013      	ands	r3, r2
 8001762:	4a62      	ldr	r2, [pc, #392]	; (80018ec <HAL_RCC_OscConfig+0x348>)
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	000a      	movs	r2, r1
 8001768:	40da      	lsrs	r2, r3
 800176a:	4b61      	ldr	r3, [pc, #388]	; (80018f0 <HAL_RCC_OscConfig+0x34c>)
 800176c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800176e:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <HAL_RCC_OscConfig+0x350>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2513      	movs	r5, #19
 8001774:	197c      	adds	r4, r7, r5
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff fc0c 	bl	8000f94 <HAL_InitTick>
 800177c:	0003      	movs	r3, r0
 800177e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001780:	197b      	adds	r3, r7, r5
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d046      	beq.n	8001816 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001788:	197b      	adds	r3, r7, r5
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	e280      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	2b00      	cmp	r3, #0
 8001792:	d027      	beq.n	80017e4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001794:	4b51      	ldr	r3, [pc, #324]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2209      	movs	r2, #9
 800179a:	4393      	bics	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	4b4f      	ldr	r3, [pc, #316]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80017a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fc3b 	bl	8001020 <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fc36 	bl	8001020 <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e266      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017c2:	4b46      	ldr	r3, [pc, #280]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2204      	movs	r2, #4
 80017c8:	4013      	ands	r3, r2
 80017ca:	d0f1      	beq.n	80017b0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b43      	ldr	r3, [pc, #268]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <HAL_RCC_OscConfig+0x344>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	021a      	lsls	r2, r3, #8
 80017dc:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80017de:	430a      	orrs	r2, r1
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	e018      	b.n	8001816 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e4:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b3c      	ldr	r3, [pc, #240]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	438a      	bics	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fc16 	bl	8001020 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fa:	f7ff fc11 	bl	8001020 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e241      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800180c:	4b33      	ldr	r3, [pc, #204]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2204      	movs	r2, #4
 8001812:	4013      	ands	r3, r2
 8001814:	d1f1      	bne.n	80017fa <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2210      	movs	r2, #16
 800181c:	4013      	ands	r3, r2
 800181e:	d100      	bne.n	8001822 <HAL_RCC_OscConfig+0x27e>
 8001820:	e0a1      	b.n	8001966 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d140      	bne.n	80018aa <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001828:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4013      	ands	r3, r2
 8001832:	d005      	beq.n	8001840 <HAL_RCC_OscConfig+0x29c>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e227      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001840:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4a2c      	ldr	r2, [pc, #176]	; (80018f8 <HAL_RCC_OscConfig+0x354>)
 8001846:	4013      	ands	r3, r2
 8001848:	0019      	movs	r1, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1a      	ldr	r2, [r3, #32]
 800184e:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001854:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	0a19      	lsrs	r1, r3, #8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	061a      	lsls	r2, r3, #24
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001864:	430a      	orrs	r2, r1
 8001866:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	0b5b      	lsrs	r3, r3, #13
 800186e:	3301      	adds	r3, #1
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	0212      	lsls	r2, r2, #8
 8001874:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	210f      	movs	r1, #15
 800187e:	400b      	ands	r3, r1
 8001880:	491a      	ldr	r1, [pc, #104]	; (80018ec <HAL_RCC_OscConfig+0x348>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_RCC_OscConfig+0x34c>)
 8001888:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_RCC_OscConfig+0x350>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2513      	movs	r5, #19
 8001890:	197c      	adds	r4, r7, r5
 8001892:	0018      	movs	r0, r3
 8001894:	f7ff fb7e 	bl	8000f94 <HAL_InitTick>
 8001898:	0003      	movs	r3, r0
 800189a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800189c:	197b      	adds	r3, r7, r5
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d060      	beq.n	8001966 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80018a4:	197b      	adds	r3, r7, r5
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	e1f2      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d03f      	beq.n	8001932 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0049      	lsls	r1, r1, #1
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fbae 	bl	8001020 <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018c8:	e018      	b.n	80018fc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ca:	f7ff fba9 	bl	8001020 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d911      	bls.n	80018fc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1d9      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
 80018dc:	40021000 	.word	0x40021000
 80018e0:	fffeffff 	.word	0xfffeffff
 80018e4:	fffbffff 	.word	0xfffbffff
 80018e8:	ffffe0ff 	.word	0xffffe0ff
 80018ec:	08003730 	.word	0x08003730
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004
 80018f8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018fc:	4bc9      	ldr	r3, [pc, #804]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4013      	ands	r3, r2
 8001906:	d0e0      	beq.n	80018ca <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001908:	4bc6      	ldr	r3, [pc, #792]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4ac6      	ldr	r2, [pc, #792]	; (8001c28 <HAL_RCC_OscConfig+0x684>)
 800190e:	4013      	ands	r3, r2
 8001910:	0019      	movs	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1a      	ldr	r2, [r3, #32]
 8001916:	4bc3      	ldr	r3, [pc, #780]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001918:	430a      	orrs	r2, r1
 800191a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800191c:	4bc1      	ldr	r3, [pc, #772]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	0a19      	lsrs	r1, r3, #8
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	061a      	lsls	r2, r3, #24
 800192a:	4bbe      	ldr	r3, [pc, #760]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	e019      	b.n	8001966 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001932:	4bbc      	ldr	r3, [pc, #752]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4bbb      	ldr	r3, [pc, #748]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001938:	49bc      	ldr	r1, [pc, #752]	; (8001c2c <HAL_RCC_OscConfig+0x688>)
 800193a:	400a      	ands	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff fb6f 	bl	8001020 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001948:	f7ff fb6a 	bl	8001020 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e19a      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800195a:	4bb2      	ldr	r3, [pc, #712]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2208      	movs	r2, #8
 800196c:	4013      	ands	r3, r2
 800196e:	d036      	beq.n	80019de <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d019      	beq.n	80019ac <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	4baa      	ldr	r3, [pc, #680]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 800197a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800197c:	4ba9      	ldr	r3, [pc, #676]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 800197e:	2101      	movs	r1, #1
 8001980:	430a      	orrs	r2, r1
 8001982:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff fb4c 	bl	8001020 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800198e:	f7ff fb47 	bl	8001020 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e177      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019a0:	4ba0      	ldr	r3, [pc, #640]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 80019a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a4:	2202      	movs	r2, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d0f1      	beq.n	800198e <HAL_RCC_OscConfig+0x3ea>
 80019aa:	e018      	b.n	80019de <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ac:	4b9d      	ldr	r3, [pc, #628]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 80019ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019b0:	4b9c      	ldr	r3, [pc, #624]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	438a      	bics	r2, r1
 80019b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff fb32 	bl	8001020 <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c2:	f7ff fb2d 	bl	8001020 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e15d      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019d4:	4b93      	ldr	r3, [pc, #588]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 80019d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d1f1      	bne.n	80019c2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2204      	movs	r2, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d100      	bne.n	80019ea <HAL_RCC_OscConfig+0x446>
 80019e8:	e0ae      	b.n	8001b48 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	2023      	movs	r0, #35	; 0x23
 80019ec:	183b      	adds	r3, r7, r0
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b8c      	ldr	r3, [pc, #560]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 80019f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	055b      	lsls	r3, r3, #21
 80019fa:	4013      	ands	r3, r2
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b89      	ldr	r3, [pc, #548]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a02:	4b88      	ldr	r3, [pc, #544]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	0549      	lsls	r1, r1, #21
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a0c:	183b      	adds	r3, r7, r0
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	4b87      	ldr	r3, [pc, #540]	; (8001c30 <HAL_RCC_OscConfig+0x68c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d11a      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1e:	4b84      	ldr	r3, [pc, #528]	; (8001c30 <HAL_RCC_OscConfig+0x68c>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b83      	ldr	r3, [pc, #524]	; (8001c30 <HAL_RCC_OscConfig+0x68c>)
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	0049      	lsls	r1, r1, #1
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2c:	f7ff faf8 	bl	8001020 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a36:	f7ff faf3 	bl	8001020 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b64      	cmp	r3, #100	; 0x64
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e123      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	4b79      	ldr	r3, [pc, #484]	; (8001c30 <HAL_RCC_OscConfig+0x68c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4013      	ands	r3, r2
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4cc>
 8001a60:	4b70      	ldr	r3, [pc, #448]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a64:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a66:	2180      	movs	r1, #128	; 0x80
 8001a68:	0049      	lsls	r1, r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a6e:	e031      	b.n	8001ad4 <HAL_RCC_OscConfig+0x530>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10c      	bne.n	8001a92 <HAL_RCC_OscConfig+0x4ee>
 8001a78:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a7c:	4b69      	ldr	r3, [pc, #420]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a7e:	496b      	ldr	r1, [pc, #428]	; (8001c2c <HAL_RCC_OscConfig+0x688>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	651a      	str	r2, [r3, #80]	; 0x50
 8001a84:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a88:	4b66      	ldr	r3, [pc, #408]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a8a:	496a      	ldr	r1, [pc, #424]	; (8001c34 <HAL_RCC_OscConfig+0x690>)
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	651a      	str	r2, [r3, #80]	; 0x50
 8001a90:	e020      	b.n	8001ad4 <HAL_RCC_OscConfig+0x530>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	23a0      	movs	r3, #160	; 0xa0
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d10e      	bne.n	8001abc <HAL_RCC_OscConfig+0x518>
 8001a9e:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aa2:	4b60      	ldr	r3, [pc, #384]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	00c9      	lsls	r1, r1, #3
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	651a      	str	r2, [r3, #80]	; 0x50
 8001aac:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001aae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ab0:	4b5c      	ldr	r3, [pc, #368]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	0049      	lsls	r1, r1, #1
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	651a      	str	r2, [r3, #80]	; 0x50
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x530>
 8001abc:	4b59      	ldr	r3, [pc, #356]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ac0:	4b58      	ldr	r3, [pc, #352]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001ac2:	495a      	ldr	r1, [pc, #360]	; (8001c2c <HAL_RCC_OscConfig+0x688>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ac8:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001acc:	4b55      	ldr	r3, [pc, #340]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001ace:	4959      	ldr	r1, [pc, #356]	; (8001c34 <HAL_RCC_OscConfig+0x690>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d015      	beq.n	8001b08 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff faa0 	bl	8001020 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ae4:	e009      	b.n	8001afa <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff fa9b 	bl	8001020 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	4a51      	ldr	r2, [pc, #324]	; (8001c38 <HAL_RCC_OscConfig+0x694>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e0ca      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001afa:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d0ef      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x542>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7ff fa8a 	bl	8001020 <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b10:	e009      	b.n	8001b26 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff fa85 	bl	8001020 <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	4a46      	ldr	r2, [pc, #280]	; (8001c38 <HAL_RCC_OscConfig+0x694>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e0b4      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b26:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d1ef      	bne.n	8001b12 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b32:	2323      	movs	r3, #35	; 0x23
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b40:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b42:	493e      	ldr	r1, [pc, #248]	; (8001c3c <HAL_RCC_OscConfig+0x698>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d100      	bne.n	8001b52 <HAL_RCC_OscConfig+0x5ae>
 8001b50:	e09d      	b.n	8001c8e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d100      	bne.n	8001b5a <HAL_RCC_OscConfig+0x5b6>
 8001b58:	e076      	b.n	8001c48 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d145      	bne.n	8001bee <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b68:	4935      	ldr	r1, [pc, #212]	; (8001c40 <HAL_RCC_OscConfig+0x69c>)
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7ff fa57 	bl	8001020 <HAL_GetTick>
 8001b72:	0003      	movs	r3, r0
 8001b74:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b78:	f7ff fa52 	bl	8001020 <HAL_GetTick>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e082      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	049b      	lsls	r3, r3, #18
 8001b92:	4013      	ands	r3, r2
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b96:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	4a2a      	ldr	r2, [pc, #168]	; (8001c44 <HAL_RCC_OscConfig+0x6a0>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	0449      	lsls	r1, r1, #17
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fa2c 	bl	8001020 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff fa27 	bl	8001020 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e057      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	049b      	lsls	r3, r3, #18
 8001be8:	4013      	ands	r3, r2
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x62a>
 8001bec:	e04f      	b.n	8001c8e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001bf4:	4912      	ldr	r1, [pc, #72]	; (8001c40 <HAL_RCC_OscConfig+0x69c>)
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fa11 	bl	8001020 <HAL_GetTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff fa0c 	bl	8001020 <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e03c      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c16:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	049b      	lsls	r3, r3, #18
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x660>
 8001c22:	e034      	b.n	8001c8e <HAL_RCC_OscConfig+0x6ea>
 8001c24:	40021000 	.word	0x40021000
 8001c28:	ffff1fff 	.word	0xffff1fff
 8001c2c:	fffffeff 	.word	0xfffffeff
 8001c30:	40007000 	.word	0x40007000
 8001c34:	fffffbff 	.word	0xfffffbff
 8001c38:	00001388 	.word	0x00001388
 8001c3c:	efffffff 	.word	0xefffffff
 8001c40:	feffffff 	.word	0xfeffffff
 8001c44:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_RCC_OscConfig+0x6f4>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	025b      	lsls	r3, r3, #9
 8001c60:	401a      	ands	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d10f      	bne.n	8001c8a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	23f0      	movs	r3, #240	; 0xf0
 8001c6e:	039b      	lsls	r3, r3, #14
 8001c70:	401a      	ands	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	23c0      	movs	r3, #192	; 0xc0
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	401a      	ands	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b00a      	add	sp, #40	; 0x28
 8001c96:	bdb0      	pop	{r4, r5, r7, pc}
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b5b0      	push	{r4, r5, r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e128      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b96      	ldr	r3, [pc, #600]	; (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d91e      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b93      	ldr	r3, [pc, #588]	; (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4393      	bics	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	4b90      	ldr	r3, [pc, #576]	; (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cd0:	f7ff f9a6 	bl	8001020 <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd8:	e009      	b.n	8001cee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cda:	f7ff f9a1 	bl	8001020 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	4a8a      	ldr	r2, [pc, #552]	; (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e109      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b87      	ldr	r3, [pc, #540]	; (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1ee      	bne.n	8001cda <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d06:	4b83      	ldr	r3, [pc, #524]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	22f0      	movs	r2, #240	; 0xf0
 8001d0c:	4393      	bics	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	4b7f      	ldr	r3, [pc, #508]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	d100      	bne.n	8001d26 <HAL_RCC_ClockConfig+0x8a>
 8001d24:	e089      	b.n	8001e3a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d2e:	4b79      	ldr	r3, [pc, #484]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	029b      	lsls	r3, r3, #10
 8001d36:	4013      	ands	r3, r2
 8001d38:	d120      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0e1      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d46:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	049b      	lsls	r3, r3, #18
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d114      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0d5      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d5e:	4b6d      	ldr	r3, [pc, #436]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2204      	movs	r2, #4
 8001d64:	4013      	ands	r3, r2
 8001d66:	d109      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0ca      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d6c:	4b69      	ldr	r3, [pc, #420]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4013      	ands	r3, r2
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0c2      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7c:	4b65      	ldr	r3, [pc, #404]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2203      	movs	r2, #3
 8001d82:	4393      	bics	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d90:	f7ff f946 	bl	8001020 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d111      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da0:	e009      	b.n	8001db6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da2:	f7ff f93d 	bl	8001020 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	4a58      	ldr	r2, [pc, #352]	; (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e0a5      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db6:	4b57      	ldr	r3, [pc, #348]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	220c      	movs	r2, #12
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d1ef      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x106>
 8001dc2:	e03a      	b.n	8001e3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d111      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dcc:	e009      	b.n	8001de2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dce:	f7ff f927 	bl	8001020 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e08f      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de2:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	220c      	movs	r2, #12
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	d1ef      	bne.n	8001dce <HAL_RCC_ClockConfig+0x132>
 8001dee:	e024      	b.n	8001e3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d11b      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df8:	e009      	b.n	8001e0e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfa:	f7ff f911 	bl	8001020 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	4a42      	ldr	r2, [pc, #264]	; (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e079      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e0e:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	220c      	movs	r2, #12
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d1ef      	bne.n	8001dfa <HAL_RCC_ClockConfig+0x15e>
 8001e1a:	e00e      	b.n	8001e3a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7ff f900 	bl	8001020 <HAL_GetTick>
 8001e20:	0002      	movs	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	4a3a      	ldr	r2, [pc, #232]	; (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e068      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	220c      	movs	r2, #12
 8001e36:	4013      	ands	r3, r2
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3a:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d21e      	bcs.n	8001e86 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e48:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4393      	bics	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e5a:	f7ff f8e1 	bl	8001020 <HAL_GetTick>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	e009      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7ff f8dc 	bl	8001020 <HAL_GetTick>
 8001e68:	0002      	movs	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e044      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e78:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d1ee      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d009      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4a20      	ldr	r2, [pc, #128]	; (8001f18 <HAL_RCC_ClockConfig+0x27c>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	0019      	movs	r1, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_RCC_ClockConfig+0x280>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	00da      	lsls	r2, r3, #3
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ec4:	f000 f832 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001ec8:	0001      	movs	r1, r0
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_RCC_ClockConfig+0x284>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	000a      	movs	r2, r1
 8001eda:	40da      	lsrs	r2, r3
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_RCC_ClockConfig+0x288>)
 8001ede:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_ClockConfig+0x28c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	250b      	movs	r5, #11
 8001ee6:	197c      	adds	r4, r7, r5
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff f853 	bl	8000f94 <HAL_InitTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001ef2:	197b      	adds	r3, r7, r5
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001efa:	197b      	adds	r3, r7, r5
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b004      	add	sp, #16
 8001f08:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	00001388 	.word	0x00001388
 8001f14:	40021000 	.word	0x40021000
 8001f18:	fffff8ff 	.word	0xfffff8ff
 8001f1c:	ffffc7ff 	.word	0xffffc7ff
 8001f20:	08003730 	.word	0x08003730
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000004 	.word	0x20000004

08001f2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f2c:	b5b0      	push	{r4, r5, r7, lr}
 8001f2e:	b08e      	sub	sp, #56	; 0x38
 8001f30:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f32:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f3a:	230c      	movs	r3, #12
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d014      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x40>
 8001f42:	d900      	bls.n	8001f46 <HAL_RCC_GetSysClockFreq+0x1a>
 8001f44:	e07b      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x112>
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d002      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x24>
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f4e:	e076      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f50:	4b44      	ldr	r3, [pc, #272]	; (8002064 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2210      	movs	r2, #16
 8001f56:	4013      	ands	r3, r2
 8001f58:	d002      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f5a:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001f5e:	e07c      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001f60:	4b42      	ldr	r3, [pc, #264]	; (800206c <HAL_RCC_GetSysClockFreq+0x140>)
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f64:	e079      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f66:	4b42      	ldr	r3, [pc, #264]	; (8002070 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f6a:	e076      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6e:	0c9a      	lsrs	r2, r3, #18
 8001f70:	230f      	movs	r3, #15
 8001f72:	401a      	ands	r2, r3
 8001f74:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <HAL_RCC_GetSysClockFreq+0x148>)
 8001f76:	5c9b      	ldrb	r3, [r3, r2]
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	0d9a      	lsrs	r2, r3, #22
 8001f7e:	2303      	movs	r3, #3
 8001f80:	4013      	ands	r3, r2
 8001f82:	3301      	adds	r3, #1
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	025b      	lsls	r3, r3, #9
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d01a      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	4a35      	ldr	r2, [pc, #212]	; (8002070 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	69b8      	ldr	r0, [r7, #24]
 8001fa0:	69f9      	ldr	r1, [r7, #28]
 8001fa2:	f7fe f965 	bl	8000270 <__aeabi_lmul>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	000b      	movs	r3, r1
 8001faa:	0010      	movs	r0, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f7fe f939 	bl	8000230 <__aeabi_uldivmod>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	000b      	movs	r3, r1
 8001fc2:	0013      	movs	r3, r2
 8001fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc6:	e037      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001fc8:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2210      	movs	r2, #16
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d01a      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4a23      	ldr	r2, [pc, #140]	; (8002068 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	68b8      	ldr	r0, [r7, #8]
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	f7fe f945 	bl	8000270 <__aeabi_lmul>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	000b      	movs	r3, r1
 8001fea:	0010      	movs	r0, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f7fe f919 	bl	8000230 <__aeabi_uldivmod>
 8001ffe:	0002      	movs	r2, r0
 8002000:	000b      	movs	r3, r1
 8002002:	0013      	movs	r3, r2
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
 8002006:	e017      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	0018      	movs	r0, r3
 800200c:	2300      	movs	r3, #0
 800200e:	0019      	movs	r1, r3
 8002010:	4a16      	ldr	r2, [pc, #88]	; (800206c <HAL_RCC_GetSysClockFreq+0x140>)
 8002012:	2300      	movs	r3, #0
 8002014:	f7fe f92c 	bl	8000270 <__aeabi_lmul>
 8002018:	0002      	movs	r2, r0
 800201a:	000b      	movs	r3, r1
 800201c:	0010      	movs	r0, r2
 800201e:	0019      	movs	r1, r3
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	001c      	movs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	001d      	movs	r5, r3
 8002028:	0022      	movs	r2, r4
 800202a:	002b      	movs	r3, r5
 800202c:	f7fe f900 	bl	8000230 <__aeabi_uldivmod>
 8002030:	0002      	movs	r2, r0
 8002032:	000b      	movs	r3, r1
 8002034:	0013      	movs	r3, r2
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800203c:	e00d      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_GetSysClockFreq+0x138>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	0b5b      	lsrs	r3, r3, #13
 8002044:	2207      	movs	r2, #7
 8002046:	4013      	ands	r3, r2
 8002048:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	3301      	adds	r3, #1
 800204e:	2280      	movs	r2, #128	; 0x80
 8002050:	0212      	lsls	r2, r2, #8
 8002052:	409a      	lsls	r2, r3
 8002054:	0013      	movs	r3, r2
 8002056:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002058:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b00e      	add	sp, #56	; 0x38
 8002062:	bdb0      	pop	{r4, r5, r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	003d0900 	.word	0x003d0900
 800206c:	00f42400 	.word	0x00f42400
 8002070:	007a1200 	.word	0x007a1200
 8002074:	08003748 	.word	0x08003748

08002078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800207c:	4b02      	ldr	r3, [pc, #8]	; (8002088 <HAL_RCC_GetHCLKFreq+0x10>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	20000000 	.word	0x20000000

0800208c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002090:	f7ff fff2 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 8002094:	0001      	movs	r1, r0
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	2207      	movs	r2, #7
 800209e:	4013      	ands	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020a2:	5cd3      	ldrb	r3, [r2, r3]
 80020a4:	40d9      	lsrs	r1, r3
 80020a6:	000b      	movs	r3, r1
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08003740 	.word	0x08003740

080020b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020bc:	f7ff ffdc 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 80020c0:	0001      	movs	r1, r0
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	0adb      	lsrs	r3, r3, #11
 80020c8:	2207      	movs	r2, #7
 80020ca:	4013      	ands	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	40d9      	lsrs	r1, r3
 80020d2:	000b      	movs	r3, r1
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08003740 	.word	0x08003740

080020e4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80020ec:	2017      	movs	r0, #23
 80020ee:	183b      	adds	r3, r7, r0
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2220      	movs	r2, #32
 80020fa:	4013      	ands	r3, r2
 80020fc:	d100      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80020fe:	e0c2      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002100:	4b81      	ldr	r3, [pc, #516]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	055b      	lsls	r3, r3, #21
 8002108:	4013      	ands	r3, r2
 800210a:	d109      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210c:	4b7e      	ldr	r3, [pc, #504]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800210e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002110:	4b7d      	ldr	r3, [pc, #500]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0549      	lsls	r1, r1, #21
 8002116:	430a      	orrs	r2, r1
 8002118:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800211a:	183b      	adds	r3, r7, r0
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	4b7a      	ldr	r3, [pc, #488]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4013      	ands	r3, r2
 800212a:	d11a      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212c:	4b77      	ldr	r3, [pc, #476]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b76      	ldr	r3, [pc, #472]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	0049      	lsls	r1, r1, #1
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7fe ff71 	bl	8001020 <HAL_GetTick>
 800213e:	0003      	movs	r3, r0
 8002140:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	e008      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002144:	f7fe ff6c 	bl	8001020 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0d4      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b6d      	ldr	r3, [pc, #436]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4013      	ands	r3, r2
 8002160:	d0f0      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002162:	4b69      	ldr	r3, [pc, #420]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	23c0      	movs	r3, #192	; 0xc0
 8002168:	039b      	lsls	r3, r3, #14
 800216a:	4013      	ands	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	23c0      	movs	r3, #192	; 0xc0
 8002174:	039b      	lsls	r3, r3, #14
 8002176:	4013      	ands	r3, r2
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	429a      	cmp	r2, r3
 800217c:	d013      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	23c0      	movs	r3, #192	; 0xc0
 8002184:	029b      	lsls	r3, r3, #10
 8002186:	401a      	ands	r2, r3
 8002188:	23c0      	movs	r3, #192	; 0xc0
 800218a:	029b      	lsls	r3, r3, #10
 800218c:	429a      	cmp	r2, r3
 800218e:	d10a      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002190:	4b5d      	ldr	r3, [pc, #372]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	029b      	lsls	r3, r3, #10
 8002198:	401a      	ands	r2, r3
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	029b      	lsls	r3, r3, #10
 800219e:	429a      	cmp	r2, r3
 80021a0:	d101      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0ac      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021a6:	4b58      	ldr	r3, [pc, #352]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021aa:	23c0      	movs	r3, #192	; 0xc0
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	4013      	ands	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d03b      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	23c0      	movs	r3, #192	; 0xc0
 80021be:	029b      	lsls	r3, r3, #10
 80021c0:	4013      	ands	r3, r2
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d033      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2220      	movs	r2, #32
 80021ce:	4013      	ands	r3, r2
 80021d0:	d02e      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80021d2:	4b4d      	ldr	r3, [pc, #308]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d6:	4a4e      	ldr	r2, [pc, #312]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021d8:	4013      	ands	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021dc:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021e0:	4b49      	ldr	r3, [pc, #292]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	0309      	lsls	r1, r1, #12
 80021e6:	430a      	orrs	r2, r1
 80021e8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ee:	4b46      	ldr	r3, [pc, #280]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021f0:	4948      	ldr	r1, [pc, #288]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021f2:	400a      	ands	r2, r1
 80021f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80021f6:	4b44      	ldr	r3, [pc, #272]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4013      	ands	r3, r2
 8002204:	d014      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7fe ff0b 	bl	8001020 <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800220e:	e009      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7fe ff06 	bl	8001020 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	4a3f      	ldr	r2, [pc, #252]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e06d      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002224:	4b38      	ldr	r3, [pc, #224]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4013      	ands	r3, r2
 800222e:	d0ef      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	23c0      	movs	r3, #192	; 0xc0
 8002236:	029b      	lsls	r3, r3, #10
 8002238:	401a      	ands	r2, r3
 800223a:	23c0      	movs	r3, #192	; 0xc0
 800223c:	029b      	lsls	r3, r3, #10
 800223e:	429a      	cmp	r2, r3
 8002240:	d10c      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002242:	4b31      	ldr	r3, [pc, #196]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a35      	ldr	r2, [pc, #212]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	23c0      	movs	r3, #192	; 0xc0
 8002252:	039b      	lsls	r3, r3, #14
 8002254:	401a      	ands	r2, r3
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800225e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	23c0      	movs	r3, #192	; 0xc0
 8002266:	029b      	lsls	r3, r3, #10
 8002268:	401a      	ands	r2, r3
 800226a:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800226c:	430a      	orrs	r2, r1
 800226e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002270:	2317      	movs	r3, #23
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d105      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227a:	4b23      	ldr	r3, [pc, #140]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800227c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002280:	4927      	ldr	r1, [pc, #156]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002282:	400a      	ands	r2, r1
 8002284:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2202      	movs	r2, #2
 800228c:	4013      	ands	r3, r2
 800228e:	d009      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	220c      	movs	r2, #12
 8002296:	4393      	bics	r3, r2
 8002298:	0019      	movs	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022a0:	430a      	orrs	r2, r1
 80022a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2204      	movs	r2, #4
 80022aa:	4013      	ands	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	0019      	movs	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2208      	movs	r2, #8
 80022c8:	4013      	ands	r3, r2
 80022ca:	d009      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d0:	4a15      	ldr	r2, [pc, #84]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	0019      	movs	r1, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022dc:	430a      	orrs	r2, r1
 80022de:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	4013      	ands	r3, r2
 80022e8:	d009      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	4a0f      	ldr	r2, [pc, #60]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b006      	add	sp, #24
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	40007000 	.word	0x40007000
 8002310:	fffcffff 	.word	0xfffcffff
 8002314:	fff7ffff 	.word	0xfff7ffff
 8002318:	00001388 	.word	0x00001388
 800231c:	ffcfffff 	.word	0xffcfffff
 8002320:	efffffff 	.word	0xefffffff
 8002324:	fffff3ff 	.word	0xfffff3ff
 8002328:	ffffcfff 	.word	0xffffcfff
 800232c:	fff3ffff 	.word	0xfff3ffff

08002330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07b      	b.n	800243a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	2382      	movs	r3, #130	; 0x82
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	429a      	cmp	r2, r3
 8002354:	d009      	beq.n	800236a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	61da      	str	r2, [r3, #28]
 800235c:	e005      	b.n	800236a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2251      	movs	r2, #81	; 0x51
 8002374:	5c9b      	ldrb	r3, [r3, r2]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d107      	bne.n	800238c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2250      	movs	r2, #80	; 0x50
 8002380:	2100      	movs	r1, #0
 8002382:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	0018      	movs	r0, r3
 8002388:	f7fe fb60 	bl	8000a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2251      	movs	r2, #81	; 0x51
 8002390:	2102      	movs	r1, #2
 8002392:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2140      	movs	r1, #64	; 0x40
 80023a0:	438a      	bics	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	2382      	movs	r3, #130	; 0x82
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	401a      	ands	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6899      	ldr	r1, [r3, #8]
 80023b2:	2384      	movs	r3, #132	; 0x84
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	400b      	ands	r3, r1
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68d9      	ldr	r1, [r3, #12]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	400b      	ands	r3, r1
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2102      	movs	r1, #2
 80023cc:	400b      	ands	r3, r1
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	2101      	movs	r1, #1
 80023d6:	400b      	ands	r3, r1
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6999      	ldr	r1, [r3, #24]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	400b      	ands	r3, r1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	2138      	movs	r1, #56	; 0x38
 80023ec:	400b      	ands	r3, r1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	2180      	movs	r1, #128	; 0x80
 80023f6:	400b      	ands	r3, r1
 80023f8:	431a      	orrs	r2, r3
 80023fa:	0011      	movs	r1, r2
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	019b      	lsls	r3, r3, #6
 8002404:	401a      	ands	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	0c1b      	lsrs	r3, r3, #16
 8002414:	2204      	movs	r2, #4
 8002416:	4013      	ands	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	2210      	movs	r2, #16
 8002420:	401a      	ands	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2251      	movs	r2, #81	; 0x51
 8002434:	2101      	movs	r1, #1
 8002436:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	0018      	movs	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	b002      	add	sp, #8
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e032      	b.n	80024ba <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2239      	movs	r2, #57	; 0x39
 8002458:	5c9b      	ldrb	r3, [r3, r2]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d107      	bne.n	8002470 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2238      	movs	r2, #56	; 0x38
 8002464:	2100      	movs	r1, #0
 8002466:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	0018      	movs	r0, r3
 800246c:	f7fe fa82 	bl	8000974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2239      	movs	r2, #57	; 0x39
 8002474:	2102      	movs	r1, #2
 8002476:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	0019      	movs	r1, r3
 8002482:	0010      	movs	r0, r2
 8002484:	f000 fa80 	bl	8002988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	223e      	movs	r2, #62	; 0x3e
 800248c:	2101      	movs	r1, #1
 800248e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	223a      	movs	r2, #58	; 0x3a
 8002494:	2101      	movs	r1, #1
 8002496:	5499      	strb	r1, [r3, r2]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	223b      	movs	r2, #59	; 0x3b
 800249c:	2101      	movs	r1, #1
 800249e:	5499      	strb	r1, [r3, r2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	223c      	movs	r2, #60	; 0x3c
 80024a4:	2101      	movs	r1, #1
 80024a6:	5499      	strb	r1, [r3, r2]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	223d      	movs	r2, #61	; 0x3d
 80024ac:	2101      	movs	r1, #1
 80024ae:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2239      	movs	r2, #57	; 0x39
 80024b4:	2101      	movs	r1, #1
 80024b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	0018      	movs	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2239      	movs	r2, #57	; 0x39
 80024d0:	5c9b      	ldrb	r3, [r3, r2]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d001      	beq.n	80024dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e02e      	b.n	800253a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2239      	movs	r2, #57	; 0x39
 80024e0:	2102      	movs	r1, #2
 80024e2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	05db      	lsls	r3, r3, #23
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d009      	beq.n	8002504 <HAL_TIM_Base_Start+0x40>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a13      	ldr	r2, [pc, #76]	; (8002544 <HAL_TIM_Base_Start+0x80>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d004      	beq.n	8002504 <HAL_TIM_Base_Start+0x40>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a12      	ldr	r2, [pc, #72]	; (8002548 <HAL_TIM_Base_Start+0x84>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d111      	bne.n	8002528 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2207      	movs	r2, #7
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b06      	cmp	r3, #6
 8002514:	d010      	beq.n	8002538 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	430a      	orrs	r2, r1
 8002524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002526:	e007      	b.n	8002538 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2101      	movs	r1, #1
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	0018      	movs	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	b004      	add	sp, #16
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	40010800 	.word	0x40010800
 8002548:	40011400 	.word	0x40011400

0800254c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2239      	movs	r2, #57	; 0x39
 8002558:	5c9b      	ldrb	r3, [r3, r2]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d001      	beq.n	8002564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e036      	b.n	80025d2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2239      	movs	r2, #57	; 0x39
 8002568:	2102      	movs	r1, #2
 800256a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2101      	movs	r1, #1
 8002578:	430a      	orrs	r2, r1
 800257a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	05db      	lsls	r3, r3, #23
 8002584:	429a      	cmp	r2, r3
 8002586:	d009      	beq.n	800259c <HAL_TIM_Base_Start_IT+0x50>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a13      	ldr	r2, [pc, #76]	; (80025dc <HAL_TIM_Base_Start_IT+0x90>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d004      	beq.n	800259c <HAL_TIM_Base_Start_IT+0x50>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <HAL_TIM_Base_Start_IT+0x94>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d111      	bne.n	80025c0 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2207      	movs	r2, #7
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d010      	beq.n	80025d0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2101      	movs	r1, #1
 80025ba:	430a      	orrs	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025be:	e007      	b.n	80025d0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2101      	movs	r1, #1
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	40010800 	.word	0x40010800
 80025e0:	40011400 	.word	0x40011400

080025e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2202      	movs	r2, #2
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d124      	bne.n	8002644 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	2b02      	cmp	r3, #2
 8002606:	d11d      	bne.n	8002644 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2203      	movs	r2, #3
 800260e:	4252      	negs	r2, r2
 8002610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2203      	movs	r2, #3
 8002620:	4013      	ands	r3, r2
 8002622:	d004      	beq.n	800262e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	0018      	movs	r0, r3
 8002628:	f000 f996 	bl	8002958 <HAL_TIM_IC_CaptureCallback>
 800262c:	e007      	b.n	800263e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	0018      	movs	r0, r3
 8002632:	f000 f989 	bl	8002948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f000 f995 	bl	8002968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2204      	movs	r2, #4
 800264c:	4013      	ands	r3, r2
 800264e:	2b04      	cmp	r3, #4
 8002650:	d125      	bne.n	800269e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2204      	movs	r2, #4
 800265a:	4013      	ands	r3, r2
 800265c:	2b04      	cmp	r3, #4
 800265e:	d11e      	bne.n	800269e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2205      	movs	r2, #5
 8002666:	4252      	negs	r2, r2
 8002668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	23c0      	movs	r3, #192	; 0xc0
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4013      	ands	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	0018      	movs	r0, r3
 8002682:	f000 f969 	bl	8002958 <HAL_TIM_IC_CaptureCallback>
 8002686:	e007      	b.n	8002698 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	0018      	movs	r0, r3
 800268c:	f000 f95c 	bl	8002948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	0018      	movs	r0, r3
 8002694:	f000 f968 	bl	8002968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2208      	movs	r2, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d124      	bne.n	80026f6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2208      	movs	r2, #8
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d11d      	bne.n	80026f6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2209      	movs	r2, #9
 80026c0:	4252      	negs	r2, r2
 80026c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2204      	movs	r2, #4
 80026c8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2203      	movs	r2, #3
 80026d2:	4013      	ands	r3, r2
 80026d4:	d004      	beq.n	80026e0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f93d 	bl	8002958 <HAL_TIM_IC_CaptureCallback>
 80026de:	e007      	b.n	80026f0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 f930 	bl	8002948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f93c 	bl	8002968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	2210      	movs	r2, #16
 80026fe:	4013      	ands	r3, r2
 8002700:	2b10      	cmp	r3, #16
 8002702:	d125      	bne.n	8002750 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2210      	movs	r2, #16
 800270c:	4013      	ands	r3, r2
 800270e:	2b10      	cmp	r3, #16
 8002710:	d11e      	bne.n	8002750 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2211      	movs	r2, #17
 8002718:	4252      	negs	r2, r2
 800271a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2208      	movs	r2, #8
 8002720:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	23c0      	movs	r3, #192	; 0xc0
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d004      	beq.n	800273a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	0018      	movs	r0, r3
 8002734:	f000 f910 	bl	8002958 <HAL_TIM_IC_CaptureCallback>
 8002738:	e007      	b.n	800274a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f000 f903 	bl	8002948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	0018      	movs	r0, r3
 8002746:	f000 f90f 	bl	8002968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2201      	movs	r2, #1
 8002758:	4013      	ands	r3, r2
 800275a:	2b01      	cmp	r3, #1
 800275c:	d10f      	bne.n	800277e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	2b01      	cmp	r3, #1
 800276a:	d108      	bne.n	800277e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2202      	movs	r2, #2
 8002772:	4252      	negs	r2, r2
 8002774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f7fe f8a5 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2240      	movs	r2, #64	; 0x40
 8002786:	4013      	ands	r3, r2
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d10f      	bne.n	80027ac <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2240      	movs	r2, #64	; 0x40
 8002794:	4013      	ands	r3, r2
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d108      	bne.n	80027ac <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2241      	movs	r2, #65	; 0x41
 80027a0:	4252      	negs	r2, r2
 80027a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f000 f8e6 	bl	8002978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b002      	add	sp, #8
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2238      	movs	r2, #56	; 0x38
 80027c2:	5c9b      	ldrb	r3, [r3, r2]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_TIM_ConfigClockSource+0x18>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e0b7      	b.n	800293c <HAL_TIM_ConfigClockSource+0x188>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2238      	movs	r2, #56	; 0x38
 80027d0:	2101      	movs	r1, #1
 80027d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2239      	movs	r2, #57	; 0x39
 80027d8:	2102      	movs	r1, #2
 80027da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2277      	movs	r2, #119	; 0x77
 80027e8:	4393      	bics	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4a55      	ldr	r2, [pc, #340]	; (8002944 <HAL_TIM_ConfigClockSource+0x190>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	0192      	lsls	r2, r2, #6
 8002804:	4293      	cmp	r3, r2
 8002806:	d040      	beq.n	800288a <HAL_TIM_ConfigClockSource+0xd6>
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	0192      	lsls	r2, r2, #6
 800280c:	4293      	cmp	r3, r2
 800280e:	d900      	bls.n	8002812 <HAL_TIM_ConfigClockSource+0x5e>
 8002810:	e088      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x170>
 8002812:	2280      	movs	r2, #128	; 0x80
 8002814:	0152      	lsls	r2, r2, #5
 8002816:	4293      	cmp	r3, r2
 8002818:	d100      	bne.n	800281c <HAL_TIM_ConfigClockSource+0x68>
 800281a:	e085      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
 800281c:	2280      	movs	r2, #128	; 0x80
 800281e:	0152      	lsls	r2, r2, #5
 8002820:	4293      	cmp	r3, r2
 8002822:	d900      	bls.n	8002826 <HAL_TIM_ConfigClockSource+0x72>
 8002824:	e07e      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x170>
 8002826:	2b70      	cmp	r3, #112	; 0x70
 8002828:	d018      	beq.n	800285c <HAL_TIM_ConfigClockSource+0xa8>
 800282a:	d900      	bls.n	800282e <HAL_TIM_ConfigClockSource+0x7a>
 800282c:	e07a      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x170>
 800282e:	2b60      	cmp	r3, #96	; 0x60
 8002830:	d04f      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x11e>
 8002832:	d900      	bls.n	8002836 <HAL_TIM_ConfigClockSource+0x82>
 8002834:	e076      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x170>
 8002836:	2b50      	cmp	r3, #80	; 0x50
 8002838:	d03b      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0xfe>
 800283a:	d900      	bls.n	800283e <HAL_TIM_ConfigClockSource+0x8a>
 800283c:	e072      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x170>
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d057      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x13e>
 8002842:	d900      	bls.n	8002846 <HAL_TIM_ConfigClockSource+0x92>
 8002844:	e06e      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x170>
 8002846:	2b30      	cmp	r3, #48	; 0x30
 8002848:	d063      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x15e>
 800284a:	d86b      	bhi.n	8002924 <HAL_TIM_ConfigClockSource+0x170>
 800284c:	2b20      	cmp	r3, #32
 800284e:	d060      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x15e>
 8002850:	d868      	bhi.n	8002924 <HAL_TIM_ConfigClockSource+0x170>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d05d      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x15e>
 8002856:	2b10      	cmp	r3, #16
 8002858:	d05b      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800285a:	e063      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6899      	ldr	r1, [r3, #8]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f000 f95a 	bl	8002b24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2277      	movs	r2, #119	; 0x77
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]
      break;
 8002888:	e04f      	b.n	800292a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f000 f943 	bl	8002b24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	01c9      	lsls	r1, r1, #7
 80028ac:	430a      	orrs	r2, r1
 80028ae:	609a      	str	r2, [r3, #8]
      break;
 80028b0:	e03b      	b.n	800292a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6859      	ldr	r1, [r3, #4]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	001a      	movs	r2, r3
 80028c0:	f000 f8b6 	bl	8002a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2150      	movs	r1, #80	; 0x50
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 f910 	bl	8002af0 <TIM_ITRx_SetConfig>
      break;
 80028d0:	e02b      	b.n	800292a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	001a      	movs	r2, r3
 80028e0:	f000 f8d4 	bl	8002a8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2160      	movs	r1, #96	; 0x60
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 f900 	bl	8002af0 <TIM_ITRx_SetConfig>
      break;
 80028f0:	e01b      	b.n	800292a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	001a      	movs	r2, r3
 8002900:	f000 f896 	bl	8002a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2140      	movs	r1, #64	; 0x40
 800290a:	0018      	movs	r0, r3
 800290c:	f000 f8f0 	bl	8002af0 <TIM_ITRx_SetConfig>
      break;
 8002910:	e00b      	b.n	800292a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0019      	movs	r1, r3
 800291c:	0010      	movs	r0, r2
 800291e:	f000 f8e7 	bl	8002af0 <TIM_ITRx_SetConfig>
        break;
 8002922:	e002      	b.n	800292a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	e000      	b.n	800292a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002928:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2239      	movs	r2, #57	; 0x39
 800292e:	2101      	movs	r1, #1
 8002930:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2238      	movs	r2, #56	; 0x38
 8002936:	2100      	movs	r1, #0
 8002938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b004      	add	sp, #16
 8002942:	bd80      	pop	{r7, pc}
 8002944:	ffff00ff 	.word	0xffff00ff

08002948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b002      	add	sp, #8
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002960:	46c0      	nop			; (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	b002      	add	sp, #8
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b002      	add	sp, #8
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b002      	add	sp, #8
 8002986:	bd80      	pop	{r7, pc}

08002988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	05db      	lsls	r3, r3, #23
 800299e:	429a      	cmp	r2, r3
 80029a0:	d007      	beq.n	80029b2 <TIM_Base_SetConfig+0x2a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <TIM_Base_SetConfig+0x9c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d003      	beq.n	80029b2 <TIM_Base_SetConfig+0x2a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <TIM_Base_SetConfig+0xa0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d108      	bne.n	80029c4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2270      	movs	r2, #112	; 0x70
 80029b6:	4393      	bics	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	05db      	lsls	r3, r3, #23
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d007      	beq.n	80029de <TIM_Base_SetConfig+0x56>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <TIM_Base_SetConfig+0x9c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d003      	beq.n	80029de <TIM_Base_SetConfig+0x56>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <TIM_Base_SetConfig+0xa0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d108      	bne.n	80029f0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <TIM_Base_SetConfig+0xa4>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2280      	movs	r2, #128	; 0x80
 80029f4:	4393      	bics	r3, r2
 80029f6:	001a      	movs	r2, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	615a      	str	r2, [r3, #20]
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b004      	add	sp, #16
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40010800 	.word	0x40010800
 8002a28:	40011400 	.word	0x40011400
 8002a2c:	fffffcff 	.word	0xfffffcff

08002a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	2201      	movs	r2, #1
 8002a48:	4393      	bics	r3, r2
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	22f0      	movs	r2, #240	; 0xf0
 8002a5a:	4393      	bics	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	220a      	movs	r2, #10
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	621a      	str	r2, [r3, #32]
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b006      	add	sp, #24
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	4393      	bics	r3, r2
 8002aa0:	001a      	movs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <TIM_TI2_ConfigInputStage+0x60>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	031b      	lsls	r3, r3, #12
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	22a0      	movs	r2, #160	; 0xa0
 8002ac8:	4393      	bics	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	621a      	str	r2, [r3, #32]
}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b006      	add	sp, #24
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	ffff0fff 	.word	0xffff0fff

08002af0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2270      	movs	r2, #112	; 0x70
 8002b04:	4393      	bics	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	2207      	movs	r2, #7
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	609a      	str	r2, [r3, #8]
}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <TIM_ETR_SetConfig+0x3c>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	021a      	lsls	r2, r3, #8
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	609a      	str	r2, [r3, #8]
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b006      	add	sp, #24
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	ffff00ff 	.word	0xffff00ff

08002b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2238      	movs	r2, #56	; 0x38
 8002b72:	5c9b      	ldrb	r3, [r3, r2]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e042      	b.n	8002c02 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2238      	movs	r2, #56	; 0x38
 8002b80:	2101      	movs	r1, #1
 8002b82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2239      	movs	r2, #57	; 0x39
 8002b88:	2102      	movs	r1, #2
 8002b8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2270      	movs	r2, #112	; 0x70
 8002ba0:	4393      	bics	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	05db      	lsls	r3, r3, #23
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d009      	beq.n	8002bd6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	4393      	bics	r3, r2
 8002bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2239      	movs	r2, #57	; 0x39
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2238      	movs	r2, #56	; 0x38
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b004      	add	sp, #16
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	40010800 	.word	0x40010800
 8002c10:	40011400 	.word	0x40011400

08002c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e044      	b.n	8002cb0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2274      	movs	r2, #116	; 0x74
 8002c32:	2100      	movs	r1, #0
 8002c34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7fd fecf 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2224      	movs	r2, #36	; 0x24
 8002c42:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2101      	movs	r1, #1
 8002c50:	438a      	bics	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 f8d8 	bl	8002e0c <UART_SetConfig>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e024      	b.n	8002cb0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 fb2d 	bl	80032d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	490d      	ldr	r1, [pc, #52]	; (8002cb8 <HAL_UART_Init+0xa4>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	212a      	movs	r1, #42	; 0x2a
 8002c92:	438a      	bics	r2, r1
 8002c94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f000 fbc5 	bl	8003438 <UART_CheckIdleState>
 8002cae:	0003      	movs	r3, r0
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	ffffb7ff 	.word	0xffffb7ff

08002cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	1dbb      	adds	r3, r7, #6
 8002cca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d000      	beq.n	8002cd6 <HAL_UART_Transmit+0x1a>
 8002cd4:	e095      	b.n	8002e02 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_UART_Transmit+0x28>
 8002cdc:	1dbb      	adds	r3, r7, #6
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e08d      	b.n	8002e04 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	015b      	lsls	r3, r3, #5
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d109      	bne.n	8002d08 <HAL_UART_Transmit+0x4c>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4013      	ands	r3, r2
 8002d02:	d001      	beq.n	8002d08 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e07d      	b.n	8002e04 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2274      	movs	r2, #116	; 0x74
 8002d0c:	5c9b      	ldrb	r3, [r3, r2]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_UART_Transmit+0x5a>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e076      	b.n	8002e04 <HAL_UART_Transmit+0x148>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2274      	movs	r2, #116	; 0x74
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	2100      	movs	r1, #0
 8002d24:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2221      	movs	r2, #33	; 0x21
 8002d2a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d2c:	f7fe f978 	bl	8001020 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1dba      	adds	r2, r7, #6
 8002d38:	2150      	movs	r1, #80	; 0x50
 8002d3a:	8812      	ldrh	r2, [r2, #0]
 8002d3c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1dba      	adds	r2, r7, #6
 8002d42:	2152      	movs	r1, #82	; 0x52
 8002d44:	8812      	ldrh	r2, [r2, #0]
 8002d46:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	015b      	lsls	r3, r3, #5
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d108      	bne.n	8002d66 <HAL_UART_Transmit+0xaa>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	e003      	b.n	8002d6e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2274      	movs	r2, #116	; 0x74
 8002d72:	2100      	movs	r1, #0
 8002d74:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002d76:	e02c      	b.n	8002dd2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	0013      	movs	r3, r2
 8002d82:	2200      	movs	r2, #0
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	f000 fb9f 	bl	80034c8 <UART_WaitOnFlagUntilTimeout>
 8002d8a:	1e03      	subs	r3, r0, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e038      	b.n	8002e04 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	05d2      	lsls	r2, r2, #23
 8002da4:	0dd2      	lsrs	r2, r2, #23
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	3302      	adds	r3, #2
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	e007      	b.n	8002dc0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2252      	movs	r2, #82	; 0x52
 8002dc4:	5a9b      	ldrh	r3, [r3, r2]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b299      	uxth	r1, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2252      	movs	r2, #82	; 0x52
 8002dd0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2252      	movs	r2, #82	; 0x52
 8002dd6:	5a9b      	ldrh	r3, [r3, r2]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1cc      	bne.n	8002d78 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	0013      	movs	r3, r2
 8002de8:	2200      	movs	r2, #0
 8002dea:	2140      	movs	r1, #64	; 0x40
 8002dec:	f000 fb6c 	bl	80034c8 <UART_WaitOnFlagUntilTimeout>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e005      	b.n	8002e04 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
  }
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b008      	add	sp, #32
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e0c:	b5b0      	push	{r4, r5, r7, lr}
 8002e0e:	b08e      	sub	sp, #56	; 0x38
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e14:	231a      	movs	r3, #26
 8002e16:	2218      	movs	r2, #24
 8002e18:	4694      	mov	ip, r2
 8002e1a:	44bc      	add	ip, r7
 8002e1c:	4463      	add	r3, ip
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4abc      	ldr	r2, [pc, #752]	; (8003134 <UART_SetConfig+0x328>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4ab8      	ldr	r2, [pc, #736]	; (8003138 <UART_SetConfig+0x32c>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4ab2      	ldr	r2, [pc, #712]	; (800313c <UART_SetConfig+0x330>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4aad      	ldr	r2, [pc, #692]	; (8003140 <UART_SetConfig+0x334>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4aa9      	ldr	r2, [pc, #676]	; (8003144 <UART_SetConfig+0x338>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d136      	bne.n	8002f10 <UART_SetConfig+0x104>
 8002ea2:	4ba9      	ldr	r3, [pc, #676]	; (8003148 <UART_SetConfig+0x33c>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	d020      	beq.n	8002ef0 <UART_SetConfig+0xe4>
 8002eae:	d827      	bhi.n	8002f00 <UART_SetConfig+0xf4>
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d00d      	beq.n	8002ed0 <UART_SetConfig+0xc4>
 8002eb4:	d824      	bhi.n	8002f00 <UART_SetConfig+0xf4>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <UART_SetConfig+0xb4>
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d010      	beq.n	8002ee0 <UART_SetConfig+0xd4>
 8002ebe:	e01f      	b.n	8002f00 <UART_SetConfig+0xf4>
 8002ec0:	231b      	movs	r3, #27
 8002ec2:	2218      	movs	r2, #24
 8002ec4:	4694      	mov	ip, r2
 8002ec6:	44bc      	add	ip, r7
 8002ec8:	4463      	add	r3, ip
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e06f      	b.n	8002fb0 <UART_SetConfig+0x1a4>
 8002ed0:	231b      	movs	r3, #27
 8002ed2:	2218      	movs	r2, #24
 8002ed4:	4694      	mov	ip, r2
 8002ed6:	44bc      	add	ip, r7
 8002ed8:	4463      	add	r3, ip
 8002eda:	2202      	movs	r2, #2
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e067      	b.n	8002fb0 <UART_SetConfig+0x1a4>
 8002ee0:	231b      	movs	r3, #27
 8002ee2:	2218      	movs	r2, #24
 8002ee4:	4694      	mov	ip, r2
 8002ee6:	44bc      	add	ip, r7
 8002ee8:	4463      	add	r3, ip
 8002eea:	2204      	movs	r2, #4
 8002eec:	701a      	strb	r2, [r3, #0]
 8002eee:	e05f      	b.n	8002fb0 <UART_SetConfig+0x1a4>
 8002ef0:	231b      	movs	r3, #27
 8002ef2:	2218      	movs	r2, #24
 8002ef4:	4694      	mov	ip, r2
 8002ef6:	44bc      	add	ip, r7
 8002ef8:	4463      	add	r3, ip
 8002efa:	2208      	movs	r2, #8
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e057      	b.n	8002fb0 <UART_SetConfig+0x1a4>
 8002f00:	231b      	movs	r3, #27
 8002f02:	2218      	movs	r2, #24
 8002f04:	4694      	mov	ip, r2
 8002f06:	44bc      	add	ip, r7
 8002f08:	4463      	add	r3, ip
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	e04f      	b.n	8002fb0 <UART_SetConfig+0x1a4>
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a89      	ldr	r2, [pc, #548]	; (800313c <UART_SetConfig+0x330>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d143      	bne.n	8002fa2 <UART_SetConfig+0x196>
 8002f1a:	4b8b      	ldr	r3, [pc, #556]	; (8003148 <UART_SetConfig+0x33c>)
 8002f1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f1e:	23c0      	movs	r3, #192	; 0xc0
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	4013      	ands	r3, r2
 8002f24:	22c0      	movs	r2, #192	; 0xc0
 8002f26:	0112      	lsls	r2, r2, #4
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d02a      	beq.n	8002f82 <UART_SetConfig+0x176>
 8002f2c:	22c0      	movs	r2, #192	; 0xc0
 8002f2e:	0112      	lsls	r2, r2, #4
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d82e      	bhi.n	8002f92 <UART_SetConfig+0x186>
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	0112      	lsls	r2, r2, #4
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d012      	beq.n	8002f62 <UART_SetConfig+0x156>
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	0112      	lsls	r2, r2, #4
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d826      	bhi.n	8002f92 <UART_SetConfig+0x186>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <UART_SetConfig+0x146>
 8002f48:	2280      	movs	r2, #128	; 0x80
 8002f4a:	00d2      	lsls	r2, r2, #3
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d010      	beq.n	8002f72 <UART_SetConfig+0x166>
 8002f50:	e01f      	b.n	8002f92 <UART_SetConfig+0x186>
 8002f52:	231b      	movs	r3, #27
 8002f54:	2218      	movs	r2, #24
 8002f56:	4694      	mov	ip, r2
 8002f58:	44bc      	add	ip, r7
 8002f5a:	4463      	add	r3, ip
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
 8002f60:	e026      	b.n	8002fb0 <UART_SetConfig+0x1a4>
 8002f62:	231b      	movs	r3, #27
 8002f64:	2218      	movs	r2, #24
 8002f66:	4694      	mov	ip, r2
 8002f68:	44bc      	add	ip, r7
 8002f6a:	4463      	add	r3, ip
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e01e      	b.n	8002fb0 <UART_SetConfig+0x1a4>
 8002f72:	231b      	movs	r3, #27
 8002f74:	2218      	movs	r2, #24
 8002f76:	4694      	mov	ip, r2
 8002f78:	44bc      	add	ip, r7
 8002f7a:	4463      	add	r3, ip
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	e016      	b.n	8002fb0 <UART_SetConfig+0x1a4>
 8002f82:	231b      	movs	r3, #27
 8002f84:	2218      	movs	r2, #24
 8002f86:	4694      	mov	ip, r2
 8002f88:	44bc      	add	ip, r7
 8002f8a:	4463      	add	r3, ip
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	701a      	strb	r2, [r3, #0]
 8002f90:	e00e      	b.n	8002fb0 <UART_SetConfig+0x1a4>
 8002f92:	231b      	movs	r3, #27
 8002f94:	2218      	movs	r2, #24
 8002f96:	4694      	mov	ip, r2
 8002f98:	44bc      	add	ip, r7
 8002f9a:	4463      	add	r3, ip
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e006      	b.n	8002fb0 <UART_SetConfig+0x1a4>
 8002fa2:	231b      	movs	r3, #27
 8002fa4:	2218      	movs	r2, #24
 8002fa6:	4694      	mov	ip, r2
 8002fa8:	44bc      	add	ip, r7
 8002faa:	4463      	add	r3, ip
 8002fac:	2210      	movs	r2, #16
 8002fae:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a61      	ldr	r2, [pc, #388]	; (800313c <UART_SetConfig+0x330>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d000      	beq.n	8002fbc <UART_SetConfig+0x1b0>
 8002fba:	e088      	b.n	80030ce <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fbc:	231b      	movs	r3, #27
 8002fbe:	2218      	movs	r2, #24
 8002fc0:	4694      	mov	ip, r2
 8002fc2:	44bc      	add	ip, r7
 8002fc4:	4463      	add	r3, ip
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d01d      	beq.n	8003008 <UART_SetConfig+0x1fc>
 8002fcc:	dc20      	bgt.n	8003010 <UART_SetConfig+0x204>
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d015      	beq.n	8002ffe <UART_SetConfig+0x1f2>
 8002fd2:	dc1d      	bgt.n	8003010 <UART_SetConfig+0x204>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <UART_SetConfig+0x1d2>
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d005      	beq.n	8002fe8 <UART_SetConfig+0x1dc>
 8002fdc:	e018      	b.n	8003010 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fde:	f7ff f855 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fe6:	e01d      	b.n	8003024 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fe8:	4b57      	ldr	r3, [pc, #348]	; (8003148 <UART_SetConfig+0x33c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2210      	movs	r2, #16
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d002      	beq.n	8002ff8 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ff2:	4b56      	ldr	r3, [pc, #344]	; (800314c <UART_SetConfig+0x340>)
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ff6:	e015      	b.n	8003024 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8002ff8:	4b55      	ldr	r3, [pc, #340]	; (8003150 <UART_SetConfig+0x344>)
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ffc:	e012      	b.n	8003024 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ffe:	f7fe ff95 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8003002:	0003      	movs	r3, r0
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003006:	e00d      	b.n	8003024 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800300e:	e009      	b.n	8003024 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003014:	231a      	movs	r3, #26
 8003016:	2218      	movs	r2, #24
 8003018:	4694      	mov	ip, r2
 800301a:	44bc      	add	ip, r7
 800301c:	4463      	add	r3, ip
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
        break;
 8003022:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d100      	bne.n	800302c <UART_SetConfig+0x220>
 800302a:	e139      	b.n	80032a0 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	0013      	movs	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	189b      	adds	r3, r3, r2
 8003036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003038:	429a      	cmp	r2, r3
 800303a:	d305      	bcc.n	8003048 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003044:	429a      	cmp	r2, r3
 8003046:	d907      	bls.n	8003058 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8003048:	231a      	movs	r3, #26
 800304a:	2218      	movs	r2, #24
 800304c:	4694      	mov	ip, r2
 800304e:	44bc      	add	ip, r7
 8003050:	4463      	add	r3, ip
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e123      	b.n	80032a0 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	6939      	ldr	r1, [r7, #16]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	000b      	movs	r3, r1
 8003066:	0e1b      	lsrs	r3, r3, #24
 8003068:	0010      	movs	r0, r2
 800306a:	0205      	lsls	r5, r0, #8
 800306c:	431d      	orrs	r5, r3
 800306e:	000b      	movs	r3, r1
 8003070:	021c      	lsls	r4, r3, #8
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68b8      	ldr	r0, [r7, #8]
 8003080:	68f9      	ldr	r1, [r7, #12]
 8003082:	1900      	adds	r0, r0, r4
 8003084:	4169      	adcs	r1, r5
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	2300      	movs	r3, #0
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f7fd f8cc 	bl	8000230 <__aeabi_uldivmod>
 8003098:	0002      	movs	r2, r0
 800309a:	000b      	movs	r3, r1
 800309c:	0013      	movs	r3, r2
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a2:	23c0      	movs	r3, #192	; 0xc0
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d309      	bcc.n	80030be <UART_SetConfig+0x2b2>
 80030aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	035b      	lsls	r3, r3, #13
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d204      	bcs.n	80030be <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ba:	60da      	str	r2, [r3, #12]
 80030bc:	e0f0      	b.n	80032a0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80030be:	231a      	movs	r3, #26
 80030c0:	2218      	movs	r2, #24
 80030c2:	4694      	mov	ip, r2
 80030c4:	44bc      	add	ip, r7
 80030c6:	4463      	add	r3, ip
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	e0e8      	b.n	80032a0 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d000      	beq.n	80030dc <UART_SetConfig+0x2d0>
 80030da:	e087      	b.n	80031ec <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 80030dc:	231b      	movs	r3, #27
 80030de:	2218      	movs	r2, #24
 80030e0:	4694      	mov	ip, r2
 80030e2:	44bc      	add	ip, r7
 80030e4:	4463      	add	r3, ip
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d835      	bhi.n	8003158 <UART_SetConfig+0x34c>
 80030ec:	009a      	lsls	r2, r3, #2
 80030ee:	4b19      	ldr	r3, [pc, #100]	; (8003154 <UART_SetConfig+0x348>)
 80030f0:	18d3      	adds	r3, r2, r3
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f6:	f7fe ffc9 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 80030fa:	0003      	movs	r3, r0
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030fe:	e035      	b.n	800316c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003100:	f7fe ffda 	bl	80020b8 <HAL_RCC_GetPCLK2Freq>
 8003104:	0003      	movs	r3, r0
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003108:	e030      	b.n	800316c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800310a:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <UART_SetConfig+0x33c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2210      	movs	r2, #16
 8003110:	4013      	ands	r3, r2
 8003112:	d002      	beq.n	800311a <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <UART_SetConfig+0x340>)
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003118:	e028      	b.n	800316c <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <UART_SetConfig+0x344>)
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800311e:	e025      	b.n	800316c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003120:	f7fe ff04 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8003124:	0003      	movs	r3, r0
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003128:	e020      	b.n	800316c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003130:	e01c      	b.n	800316c <UART_SetConfig+0x360>
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	efff69f3 	.word	0xefff69f3
 8003138:	ffffcfff 	.word	0xffffcfff
 800313c:	40004800 	.word	0x40004800
 8003140:	fffff4ff 	.word	0xfffff4ff
 8003144:	40004400 	.word	0x40004400
 8003148:	40021000 	.word	0x40021000
 800314c:	003d0900 	.word	0x003d0900
 8003150:	00f42400 	.word	0x00f42400
 8003154:	08003754 	.word	0x08003754
      default:
        pclk = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800315c:	231a      	movs	r3, #26
 800315e:	2218      	movs	r2, #24
 8003160:	4694      	mov	ip, r2
 8003162:	44bc      	add	ip, r7
 8003164:	4463      	add	r3, ip
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
        break;
 800316a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d100      	bne.n	8003174 <UART_SetConfig+0x368>
 8003172:	e095      	b.n	80032a0 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	005a      	lsls	r2, r3, #1
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	18d2      	adds	r2, r2, r3
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	0019      	movs	r1, r3
 8003186:	0010      	movs	r0, r2
 8003188:	f7fc ffc6 	bl	8000118 <__udivsi3>
 800318c:	0003      	movs	r3, r0
 800318e:	b29b      	uxth	r3, r3
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	2b0f      	cmp	r3, #15
 8003196:	d921      	bls.n	80031dc <UART_SetConfig+0x3d0>
 8003198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	025b      	lsls	r3, r3, #9
 800319e:	429a      	cmp	r2, r3
 80031a0:	d21c      	bcs.n	80031dc <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	200e      	movs	r0, #14
 80031a8:	2418      	movs	r4, #24
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	181b      	adds	r3, r3, r0
 80031ae:	210f      	movs	r1, #15
 80031b0:	438a      	bics	r2, r1
 80031b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2207      	movs	r2, #7
 80031bc:	4013      	ands	r3, r2
 80031be:	b299      	uxth	r1, r3
 80031c0:	193b      	adds	r3, r7, r4
 80031c2:	181b      	adds	r3, r3, r0
 80031c4:	193a      	adds	r2, r7, r4
 80031c6:	1812      	adds	r2, r2, r0
 80031c8:	8812      	ldrh	r2, [r2, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	193a      	adds	r2, r7, r4
 80031d4:	1812      	adds	r2, r2, r0
 80031d6:	8812      	ldrh	r2, [r2, #0]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	e061      	b.n	80032a0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80031dc:	231a      	movs	r3, #26
 80031de:	2218      	movs	r2, #24
 80031e0:	4694      	mov	ip, r2
 80031e2:	44bc      	add	ip, r7
 80031e4:	4463      	add	r3, ip
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e059      	b.n	80032a0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031ec:	231b      	movs	r3, #27
 80031ee:	2218      	movs	r2, #24
 80031f0:	4694      	mov	ip, r2
 80031f2:	44bc      	add	ip, r7
 80031f4:	4463      	add	r3, ip
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d822      	bhi.n	8003242 <UART_SetConfig+0x436>
 80031fc:	009a      	lsls	r2, r3, #2
 80031fe:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <UART_SetConfig+0x4b4>)
 8003200:	18d3      	adds	r3, r2, r3
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003206:	f7fe ff41 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 800320a:	0003      	movs	r3, r0
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800320e:	e022      	b.n	8003256 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003210:	f7fe ff52 	bl	80020b8 <HAL_RCC_GetPCLK2Freq>
 8003214:	0003      	movs	r3, r0
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003218:	e01d      	b.n	8003256 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800321a:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <UART_SetConfig+0x4b8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2210      	movs	r2, #16
 8003220:	4013      	ands	r3, r2
 8003222:	d002      	beq.n	800322a <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003224:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <UART_SetConfig+0x4bc>)
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003228:	e015      	b.n	8003256 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 800322a:	4b28      	ldr	r3, [pc, #160]	; (80032cc <UART_SetConfig+0x4c0>)
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800322e:	e012      	b.n	8003256 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003230:	f7fe fe7c 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8003234:	0003      	movs	r3, r0
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003238:	e00d      	b.n	8003256 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003240:	e009      	b.n	8003256 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003246:	231a      	movs	r3, #26
 8003248:	2218      	movs	r2, #24
 800324a:	4694      	mov	ip, r2
 800324c:	44bc      	add	ip, r7
 800324e:	4463      	add	r3, ip
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
        break;
 8003254:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d021      	beq.n	80032a0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	085a      	lsrs	r2, r3, #1
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	18d2      	adds	r2, r2, r3
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	0019      	movs	r1, r3
 800326c:	0010      	movs	r0, r2
 800326e:	f7fc ff53 	bl	8000118 <__udivsi3>
 8003272:	0003      	movs	r3, r0
 8003274:	b29b      	uxth	r3, r3
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	2b0f      	cmp	r3, #15
 800327c:	d909      	bls.n	8003292 <UART_SetConfig+0x486>
 800327e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	025b      	lsls	r3, r3, #9
 8003284:	429a      	cmp	r2, r3
 8003286:	d204      	bcs.n	8003292 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	e006      	b.n	80032a0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003292:	231a      	movs	r3, #26
 8003294:	2218      	movs	r2, #24
 8003296:	4694      	mov	ip, r2
 8003298:	44bc      	add	ip, r7
 800329a:	4463      	add	r3, ip
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	2200      	movs	r2, #0
 80032a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	2200      	movs	r2, #0
 80032aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032ac:	231a      	movs	r3, #26
 80032ae:	2218      	movs	r2, #24
 80032b0:	4694      	mov	ip, r2
 80032b2:	44bc      	add	ip, r7
 80032b4:	4463      	add	r3, ip
 80032b6:	781b      	ldrb	r3, [r3, #0]
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b00e      	add	sp, #56	; 0x38
 80032be:	bdb0      	pop	{r4, r5, r7, pc}
 80032c0:	08003778 	.word	0x08003778
 80032c4:	40021000 	.word	0x40021000
 80032c8:	003d0900 	.word	0x003d0900
 80032cc:	00f42400 	.word	0x00f42400

080032d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	2201      	movs	r2, #1
 80032de:	4013      	ands	r3, r2
 80032e0:	d00b      	beq.n	80032fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4a4a      	ldr	r2, [pc, #296]	; (8003414 <UART_AdvFeatureConfig+0x144>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	2202      	movs	r2, #2
 8003300:	4013      	ands	r3, r2
 8003302:	d00b      	beq.n	800331c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a43      	ldr	r2, [pc, #268]	; (8003418 <UART_AdvFeatureConfig+0x148>)
 800330c:	4013      	ands	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	2204      	movs	r2, #4
 8003322:	4013      	ands	r3, r2
 8003324:	d00b      	beq.n	800333e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a3b      	ldr	r2, [pc, #236]	; (800341c <UART_AdvFeatureConfig+0x14c>)
 800332e:	4013      	ands	r3, r2
 8003330:	0019      	movs	r1, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2208      	movs	r2, #8
 8003344:	4013      	ands	r3, r2
 8003346:	d00b      	beq.n	8003360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4a34      	ldr	r2, [pc, #208]	; (8003420 <UART_AdvFeatureConfig+0x150>)
 8003350:	4013      	ands	r3, r2
 8003352:	0019      	movs	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	2210      	movs	r2, #16
 8003366:	4013      	ands	r3, r2
 8003368:	d00b      	beq.n	8003382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a2c      	ldr	r2, [pc, #176]	; (8003424 <UART_AdvFeatureConfig+0x154>)
 8003372:	4013      	ands	r3, r2
 8003374:	0019      	movs	r1, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	2220      	movs	r2, #32
 8003388:	4013      	ands	r3, r2
 800338a:	d00b      	beq.n	80033a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	4a25      	ldr	r2, [pc, #148]	; (8003428 <UART_AdvFeatureConfig+0x158>)
 8003394:	4013      	ands	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2240      	movs	r2, #64	; 0x40
 80033aa:	4013      	ands	r3, r2
 80033ac:	d01d      	beq.n	80033ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a1d      	ldr	r2, [pc, #116]	; (800342c <UART_AdvFeatureConfig+0x15c>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	0019      	movs	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	035b      	lsls	r3, r3, #13
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d10b      	bne.n	80033ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a15      	ldr	r2, [pc, #84]	; (8003430 <UART_AdvFeatureConfig+0x160>)
 80033da:	4013      	ands	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	4013      	ands	r3, r2
 80033f2:	d00b      	beq.n	800340c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4a0e      	ldr	r2, [pc, #56]	; (8003434 <UART_AdvFeatureConfig+0x164>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	0019      	movs	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
  }
}
 800340c:	46c0      	nop			; (mov r8, r8)
 800340e:	46bd      	mov	sp, r7
 8003410:	b002      	add	sp, #8
 8003412:	bd80      	pop	{r7, pc}
 8003414:	fffdffff 	.word	0xfffdffff
 8003418:	fffeffff 	.word	0xfffeffff
 800341c:	fffbffff 	.word	0xfffbffff
 8003420:	ffff7fff 	.word	0xffff7fff
 8003424:	ffffefff 	.word	0xffffefff
 8003428:	ffffdfff 	.word	0xffffdfff
 800342c:	ffefffff 	.word	0xffefffff
 8003430:	ff9fffff 	.word	0xff9fffff
 8003434:	fff7ffff 	.word	0xfff7ffff

08003438 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af02      	add	r7, sp, #8
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2280      	movs	r2, #128	; 0x80
 8003444:	2100      	movs	r1, #0
 8003446:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003448:	f7fd fdea 	bl	8001020 <HAL_GetTick>
 800344c:	0003      	movs	r3, r0
 800344e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2208      	movs	r2, #8
 8003458:	4013      	ands	r3, r2
 800345a:	2b08      	cmp	r3, #8
 800345c:	d10c      	bne.n	8003478 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	0391      	lsls	r1, r2, #14
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4a17      	ldr	r2, [pc, #92]	; (80034c4 <UART_CheckIdleState+0x8c>)
 8003468:	9200      	str	r2, [sp, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	f000 f82c 	bl	80034c8 <UART_WaitOnFlagUntilTimeout>
 8003470:	1e03      	subs	r3, r0, #0
 8003472:	d001      	beq.n	8003478 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e021      	b.n	80034bc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2204      	movs	r2, #4
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d10c      	bne.n	80034a0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2280      	movs	r2, #128	; 0x80
 800348a:	03d1      	lsls	r1, r2, #15
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <UART_CheckIdleState+0x8c>)
 8003490:	9200      	str	r2, [sp, #0]
 8003492:	2200      	movs	r2, #0
 8003494:	f000 f818 	bl	80034c8 <UART_WaitOnFlagUntilTimeout>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d001      	beq.n	80034a0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e00d      	b.n	80034bc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2274      	movs	r2, #116	; 0x74
 80034b6:	2100      	movs	r1, #0
 80034b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b004      	add	sp, #16
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	01ffffff 	.word	0x01ffffff

080034c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	1dfb      	adds	r3, r7, #7
 80034d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d8:	e05e      	b.n	8003598 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	3301      	adds	r3, #1
 80034de:	d05b      	beq.n	8003598 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e0:	f7fd fd9e 	bl	8001020 <HAL_GetTick>
 80034e4:	0002      	movs	r2, r0
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d302      	bcc.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d11b      	bne.n	800352e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	492f      	ldr	r1, [pc, #188]	; (80035c0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003502:	400a      	ands	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2101      	movs	r1, #1
 8003512:	438a      	bics	r2, r1
 8003514:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2274      	movs	r2, #116	; 0x74
 8003526:	2100      	movs	r1, #0
 8003528:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e044      	b.n	80035b8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2204      	movs	r2, #4
 8003536:	4013      	ands	r3, r2
 8003538:	d02e      	beq.n	8003598 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	2380      	movs	r3, #128	; 0x80
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	401a      	ands	r2, r3
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	429a      	cmp	r2, r3
 800354c:	d124      	bne.n	8003598 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2280      	movs	r2, #128	; 0x80
 8003554:	0112      	lsls	r2, r2, #4
 8003556:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4917      	ldr	r1, [pc, #92]	; (80035c0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003564:	400a      	ands	r2, r1
 8003566:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2101      	movs	r1, #1
 8003574:	438a      	bics	r2, r1
 8003576:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	2120      	movs	r1, #32
 800358a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2274      	movs	r2, #116	; 0x74
 8003590:	2100      	movs	r1, #0
 8003592:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e00f      	b.n	80035b8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	4013      	ands	r3, r2
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	425a      	negs	r2, r3
 80035a8:	4153      	adcs	r3, r2
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	001a      	movs	r2, r3
 80035ae:	1dfb      	adds	r3, r7, #7
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d091      	beq.n	80034da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b004      	add	sp, #16
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	fffffe5f 	.word	0xfffffe5f

080035c4 <__libc_init_array>:
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	2600      	movs	r6, #0
 80035c8:	4d0c      	ldr	r5, [pc, #48]	; (80035fc <__libc_init_array+0x38>)
 80035ca:	4c0d      	ldr	r4, [pc, #52]	; (8003600 <__libc_init_array+0x3c>)
 80035cc:	1b64      	subs	r4, r4, r5
 80035ce:	10a4      	asrs	r4, r4, #2
 80035d0:	42a6      	cmp	r6, r4
 80035d2:	d109      	bne.n	80035e8 <__libc_init_array+0x24>
 80035d4:	2600      	movs	r6, #0
 80035d6:	f000 f821 	bl	800361c <_init>
 80035da:	4d0a      	ldr	r5, [pc, #40]	; (8003604 <__libc_init_array+0x40>)
 80035dc:	4c0a      	ldr	r4, [pc, #40]	; (8003608 <__libc_init_array+0x44>)
 80035de:	1b64      	subs	r4, r4, r5
 80035e0:	10a4      	asrs	r4, r4, #2
 80035e2:	42a6      	cmp	r6, r4
 80035e4:	d105      	bne.n	80035f2 <__libc_init_array+0x2e>
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
 80035e8:	00b3      	lsls	r3, r6, #2
 80035ea:	58eb      	ldr	r3, [r5, r3]
 80035ec:	4798      	blx	r3
 80035ee:	3601      	adds	r6, #1
 80035f0:	e7ee      	b.n	80035d0 <__libc_init_array+0xc>
 80035f2:	00b3      	lsls	r3, r6, #2
 80035f4:	58eb      	ldr	r3, [r5, r3]
 80035f6:	4798      	blx	r3
 80035f8:	3601      	adds	r6, #1
 80035fa:	e7f2      	b.n	80035e2 <__libc_init_array+0x1e>
 80035fc:	080037a4 	.word	0x080037a4
 8003600:	080037a4 	.word	0x080037a4
 8003604:	080037a4 	.word	0x080037a4
 8003608:	080037a8 	.word	0x080037a8

0800360c <memset>:
 800360c:	0003      	movs	r3, r0
 800360e:	1882      	adds	r2, r0, r2
 8003610:	4293      	cmp	r3, r2
 8003612:	d100      	bne.n	8003616 <memset+0xa>
 8003614:	4770      	bx	lr
 8003616:	7019      	strb	r1, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	e7f9      	b.n	8003610 <memset+0x4>

0800361c <_init>:
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003622:	bc08      	pop	{r3}
 8003624:	469e      	mov	lr, r3
 8003626:	4770      	bx	lr

08003628 <_fini>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362e:	bc08      	pop	{r3}
 8003630:	469e      	mov	lr, r3
 8003632:	4770      	bx	lr
