
STM32L010RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041ac  080041ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b4  080041b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  0800422c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  0800422c  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2dd  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002201  00000000  00000000  0002f375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00031578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  00032110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003083  00000000  00000000  00032be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0aa  00000000  00000000  00035c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070f0e  00000000  00000000  00042d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b3c1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce4  00000000  00000000  000b3c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004004 	.word	0x08004004

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004004 	.word	0x08004004

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <DHT22_Init>:
static uint8_t oneWirePin_Idx;

//*** Functions prototypes ***//
//OneWire Initialise
void DHT22_Init(GPIO_TypeDef* DataPort, uint16_t DataPin)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	000a      	movs	r2, r1
 80004ca:	1cbb      	adds	r3, r7, #2
 80004cc:	801a      	strh	r2, [r3, #0]
	oneWire_PORT = DataPort;
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <DHT22_Init+0x64>)
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	601a      	str	r2, [r3, #0]
	oneWire_PIN = DataPin;
 80004d4:	4b14      	ldr	r3, [pc, #80]	; (8000528 <DHT22_Init+0x68>)
 80004d6:	1cba      	adds	r2, r7, #2
 80004d8:	8812      	ldrh	r2, [r2, #0]
 80004da:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0; i<16; i++)
 80004dc:	230f      	movs	r3, #15
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
 80004e4:	e014      	b.n	8000510 <DHT22_Init+0x50>
	{
		if(DataPin & (1 << i))
 80004e6:	1cbb      	adds	r3, r7, #2
 80004e8:	881a      	ldrh	r2, [r3, #0]
 80004ea:	210f      	movs	r1, #15
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	411a      	asrs	r2, r3
 80004f2:	0013      	movs	r3, r2
 80004f4:	2201      	movs	r2, #1
 80004f6:	4013      	ands	r3, r2
 80004f8:	d004      	beq.n	8000504 <DHT22_Init+0x44>
		{
			oneWirePin_Idx = i;
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <DHT22_Init+0x6c>)
 80004fc:	187a      	adds	r2, r7, r1
 80004fe:	7812      	ldrb	r2, [r2, #0]
 8000500:	701a      	strb	r2, [r3, #0]
			break;
 8000502:	e00b      	b.n	800051c <DHT22_Init+0x5c>
	for(uint8_t i=0; i<16; i++)
 8000504:	210f      	movs	r1, #15
 8000506:	187b      	adds	r3, r7, r1
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	187b      	adds	r3, r7, r1
 800050c:	3201      	adds	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
 8000510:	230f      	movs	r3, #15
 8000512:	18fb      	adds	r3, r7, r3
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b0f      	cmp	r3, #15
 8000518:	d9e5      	bls.n	80004e6 <DHT22_Init+0x26>
		}
	}

	
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b004      	add	sp, #16
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2000008c 	.word	0x2000008c
 8000528:	20000090 	.word	0x20000090
 800052c:	20000092 	.word	0x20000092

08000530 <ONE_WIRE_PinMode>:
//Change pin mode
void ONE_WIRE_PinMode(OnePinMode_Typedef mode)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	0002      	movs	r2, r0
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800053c:	210c      	movs	r1, #12
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2240      	movs	r2, #64	; 0x40
 8000542:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
	
	if(mode == ONE_OUTPUT)
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d103      	bne.n	8000560 <ONE_WIRE_PinMode+0x30>
	{
//		oneWire_PORT->MODER &= ~(3UL << 2*oneWirePin_Idx);  //Reset State
//		oneWire_PORT->MODER |= (0x01 << 2*oneWirePin_Idx); //Output Mode
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2201      	movs	r2, #1
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	e007      	b.n	8000570 <ONE_WIRE_PinMode+0x40>
	}
	else if(mode == ONE_INPUT)
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d103      	bne.n	8000570 <ONE_WIRE_PinMode+0x40>
	{
//		oneWire_PORT->MODER &= ~(3UL << 2*oneWirePin_Idx);  //Input Mode
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000568:	230c      	movs	r3, #12
 800056a:	18fb      	adds	r3, r7, r3
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
	}
	
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	230c      	movs	r3, #12
 8000572:	18fa      	adds	r2, r7, r3
 8000574:	23a0      	movs	r3, #160	; 0xa0
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f001 f8f8 	bl	8001770 <HAL_GPIO_Init>
}	
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b008      	add	sp, #32
 8000586:	bd80      	pop	{r7, pc}

08000588 <ONE_WIRE_Pin_Write>:
//One Wire pin HIGH/LOW Write
void ONE_WIRE_Pin_Write(bool state)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	0002      	movs	r2, r0
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	701a      	strb	r2, [r3, #0]
	if(state) HAL_GPIO_WritePin(oneWire_PORT, oneWire_PIN, GPIO_PIN_SET);
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d008      	beq.n	80005ae <ONE_WIRE_Pin_Write+0x26>
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <ONE_WIRE_Pin_Write+0x40>)
 800059e:	6818      	ldr	r0, [r3, #0]
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <ONE_WIRE_Pin_Write+0x44>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	2201      	movs	r2, #1
 80005a6:	0019      	movs	r1, r3
 80005a8:	f001 fa7d 	bl	8001aa6 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(oneWire_PORT, oneWire_PIN, GPIO_PIN_RESET);
}
 80005ac:	e007      	b.n	80005be <ONE_WIRE_Pin_Write+0x36>
	else HAL_GPIO_WritePin(oneWire_PORT, oneWire_PIN, GPIO_PIN_RESET);
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <ONE_WIRE_Pin_Write+0x40>)
 80005b0:	6818      	ldr	r0, [r3, #0]
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <ONE_WIRE_Pin_Write+0x44>)
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	2200      	movs	r2, #0
 80005b8:	0019      	movs	r1, r3
 80005ba:	f001 fa74 	bl	8001aa6 <HAL_GPIO_WritePin>
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b002      	add	sp, #8
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	2000008c 	.word	0x2000008c
 80005cc:	20000090 	.word	0x20000090

080005d0 <ONE_WIRE_Pin_Read>:
bool ONE_WIRE_Pin_Read(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	return (1&HAL_GPIO_ReadPin(oneWire_PORT, oneWire_PIN));
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <ONE_WIRE_Pin_Read+0x28>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <ONE_WIRE_Pin_Read+0x2c>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	0019      	movs	r1, r3
 80005de:	0010      	movs	r0, r2
 80005e0:	f001 fa44 	bl	8001a6c <HAL_GPIO_ReadPin>
 80005e4:	0003      	movs	r3, r0
 80005e6:	001a      	movs	r2, r3
 80005e8:	2301      	movs	r3, #1
 80005ea:	4013      	ands	r3, r2
 80005ec:	1e5a      	subs	r2, r3, #1
 80005ee:	4193      	sbcs	r3, r2
 80005f0:	b2db      	uxtb	r3, r3
}
 80005f2:	0018      	movs	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	20000090 	.word	0x20000090

08000600 <DelayMicroSeconds>:

//Microsecond delay
void DelayMicroSeconds(uint32_t uSec)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/7);
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <DelayMicroSeconds+0x38>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	490a      	ldr	r1, [pc, #40]	; (800063c <DelayMicroSeconds+0x3c>)
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff fd8a 	bl	800012c <__udivsi3>
 8000618:	0003      	movs	r3, r0
 800061a:	001a      	movs	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4353      	muls	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	1e5a      	subs	r2, r3, #1
 8000628:	60fa      	str	r2, [r7, #12]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d1fa      	bne.n	8000624 <DelayMicroSeconds+0x24>
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b004      	add	sp, #16
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	006acfc0 	.word	0x006acfc0

08000640 <DHT22_StartAcquisition>:

//DHT Begin function
void DHT22_StartAcquisition(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	//Change data pin mode to OUTPUT
	ONE_WIRE_PinMode(ONE_OUTPUT);
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ff73 	bl	8000530 <ONE_WIRE_PinMode>
	//Put pin LOW
	ONE_WIRE_Pin_Write(0);
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ff9c 	bl	8000588 <ONE_WIRE_Pin_Write>
	//500uSec delay
	DelayMicroSeconds(500);
 8000650:	23fa      	movs	r3, #250	; 0xfa
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff ffd3 	bl	8000600 <DelayMicroSeconds>
	//Bring pin HIGH
	ONE_WIRE_Pin_Write(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f7ff ff94 	bl	8000588 <ONE_WIRE_Pin_Write>
	//30 uSec delay
	DelayMicroSeconds(30);
 8000660:	201e      	movs	r0, #30
 8000662:	f7ff ffcd 	bl	8000600 <DelayMicroSeconds>
	//Set pin as input
	ONE_WIRE_PinMode(ONE_INPUT);
 8000666:	2001      	movs	r0, #1
 8000668:	f7ff ff62 	bl	8000530 <ONE_WIRE_PinMode>
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <DHT22_ReadRaw>:
//Read 5 bytes
void DHT22_ReadRaw(uint8_t *data)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b084      	sub	sp, #16
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
	uint32_t rawBits = 0UL;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
	uint8_t checksumBits=0;
 800067e:	230b      	movs	r3, #11
 8000680:	18fb      	adds	r3, r7, r3
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
	
	DelayMicroSeconds(40);
 8000686:	2028      	movs	r0, #40	; 0x28
 8000688:	f7ff ffba 	bl	8000600 <DelayMicroSeconds>
	while(!ONE_WIRE_Pin_Read());
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	f7ff ff9f 	bl	80005d0 <ONE_WIRE_Pin_Read>
 8000692:	0003      	movs	r3, r0
 8000694:	001a      	movs	r2, r3
 8000696:	2301      	movs	r3, #1
 8000698:	4053      	eors	r3, r2
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f6      	bne.n	800068e <DHT22_ReadRaw+0x1c>
	while(ONE_WIRE_Pin_Read());
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	f7ff ff95 	bl	80005d0 <ONE_WIRE_Pin_Read>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d1fb      	bne.n	80006a2 <DHT22_ReadRaw+0x30>
	for(int8_t i=31; i>=0; i--)
 80006aa:	230a      	movs	r3, #10
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	221f      	movs	r2, #31
 80006b0:	701a      	strb	r2, [r3, #0]
 80006b2:	e028      	b.n	8000706 <DHT22_ReadRaw+0x94>
	{
		while(!ONE_WIRE_Pin_Read());
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	f7ff ff8b 	bl	80005d0 <ONE_WIRE_Pin_Read>
 80006ba:	0003      	movs	r3, r0
 80006bc:	001a      	movs	r2, r3
 80006be:	2301      	movs	r3, #1
 80006c0:	4053      	eors	r3, r2
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1f6      	bne.n	80006b6 <DHT22_ReadRaw+0x44>
		DelayMicroSeconds(40);
 80006c8:	2028      	movs	r0, #40	; 0x28
 80006ca:	f7ff ff99 	bl	8000600 <DelayMicroSeconds>
		if(ONE_WIRE_Pin_Read())
 80006ce:	f7ff ff7f 	bl	80005d0 <ONE_WIRE_Pin_Read>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d009      	beq.n	80006ea <DHT22_ReadRaw+0x78>
		{
			rawBits |= (1UL << i);
 80006d6:	230a      	movs	r3, #10
 80006d8:	18fb      	adds	r3, r7, r3
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	2201      	movs	r2, #1
 80006e0:	409a      	lsls	r2, r3
 80006e2:	0013      	movs	r3, r2
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]
		}
		while(ONE_WIRE_Pin_Read());
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	f7ff ff70 	bl	80005d0 <ONE_WIRE_Pin_Read>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d1fb      	bne.n	80006ec <DHT22_ReadRaw+0x7a>
	for(int8_t i=31; i>=0; i--)
 80006f4:	210a      	movs	r1, #10
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	3b01      	subs	r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	187b      	adds	r3, r7, r1
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	230a      	movs	r3, #10
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b7f      	cmp	r3, #127	; 0x7f
 800070e:	d9d1      	bls.n	80006b4 <DHT22_ReadRaw+0x42>
	}
	
	for(int8_t i=7; i>=0; i--)
 8000710:	2309      	movs	r3, #9
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	2207      	movs	r2, #7
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	e02c      	b.n	8000774 <DHT22_ReadRaw+0x102>
	{
		while(!ONE_WIRE_Pin_Read());
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	f7ff ff58 	bl	80005d0 <ONE_WIRE_Pin_Read>
 8000720:	0003      	movs	r3, r0
 8000722:	001a      	movs	r2, r3
 8000724:	2301      	movs	r3, #1
 8000726:	4053      	eors	r3, r2
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f6      	bne.n	800071c <DHT22_ReadRaw+0xaa>
		DelayMicroSeconds(40);
 800072e:	2028      	movs	r0, #40	; 0x28
 8000730:	f7ff ff66 	bl	8000600 <DelayMicroSeconds>
		if(ONE_WIRE_Pin_Read())
 8000734:	f7ff ff4c 	bl	80005d0 <ONE_WIRE_Pin_Read>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d00d      	beq.n	8000758 <DHT22_ReadRaw+0xe6>
		{
			checksumBits |= (1UL << i);
 800073c:	2309      	movs	r3, #9
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b25b      	sxtb	r3, r3
 8000744:	2201      	movs	r2, #1
 8000746:	409a      	lsls	r2, r3
 8000748:	0013      	movs	r3, r2
 800074a:	b2d9      	uxtb	r1, r3
 800074c:	220b      	movs	r2, #11
 800074e:	18bb      	adds	r3, r7, r2
 8000750:	18ba      	adds	r2, r7, r2
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	430a      	orrs	r2, r1
 8000756:	701a      	strb	r2, [r3, #0]
		}
		while(ONE_WIRE_Pin_Read());
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	f7ff ff39 	bl	80005d0 <ONE_WIRE_Pin_Read>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d1fb      	bne.n	800075a <DHT22_ReadRaw+0xe8>
	for(int8_t i=7; i>=0; i--)
 8000762:	2109      	movs	r1, #9
 8000764:	187b      	adds	r3, r7, r1
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b25b      	sxtb	r3, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	187b      	adds	r3, r7, r1
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	2309      	movs	r3, #9
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b7f      	cmp	r3, #127	; 0x7f
 800077c:	d9cd      	bls.n	800071a <DHT22_ReadRaw+0xa8>
	}
	
	
	//Copy raw data to array of bytes
	data[0] = (rawBits>>24)&0xFF;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	0e1b      	lsrs	r3, r3, #24
 8000782:	b2da      	uxtb	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	701a      	strb	r2, [r3, #0]
	data[1] = (rawBits>>16)&0xFF;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	0c1a      	lsrs	r2, r3, #16
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3301      	adds	r3, #1
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	701a      	strb	r2, [r3, #0]
	data[2] = (rawBits>>8)&0xFF;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	0a1a      	lsrs	r2, r3, #8
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3302      	adds	r3, #2
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	701a      	strb	r2, [r3, #0]
	data[3] = (rawBits>>0)&0xFF;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3303      	adds	r3, #3
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	701a      	strb	r2, [r3, #0]
	data[4] = (checksumBits)&0xFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3304      	adds	r3, #4
 80007ae:	220b      	movs	r2, #11
 80007b0:	18ba      	adds	r2, r7, r2
 80007b2:	7812      	ldrb	r2, [r2, #0]
 80007b4:	701a      	strb	r2, [r3, #0]
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b004      	add	sp, #16
 80007bc:	bd80      	pop	{r7, pc}

080007be <DHT22_GetTemp_Humidity>:

//Get Temperature and Humidity data
bool DHT22_GetTemp_Humidity(uint16_t* Temp, uint16_t* Humidity)
{
 80007be:	b590      	push	{r4, r7, lr}
 80007c0:	b087      	sub	sp, #28
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
	uint8_t dataArray[6], myChecksum;
	uint16_t Temp16, Humid16;

	//Implement Start data Aqcuisition routine
	DHT22_StartAcquisition();
 80007c8:	f7ff ff3a 	bl	8000640 <DHT22_StartAcquisition>

	//Aqcuire raw data
	DHT22_ReadRaw(dataArray);
 80007cc:	240c      	movs	r4, #12
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	0018      	movs	r0, r3
 80007d2:	f7ff ff4e 	bl	8000672 <DHT22_ReadRaw>
	
    Temp16 = (dataArray[2] <<8) | dataArray[3];
 80007d6:	0021      	movs	r1, r4
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	789b      	ldrb	r3, [r3, #2]
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	b21a      	sxth	r2, r3
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	78db      	ldrb	r3, [r3, #3]
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	4313      	orrs	r3, r2
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	2016      	movs	r0, #22
 80007ec:	183b      	adds	r3, r7, r0
 80007ee:	801a      	strh	r2, [r3, #0]
	Humid16 = (dataArray[0] <<8) | dataArray[1];		
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	b21a      	sxth	r2, r3
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	4313      	orrs	r3, r2
 8000800:	b21a      	sxth	r2, r3
 8000802:	2414      	movs	r4, #20
 8000804:	193b      	adds	r3, r7, r4
 8000806:	801a      	strh	r2, [r3, #0]
	*Temp = Temp16/10;
 8000808:	183b      	adds	r3, r7, r0
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	210a      	movs	r1, #10
 800080e:	0018      	movs	r0, r3
 8000810:	f7ff fc8c 	bl	800012c <__udivsi3>
 8000814:	0003      	movs	r3, r0
 8000816:	b29a      	uxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	801a      	strh	r2, [r3, #0]
	*Humidity = Humid16/10;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	210a      	movs	r1, #10
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff fc82 	bl	800012c <__udivsi3>
 8000828:	0003      	movs	r3, r0
 800082a:	b29a      	uxth	r2, r3
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	801a      	strh	r2, [r3, #0]
		*Temp = Temp16/10.0f;
		*Humidity = Humid16/10.0f;
		return 1;
	} */

	return 0;
 8000830:	2300      	movs	r3, #0
 8000832:	0018      	movs	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	b007      	add	sp, #28
 8000838:	bd90      	pop	{r4, r7, pc}

0800083a <set_RS>:
static char byteBuffer[8];

// ----- Private functions ----- 

static void set_RS(int state)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS, state);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	23a0      	movs	r3, #160	; 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	2101      	movs	r1, #1
 800084c:	0018      	movs	r0, r3
 800084e:	f001 f92a 	bl	8001aa6 <HAL_GPIO_WritePin>
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b002      	add	sp, #8
 8000858:	bd80      	pop	{r7, pc}

0800085a <set_RW>:
static void set_RW(int state)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RW, state);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	2102      	movs	r1, #2
 800086c:	0018      	movs	r0, r3
 800086e:	f001 f91a 	bl	8001aa6 <HAL_GPIO_WritePin>
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <set_E>:
static void set_E(int state)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(E, state);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <set_E+0x20>)
 800088e:	0019      	movs	r1, r3
 8000890:	f001 f909 	bl	8001aa6 <HAL_GPIO_WritePin>
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b002      	add	sp, #8
 800089a:	bd80      	pop	{r7, pc}
 800089c:	50000400 	.word	0x50000400

080008a0 <set_DB7>:
static void set_DB7(int state)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB7, state);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <set_DB7+0x20>)
 80008ae:	001a      	movs	r2, r3
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	f001 f8f8 	bl	8001aa6 <HAL_GPIO_WritePin>
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	50000400 	.word	0x50000400

080008c4 <set_DB6>:
static void set_DB6(int state)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB6, state);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <set_DB6+0x20>)
 80008d2:	001a      	movs	r2, r3
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	f001 f8e6 	bl	8001aa6 <HAL_GPIO_WritePin>
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b002      	add	sp, #8
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	50000400 	.word	0x50000400

080008e8 <set_DB5>:
static void set_DB5(int state)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB5, state);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <set_DB5+0x20>)
 80008f6:	001a      	movs	r2, r3
 80008f8:	2120      	movs	r1, #32
 80008fa:	f001 f8d4 	bl	8001aa6 <HAL_GPIO_WritePin>
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	50000400 	.word	0x50000400

0800090c <set_DB4>:
static void set_DB4(int state)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB4, state);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <set_DB4+0x20>)
 800091a:	001a      	movs	r2, r3
 800091c:	2110      	movs	r1, #16
 800091e:	f001 f8c2 	bl	8001aa6 <HAL_GPIO_WritePin>
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	50000400 	.word	0x50000400

08000930 <set_DB3>:
static void set_DB3(int state)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB3, state);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <set_DB3+0x20>)
 800093e:	001a      	movs	r2, r3
 8000940:	2108      	movs	r1, #8
 8000942:	f001 f8b0 	bl	8001aa6 <HAL_GPIO_WritePin>
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	50000400 	.word	0x50000400

08000954 <set_DB2>:
static void set_DB2(int state)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB2, state);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <set_DB2+0x20>)
 8000962:	001a      	movs	r2, r3
 8000964:	2104      	movs	r1, #4
 8000966:	f001 f89e 	bl	8001aa6 <HAL_GPIO_WritePin>
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	50000400 	.word	0x50000400

08000978 <set_DB1>:
static void set_DB1(int state)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB1, state);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <set_DB1+0x20>)
 8000986:	001a      	movs	r2, r3
 8000988:	2102      	movs	r1, #2
 800098a:	f001 f88c 	bl	8001aa6 <HAL_GPIO_WritePin>
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	50000400 	.word	0x50000400

0800099c <set_DB0>:
static void set_DB0(int state)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DB0, state);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <set_DB0+0x20>)
 80009aa:	001a      	movs	r2, r3
 80009ac:	2101      	movs	r1, #1
 80009ae:	f001 f87a 	bl	8001aa6 <HAL_GPIO_WritePin>
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	50000400 	.word	0x50000400

080009c0 <get_DB7>:

static int get_DB7()
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
    GPIO_PinState state = HAL_GPIO_ReadPin(DB7);
 80009c6:	1dfc      	adds	r4, r7, #7
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <get_DB7+0x2c>)
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 f84d 	bl	8001a6c <HAL_GPIO_ReadPin>
 80009d2:	0003      	movs	r3, r0
 80009d4:	7023      	strb	r3, [r4, #0]
    if(state == GPIO_PIN_SET)
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d101      	bne.n	80009e2 <get_DB7+0x22>
        return 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <get_DB7+0x24>
    else
        return 0;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b003      	add	sp, #12
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	50000400 	.word	0x50000400

080009f0 <sendEnable>:

static void sendEnable()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
    set_E(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff ff40 	bl	800087c <set_E>

    //Wait atleast 2 ticks
    uint32_t tick_start = HAL_GetTick();
 80009fc:	f000 fdac 	bl	8001558 <HAL_GetTick>
 8000a00:	0003      	movs	r3, r0
 8000a02:	607b      	str	r3, [r7, #4]
    while((HAL_GetTick() - tick_start) <= 2){}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	f000 fda7 	bl	8001558 <HAL_GetTick>
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d9f8      	bls.n	8000a06 <sendEnable+0x16>

    set_E(0);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ff31 	bl	800087c <set_E>
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <waitForBusyFlag>:
static void waitForBusyFlag()
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
    set_RS(0);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f7ff ff06 	bl	800083a <set_RS>
    set_RW(1);
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff ff13 	bl	800085a <set_RW>
    sendEnable();    
 8000a34:	f7ff ffdc 	bl	80009f0 <sendEnable>

    int val = 1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
    while(val != 0)
 8000a3c:	e003      	b.n	8000a46 <waitForBusyFlag+0x24>
    {
        val = get_DB7(); //Get busy flag
 8000a3e:	f7ff ffbf 	bl	80009c0 <get_DB7>
 8000a42:	0003      	movs	r3, r0
 8000a44:	607b      	str	r3, [r7, #4]
    while(val != 0)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1f8      	bne.n	8000a3e <waitForBusyFlag+0x1c>
    }
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <sendCommand>:
static void sendCommand()
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
    sendEnable();
 8000a5a:	f7ff ffc9 	bl	80009f0 <sendEnable>
    waitForBusyFlag();
 8000a5e:	f7ff ffe0 	bl	8000a22 <waitForBusyFlag>
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <charToByteBuffer>:
static void charToByteBuffer(char c)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	0002      	movs	r2, r0
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 8000a74:	230f      	movs	r3, #15
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e017      	b.n	8000aae <charToByteBuffer+0x46>
    {
        char val = (c >> i) & 0x01;
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	200f      	movs	r0, #15
 8000a84:	183b      	adds	r3, r7, r0
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	411a      	asrs	r2, r3
 8000a8a:	0013      	movs	r3, r2
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	240e      	movs	r4, #14
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2101      	movs	r1, #1
 8000a94:	400a      	ands	r2, r1
 8000a96:	701a      	strb	r2, [r3, #0]
        byteBuffer[i] = val;
 8000a98:	183b      	adds	r3, r7, r0
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <charToByteBuffer+0x5c>)
 8000a9e:	1939      	adds	r1, r7, r4
 8000aa0:	7809      	ldrb	r1, [r1, #0]
 8000aa2:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0; i < 8; i++)
 8000aa4:	183b      	adds	r3, r7, r0
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	183b      	adds	r3, r7, r0
 8000aaa:	3201      	adds	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	230f      	movs	r3, #15
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b07      	cmp	r3, #7
 8000ab6:	d9e2      	bls.n	8000a7e <charToByteBuffer+0x16>
    }
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b005      	add	sp, #20
 8000ac0:	bd90      	pop	{r4, r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	20000094 	.word	0x20000094

08000ac8 <sendByteBuffer>:
static void sendByteBuffer()
{    
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
    //Write data
    set_RS(1);
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f7ff feb3 	bl	800083a <set_RS>
    set_RW(0);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff fec0 	bl	800085a <set_RW>

    //Address to write to correct pin
    uint16_t address = 0x0001;
 8000ada:	1dbb      	adds	r3, r7, #6
 8000adc:	2201      	movs	r2, #1
 8000ade:	801a      	strh	r2, [r3, #0]

    for(uint8_t i = 0; i < 8; i++)
 8000ae0:	1d7b      	adds	r3, r7, #5
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	e017      	b.n	8000b18 <sendByteBuffer+0x50>
    {        
        char val = byteBuffer[i];
 8000ae8:	1d7b      	adds	r3, r7, #5
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	490f      	ldr	r1, [pc, #60]	; (8000b2c <sendByteBuffer+0x64>)
 8000af0:	5c8a      	ldrb	r2, [r1, r2]
 8000af2:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, address, (int)val); 
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	781a      	ldrb	r2, [r3, #0]
 8000af8:	1dbb      	adds	r3, r7, #6
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <sendByteBuffer+0x68>)
 8000afe:	0019      	movs	r1, r3
 8000b00:	f000 ffd1 	bl	8001aa6 <HAL_GPIO_WritePin>
        address = address << 1; //Go to next pin
 8000b04:	1dba      	adds	r2, r7, #6
 8000b06:	1dbb      	adds	r3, r7, #6
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	18db      	adds	r3, r3, r3
 8000b0c:	8013      	strh	r3, [r2, #0]
    for(uint8_t i = 0; i < 8; i++)
 8000b0e:	1d7b      	adds	r3, r7, #5
 8000b10:	781a      	ldrb	r2, [r3, #0]
 8000b12:	1d7b      	adds	r3, r7, #5
 8000b14:	3201      	adds	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	1d7b      	adds	r3, r7, #5
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b07      	cmp	r3, #7
 8000b1e:	d9e3      	bls.n	8000ae8 <sendByteBuffer+0x20>
    }
    sendCommand();
 8000b20:	f7ff ff99 	bl	8000a56 <sendCommand>
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b002      	add	sp, #8
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000094 	.word	0x20000094
 8000b30:	50000400 	.word	0x50000400

08000b34 <LCD_Init>:

// ----- Public Functions ----- 

void LCD_Init()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
    //Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	2314      	movs	r3, #20
 8000b40:	001a      	movs	r2, r3
 8000b42:	2100      	movs	r1, #0
 8000b44:	f002 fe2e 	bl	80037a4 <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2201      	movs	r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	1d3a      	adds	r2, r7, #4
 8000b62:	23a0      	movs	r3, #160	; 0xa0
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	0011      	movs	r1, r2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 fe01 	bl	8001770 <HAL_GPIO_Init>

	//Initialize all Output-Pins of Port B
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <LCD_Init+0xac>)
 8000b72:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2201      	movs	r2, #1
 8000b78:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2201      	movs	r2, #1
 8000b84:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <LCD_Init+0xb0>)
 8000b8a:	0019      	movs	r1, r3
 8000b8c:	0010      	movs	r0, r2
 8000b8e:	f000 fdef 	bl	8001770 <HAL_GPIO_Init>

    //Wait after startup
    HAL_Delay(16);
 8000b92:	2010      	movs	r0, #16
 8000b94:	f000 fcea 	bl	800156c <HAL_Delay>

    //Reset everything
    set_RS(0);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff fe4e 	bl	800083a <set_RS>
    set_RW(0);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fe5b 	bl	800085a <set_RW>
    set_DB7(0);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff fe7b 	bl	80008a0 <set_DB7>
    set_DB6(0);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff fe8a 	bl	80008c4 <set_DB6>
    set_DB5(0);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fe99 	bl	80008e8 <set_DB5>
    set_DB4(0);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f7ff fea8 	bl	800090c <set_DB4>
    set_DB3(0);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff feb7 	bl	8000930 <set_DB3>
    set_DB2(0);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f7ff fec6 	bl	8000954 <set_DB2>
    set_DB1(0);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fed5 	bl	8000978 <set_DB1>
    set_DB0(0);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fee4 	bl	800099c <set_DB0>

    sendCommand();
 8000bd4:	f7ff ff3f 	bl	8000a56 <sendCommand>
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b006      	add	sp, #24
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	000001ff 	.word	0x000001ff
 8000be4:	50000400 	.word	0x50000400

08000be8 <LCD_Set8BitMode>:

void LCD_Set8BitMode()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    set_RS(0);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fe24 	bl	800083a <set_RS>
    set_RW(0);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fe31 	bl	800085a <set_RW>

    set_DB7(0);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fe51 	bl	80008a0 <set_DB7>
    set_DB6(0);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff fe60 	bl	80008c4 <set_DB6>
    set_DB5(1); //Configure Function Set
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fe6f 	bl	80008e8 <set_DB5>
    set_DB4(1); //8-Bit or 4-Bit
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f7ff fe7e 	bl	800090c <set_DB4>
    set_DB3(1); //2 Lines or 1 Line
 8000c10:	2001      	movs	r0, #1
 8000c12:	f7ff fe8d 	bl	8000930 <set_DB3>
    set_DB2(0); //5x11 or 5x8 Pixel
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fe9c 	bl	8000954 <set_DB2>
    set_DB1(0);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff feab 	bl	8000978 <set_DB1>
    set_DB0(0);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff feba 	bl	800099c <set_DB0>

    sendCommand();
 8000c28:	f7ff ff15 	bl	8000a56 <sendCommand>
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <LCD_ClearDisplay>:

void LCD_ClearDisplay()
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
    set_RS(0);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff fdff 	bl	800083a <set_RS>
    set_RW(0);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fe0c 	bl	800085a <set_RW>

    set_DB7(0);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff fe2c 	bl	80008a0 <set_DB7>
    set_DB6(0);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff fe3b 	bl	80008c4 <set_DB6>
    set_DB5(0);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fe4a 	bl	80008e8 <set_DB5>
    set_DB4(0);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff fe59 	bl	800090c <set_DB4>
    set_DB3(0);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fe68 	bl	8000930 <set_DB3>
    set_DB2(0);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff fe77 	bl	8000954 <set_DB2>
    set_DB1(0);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fe86 	bl	8000978 <set_DB1>
    set_DB0(1);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff fe95 	bl	800099c <set_DB0>

    sendCommand();
 8000c72:	f7ff fef0 	bl	8000a56 <sendCommand>
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <LCD_ReturnHome>:

void LCD_ReturnHome()
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
    set_RS(0);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fdda 	bl	800083a <set_RS>
    set_RW(0);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff fde7 	bl	800085a <set_RW>

    set_DB7(0);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff fe07 	bl	80008a0 <set_DB7>
    set_DB6(0);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff fe16 	bl	80008c4 <set_DB6>
    set_DB5(0);
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f7ff fe25 	bl	80008e8 <set_DB5>
    set_DB4(0);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff fe34 	bl	800090c <set_DB4>
    set_DB3(0);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fe43 	bl	8000930 <set_DB3>
    set_DB2(0);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fe52 	bl	8000954 <set_DB2>
    set_DB1(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fe61 	bl	8000978 <set_DB1>
    set_DB0(0);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff fe70 	bl	800099c <set_DB0>

    sendCommand();
 8000cbc:	f7ff fecb 	bl	8000a56 <sendCommand>
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <LCD_TurnDisplayOn>:

void LCD_TurnDisplayOn()
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
    set_RS(0);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fdb5 	bl	800083a <set_RS>
    set_RW(0);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff fdc2 	bl	800085a <set_RW>

    set_DB7(0);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fde2 	bl	80008a0 <set_DB7>
    set_DB6(0);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fdf1 	bl	80008c4 <set_DB6>
    set_DB5(0);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff fe00 	bl	80008e8 <set_DB5>
    set_DB4(0);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff fe0f 	bl	800090c <set_DB4>
    set_DB3(1); //Configure Display
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff fe1e 	bl	8000930 <set_DB3>
    set_DB2(1); //Turn On/Off
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff fe2d 	bl	8000954 <set_DB2>
    set_DB1(0); //Cursor settings
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fe3c 	bl	8000978 <set_DB1>
    set_DB0(0); //Cursor settings
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fe4b 	bl	800099c <set_DB0>

    sendCommand();
 8000d06:	f7ff fea6 	bl	8000a56 <sendCommand>
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <LCD_Print>:
    charToByteBuffer(c);
    sendByteBuffer();
}

void LCD_Print(const char* string)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    //Iterate over every character     
    for(int i = 0; i < strlen(string); i++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	e00b      	b.n	8000d36 <LCD_Print+0x26>
    {
        charToByteBuffer(string[i]); //Get binary representation of the character
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	18d3      	adds	r3, r2, r3
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff fe9e 	bl	8000a68 <charToByteBuffer>
        sendByteBuffer(); //Set pins accordingly
 8000d2c:	f7ff fecc 	bl	8000ac8 <sendByteBuffer>
    for(int i = 0; i < strlen(string); i++)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3301      	adds	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff f9e5 	bl	8000108 <strlen>
 8000d3e:	0002      	movs	r2, r0
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d8eb      	bhi.n	8000d1e <LCD_Print+0xe>
    }    
}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b004      	add	sp, #16
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <LCD_printf>:

void LCD_printf(const char* format, ...)
{
 8000d50:	b40f      	push	{r0, r1, r2, r3}
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b0c2      	sub	sp, #264	; 0x108
 8000d56:	af00      	add	r7, sp, #0
	va_list args;
	char buffer[256];	
	memset(buffer, 0, 256);
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	005a      	lsls	r2, r3, #1
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2100      	movs	r1, #0
 8000d60:	0018      	movs	r0, r3
 8000d62:	f002 fd1f 	bl	80037a4 <memset>

	va_start(args, format);	
 8000d66:	238a      	movs	r3, #138	; 0x8a
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	1d7a      	adds	r2, r7, #5
 8000d6e:	32ff      	adds	r2, #255	; 0xff
 8000d70:	6013      	str	r3, [r2, #0]
	vsprintf(buffer, format, args);
 8000d72:	1d7b      	adds	r3, r7, #5
 8000d74:	33ff      	adds	r3, #255	; 0xff
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2388      	movs	r3, #136	; 0x88
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	0018      	movs	r0, r3
 8000d84:	f002 fd2c 	bl	80037e0 <vsiprintf>
	LCD_Print(buffer);
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff ffc0 	bl	8000d10 <LCD_Print>
	va_end(args);
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b042      	add	sp, #264	; 0x108
 8000d96:	bc80      	pop	{r7}
 8000d98:	bc08      	pop	{r3}
 8000d9a:	b004      	add	sp, #16
 8000d9c:	4718      	bx	r3
	...

08000da0 <SystemClock_Config>:
UART_HandleTypeDef huart2;

// ----- Functions ----- 

static void SystemClock_Config(void)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b093      	sub	sp, #76	; 0x4c
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	2414      	movs	r4, #20
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	0018      	movs	r0, r3
 8000dac:	2334      	movs	r3, #52	; 0x34
 8000dae:	001a      	movs	r2, r3
 8000db0:	2100      	movs	r1, #0
 8000db2:	f002 fcf7 	bl	80037a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db6:	003b      	movs	r3, r7
 8000db8:	0018      	movs	r0, r3
 8000dba:	2314      	movs	r3, #20
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f002 fcf0 	bl	80037a4 <memset>

  //Configure the main internal regulator output voltage
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc4:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <SystemClock_Config+0xa8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <SystemClock_Config+0xac>)
 8000dca:	401a      	ands	r2, r3
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <SystemClock_Config+0xa8>)
 8000dce:	2180      	movs	r1, #128	; 0x80
 8000dd0:	0109      	lsls	r1, r1, #4
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]

  //Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dd6:	0021      	movs	r1, r4
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2210      	movs	r2, #16
 8000ddc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2201      	movs	r2, #1
 8000de2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	22a0      	movs	r2, #160	; 0xa0
 8000dee:	0212      	lsls	r2, r2, #8
 8000df0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 fe8c 	bl	8001b18 <HAL_RCC_OscConfig>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d003      	beq.n	8000e0c <SystemClock_Config+0x6c>
  {
    UT_Error_Handler("HAL_RCC_OscConfig failed!");
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <SystemClock_Config+0xb0>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 faf2 	bl	80013f0 <UT_Error_Handler>
  }
  
  //Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	220f      	movs	r2, #15
 8000e10:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e12:	003b      	movs	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e18:	003b      	movs	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	003b      	movs	r3, r7
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e24:	003b      	movs	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f001 f9ee 	bl	8002210 <HAL_RCC_ClockConfig>
 8000e34:	1e03      	subs	r3, r0, #0
 8000e36:	d003      	beq.n	8000e40 <SystemClock_Config+0xa0>
  {
    UT_Error_Handler("HAL_RCC_ClockConfig failed!");
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemClock_Config+0xb4>)
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 fad8 	bl	80013f0 <UT_Error_Handler>
  }
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b013      	add	sp, #76	; 0x4c
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	40007000 	.word	0x40007000
 8000e4c:	ffffe7ff 	.word	0xffffe7ff
 8000e50:	0800401c 	.word	0x0800401c
 8000e54:	08004038 	.word	0x08004038

08000e58 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e5e:	4a16      	ldr	r2, [pc, #88]	; (8000eb8 <MX_USART2_UART_Init+0x60>)
 8000e60:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e64:	22e1      	movs	r2, #225	; 0xe1
 8000e66:	0252      	lsls	r2, r2, #9
 8000e68:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 ff7f 	bl	8002da0 <HAL_UART_Init>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d003      	beq.n	8000eae <MX_USART2_UART_Init+0x56>
	{
		UT_Error_Handler("HAL_UART_Init failed!");
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <MX_USART2_UART_Init+0x64>)
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f000 faa1 	bl	80013f0 <UT_Error_Handler>
	}
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200000ec 	.word	0x200000ec
 8000eb8:	40004400 	.word	0x40004400
 8000ebc:	08004054 	.word	0x08004054

08000ec0 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	0018      	movs	r0, r3
 8000ecc:	2310      	movs	r3, #16
 8000ece:	001a      	movs	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f002 fc67 	bl	80037a4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	0018      	movs	r0, r3
 8000eda:	2308      	movs	r3, #8
 8000edc:	001a      	movs	r2, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f002 fc60 	bl	80037a4 <memset>

	//Configure timer 2
	htim2.Instance = TIM2;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <MX_TIM2_Init+0xb4>)
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	05d2      	lsls	r2, r2, #23
 8000eea:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 209; //2.097 MHZ divided by 209 results in 10000 oscillations per second
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_TIM2_Init+0xb4>)
 8000eee:	22d1      	movs	r2, #209	; 0xd1
 8000ef0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <MX_TIM2_Init+0xb4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100; //Counter goes up to 100, then starts anew. This results in 100 counter restarts per second (every 10ms)
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_TIM2_Init+0xb4>)
 8000efa:	2264      	movs	r2, #100	; 0x64
 8000efc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_TIM2_Init+0xb4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_TIM2_Init+0xb4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_TIM2_Init+0xb4>)
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f001 fba3 	bl	8002658 <HAL_TIM_Base_Init>
 8000f12:	1e03      	subs	r3, r0, #0
 8000f14:	d003      	beq.n	8000f1e <MX_TIM2_Init+0x5e>
	{
		UT_Error_Handler("HAL_TIM_Base_Init failed!");
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MX_TIM2_Init+0xb8>)
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 fa69 	bl	80013f0 <UT_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; //Use internal clock as a clock source (at 2 MHZ, max. 32 MHZ)
 8000f1e:	2108      	movs	r1, #8
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	0152      	lsls	r2, r2, #5
 8000f26:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f28:	187a      	adds	r2, r7, r1
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_TIM2_Init+0xb4>)
 8000f2c:	0011      	movs	r1, r2
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f001 fd06 	bl	8002940 <HAL_TIM_ConfigClockSource>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d003      	beq.n	8000f40 <MX_TIM2_Init+0x80>
	{
		UT_Error_Handler("HAL_TIM_ConfigClockSource failed!");
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <MX_TIM2_Init+0xbc>)
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 fa58 	bl	80013f0 <UT_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f40:	003b      	movs	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	003b      	movs	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4c:	003a      	movs	r2, r7
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_TIM2_Init+0xb4>)
 8000f50:	0011      	movs	r1, r2
 8000f52:	0018      	movs	r0, r3
 8000f54:	f001 fecc 	bl	8002cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	1e03      	subs	r3, r0, #0
 8000f5a:	d003      	beq.n	8000f64 <MX_TIM2_Init+0xa4>
	{
		UT_Error_Handler("HAL_TIMEx_MasterConfigSynchronization failed!");
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_TIM2_Init+0xc0>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 fa46 	bl	80013f0 <UT_Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim2);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <MX_TIM2_Init+0xb4>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 f93a 	bl	80011e0 <HAL_TIM_MspPostInit>
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b006      	add	sp, #24
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000ac 	.word	0x200000ac
 8000f78:	0800406c 	.word	0x0800406c
 8000f7c:	08004088 	.word	0x08004088
 8000f80:	080040ac 	.word	0x080040ac

08000f84 <Port_Init>:

static void Port_Init(void)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b08b      	sub	sp, #44	; 0x2c
 8000f88:	af00      	add	r7, sp, #0
	//Enable GPIO Ports Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b31      	ldr	r3, [pc, #196]	; (8001050 <Port_Init+0xcc>)
 8000f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <Port_Init+0xcc>)
 8000f90:	2101      	movs	r1, #1
 8000f92:	430a      	orrs	r2, r1
 8000f94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f96:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <Port_Init+0xcc>)
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <Port_Init+0xcc>)
 8000fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <Port_Init+0xcc>)
 8000fa8:	2102      	movs	r1, #2
 8000faa:	430a      	orrs	r2, r1
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <Port_Init+0xcc>)
 8000fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <Port_Init+0xcc>)
 8000fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <Port_Init+0xcc>)
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <Port_Init+0xcc>)
 8000fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fca:	2204      	movs	r2, #4
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <Port_Init+0xcc>)
 8000fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <Port_Init+0xcc>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <Port_Init+0xcc>)
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

	//Create init struct
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	2414      	movs	r4, #20
 8000fec:	193b      	adds	r3, r7, r4
 8000fee:	0018      	movs	r0, r3
 8000ff0:	2314      	movs	r3, #20
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	f002 fbd5 	bl	80037a4 <memset>

	//Initialize all Output-Pins of Port A
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	193b      	adds	r3, r7, r4
 8001002:	2201      	movs	r2, #1
 8001004:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	193b      	adds	r3, r7, r4
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800100c:	193b      	adds	r3, r7, r4
 800100e:	2201      	movs	r2, #1
 8001010:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	193a      	adds	r2, r7, r4
 8001014:	23a0      	movs	r3, #160	; 0xa0
 8001016:	05db      	lsls	r3, r3, #23
 8001018:	0011      	movs	r1, r2
 800101a:	0018      	movs	r0, r3
 800101c:	f000 fba8 	bl	8001770 <HAL_GPIO_Init>

	//Initialize all Output-Pins of Port C
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001020:	0021      	movs	r1, r4
 8001022:	187b      	adds	r3, r7, r1
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	0192      	lsls	r2, r2, #6
 8001028:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	187b      	adds	r3, r7, r1
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	187b      	adds	r3, r7, r1
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <Port_Init+0xd0>)
 8001040:	0019      	movs	r1, r3
 8001042:	0010      	movs	r0, r2
 8001044:	f000 fb94 	bl	8001770 <HAL_GPIO_Init>
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b00b      	add	sp, #44	; 0x2c
 800104e:	bd90      	pop	{r4, r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	50000800 	.word	0x50000800

08001058 <HAL_TIM_PeriodElapsedCallback>:

//Timed interupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{	
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	//Variables to keep track of the time
	static unsigned int elapsedTime = 0;
	
	//Check if 1 sec. elapsed
	if((elapsedTime % 1000) == 0)
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	22fa      	movs	r2, #250	; 0xfa
 8001066:	0091      	lsls	r1, r2, #2
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff f8e5 	bl	8000238 <__aeabi_uidivmod>
 800106e:	1e0b      	subs	r3, r1, #0
 8001070:	d105      	bne.n	800107e <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		//Toggle Onboard-LED (1 sec. on and 1 sec. off)
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	
 8001072:	23a0      	movs	r3, #160	; 0xa0
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	2120      	movs	r1, #32
 8001078:	0018      	movs	r0, r3
 800107a:	f000 fd31 	bl	8001ae0 <HAL_GPIO_TogglePin>
	}

	//Check if 200 mSec. elapsed
	if((elapsedTime % 200) == 0)
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	21c8      	movs	r1, #200	; 0xc8
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff f8d7 	bl	8000238 <__aeabi_uidivmod>
 800108a:	1e0b      	subs	r3, r1, #0
 800108c:	d106      	bne.n	800109c <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == 0)
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	019b      	lsls	r3, r3, #6
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001094:	0019      	movs	r1, r3
 8001096:	0010      	movs	r0, r2
 8001098:	f000 fce8 	bl	8001a6c <HAL_GPIO_ReadPin>
			//UT_printf("Pressed!");
		}
	}	

	//Increment elapsed time
	elapsedTime += 10;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	330a      	adds	r3, #10
 80010a2:	001a      	movs	r2, r3
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010a6:	601a      	str	r2, [r3, #0]

	if(elapsedTime > 1000)
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	23fa      	movs	r3, #250	; 0xfa
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d905      	bls.n	80010c0 <HAL_TIM_PeriodElapsedCallback+0x68>
		elapsedTime -= 1000;
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80010ba:	189a      	adds	r2, r3, r2
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010be:	601a      	str	r2, [r3, #0]
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000009c 	.word	0x2000009c
 80010cc:	50000800 	.word	0x50000800
 80010d0:	fffffc18 	.word	0xfffffc18

080010d4 <main>:

int main(void)
{		
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	//Init stuff
	HAL_Init();
 80010da:	f000 f9d7 	bl	800148c <HAL_Init>
	SystemClock_Config();
 80010de:	f7ff fe5f 	bl	8000da0 <SystemClock_Config>
	Port_Init();
 80010e2:	f7ff ff4f 	bl	8000f84 <Port_Init>
	MX_TIM2_Init();
 80010e6:	f7ff feeb 	bl	8000ec0 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);	
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <main+0x98>)
 80010ec:	0018      	movs	r0, r3
 80010ee:	f001 faf3 	bl	80026d8 <HAL_TIM_Base_Start_IT>
	MX_USART2_UART_Init();
 80010f2:	f7ff feb1 	bl	8000e58 <MX_USART2_UART_Init>

	//LCD stuff
	LCD_Init();
 80010f6:	f7ff fd1d 	bl	8000b34 <LCD_Init>
	LCD_Set8BitMode();
 80010fa:	f7ff fd75 	bl	8000be8 <LCD_Set8BitMode>
	LCD_ClearDisplay();
 80010fe:	f7ff fd98 	bl	8000c32 <LCD_ClearDisplay>
	LCD_ReturnHome();
 8001102:	f7ff fdbb 	bl	8000c7c <LCD_ReturnHome>
	LCD_TurnDisplayOn();
 8001106:	f7ff fdde 	bl	8000cc6 <LCD_TurnDisplayOn>
	LCD_printf("Value = %d", 999);
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <main+0x9c>)
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <main+0xa0>)
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff fe1d 	bl	8000d50 <LCD_printf>

	//DHT stuff
	DHT22_Init(GPIOA, GPIO_PIN_6);
 8001116:	23a0      	movs	r3, #160	; 0xa0
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	2140      	movs	r1, #64	; 0x40
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff f9cf 	bl	80004c0 <DHT22_Init>
	//DHT_Init();
	
	uint16_t counter = 0;
 8001122:	1dbb      	adds	r3, r7, #6
 8001124:	2200      	movs	r2, #0
 8001126:	801a      	strh	r2, [r3, #0]
	uint16_t temp = 0, hum = 0;
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	801a      	strh	r2, [r3, #0]
 800112e:	1cbb      	adds	r3, r7, #2
 8001130:	2200      	movs	r2, #0
 8001132:	801a      	strh	r2, [r3, #0]

	while (1)
	{		
		counter++;
 8001134:	1dbb      	adds	r3, r7, #6
 8001136:	881a      	ldrh	r2, [r3, #0]
 8001138:	1dbb      	adds	r3, r7, #6
 800113a:	3201      	adds	r2, #1
 800113c:	801a      	strh	r2, [r3, #0]
		DHT22_GetTemp_Humidity(&temp, &hum);
 800113e:	1cba      	adds	r2, r7, #2
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	0011      	movs	r1, r2
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff fb3a 	bl	80007be <DHT22_GetTemp_Humidity>
		//UT_printf("Temp: %f, Hum: %f\r\n", temp, hum);
		
		UT_printf("%d. Messung:\r\nTemp: %d\r\nHum: %d\r\n\n", counter, temp, hum);	
 800114a:	1dbb      	adds	r3, r7, #6
 800114c:	8819      	ldrh	r1, [r3, #0]
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	001a      	movs	r2, r3
 8001154:	1cbb      	adds	r3, r7, #2
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	4807      	ldr	r0, [pc, #28]	; (8001178 <main+0xa4>)
 800115a:	f000 f92b 	bl	80013b4 <UT_printf>

		HAL_Delay(2000);
 800115e:	23fa      	movs	r3, #250	; 0xfa
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	0018      	movs	r0, r3
 8001164:	f000 fa02 	bl	800156c <HAL_Delay>
		counter++;
 8001168:	e7e4      	b.n	8001134 <main+0x60>
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	200000ac 	.word	0x200000ac
 8001170:	000003e7 	.word	0x000003e7
 8001174:	080040dc 	.word	0x080040dc
 8001178:	080040e8 	.word	0x080040e8

0800117c <HAL_MspInit>:
#include "main.h"

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void HAL_MspInit(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <HAL_MspInit+0x24>)
 8001182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_MspInit+0x24>)
 8001186:	2101      	movs	r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <HAL_MspInit+0x24>)
 800118e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_MspInit+0x24>)
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	0549      	lsls	r1, r1, #21
 8001196:	430a      	orrs	r2, r1
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000

080011a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d10d      	bne.n	80011d4 <HAL_TIM_Base_MspInit+0x30>
  {
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_TIM_Base_MspInit+0x38>)
 80011ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_TIM_Base_MspInit+0x38>)
 80011be:	2101      	movs	r1, #1
 80011c0:	430a      	orrs	r2, r1
 80011c2:	639a      	str	r2, [r3, #56]	; 0x38

    //TIM2 interrupt Init
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2100      	movs	r1, #0
 80011c8:	200f      	movs	r0, #15
 80011ca:	f000 fa9f 	bl	800170c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ce:	200f      	movs	r0, #15
 80011d0:	f000 fab1 	bl	8001736 <HAL_NVIC_EnableIRQ>
  }
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000

080011e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	240c      	movs	r4, #12
 80011ea:	193b      	adds	r3, r7, r4
 80011ec:	0018      	movs	r0, r3
 80011ee:	2314      	movs	r3, #20
 80011f0:	001a      	movs	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	f002 fad6 	bl	80037a4 <memset>
  if(htim->Instance==TIM2)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	05db      	lsls	r3, r3, #23
 8001200:	429a      	cmp	r2, r3
 8001202:	d123      	bne.n	800124c <HAL_TIM_MspPostInit+0x6c>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_TIM_MspPostInit+0x74>)
 8001206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_TIM_MspPostInit+0x74>)
 800120a:	2101      	movs	r1, #1
 800120c:	430a      	orrs	r2, r1
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_TIM_MspPostInit+0x74>)
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	2201      	movs	r2, #1
 8001216:	4013      	ands	r3, r2
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]

    //TIM2 GPIO Configuration - PA15 ------> TIM2_CH1
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800121c:	193b      	adds	r3, r7, r4
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	0212      	lsls	r2, r2, #8
 8001222:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	0021      	movs	r1, r4
 8001226:	187b      	adds	r3, r7, r1
 8001228:	2202      	movs	r2, #2
 800122a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2205      	movs	r2, #5
 800123c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	187a      	adds	r2, r7, r1
 8001240:	23a0      	movs	r3, #160	; 0xa0
 8001242:	05db      	lsls	r3, r3, #23
 8001244:	0011      	movs	r1, r2
 8001246:	0018      	movs	r0, r3
 8001248:	f000 fa92 	bl	8001770 <HAL_GPIO_Init>
  }
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b009      	add	sp, #36	; 0x24
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_UART_MspInit>:
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	240c      	movs	r4, #12
 8001262:	193b      	adds	r3, r7, r4
 8001264:	0018      	movs	r0, r3
 8001266:	2314      	movs	r3, #20
 8001268:	001a      	movs	r2, r3
 800126a:	2100      	movs	r1, #0
 800126c:	f002 fa9a 	bl	80037a4 <memset>
  if(huart->Instance==USART2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <HAL_UART_MspInit+0x68>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d11d      	bne.n	80012b6 <HAL_UART_MspInit+0x5e>
  {
    __HAL_RCC_USART2_CLK_ENABLE();
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_UART_MspInit+0x6c>)
 800127c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <HAL_UART_MspInit+0x6c>)
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	0289      	lsls	r1, r1, #10
 8001284:	430a      	orrs	r2, r1
 8001286:	639a      	str	r2, [r3, #56]	; 0x38

    //USART2 GPIO Configuration
    //PA2     ------> USART2_TX
    //PA3     ------> USART2_RX
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001288:	0021      	movs	r1, r4
 800128a:	187b      	adds	r3, r7, r1
 800128c:	220c      	movs	r2, #12
 800128e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2202      	movs	r2, #2
 8001294:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	187b      	adds	r3, r7, r1
 800129e:	2203      	movs	r2, #3
 80012a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2204      	movs	r2, #4
 80012a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	187a      	adds	r2, r7, r1
 80012aa:	23a0      	movs	r3, #160	; 0xa0
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	0011      	movs	r1, r2
 80012b0:	0018      	movs	r0, r3
 80012b2:	f000 fa5d 	bl	8001770 <HAL_GPIO_Init>
  }
}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b009      	add	sp, #36	; 0x24
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	40004400 	.word	0x40004400
 80012c4:	40021000 	.word	0x40021000

080012c8 <NMI_Handler>:
#include "stm32l0xx_it.h"

extern TIM_HandleTypeDef htim2;

void NMI_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>

080012ce <HardFault_Handler>:

  }
}

void HardFault_Handler(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <PendSV_Handler>:


void PendSV_Handler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0

}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80012ec:	f000 f922 	bl	8001534 <HAL_IncTick>
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <TIM2_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l0xx.s).                    */
/******************************************************************************/

void TIM2_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <TIM2_IRQHandler+0x14>)
 80012fe:	0018      	movs	r0, r3
 8001300:	f001 fa36 	bl	8002770 <HAL_TIM_IRQHandler>
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	200000ac 	.word	0x200000ac

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	18d3      	adds	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f002 fa06 	bl	8003750 <__errno>
 8001344:	0003      	movs	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	2301      	movs	r3, #1
 800134c:	425b      	negs	r3, r3
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	18d2      	adds	r2, r2, r3
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <_sbrk+0x64>)
 8001360:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b006      	add	sp, #24
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20005000 	.word	0x20005000
 8001370:	00000400 	.word	0x00000400
 8001374:	200000a0 	.word	0x200000a0
 8001378:	20000188 	.word	0x20000188

0800137c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <send_to_UART>:
#include "utility.h"

void send_to_UART(char* msg)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0018      	movs	r0, r3
 8001394:	f7fe feb8 	bl	8000108 <strlen>
 8001398:	0003      	movs	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	2301      	movs	r3, #1
 800139e:	425b      	negs	r3, r3
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	4803      	ldr	r0, [pc, #12]	; (80013b0 <send_to_UART+0x28>)
 80013a4:	f001 fd50 	bl	8002e48 <HAL_UART_Transmit>
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200000ec 	.word	0x200000ec

080013b4 <UT_printf>:

void UT_printf(const char* format, ...)
{
 80013b4:	b40f      	push	{r0, r1, r2, r3}
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b08a      	sub	sp, #40	; 0x28
 80013ba:	af00      	add	r7, sp, #0
	va_list args;
	char buffer[32];	
	memset(buffer, 0, 32);
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2220      	movs	r2, #32
 80013c0:	2100      	movs	r1, #0
 80013c2:	0018      	movs	r0, r3
 80013c4:	f002 f9ee 	bl	80037a4 <memset>

	va_start(args, format);	
 80013c8:	2334      	movs	r3, #52	; 0x34
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
	vsprintf(buffer, format, args);
 80013ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	0018      	movs	r0, r3
 80013d6:	f002 fa03 	bl	80037e0 <vsiprintf>
	send_to_UART(buffer);
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff ffd3 	bl	8001388 <send_to_UART>
	va_end(args);
}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b00a      	add	sp, #40	; 0x28
 80013e8:	bc80      	pop	{r7}
 80013ea:	bc08      	pop	{r3}
 80013ec:	b004      	add	sp, #16
 80013ee:	4718      	bx	r3

080013f0 <UT_Error_Handler>:

void UT_Error_Handler(char* err_msg)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	46c0      	nop			; (mov r8, r8)
    __disable_irq();
    while (1)
	{
    	send_to_UART(err_msg);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	0018      	movs	r0, r3
 8001400:	f7ff ffc2 	bl	8001388 <send_to_UART>
 8001404:	e7fa      	b.n	80013fc <UT_Error_Handler+0xc>
	...

08001408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001408:	4813      	ldr	r0, [pc, #76]	; (8001458 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800140a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800140c:	4813      	ldr	r0, [pc, #76]	; (800145c <LoopForever+0x6>)
    LDR R1, [R0]
 800140e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001410:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001412:	4a13      	ldr	r2, [pc, #76]	; (8001460 <LoopForever+0xa>)
    CMP R1, R2
 8001414:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001416:	d105      	bne.n	8001424 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001418:	4812      	ldr	r0, [pc, #72]	; (8001464 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800141a:	4913      	ldr	r1, [pc, #76]	; (8001468 <LoopForever+0x12>)
    STR R1, [R0]
 800141c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800141e:	4813      	ldr	r0, [pc, #76]	; (800146c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001420:	4913      	ldr	r1, [pc, #76]	; (8001470 <LoopForever+0x1a>)
    STR R1, [R0]
 8001422:	6001      	str	r1, [r0, #0]

08001424 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001424:	4813      	ldr	r0, [pc, #76]	; (8001474 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001426:	4914      	ldr	r1, [pc, #80]	; (8001478 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <LoopForever+0x26>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a11      	ldr	r2, [pc, #68]	; (8001480 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800143c:	4c11      	ldr	r4, [pc, #68]	; (8001484 <LoopForever+0x2e>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800144a:	f7ff ff97 	bl	800137c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800144e:	f002 f985 	bl	800375c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001452:	f7ff fe3f 	bl	80010d4 <main>

08001456 <LoopForever>:

LoopForever:
    b LoopForever
 8001456:	e7fe      	b.n	8001456 <LoopForever>
   ldr   r0, =_estack
 8001458:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 800145c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001460:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001464:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001468:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800146c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001470:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001478:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800147c:	080041bc 	.word	0x080041bc
  ldr r2, =_sbss
 8001480:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001484:	20000184 	.word	0x20000184

08001488 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC1_IRQHandler>
	...

0800148c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_Init+0x3c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_Init+0x3c>)
 800149e:	2140      	movs	r1, #64	; 0x40
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a4:	2000      	movs	r0, #0
 80014a6:	f000 f811 	bl	80014cc <HAL_InitTick>
 80014aa:	1e03      	subs	r3, r0, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80014ae:	1dfb      	adds	r3, r7, #7
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	e001      	b.n	80014ba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014b6:	f7ff fe61 	bl	800117c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	781b      	ldrb	r3, [r3, #0]
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	40022000 	.word	0x40022000

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_InitTick+0x5c>)
 80014d6:	681c      	ldr	r4, [r3, #0]
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_InitTick+0x60>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	0019      	movs	r1, r3
 80014de:	23fa      	movs	r3, #250	; 0xfa
 80014e0:	0098      	lsls	r0, r3, #2
 80014e2:	f7fe fe23 	bl	800012c <__udivsi3>
 80014e6:	0003      	movs	r3, r0
 80014e8:	0019      	movs	r1, r3
 80014ea:	0020      	movs	r0, r4
 80014ec:	f7fe fe1e 	bl	800012c <__udivsi3>
 80014f0:	0003      	movs	r3, r0
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 f92f 	bl	8001756 <HAL_SYSTICK_Config>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d001      	beq.n	8001500 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e00f      	b.n	8001520 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d80b      	bhi.n	800151e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	2301      	movs	r3, #1
 800150a:	425b      	negs	r3, r3
 800150c:	2200      	movs	r2, #0
 800150e:	0018      	movs	r0, r3
 8001510:	f000 f8fc 	bl	800170c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_InitTick+0x64>)
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	b003      	add	sp, #12
 8001526:	bd90      	pop	{r4, r7, pc}
 8001528:	20000000 	.word	0x20000000
 800152c:	20000008 	.word	0x20000008
 8001530:	20000004 	.word	0x20000004

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_IncTick+0x1c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	001a      	movs	r2, r3
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_IncTick+0x20>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	18d2      	adds	r2, r2, r3
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_IncTick+0x20>)
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	20000008 	.word	0x20000008
 8001554:	20000170 	.word	0x20000170

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b02      	ldr	r3, [pc, #8]	; (8001568 <HAL_GetTick+0x10>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	20000170 	.word	0x20000170

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff fff0 	bl	8001558 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3301      	adds	r3, #1
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	001a      	movs	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	189b      	adds	r3, r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	f7ff ffe0 	bl	8001558 <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b004      	add	sp, #16
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	20000008 	.word	0x20000008

080015b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	0002      	movs	r2, r0
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b7f      	cmp	r3, #127	; 0x7f
 80015c6:	d809      	bhi.n	80015dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	001a      	movs	r2, r3
 80015ce:	231f      	movs	r3, #31
 80015d0:	401a      	ands	r2, r3
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_EnableIRQ+0x30>)
 80015d4:	2101      	movs	r1, #1
 80015d6:	4091      	lsls	r1, r2
 80015d8:	000a      	movs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
  }
}
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	0002      	movs	r2, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b7f      	cmp	r3, #127	; 0x7f
 80015fc:	d828      	bhi.n	8001650 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015fe:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <__NVIC_SetPriority+0xd4>)
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b25b      	sxtb	r3, r3
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	33c0      	adds	r3, #192	; 0xc0
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	589b      	ldr	r3, [r3, r2]
 800160e:	1dfa      	adds	r2, r7, #7
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	0011      	movs	r1, r2
 8001614:	2203      	movs	r2, #3
 8001616:	400a      	ands	r2, r1
 8001618:	00d2      	lsls	r2, r2, #3
 800161a:	21ff      	movs	r1, #255	; 0xff
 800161c:	4091      	lsls	r1, r2
 800161e:	000a      	movs	r2, r1
 8001620:	43d2      	mvns	r2, r2
 8001622:	401a      	ands	r2, r3
 8001624:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	401a      	ands	r2, r3
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	0018      	movs	r0, r3
 8001634:	2303      	movs	r3, #3
 8001636:	4003      	ands	r3, r0
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800163c:	481f      	ldr	r0, [pc, #124]	; (80016bc <__NVIC_SetPriority+0xd4>)
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b25b      	sxtb	r3, r3
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	430a      	orrs	r2, r1
 8001648:	33c0      	adds	r3, #192	; 0xc0
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800164e:	e031      	b.n	80016b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <__NVIC_SetPriority+0xd8>)
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	0019      	movs	r1, r3
 8001658:	230f      	movs	r3, #15
 800165a:	400b      	ands	r3, r1
 800165c:	3b08      	subs	r3, #8
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3306      	adds	r3, #6
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	18d3      	adds	r3, r2, r3
 8001666:	3304      	adds	r3, #4
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	1dfa      	adds	r2, r7, #7
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	0011      	movs	r1, r2
 8001670:	2203      	movs	r2, #3
 8001672:	400a      	ands	r2, r1
 8001674:	00d2      	lsls	r2, r2, #3
 8001676:	21ff      	movs	r1, #255	; 0xff
 8001678:	4091      	lsls	r1, r2
 800167a:	000a      	movs	r2, r1
 800167c:	43d2      	mvns	r2, r2
 800167e:	401a      	ands	r2, r3
 8001680:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	019b      	lsls	r3, r3, #6
 8001686:	22ff      	movs	r2, #255	; 0xff
 8001688:	401a      	ands	r2, r3
 800168a:	1dfb      	adds	r3, r7, #7
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	0018      	movs	r0, r3
 8001690:	2303      	movs	r3, #3
 8001692:	4003      	ands	r3, r0
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <__NVIC_SetPriority+0xd8>)
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	001c      	movs	r4, r3
 80016a0:	230f      	movs	r3, #15
 80016a2:	4023      	ands	r3, r4
 80016a4:	3b08      	subs	r3, #8
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	430a      	orrs	r2, r1
 80016aa:	3306      	adds	r3, #6
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	18c3      	adds	r3, r0, r3
 80016b0:	3304      	adds	r3, #4
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b003      	add	sp, #12
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	1e5a      	subs	r2, r3, #1
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	045b      	lsls	r3, r3, #17
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d301      	bcc.n	80016dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d8:	2301      	movs	r3, #1
 80016da:	e010      	b.n	80016fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <SysTick_Config+0x44>)
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	3a01      	subs	r2, #1
 80016e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e4:	2301      	movs	r3, #1
 80016e6:	425b      	negs	r3, r3
 80016e8:	2103      	movs	r1, #3
 80016ea:	0018      	movs	r0, r3
 80016ec:	f7ff ff7c 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x44>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x44>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b002      	add	sp, #8
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	210f      	movs	r1, #15
 8001718:	187b      	adds	r3, r7, r1
 800171a:	1c02      	adds	r2, r0, #0
 800171c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	187b      	adds	r3, r7, r1
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b25b      	sxtb	r3, r3
 8001726:	0011      	movs	r1, r2
 8001728:	0018      	movs	r0, r3
 800172a:	f7ff ff5d 	bl	80015e8 <__NVIC_SetPriority>
}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b004      	add	sp, #16
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	0002      	movs	r2, r0
 800173e:	1dfb      	adds	r3, r7, #7
 8001740:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	b25b      	sxtb	r3, r3
 8001748:	0018      	movs	r0, r3
 800174a:	f7ff ff33 	bl	80015b4 <__NVIC_EnableIRQ>
}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b002      	add	sp, #8
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ffaf 	bl	80016c4 <SysTick_Config>
 8001766:	0003      	movs	r3, r0
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001786:	e155      	b.n	8001a34 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2101      	movs	r1, #1
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4091      	lsls	r1, r2
 8001792:	000a      	movs	r2, r1
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <HAL_GPIO_Init+0x30>
 800179e:	e146      	b.n	8001a2e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d00b      	beq.n	80017c0 <HAL_GPIO_Init+0x50>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d007      	beq.n	80017c0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b4:	2b11      	cmp	r3, #17
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b12      	cmp	r3, #18
 80017be:	d130      	bne.n	8001822 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	43da      	mvns	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	409a      	lsls	r2, r3
 80017e2:	0013      	movs	r3, r2
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f6:	2201      	movs	r2, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
 80017fc:	0013      	movs	r3, r2
 80017fe:	43da      	mvns	r2, r3
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	2201      	movs	r2, #1
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
 8001814:	0013      	movs	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	43da      	mvns	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0xf2>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b12      	cmp	r3, #18
 8001860:	d123      	bne.n	80018aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	58d3      	ldr	r3, [r2, r3]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2207      	movs	r2, #7
 8001874:	4013      	ands	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2107      	movs	r1, #7
 800188e:	400b      	ands	r3, r1
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	6939      	ldr	r1, [r7, #16]
 80018a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	43da      	mvns	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	401a      	ands	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	055b      	lsls	r3, r3, #21
 80018e6:	4013      	ands	r3, r2
 80018e8:	d100      	bne.n	80018ec <HAL_GPIO_Init+0x17c>
 80018ea:	e0a0      	b.n	8001a2e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ec:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <HAL_GPIO_Init+0x2dc>)
 80018ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f0:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <HAL_GPIO_Init+0x2dc>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f8:	4a55      	ldr	r2, [pc, #340]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	589b      	ldr	r3, [r3, r2]
 8001904:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2203      	movs	r2, #3
 800190a:	4013      	ands	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	409a      	lsls	r2, r3
 8001912:	0013      	movs	r3, r2
 8001914:	43da      	mvns	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	23a0      	movs	r3, #160	; 0xa0
 8001920:	05db      	lsls	r3, r3, #23
 8001922:	429a      	cmp	r2, r3
 8001924:	d01f      	beq.n	8001966 <HAL_GPIO_Init+0x1f6>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4a      	ldr	r2, [pc, #296]	; (8001a54 <HAL_GPIO_Init+0x2e4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d019      	beq.n	8001962 <HAL_GPIO_Init+0x1f2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <HAL_GPIO_Init+0x2e8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0x1ee>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a48      	ldr	r2, [pc, #288]	; (8001a5c <HAL_GPIO_Init+0x2ec>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00d      	beq.n	800195a <HAL_GPIO_Init+0x1ea>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a47      	ldr	r2, [pc, #284]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <HAL_GPIO_Init+0x1e6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a46      	ldr	r2, [pc, #280]	; (8001a64 <HAL_GPIO_Init+0x2f4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_GPIO_Init+0x1e2>
 800194e:	2305      	movs	r3, #5
 8001950:	e00a      	b.n	8001968 <HAL_GPIO_Init+0x1f8>
 8001952:	2306      	movs	r3, #6
 8001954:	e008      	b.n	8001968 <HAL_GPIO_Init+0x1f8>
 8001956:	2304      	movs	r3, #4
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x1f8>
 800195a:	2303      	movs	r3, #3
 800195c:	e004      	b.n	8001968 <HAL_GPIO_Init+0x1f8>
 800195e:	2302      	movs	r3, #2
 8001960:	e002      	b.n	8001968 <HAL_GPIO_Init+0x1f8>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_GPIO_Init+0x1f8>
 8001966:	2300      	movs	r3, #0
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	2103      	movs	r1, #3
 800196c:	400a      	ands	r2, r1
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	4093      	lsls	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001978:	4935      	ldr	r1, [pc, #212]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3302      	adds	r3, #2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43da      	mvns	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	025b      	lsls	r3, r3, #9
 800199e:	4013      	ands	r3, r2
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019aa:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	029b      	lsls	r3, r3, #10
 80019c8:	4013      	ands	r3, r2
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43da      	mvns	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	035b      	lsls	r3, r3, #13
 80019f2:	4013      	ands	r3, r2
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43da      	mvns	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	039b      	lsls	r3, r3, #14
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	40da      	lsrs	r2, r3
 8001a3c:	1e13      	subs	r3, r2, #0
 8001a3e:	d000      	beq.n	8001a42 <HAL_GPIO_Init+0x2d2>
 8001a40:	e6a2      	b.n	8001788 <HAL_GPIO_Init+0x18>
  }
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46c0      	nop			; (mov r8, r8)
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b006      	add	sp, #24
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010000 	.word	0x40010000
 8001a54:	50000400 	.word	0x50000400
 8001a58:	50000800 	.word	0x50000800
 8001a5c:	50000c00 	.word	0x50000c00
 8001a60:	50001000 	.word	0x50001000
 8001a64:	50001c00 	.word	0x50001c00
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	000a      	movs	r2, r1
 8001a76:	1cbb      	adds	r3, r7, #2
 8001a78:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	1cba      	adds	r2, r7, #2
 8001a80:	8812      	ldrh	r2, [r2, #0]
 8001a82:	4013      	ands	r3, r2
 8001a84:	d004      	beq.n	8001a90 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001a86:	230f      	movs	r3, #15
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	e003      	b.n	8001a98 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a90:	230f      	movs	r3, #15
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a98:	230f      	movs	r3, #15
 8001a9a:	18fb      	adds	r3, r7, r3
 8001a9c:	781b      	ldrb	r3, [r3, #0]
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b004      	add	sp, #16
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	0008      	movs	r0, r1
 8001ab0:	0011      	movs	r1, r2
 8001ab2:	1cbb      	adds	r3, r7, #2
 8001ab4:	1c02      	adds	r2, r0, #0
 8001ab6:	801a      	strh	r2, [r3, #0]
 8001ab8:	1c7b      	adds	r3, r7, #1
 8001aba:	1c0a      	adds	r2, r1, #0
 8001abc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001abe:	1c7b      	adds	r3, r7, #1
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac6:	1cbb      	adds	r3, r7, #2
 8001ac8:	881a      	ldrh	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ace:	e003      	b.n	8001ad8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ad0:	1cbb      	adds	r3, r7, #2
 8001ad2:	881a      	ldrh	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ad8:	46c0      	nop			; (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b002      	add	sp, #8
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	000a      	movs	r2, r1
 8001aea:	1cbb      	adds	r3, r7, #2
 8001aec:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001af4:	1cbb      	adds	r3, r7, #2
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	1cb9      	adds	r1, r7, #2
 8001b04:	8809      	ldrh	r1, [r1, #0]
 8001b06:	400b      	ands	r3, r1
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	619a      	str	r2, [r3, #24]
}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b004      	add	sp, #16
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f000 fb6c 	bl	8002204 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b2c:	4bc8      	ldr	r3, [pc, #800]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	220c      	movs	r2, #12
 8001b32:	4013      	ands	r3, r2
 8001b34:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b36:	4bc6      	ldr	r3, [pc, #792]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	025b      	lsls	r3, r3, #9
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d100      	bne.n	8001b4e <HAL_RCC_OscConfig+0x36>
 8001b4c:	e07d      	b.n	8001c4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d007      	beq.n	8001b64 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d112      	bne.n	8001b80 <HAL_RCC_OscConfig+0x68>
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d10d      	bne.n	8001b80 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	4bba      	ldr	r3, [pc, #744]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	029b      	lsls	r3, r3, #10
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d100      	bne.n	8001b72 <HAL_RCC_OscConfig+0x5a>
 8001b70:	e06a      	b.n	8001c48 <HAL_RCC_OscConfig+0x130>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d166      	bne.n	8001c48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f000 fb42 	bl	8002204 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	025b      	lsls	r3, r3, #9
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_OscConfig+0x84>
 8001b8c:	4bb0      	ldr	r3, [pc, #704]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4baf      	ldr	r3, [pc, #700]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	0249      	lsls	r1, r1, #9
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e027      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	23a0      	movs	r3, #160	; 0xa0
 8001ba2:	02db      	lsls	r3, r3, #11
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d10e      	bne.n	8001bc6 <HAL_RCC_OscConfig+0xae>
 8001ba8:	4ba9      	ldr	r3, [pc, #676]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bae:	2180      	movs	r1, #128	; 0x80
 8001bb0:	02c9      	lsls	r1, r1, #11
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	4ba6      	ldr	r3, [pc, #664]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4ba5      	ldr	r3, [pc, #660]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	0249      	lsls	r1, r1, #9
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e012      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001bc6:	4ba2      	ldr	r3, [pc, #648]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4ba1      	ldr	r3, [pc, #644]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bcc:	49a1      	ldr	r1, [pc, #644]	; (8001e54 <HAL_RCC_OscConfig+0x33c>)
 8001bce:	400a      	ands	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	4b9f      	ldr	r3, [pc, #636]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	025b      	lsls	r3, r3, #9
 8001bda:	4013      	ands	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4b9b      	ldr	r3, [pc, #620]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b9a      	ldr	r3, [pc, #616]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001be6:	499c      	ldr	r1, [pc, #624]	; (8001e58 <HAL_RCC_OscConfig+0x340>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d014      	beq.n	8001c1e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fcb0 	bl	8001558 <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fcab 	bl	8001558 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b64      	cmp	r3, #100	; 0x64
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e2f9      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c10:	4b8f      	ldr	r3, [pc, #572]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0xe6>
 8001c1c:	e015      	b.n	8001c4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fc9b 	bl	8001558 <HAL_GetTick>
 8001c22:	0003      	movs	r3, r0
 8001c24:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fc96 	bl	8001558 <HAL_GetTick>
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e2e4      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c3a:	4b85      	ldr	r3, [pc, #532]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	029b      	lsls	r3, r3, #10
 8001c42:	4013      	ands	r3, r2
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x110>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d100      	bne.n	8001c56 <HAL_RCC_OscConfig+0x13e>
 8001c54:	e099      	b.n	8001d8a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	2220      	movs	r2, #32
 8001c60:	4013      	ands	r3, r2
 8001c62:	d009      	beq.n	8001c78 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001c64:	4b7a      	ldr	r3, [pc, #488]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b79      	ldr	r3, [pc, #484]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001c6a:	2120      	movs	r1, #32
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	2220      	movs	r2, #32
 8001c74:	4393      	bics	r3, r2
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	d13e      	bne.n	8001d02 <HAL_RCC_OscConfig+0x1ea>
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d13b      	bne.n	8001d02 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c8a:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2204      	movs	r2, #4
 8001c90:	4013      	ands	r3, r2
 8001c92:	d004      	beq.n	8001c9e <HAL_RCC_OscConfig+0x186>
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e2b2      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9e:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	; (8001e5c <HAL_RCC_OscConfig+0x344>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	021a      	lsls	r2, r3, #8
 8001cae:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001cb4:	4b66      	ldr	r3, [pc, #408]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2209      	movs	r2, #9
 8001cba:	4393      	bics	r3, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc6:	f000 fbeb 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 8001cca:	0001      	movs	r1, r0
 8001ccc:	4b60      	ldr	r3, [pc, #384]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	4a62      	ldr	r2, [pc, #392]	; (8001e60 <HAL_RCC_OscConfig+0x348>)
 8001cd8:	5cd3      	ldrb	r3, [r2, r3]
 8001cda:	000a      	movs	r2, r1
 8001cdc:	40da      	lsrs	r2, r3
 8001cde:	4b61      	ldr	r3, [pc, #388]	; (8001e64 <HAL_RCC_OscConfig+0x34c>)
 8001ce0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001ce2:	4b61      	ldr	r3, [pc, #388]	; (8001e68 <HAL_RCC_OscConfig+0x350>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2513      	movs	r5, #19
 8001ce8:	197c      	adds	r4, r7, r5
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7ff fbee 	bl	80014cc <HAL_InitTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001cf4:	197b      	adds	r3, r7, r5
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d046      	beq.n	8001d8a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001cfc:	197b      	adds	r3, r7, r5
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	e280      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d027      	beq.n	8001d58 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d08:	4b51      	ldr	r3, [pc, #324]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2209      	movs	r2, #9
 8001d0e:	4393      	bics	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff fc1d 	bl	8001558 <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d24:	f7ff fc18 	bl	8001558 <HAL_GetTick>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e266      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d0f1      	beq.n	8001d24 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d40:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4a45      	ldr	r2, [pc, #276]	; (8001e5c <HAL_RCC_OscConfig+0x344>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	021a      	lsls	r2, r3, #8
 8001d50:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d52:	430a      	orrs	r2, r1
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	e018      	b.n	8001d8a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d58:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b3c      	ldr	r3, [pc, #240]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d5e:	2101      	movs	r1, #1
 8001d60:	438a      	bics	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fbf8 	bl	8001558 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fbf3 	bl	8001558 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e241      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d80:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2204      	movs	r2, #4
 8001d86:	4013      	ands	r3, r2
 8001d88:	d1f1      	bne.n	8001d6e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2210      	movs	r2, #16
 8001d90:	4013      	ands	r3, r2
 8001d92:	d100      	bne.n	8001d96 <HAL_RCC_OscConfig+0x27e>
 8001d94:	e0a1      	b.n	8001eda <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d140      	bne.n	8001e1e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d9c:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_OscConfig+0x29c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e227      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db4:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <HAL_RCC_OscConfig+0x354>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1a      	ldr	r2, [r3, #32]
 8001dc2:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	0a19      	lsrs	r1, r3, #8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	061a      	lsls	r2, r3, #24
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	0b5b      	lsrs	r3, r3, #13
 8001de2:	3301      	adds	r3, #1
 8001de4:	2280      	movs	r2, #128	; 0x80
 8001de6:	0212      	lsls	r2, r2, #8
 8001de8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	210f      	movs	r1, #15
 8001df2:	400b      	ands	r3, r1
 8001df4:	491a      	ldr	r1, [pc, #104]	; (8001e60 <HAL_RCC_OscConfig+0x348>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_RCC_OscConfig+0x34c>)
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_RCC_OscConfig+0x350>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2513      	movs	r5, #19
 8001e04:	197c      	adds	r4, r7, r5
 8001e06:	0018      	movs	r0, r3
 8001e08:	f7ff fb60 	bl	80014cc <HAL_InitTick>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001e10:	197b      	adds	r3, r7, r5
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d060      	beq.n	8001eda <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001e18:	197b      	adds	r3, r7, r5
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	e1f2      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d03f      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	0049      	lsls	r1, r1, #1
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fb90 	bl	8001558 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e3c:	e018      	b.n	8001e70 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fb8b 	bl	8001558 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d911      	bls.n	8001e70 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e1d9      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
 8001e50:	40021000 	.word	0x40021000
 8001e54:	fffeffff 	.word	0xfffeffff
 8001e58:	fffbffff 	.word	0xfffbffff
 8001e5c:	ffffe0ff 	.word	0xffffe0ff
 8001e60:	0800410c 	.word	0x0800410c
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000004 	.word	0x20000004
 8001e6c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e70:	4bc9      	ldr	r3, [pc, #804]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d0e0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e7c:	4bc6      	ldr	r3, [pc, #792]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4ac6      	ldr	r2, [pc, #792]	; (800219c <HAL_RCC_OscConfig+0x684>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1a      	ldr	r2, [r3, #32]
 8001e8a:	4bc3      	ldr	r3, [pc, #780]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e90:	4bc1      	ldr	r3, [pc, #772]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	0a19      	lsrs	r1, r3, #8
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	061a      	lsls	r2, r3, #24
 8001e9e:	4bbe      	ldr	r3, [pc, #760]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	e019      	b.n	8001eda <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ea6:	4bbc      	ldr	r3, [pc, #752]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4bbb      	ldr	r3, [pc, #748]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001eac:	49bc      	ldr	r1, [pc, #752]	; (80021a0 <HAL_RCC_OscConfig+0x688>)
 8001eae:	400a      	ands	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fb51 	bl	8001558 <HAL_GetTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fb4c 	bl	8001558 <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e19a      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ece:	4bb2      	ldr	r3, [pc, #712]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2208      	movs	r2, #8
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d036      	beq.n	8001f52 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d019      	beq.n	8001f20 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eec:	4baa      	ldr	r3, [pc, #680]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001eee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ef0:	4ba9      	ldr	r3, [pc, #676]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fb2e 	bl	8001558 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f02:	f7ff fb29 	bl	8001558 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e177      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f14:	4ba0      	ldr	r3, [pc, #640]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f18:	2202      	movs	r2, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d0f1      	beq.n	8001f02 <HAL_RCC_OscConfig+0x3ea>
 8001f1e:	e018      	b.n	8001f52 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f20:	4b9d      	ldr	r3, [pc, #628]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f24:	4b9c      	ldr	r3, [pc, #624]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	438a      	bics	r2, r1
 8001f2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2c:	f7ff fb14 	bl	8001558 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f36:	f7ff fb0f 	bl	8001558 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e15d      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f48:	4b93      	ldr	r3, [pc, #588]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d1f1      	bne.n	8001f36 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2204      	movs	r2, #4
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d100      	bne.n	8001f5e <HAL_RCC_OscConfig+0x446>
 8001f5c:	e0ae      	b.n	80020bc <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5e:	2023      	movs	r0, #35	; 0x23
 8001f60:	183b      	adds	r3, r7, r0
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f66:	4b8c      	ldr	r3, [pc, #560]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	055b      	lsls	r3, r3, #21
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b89      	ldr	r3, [pc, #548]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f76:	4b88      	ldr	r3, [pc, #544]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	0549      	lsls	r1, r1, #21
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f80:	183b      	adds	r3, r7, r0
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b87      	ldr	r3, [pc, #540]	; (80021a4 <HAL_RCC_OscConfig+0x68c>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d11a      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b84      	ldr	r3, [pc, #528]	; (80021a4 <HAL_RCC_OscConfig+0x68c>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4b83      	ldr	r3, [pc, #524]	; (80021a4 <HAL_RCC_OscConfig+0x68c>)
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	0049      	lsls	r1, r1, #1
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa0:	f7ff fada 	bl	8001558 <HAL_GetTick>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7ff fad5 	bl	8001558 <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b64      	cmp	r3, #100	; 0x64
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e123      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b79      	ldr	r3, [pc, #484]	; (80021a4 <HAL_RCC_OscConfig+0x68c>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4cc>
 8001fd4:	4b70      	ldr	r3, [pc, #448]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd8:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	0049      	lsls	r1, r1, #1
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	651a      	str	r2, [r3, #80]	; 0x50
 8001fe2:	e031      	b.n	8002048 <HAL_RCC_OscConfig+0x530>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x4ee>
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001fee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff0:	4b69      	ldr	r3, [pc, #420]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001ff2:	496b      	ldr	r1, [pc, #428]	; (80021a0 <HAL_RCC_OscConfig+0x688>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ff8:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ffc:	4b66      	ldr	r3, [pc, #408]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001ffe:	496a      	ldr	r1, [pc, #424]	; (80021a8 <HAL_RCC_OscConfig+0x690>)
 8002000:	400a      	ands	r2, r1
 8002002:	651a      	str	r2, [r3, #80]	; 0x50
 8002004:	e020      	b.n	8002048 <HAL_RCC_OscConfig+0x530>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	23a0      	movs	r3, #160	; 0xa0
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	429a      	cmp	r2, r3
 8002010:	d10e      	bne.n	8002030 <HAL_RCC_OscConfig+0x518>
 8002012:	4b61      	ldr	r3, [pc, #388]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002014:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002016:	4b60      	ldr	r3, [pc, #384]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002018:	2180      	movs	r1, #128	; 0x80
 800201a:	00c9      	lsls	r1, r1, #3
 800201c:	430a      	orrs	r2, r1
 800201e:	651a      	str	r2, [r3, #80]	; 0x50
 8002020:	4b5d      	ldr	r3, [pc, #372]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002024:	4b5c      	ldr	r3, [pc, #368]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	0049      	lsls	r1, r1, #1
 800202a:	430a      	orrs	r2, r1
 800202c:	651a      	str	r2, [r3, #80]	; 0x50
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0x530>
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002032:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002034:	4b58      	ldr	r3, [pc, #352]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002036:	495a      	ldr	r1, [pc, #360]	; (80021a0 <HAL_RCC_OscConfig+0x688>)
 8002038:	400a      	ands	r2, r1
 800203a:	651a      	str	r2, [r3, #80]	; 0x50
 800203c:	4b56      	ldr	r3, [pc, #344]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 800203e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002040:	4b55      	ldr	r3, [pc, #340]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002042:	4959      	ldr	r1, [pc, #356]	; (80021a8 <HAL_RCC_OscConfig+0x690>)
 8002044:	400a      	ands	r2, r1
 8002046:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d015      	beq.n	800207c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7ff fa82 	bl	8001558 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002058:	e009      	b.n	800206e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7ff fa7d 	bl	8001558 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	4a51      	ldr	r2, [pc, #324]	; (80021ac <HAL_RCC_OscConfig+0x694>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0ca      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800206e:	4b4a      	ldr	r3, [pc, #296]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002070:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d0ef      	beq.n	800205a <HAL_RCC_OscConfig+0x542>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7ff fa6c 	bl	8001558 <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002084:	e009      	b.n	800209a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7ff fa67 	bl	8001558 <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	4a46      	ldr	r2, [pc, #280]	; (80021ac <HAL_RCC_OscConfig+0x694>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0b4      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800209a:	4b3f      	ldr	r3, [pc, #252]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 800209c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d1ef      	bne.n	8002086 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020a6:	2323      	movs	r3, #35	; 0x23
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d105      	bne.n	80020bc <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 80020b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b4:	4b38      	ldr	r3, [pc, #224]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 80020b6:	493e      	ldr	r1, [pc, #248]	; (80021b0 <HAL_RCC_OscConfig+0x698>)
 80020b8:	400a      	ands	r2, r1
 80020ba:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d100      	bne.n	80020c6 <HAL_RCC_OscConfig+0x5ae>
 80020c4:	e09d      	b.n	8002202 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	d100      	bne.n	80020ce <HAL_RCC_OscConfig+0x5b6>
 80020cc:	e076      	b.n	80021bc <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d145      	bne.n	8002162 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d6:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 80020dc:	4935      	ldr	r1, [pc, #212]	; (80021b4 <HAL_RCC_OscConfig+0x69c>)
 80020de:	400a      	ands	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff fa39 	bl	8001558 <HAL_GetTick>
 80020e6:	0003      	movs	r3, r0
 80020e8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ec:	f7ff fa34 	bl	8001558 <HAL_GetTick>
 80020f0:	0002      	movs	r2, r0
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e082      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	049b      	lsls	r3, r3, #18
 8002106:	4013      	ands	r3, r2
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <HAL_RCC_OscConfig+0x6a0>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	431a      	orrs	r2, r3
 8002124:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002126:	430a      	orrs	r2, r1
 8002128:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	0449      	lsls	r1, r1, #17
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff fa0e 	bl	8001558 <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002142:	f7ff fa09 	bl	8001558 <HAL_GetTick>
 8002146:	0002      	movs	r2, r0
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e057      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002154:	4b10      	ldr	r3, [pc, #64]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	049b      	lsls	r3, r3, #18
 800215c:	4013      	ands	r3, r2
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x62a>
 8002160:	e04f      	b.n	8002202 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8002168:	4912      	ldr	r1, [pc, #72]	; (80021b4 <HAL_RCC_OscConfig+0x69c>)
 800216a:	400a      	ands	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7ff f9f3 	bl	8001558 <HAL_GetTick>
 8002172:	0003      	movs	r3, r0
 8002174:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002178:	f7ff f9ee 	bl	8001558 <HAL_GetTick>
 800217c:	0002      	movs	r2, r0
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e03c      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800218a:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	049b      	lsls	r3, r3, #18
 8002192:	4013      	ands	r3, r2
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x660>
 8002196:	e034      	b.n	8002202 <HAL_RCC_OscConfig+0x6ea>
 8002198:	40021000 	.word	0x40021000
 800219c:	ffff1fff 	.word	0xffff1fff
 80021a0:	fffffeff 	.word	0xfffffeff
 80021a4:	40007000 	.word	0x40007000
 80021a8:	fffffbff 	.word	0xfffffbff
 80021ac:	00001388 	.word	0x00001388
 80021b0:	efffffff 	.word	0xefffffff
 80021b4:	feffffff 	.word	0xfeffffff
 80021b8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e01d      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_RCC_OscConfig+0x6f4>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	025b      	lsls	r3, r3, #9
 80021d4:	401a      	ands	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	429a      	cmp	r2, r3
 80021dc:	d10f      	bne.n	80021fe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	23f0      	movs	r3, #240	; 0xf0
 80021e2:	039b      	lsls	r3, r3, #14
 80021e4:	401a      	ands	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	23c0      	movs	r3, #192	; 0xc0
 80021f2:	041b      	lsls	r3, r3, #16
 80021f4:	401a      	ands	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	0018      	movs	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	b00a      	add	sp, #40	; 0x28
 800220a:	bdb0      	pop	{r4, r5, r7, pc}
 800220c:	40021000 	.word	0x40021000

08002210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e128      	b.n	8002476 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b96      	ldr	r3, [pc, #600]	; (8002480 <HAL_RCC_ClockConfig+0x270>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2201      	movs	r2, #1
 800222a:	4013      	ands	r3, r2
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d91e      	bls.n	8002270 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b93      	ldr	r3, [pc, #588]	; (8002480 <HAL_RCC_ClockConfig+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	4393      	bics	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	4b90      	ldr	r3, [pc, #576]	; (8002480 <HAL_RCC_ClockConfig+0x270>)
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002244:	f7ff f988 	bl	8001558 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224c:	e009      	b.n	8002262 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224e:	f7ff f983 	bl	8001558 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	4a8a      	ldr	r2, [pc, #552]	; (8002484 <HAL_RCC_ClockConfig+0x274>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e109      	b.n	8002476 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b87      	ldr	r3, [pc, #540]	; (8002480 <HAL_RCC_ClockConfig+0x270>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2201      	movs	r2, #1
 8002268:	4013      	ands	r3, r2
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d1ee      	bne.n	800224e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2202      	movs	r2, #2
 8002276:	4013      	ands	r3, r2
 8002278:	d009      	beq.n	800228e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227a:	4b83      	ldr	r3, [pc, #524]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	22f0      	movs	r2, #240	; 0xf0
 8002280:	4393      	bics	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	4b7f      	ldr	r3, [pc, #508]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 800228a:	430a      	orrs	r2, r1
 800228c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2201      	movs	r2, #1
 8002294:	4013      	ands	r3, r2
 8002296:	d100      	bne.n	800229a <HAL_RCC_ClockConfig+0x8a>
 8002298:	e089      	b.n	80023ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022a2:	4b79      	ldr	r3, [pc, #484]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	029b      	lsls	r3, r3, #10
 80022aa:	4013      	ands	r3, r2
 80022ac:	d120      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0e1      	b.n	8002476 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022ba:	4b73      	ldr	r3, [pc, #460]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	049b      	lsls	r3, r3, #18
 80022c2:	4013      	ands	r3, r2
 80022c4:	d114      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0d5      	b.n	8002476 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d106      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2204      	movs	r2, #4
 80022d8:	4013      	ands	r3, r2
 80022da:	d109      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0ca      	b.n	8002476 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022e0:	4b69      	ldr	r3, [pc, #420]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4013      	ands	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0c2      	b.n	8002476 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f0:	4b65      	ldr	r3, [pc, #404]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2203      	movs	r2, #3
 80022f6:	4393      	bics	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	4b62      	ldr	r3, [pc, #392]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 8002300:	430a      	orrs	r2, r1
 8002302:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002304:	f7ff f928 	bl	8001558 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d111      	bne.n	8002338 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002314:	e009      	b.n	800232a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002316:	f7ff f91f 	bl	8001558 <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_ClockConfig+0x274>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e0a5      	b.n	8002476 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800232a:	4b57      	ldr	r3, [pc, #348]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	220c      	movs	r2, #12
 8002330:	4013      	ands	r3, r2
 8002332:	2b08      	cmp	r3, #8
 8002334:	d1ef      	bne.n	8002316 <HAL_RCC_ClockConfig+0x106>
 8002336:	e03a      	b.n	80023ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d111      	bne.n	8002364 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002340:	e009      	b.n	8002356 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002342:	f7ff f909 	bl	8001558 <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	4a4d      	ldr	r2, [pc, #308]	; (8002484 <HAL_RCC_ClockConfig+0x274>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e08f      	b.n	8002476 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002356:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	220c      	movs	r2, #12
 800235c:	4013      	ands	r3, r2
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d1ef      	bne.n	8002342 <HAL_RCC_ClockConfig+0x132>
 8002362:	e024      	b.n	80023ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d11b      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800236c:	e009      	b.n	8002382 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236e:	f7ff f8f3 	bl	8001558 <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	4a42      	ldr	r2, [pc, #264]	; (8002484 <HAL_RCC_ClockConfig+0x274>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e079      	b.n	8002476 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002382:	4b41      	ldr	r3, [pc, #260]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	220c      	movs	r2, #12
 8002388:	4013      	ands	r3, r2
 800238a:	2b04      	cmp	r3, #4
 800238c:	d1ef      	bne.n	800236e <HAL_RCC_ClockConfig+0x15e>
 800238e:	e00e      	b.n	80023ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002390:	f7ff f8e2 	bl	8001558 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	4a3a      	ldr	r2, [pc, #232]	; (8002484 <HAL_RCC_ClockConfig+0x274>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e068      	b.n	8002476 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80023a4:	4b38      	ldr	r3, [pc, #224]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	220c      	movs	r2, #12
 80023aa:	4013      	ands	r3, r2
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ae:	4b34      	ldr	r3, [pc, #208]	; (8002480 <HAL_RCC_ClockConfig+0x270>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2201      	movs	r2, #1
 80023b4:	4013      	ands	r3, r2
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d21e      	bcs.n	80023fa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023bc:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_RCC_ClockConfig+0x270>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	4393      	bics	r3, r2
 80023c4:	0019      	movs	r1, r3
 80023c6:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <HAL_RCC_ClockConfig+0x270>)
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023ce:	f7ff f8c3 	bl	8001558 <HAL_GetTick>
 80023d2:	0003      	movs	r3, r0
 80023d4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	e009      	b.n	80023ec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7ff f8be 	bl	8001558 <HAL_GetTick>
 80023dc:	0002      	movs	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	4a28      	ldr	r2, [pc, #160]	; (8002484 <HAL_RCC_ClockConfig+0x274>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e044      	b.n	8002476 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCC_ClockConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4013      	ands	r3, r2
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d1ee      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2204      	movs	r2, #4
 8002400:	4013      	ands	r3, r2
 8002402:	d009      	beq.n	8002418 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002404:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a20      	ldr	r2, [pc, #128]	; (800248c <HAL_RCC_ClockConfig+0x27c>)
 800240a:	4013      	ands	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 8002414:	430a      	orrs	r2, r1
 8002416:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2208      	movs	r2, #8
 800241e:	4013      	ands	r3, r2
 8002420:	d00a      	beq.n	8002438 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002422:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_RCC_ClockConfig+0x280>)
 8002428:	4013      	ands	r3, r2
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	00da      	lsls	r2, r3, #3
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 8002434:	430a      	orrs	r2, r1
 8002436:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002438:	f000 f832 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800243c:	0001      	movs	r1, r0
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_RCC_ClockConfig+0x278>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	220f      	movs	r2, #15
 8002446:	4013      	ands	r3, r2
 8002448:	4a12      	ldr	r2, [pc, #72]	; (8002494 <HAL_RCC_ClockConfig+0x284>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	000a      	movs	r2, r1
 800244e:	40da      	lsrs	r2, r3
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_RCC_ClockConfig+0x288>)
 8002452:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <HAL_RCC_ClockConfig+0x28c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	250b      	movs	r5, #11
 800245a:	197c      	adds	r4, r7, r5
 800245c:	0018      	movs	r0, r3
 800245e:	f7ff f835 	bl	80014cc <HAL_InitTick>
 8002462:	0003      	movs	r3, r0
 8002464:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002466:	197b      	adds	r3, r7, r5
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800246e:	197b      	adds	r3, r7, r5
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	e000      	b.n	8002476 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b004      	add	sp, #16
 800247c:	bdb0      	pop	{r4, r5, r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	40022000 	.word	0x40022000
 8002484:	00001388 	.word	0x00001388
 8002488:	40021000 	.word	0x40021000
 800248c:	fffff8ff 	.word	0xfffff8ff
 8002490:	ffffc7ff 	.word	0xffffc7ff
 8002494:	0800410c 	.word	0x0800410c
 8002498:	20000000 	.word	0x20000000
 800249c:	20000004 	.word	0x20000004

080024a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b08e      	sub	sp, #56	; 0x38
 80024a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80024a6:	4b4c      	ldr	r3, [pc, #304]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ae:	230c      	movs	r3, #12
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d014      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x40>
 80024b6:	d900      	bls.n	80024ba <HAL_RCC_GetSysClockFreq+0x1a>
 80024b8:	e07b      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x112>
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d002      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x24>
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d00b      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x3a>
 80024c2:	e076      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024c4:	4b44      	ldr	r3, [pc, #272]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2210      	movs	r2, #16
 80024ca:	4013      	ands	r3, r2
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80024ce:	4b43      	ldr	r3, [pc, #268]	; (80025dc <HAL_RCC_GetSysClockFreq+0x13c>)
 80024d0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80024d2:	e07c      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80024d4:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x140>)
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024d8:	e079      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024da:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x144>)
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024de:	e076      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	0c9a      	lsrs	r2, r3, #18
 80024e4:	230f      	movs	r3, #15
 80024e6:	401a      	ands	r2, r3
 80024e8:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x148>)
 80024ea:	5c9b      	ldrb	r3, [r3, r2]
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	0d9a      	lsrs	r2, r3, #22
 80024f2:	2303      	movs	r3, #3
 80024f4:	4013      	ands	r3, r2
 80024f6:	3301      	adds	r3, #1
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	4013      	ands	r3, r2
 8002504:	d01a      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	4a35      	ldr	r2, [pc, #212]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002510:	2300      	movs	r3, #0
 8002512:	69b8      	ldr	r0, [r7, #24]
 8002514:	69f9      	ldr	r1, [r7, #28]
 8002516:	f7fd feb5 	bl	8000284 <__aeabi_lmul>
 800251a:	0002      	movs	r2, r0
 800251c:	000b      	movs	r3, r1
 800251e:	0010      	movs	r0, r2
 8002520:	0019      	movs	r1, r3
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f7fd fe89 	bl	8000244 <__aeabi_uldivmod>
 8002532:	0002      	movs	r2, r0
 8002534:	000b      	movs	r3, r1
 8002536:	0013      	movs	r3, r2
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
 800253a:	e037      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800253c:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x138>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2210      	movs	r2, #16
 8002542:	4013      	ands	r3, r2
 8002544:	d01a      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4a23      	ldr	r2, [pc, #140]	; (80025dc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002550:	2300      	movs	r3, #0
 8002552:	68b8      	ldr	r0, [r7, #8]
 8002554:	68f9      	ldr	r1, [r7, #12]
 8002556:	f7fd fe95 	bl	8000284 <__aeabi_lmul>
 800255a:	0002      	movs	r2, r0
 800255c:	000b      	movs	r3, r1
 800255e:	0010      	movs	r0, r2
 8002560:	0019      	movs	r1, r3
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f7fd fe69 	bl	8000244 <__aeabi_uldivmod>
 8002572:	0002      	movs	r2, r0
 8002574:	000b      	movs	r3, r1
 8002576:	0013      	movs	r3, r2
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
 800257a:	e017      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257e:	0018      	movs	r0, r3
 8002580:	2300      	movs	r3, #0
 8002582:	0019      	movs	r1, r3
 8002584:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002586:	2300      	movs	r3, #0
 8002588:	f7fd fe7c 	bl	8000284 <__aeabi_lmul>
 800258c:	0002      	movs	r2, r0
 800258e:	000b      	movs	r3, r1
 8002590:	0010      	movs	r0, r2
 8002592:	0019      	movs	r1, r3
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	001c      	movs	r4, r3
 8002598:	2300      	movs	r3, #0
 800259a:	001d      	movs	r5, r3
 800259c:	0022      	movs	r2, r4
 800259e:	002b      	movs	r3, r5
 80025a0:	f7fd fe50 	bl	8000244 <__aeabi_uldivmod>
 80025a4:	0002      	movs	r2, r0
 80025a6:	000b      	movs	r3, r1
 80025a8:	0013      	movs	r3, r2
 80025aa:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80025ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025b0:	e00d      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	0b5b      	lsrs	r3, r3, #13
 80025b8:	2207      	movs	r2, #7
 80025ba:	4013      	ands	r3, r2
 80025bc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	3301      	adds	r3, #1
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	0212      	lsls	r2, r2, #8
 80025c6:	409a      	lsls	r2, r3
 80025c8:	0013      	movs	r3, r2
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025cc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b00e      	add	sp, #56	; 0x38
 80025d6:	bdb0      	pop	{r4, r5, r7, pc}
 80025d8:	40021000 	.word	0x40021000
 80025dc:	003d0900 	.word	0x003d0900
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	007a1200 	.word	0x007a1200
 80025e8:	08004124 	.word	0x08004124

080025ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f0:	4b02      	ldr	r3, [pc, #8]	; (80025fc <HAL_RCC_GetHCLKFreq+0x10>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	20000000 	.word	0x20000000

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002604:	f7ff fff2 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002608:	0001      	movs	r1, r0
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	2207      	movs	r2, #7
 8002612:	4013      	ands	r3, r2
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	40d9      	lsrs	r1, r3
 800261a:	000b      	movs	r3, r1
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	40021000 	.word	0x40021000
 8002628:	0800411c 	.word	0x0800411c

0800262c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002630:	f7ff ffdc 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002634:	0001      	movs	r1, r0
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	0adb      	lsrs	r3, r3, #11
 800263c:	2207      	movs	r2, #7
 800263e:	4013      	ands	r3, r2
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002642:	5cd3      	ldrb	r3, [r2, r3]
 8002644:	40d9      	lsrs	r1, r3
 8002646:	000b      	movs	r3, r1
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	40021000 	.word	0x40021000
 8002654:	0800411c 	.word	0x0800411c

08002658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e032      	b.n	80026d0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2239      	movs	r2, #57	; 0x39
 800266e:	5c9b      	ldrb	r3, [r3, r2]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d107      	bne.n	8002686 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2238      	movs	r2, #56	; 0x38
 800267a:	2100      	movs	r1, #0
 800267c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	0018      	movs	r0, r3
 8002682:	f7fe fd8f 	bl	80011a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2239      	movs	r2, #57	; 0x39
 800268a:	2102      	movs	r1, #2
 800268c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3304      	adds	r3, #4
 8002696:	0019      	movs	r1, r3
 8002698:	0010      	movs	r0, r2
 800269a:	f000 fa3b 	bl	8002b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	223e      	movs	r2, #62	; 0x3e
 80026a2:	2101      	movs	r1, #1
 80026a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	223a      	movs	r2, #58	; 0x3a
 80026aa:	2101      	movs	r1, #1
 80026ac:	5499      	strb	r1, [r3, r2]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	223b      	movs	r2, #59	; 0x3b
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	223c      	movs	r2, #60	; 0x3c
 80026ba:	2101      	movs	r1, #1
 80026bc:	5499      	strb	r1, [r3, r2]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	223d      	movs	r2, #61	; 0x3d
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2239      	movs	r2, #57	; 0x39
 80026ca:	2101      	movs	r1, #1
 80026cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2239      	movs	r2, #57	; 0x39
 80026e4:	5c9b      	ldrb	r3, [r3, r2]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d001      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e036      	b.n	800275e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2239      	movs	r2, #57	; 0x39
 80026f4:	2102      	movs	r1, #2
 80026f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2101      	movs	r1, #1
 8002704:	430a      	orrs	r2, r1
 8002706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	05db      	lsls	r3, r3, #23
 8002710:	429a      	cmp	r2, r3
 8002712:	d009      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x50>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_TIM_Base_Start_IT+0x90>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d004      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x50>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_TIM_Base_Start_IT+0x94>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d111      	bne.n	800274c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2207      	movs	r2, #7
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b06      	cmp	r3, #6
 8002738:	d010      	beq.n	800275c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2101      	movs	r1, #1
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274a:	e007      	b.n	800275c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2101      	movs	r1, #1
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	40010800 	.word	0x40010800
 800276c:	40011400 	.word	0x40011400

08002770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2202      	movs	r2, #2
 8002780:	4013      	ands	r3, r2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d124      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2202      	movs	r2, #2
 800278e:	4013      	ands	r3, r2
 8002790:	2b02      	cmp	r3, #2
 8002792:	d11d      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2203      	movs	r2, #3
 800279a:	4252      	negs	r2, r2
 800279c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2203      	movs	r2, #3
 80027ac:	4013      	ands	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f996 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 80027b8:	e007      	b.n	80027ca <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 f989 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 f995 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2204      	movs	r2, #4
 80027d8:	4013      	ands	r3, r2
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d125      	bne.n	800282a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2204      	movs	r2, #4
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d11e      	bne.n	800282a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2205      	movs	r2, #5
 80027f2:	4252      	negs	r2, r2
 80027f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	23c0      	movs	r3, #192	; 0xc0
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4013      	ands	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 f969 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 8002812:	e007      	b.n	8002824 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	0018      	movs	r0, r3
 8002818:	f000 f95c 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	0018      	movs	r0, r3
 8002820:	f000 f968 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2208      	movs	r2, #8
 8002832:	4013      	ands	r3, r2
 8002834:	2b08      	cmp	r3, #8
 8002836:	d124      	bne.n	8002882 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2208      	movs	r2, #8
 8002840:	4013      	ands	r3, r2
 8002842:	2b08      	cmp	r3, #8
 8002844:	d11d      	bne.n	8002882 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2209      	movs	r2, #9
 800284c:	4252      	negs	r2, r2
 800284e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2204      	movs	r2, #4
 8002854:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	2203      	movs	r2, #3
 800285e:	4013      	ands	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	0018      	movs	r0, r3
 8002866:	f000 f93d 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 800286a:	e007      	b.n	800287c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	0018      	movs	r0, r3
 8002870:	f000 f930 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f93c 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2210      	movs	r2, #16
 800288a:	4013      	ands	r3, r2
 800288c:	2b10      	cmp	r3, #16
 800288e:	d125      	bne.n	80028dc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2210      	movs	r2, #16
 8002898:	4013      	ands	r3, r2
 800289a:	2b10      	cmp	r3, #16
 800289c:	d11e      	bne.n	80028dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2211      	movs	r2, #17
 80028a4:	4252      	negs	r2, r2
 80028a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2208      	movs	r2, #8
 80028ac:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69da      	ldr	r2, [r3, #28]
 80028b4:	23c0      	movs	r3, #192	; 0xc0
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 f910 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 80028c4:	e007      	b.n	80028d6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 f903 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 f90f 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2201      	movs	r2, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10f      	bne.n	800290a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d108      	bne.n	800290a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2202      	movs	r2, #2
 80028fe:	4252      	negs	r2, r2
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f7fe fba7 	bl	8001058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2240      	movs	r2, #64	; 0x40
 8002912:	4013      	ands	r3, r2
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d10f      	bne.n	8002938 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2240      	movs	r2, #64	; 0x40
 8002920:	4013      	ands	r3, r2
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d108      	bne.n	8002938 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2241      	movs	r2, #65	; 0x41
 800292c:	4252      	negs	r2, r2
 800292e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f8e6 	bl	8002b04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2238      	movs	r2, #56	; 0x38
 800294e:	5c9b      	ldrb	r3, [r3, r2]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_TIM_ConfigClockSource+0x18>
 8002954:	2302      	movs	r3, #2
 8002956:	e0b7      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x188>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2238      	movs	r2, #56	; 0x38
 800295c:	2101      	movs	r1, #1
 800295e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2239      	movs	r2, #57	; 0x39
 8002964:	2102      	movs	r1, #2
 8002966:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2277      	movs	r2, #119	; 0x77
 8002974:	4393      	bics	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a55      	ldr	r2, [pc, #340]	; (8002ad0 <HAL_TIM_ConfigClockSource+0x190>)
 800297c:	4013      	ands	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	0192      	lsls	r2, r2, #6
 8002990:	4293      	cmp	r3, r2
 8002992:	d040      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0xd6>
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	0192      	lsls	r2, r2, #6
 8002998:	4293      	cmp	r3, r2
 800299a:	d900      	bls.n	800299e <HAL_TIM_ConfigClockSource+0x5e>
 800299c:	e088      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x170>
 800299e:	2280      	movs	r2, #128	; 0x80
 80029a0:	0152      	lsls	r2, r2, #5
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d100      	bne.n	80029a8 <HAL_TIM_ConfigClockSource+0x68>
 80029a6:	e085      	b.n	8002ab4 <HAL_TIM_ConfigClockSource+0x174>
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	0152      	lsls	r2, r2, #5
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d900      	bls.n	80029b2 <HAL_TIM_ConfigClockSource+0x72>
 80029b0:	e07e      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x170>
 80029b2:	2b70      	cmp	r3, #112	; 0x70
 80029b4:	d018      	beq.n	80029e8 <HAL_TIM_ConfigClockSource+0xa8>
 80029b6:	d900      	bls.n	80029ba <HAL_TIM_ConfigClockSource+0x7a>
 80029b8:	e07a      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x170>
 80029ba:	2b60      	cmp	r3, #96	; 0x60
 80029bc:	d04f      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x11e>
 80029be:	d900      	bls.n	80029c2 <HAL_TIM_ConfigClockSource+0x82>
 80029c0:	e076      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x170>
 80029c2:	2b50      	cmp	r3, #80	; 0x50
 80029c4:	d03b      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0xfe>
 80029c6:	d900      	bls.n	80029ca <HAL_TIM_ConfigClockSource+0x8a>
 80029c8:	e072      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x170>
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d057      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0x13e>
 80029ce:	d900      	bls.n	80029d2 <HAL_TIM_ConfigClockSource+0x92>
 80029d0:	e06e      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x170>
 80029d2:	2b30      	cmp	r3, #48	; 0x30
 80029d4:	d063      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x15e>
 80029d6:	d86b      	bhi.n	8002ab0 <HAL_TIM_ConfigClockSource+0x170>
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d060      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x15e>
 80029dc:	d868      	bhi.n	8002ab0 <HAL_TIM_ConfigClockSource+0x170>
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d05d      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x15e>
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d05b      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80029e6:	e063      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f000 f95a 	bl	8002cb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2277      	movs	r2, #119	; 0x77
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	609a      	str	r2, [r3, #8]
      break;
 8002a14:	e04f      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6899      	ldr	r1, [r3, #8]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f000 f943 	bl	8002cb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	01c9      	lsls	r1, r1, #7
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
      break;
 8002a3c:	e03b      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	f000 f8b6 	bl	8002bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2150      	movs	r1, #80	; 0x50
 8002a56:	0018      	movs	r0, r3
 8002a58:	f000 f910 	bl	8002c7c <TIM_ITRx_SetConfig>
      break;
 8002a5c:	e02b      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	001a      	movs	r2, r3
 8002a6c:	f000 f8d4 	bl	8002c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2160      	movs	r1, #96	; 0x60
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 f900 	bl	8002c7c <TIM_ITRx_SetConfig>
      break;
 8002a7c:	e01b      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	001a      	movs	r2, r3
 8002a8c:	f000 f896 	bl	8002bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 f8f0 	bl	8002c7c <TIM_ITRx_SetConfig>
      break;
 8002a9c:	e00b      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	0010      	movs	r0, r2
 8002aaa:	f000 f8e7 	bl	8002c7c <TIM_ITRx_SetConfig>
        break;
 8002aae:	e002      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	e000      	b.n	8002ab6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002ab4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2239      	movs	r2, #57	; 0x39
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2238      	movs	r2, #56	; 0x38
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b004      	add	sp, #16
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	ffff00ff 	.word	0xffff00ff

08002ad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002adc:	46c0      	nop			; (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b002      	add	sp, #8
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	05db      	lsls	r3, r3, #23
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d007      	beq.n	8002b3e <TIM_Base_SetConfig+0x2a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1f      	ldr	r2, [pc, #124]	; (8002bb0 <TIM_Base_SetConfig+0x9c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d003      	beq.n	8002b3e <TIM_Base_SetConfig+0x2a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1e      	ldr	r2, [pc, #120]	; (8002bb4 <TIM_Base_SetConfig+0xa0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2270      	movs	r2, #112	; 0x70
 8002b42:	4393      	bics	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	05db      	lsls	r3, r3, #23
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d007      	beq.n	8002b6a <TIM_Base_SetConfig+0x56>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <TIM_Base_SetConfig+0x9c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d003      	beq.n	8002b6a <TIM_Base_SetConfig+0x56>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <TIM_Base_SetConfig+0xa0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d108      	bne.n	8002b7c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <TIM_Base_SetConfig+0xa4>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	4393      	bics	r3, r2
 8002b82:	001a      	movs	r2, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	615a      	str	r2, [r3, #20]
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b004      	add	sp, #16
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40010800 	.word	0x40010800
 8002bb4:	40011400 	.word	0x40011400
 8002bb8:	fffffcff 	.word	0xfffffcff

08002bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	001a      	movs	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	22f0      	movs	r2, #240	; 0xf0
 8002be6:	4393      	bics	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	220a      	movs	r2, #10
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	621a      	str	r2, [r3, #32]
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b006      	add	sp, #24
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	2210      	movs	r2, #16
 8002c2a:	4393      	bics	r3, r2
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <TIM_TI2_ConfigInputStage+0x60>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	031b      	lsls	r3, r3, #12
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	22a0      	movs	r2, #160	; 0xa0
 8002c54:	4393      	bics	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	621a      	str	r2, [r3, #32]
}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b006      	add	sp, #24
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	ffff0fff 	.word	0xffff0fff

08002c7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2270      	movs	r2, #112	; 0x70
 8002c90:	4393      	bics	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	2207      	movs	r2, #7
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	609a      	str	r2, [r3, #8]
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	4a09      	ldr	r2, [pc, #36]	; (8002cec <TIM_ETR_SetConfig+0x3c>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	021a      	lsls	r2, r3, #8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	609a      	str	r2, [r3, #8]
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b006      	add	sp, #24
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	ffff00ff 	.word	0xffff00ff

08002cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2238      	movs	r2, #56	; 0x38
 8002cfe:	5c9b      	ldrb	r3, [r3, r2]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e042      	b.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2238      	movs	r2, #56	; 0x38
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2239      	movs	r2, #57	; 0x39
 8002d14:	2102      	movs	r1, #2
 8002d16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2270      	movs	r2, #112	; 0x70
 8002d2c:	4393      	bics	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	05db      	lsls	r3, r3, #23
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d009      	beq.n	8002d62 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0f      	ldr	r2, [pc, #60]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10c      	bne.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2280      	movs	r2, #128	; 0x80
 8002d66:	4393      	bics	r3, r2
 8002d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2239      	movs	r2, #57	; 0x39
 8002d80:	2101      	movs	r1, #1
 8002d82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2238      	movs	r2, #56	; 0x38
 8002d88:	2100      	movs	r1, #0
 8002d8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	40010800 	.word	0x40010800
 8002d9c:	40011400 	.word	0x40011400

08002da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e044      	b.n	8002e3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d107      	bne.n	8002dca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2274      	movs	r2, #116	; 0x74
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7fe fa47 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2224      	movs	r2, #36	; 0x24
 8002dce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	438a      	bics	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 f8d8 	bl	8002f98 <UART_SetConfig>
 8002de8:	0003      	movs	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e024      	b.n	8002e3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f000 fb2d 	bl	800345c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	490d      	ldr	r1, [pc, #52]	; (8002e44 <HAL_UART_Init+0xa4>)
 8002e0e:	400a      	ands	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	212a      	movs	r1, #42	; 0x2a
 8002e1e:	438a      	bics	r2, r1
 8002e20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 fbc5 	bl	80035c4 <UART_CheckIdleState>
 8002e3a:	0003      	movs	r3, r0
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	ffffb7ff 	.word	0xffffb7ff

08002e48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	1dbb      	adds	r3, r7, #6
 8002e56:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d000      	beq.n	8002e62 <HAL_UART_Transmit+0x1a>
 8002e60:	e095      	b.n	8002f8e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_UART_Transmit+0x28>
 8002e68:	1dbb      	adds	r3, r7, #6
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e08d      	b.n	8002f90 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	015b      	lsls	r3, r3, #5
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d109      	bne.n	8002e94 <HAL_UART_Transmit+0x4c>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d001      	beq.n	8002e94 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e07d      	b.n	8002f90 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2274      	movs	r2, #116	; 0x74
 8002e98:	5c9b      	ldrb	r3, [r3, r2]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_UART_Transmit+0x5a>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e076      	b.n	8002f90 <HAL_UART_Transmit+0x148>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2274      	movs	r2, #116	; 0x74
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2221      	movs	r2, #33	; 0x21
 8002eb6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb8:	f7fe fb4e 	bl	8001558 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1dba      	adds	r2, r7, #6
 8002ec4:	2150      	movs	r1, #80	; 0x50
 8002ec6:	8812      	ldrh	r2, [r2, #0]
 8002ec8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1dba      	adds	r2, r7, #6
 8002ece:	2152      	movs	r1, #82	; 0x52
 8002ed0:	8812      	ldrh	r2, [r2, #0]
 8002ed2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	015b      	lsls	r3, r3, #5
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d108      	bne.n	8002ef2 <HAL_UART_Transmit+0xaa>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d104      	bne.n	8002ef2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	e003      	b.n	8002efa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2274      	movs	r2, #116	; 0x74
 8002efe:	2100      	movs	r1, #0
 8002f00:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002f02:	e02c      	b.n	8002f5e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	0013      	movs	r3, r2
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2180      	movs	r1, #128	; 0x80
 8002f12:	f000 fb9f 	bl	8003654 <UART_WaitOnFlagUntilTimeout>
 8002f16:	1e03      	subs	r3, r0, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e038      	b.n	8002f90 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	001a      	movs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	05d2      	lsls	r2, r2, #23
 8002f30:	0dd2      	lsrs	r2, r2, #23
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	3302      	adds	r3, #2
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	e007      	b.n	8002f4c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	781a      	ldrb	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2252      	movs	r2, #82	; 0x52
 8002f50:	5a9b      	ldrh	r3, [r3, r2]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b299      	uxth	r1, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2252      	movs	r2, #82	; 0x52
 8002f5c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2252      	movs	r2, #82	; 0x52
 8002f62:	5a9b      	ldrh	r3, [r3, r2]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1cc      	bne.n	8002f04 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	0013      	movs	r3, r2
 8002f74:	2200      	movs	r2, #0
 8002f76:	2140      	movs	r1, #64	; 0x40
 8002f78:	f000 fb6c 	bl	8003654 <UART_WaitOnFlagUntilTimeout>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e005      	b.n	8002f90 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
  }
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b008      	add	sp, #32
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f98:	b5b0      	push	{r4, r5, r7, lr}
 8002f9a:	b08e      	sub	sp, #56	; 0x38
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fa0:	231a      	movs	r3, #26
 8002fa2:	2218      	movs	r2, #24
 8002fa4:	4694      	mov	ip, r2
 8002fa6:	44bc      	add	ip, r7
 8002fa8:	4463      	add	r3, ip
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4abc      	ldr	r2, [pc, #752]	; (80032c0 <UART_SetConfig+0x328>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4ab8      	ldr	r2, [pc, #736]	; (80032c4 <UART_SetConfig+0x32c>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4ab2      	ldr	r2, [pc, #712]	; (80032c8 <UART_SetConfig+0x330>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800300a:	4313      	orrs	r3, r2
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4aad      	ldr	r2, [pc, #692]	; (80032cc <UART_SetConfig+0x334>)
 8003016:	4013      	ands	r3, r2
 8003018:	0019      	movs	r1, r3
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003020:	430a      	orrs	r2, r1
 8003022:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4aa9      	ldr	r2, [pc, #676]	; (80032d0 <UART_SetConfig+0x338>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d136      	bne.n	800309c <UART_SetConfig+0x104>
 800302e:	4ba9      	ldr	r3, [pc, #676]	; (80032d4 <UART_SetConfig+0x33c>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	220c      	movs	r2, #12
 8003034:	4013      	ands	r3, r2
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d020      	beq.n	800307c <UART_SetConfig+0xe4>
 800303a:	d827      	bhi.n	800308c <UART_SetConfig+0xf4>
 800303c:	2b08      	cmp	r3, #8
 800303e:	d00d      	beq.n	800305c <UART_SetConfig+0xc4>
 8003040:	d824      	bhi.n	800308c <UART_SetConfig+0xf4>
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <UART_SetConfig+0xb4>
 8003046:	2b04      	cmp	r3, #4
 8003048:	d010      	beq.n	800306c <UART_SetConfig+0xd4>
 800304a:	e01f      	b.n	800308c <UART_SetConfig+0xf4>
 800304c:	231b      	movs	r3, #27
 800304e:	2218      	movs	r2, #24
 8003050:	4694      	mov	ip, r2
 8003052:	44bc      	add	ip, r7
 8003054:	4463      	add	r3, ip
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e06f      	b.n	800313c <UART_SetConfig+0x1a4>
 800305c:	231b      	movs	r3, #27
 800305e:	2218      	movs	r2, #24
 8003060:	4694      	mov	ip, r2
 8003062:	44bc      	add	ip, r7
 8003064:	4463      	add	r3, ip
 8003066:	2202      	movs	r2, #2
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	e067      	b.n	800313c <UART_SetConfig+0x1a4>
 800306c:	231b      	movs	r3, #27
 800306e:	2218      	movs	r2, #24
 8003070:	4694      	mov	ip, r2
 8003072:	44bc      	add	ip, r7
 8003074:	4463      	add	r3, ip
 8003076:	2204      	movs	r2, #4
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e05f      	b.n	800313c <UART_SetConfig+0x1a4>
 800307c:	231b      	movs	r3, #27
 800307e:	2218      	movs	r2, #24
 8003080:	4694      	mov	ip, r2
 8003082:	44bc      	add	ip, r7
 8003084:	4463      	add	r3, ip
 8003086:	2208      	movs	r2, #8
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e057      	b.n	800313c <UART_SetConfig+0x1a4>
 800308c:	231b      	movs	r3, #27
 800308e:	2218      	movs	r2, #24
 8003090:	4694      	mov	ip, r2
 8003092:	44bc      	add	ip, r7
 8003094:	4463      	add	r3, ip
 8003096:	2210      	movs	r2, #16
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	e04f      	b.n	800313c <UART_SetConfig+0x1a4>
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a89      	ldr	r2, [pc, #548]	; (80032c8 <UART_SetConfig+0x330>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d143      	bne.n	800312e <UART_SetConfig+0x196>
 80030a6:	4b8b      	ldr	r3, [pc, #556]	; (80032d4 <UART_SetConfig+0x33c>)
 80030a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030aa:	23c0      	movs	r3, #192	; 0xc0
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	4013      	ands	r3, r2
 80030b0:	22c0      	movs	r2, #192	; 0xc0
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d02a      	beq.n	800310e <UART_SetConfig+0x176>
 80030b8:	22c0      	movs	r2, #192	; 0xc0
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	4293      	cmp	r3, r2
 80030be:	d82e      	bhi.n	800311e <UART_SetConfig+0x186>
 80030c0:	2280      	movs	r2, #128	; 0x80
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d012      	beq.n	80030ee <UART_SetConfig+0x156>
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d826      	bhi.n	800311e <UART_SetConfig+0x186>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d004      	beq.n	80030de <UART_SetConfig+0x146>
 80030d4:	2280      	movs	r2, #128	; 0x80
 80030d6:	00d2      	lsls	r2, r2, #3
 80030d8:	4293      	cmp	r3, r2
 80030da:	d010      	beq.n	80030fe <UART_SetConfig+0x166>
 80030dc:	e01f      	b.n	800311e <UART_SetConfig+0x186>
 80030de:	231b      	movs	r3, #27
 80030e0:	2218      	movs	r2, #24
 80030e2:	4694      	mov	ip, r2
 80030e4:	44bc      	add	ip, r7
 80030e6:	4463      	add	r3, ip
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e026      	b.n	800313c <UART_SetConfig+0x1a4>
 80030ee:	231b      	movs	r3, #27
 80030f0:	2218      	movs	r2, #24
 80030f2:	4694      	mov	ip, r2
 80030f4:	44bc      	add	ip, r7
 80030f6:	4463      	add	r3, ip
 80030f8:	2202      	movs	r2, #2
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e01e      	b.n	800313c <UART_SetConfig+0x1a4>
 80030fe:	231b      	movs	r3, #27
 8003100:	2218      	movs	r2, #24
 8003102:	4694      	mov	ip, r2
 8003104:	44bc      	add	ip, r7
 8003106:	4463      	add	r3, ip
 8003108:	2204      	movs	r2, #4
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e016      	b.n	800313c <UART_SetConfig+0x1a4>
 800310e:	231b      	movs	r3, #27
 8003110:	2218      	movs	r2, #24
 8003112:	4694      	mov	ip, r2
 8003114:	44bc      	add	ip, r7
 8003116:	4463      	add	r3, ip
 8003118:	2208      	movs	r2, #8
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	e00e      	b.n	800313c <UART_SetConfig+0x1a4>
 800311e:	231b      	movs	r3, #27
 8003120:	2218      	movs	r2, #24
 8003122:	4694      	mov	ip, r2
 8003124:	44bc      	add	ip, r7
 8003126:	4463      	add	r3, ip
 8003128:	2210      	movs	r2, #16
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e006      	b.n	800313c <UART_SetConfig+0x1a4>
 800312e:	231b      	movs	r3, #27
 8003130:	2218      	movs	r2, #24
 8003132:	4694      	mov	ip, r2
 8003134:	44bc      	add	ip, r7
 8003136:	4463      	add	r3, ip
 8003138:	2210      	movs	r2, #16
 800313a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a61      	ldr	r2, [pc, #388]	; (80032c8 <UART_SetConfig+0x330>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d000      	beq.n	8003148 <UART_SetConfig+0x1b0>
 8003146:	e088      	b.n	800325a <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003148:	231b      	movs	r3, #27
 800314a:	2218      	movs	r2, #24
 800314c:	4694      	mov	ip, r2
 800314e:	44bc      	add	ip, r7
 8003150:	4463      	add	r3, ip
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b08      	cmp	r3, #8
 8003156:	d01d      	beq.n	8003194 <UART_SetConfig+0x1fc>
 8003158:	dc20      	bgt.n	800319c <UART_SetConfig+0x204>
 800315a:	2b04      	cmp	r3, #4
 800315c:	d015      	beq.n	800318a <UART_SetConfig+0x1f2>
 800315e:	dc1d      	bgt.n	800319c <UART_SetConfig+0x204>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <UART_SetConfig+0x1d2>
 8003164:	2b02      	cmp	r3, #2
 8003166:	d005      	beq.n	8003174 <UART_SetConfig+0x1dc>
 8003168:	e018      	b.n	800319c <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800316a:	f7ff fa49 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 800316e:	0003      	movs	r3, r0
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003172:	e01d      	b.n	80031b0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003174:	4b57      	ldr	r3, [pc, #348]	; (80032d4 <UART_SetConfig+0x33c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2210      	movs	r2, #16
 800317a:	4013      	ands	r3, r2
 800317c:	d002      	beq.n	8003184 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800317e:	4b56      	ldr	r3, [pc, #344]	; (80032d8 <UART_SetConfig+0x340>)
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003182:	e015      	b.n	80031b0 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8003184:	4b55      	ldr	r3, [pc, #340]	; (80032dc <UART_SetConfig+0x344>)
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003188:	e012      	b.n	80031b0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800318a:	f7ff f989 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800318e:	0003      	movs	r3, r0
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003192:	e00d      	b.n	80031b0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800319a:	e009      	b.n	80031b0 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80031a0:	231a      	movs	r3, #26
 80031a2:	2218      	movs	r2, #24
 80031a4:	4694      	mov	ip, r2
 80031a6:	44bc      	add	ip, r7
 80031a8:	4463      	add	r3, ip
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
        break;
 80031ae:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d100      	bne.n	80031b8 <UART_SetConfig+0x220>
 80031b6:	e139      	b.n	800342c <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	0013      	movs	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	189b      	adds	r3, r3, r2
 80031c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d305      	bcc.n	80031d4 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d907      	bls.n	80031e4 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80031d4:	231a      	movs	r3, #26
 80031d6:	2218      	movs	r2, #24
 80031d8:	4694      	mov	ip, r2
 80031da:	44bc      	add	ip, r7
 80031dc:	4463      	add	r3, ip
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e123      	b.n	800342c <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	6939      	ldr	r1, [r7, #16]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	000b      	movs	r3, r1
 80031f2:	0e1b      	lsrs	r3, r3, #24
 80031f4:	0010      	movs	r0, r2
 80031f6:	0205      	lsls	r5, r0, #8
 80031f8:	431d      	orrs	r5, r3
 80031fa:	000b      	movs	r3, r1
 80031fc:	021c      	lsls	r4, r3, #8
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68b8      	ldr	r0, [r7, #8]
 800320c:	68f9      	ldr	r1, [r7, #12]
 800320e:	1900      	adds	r0, r0, r4
 8003210:	4169      	adcs	r1, r5
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	2300      	movs	r3, #0
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f7fd f810 	bl	8000244 <__aeabi_uldivmod>
 8003224:	0002      	movs	r2, r0
 8003226:	000b      	movs	r3, r1
 8003228:	0013      	movs	r3, r2
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800322c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322e:	23c0      	movs	r3, #192	; 0xc0
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	429a      	cmp	r2, r3
 8003234:	d309      	bcc.n	800324a <UART_SetConfig+0x2b2>
 8003236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	035b      	lsls	r3, r3, #13
 800323c:	429a      	cmp	r2, r3
 800323e:	d204      	bcs.n	800324a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003246:	60da      	str	r2, [r3, #12]
 8003248:	e0f0      	b.n	800342c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800324a:	231a      	movs	r3, #26
 800324c:	2218      	movs	r2, #24
 800324e:	4694      	mov	ip, r2
 8003250:	44bc      	add	ip, r7
 8003252:	4463      	add	r3, ip
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	e0e8      	b.n	800342c <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	429a      	cmp	r2, r3
 8003264:	d000      	beq.n	8003268 <UART_SetConfig+0x2d0>
 8003266:	e087      	b.n	8003378 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8003268:	231b      	movs	r3, #27
 800326a:	2218      	movs	r2, #24
 800326c:	4694      	mov	ip, r2
 800326e:	44bc      	add	ip, r7
 8003270:	4463      	add	r3, ip
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d835      	bhi.n	80032e4 <UART_SetConfig+0x34c>
 8003278:	009a      	lsls	r2, r3, #2
 800327a:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <UART_SetConfig+0x348>)
 800327c:	18d3      	adds	r3, r2, r3
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003282:	f7ff f9bd 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8003286:	0003      	movs	r3, r0
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800328a:	e035      	b.n	80032f8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800328c:	f7ff f9ce 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 8003290:	0003      	movs	r3, r0
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003294:	e030      	b.n	80032f8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <UART_SetConfig+0x33c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2210      	movs	r2, #16
 800329c:	4013      	ands	r3, r2
 800329e:	d002      	beq.n	80032a6 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <UART_SetConfig+0x340>)
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80032a4:	e028      	b.n	80032f8 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <UART_SetConfig+0x344>)
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032aa:	e025      	b.n	80032f8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ac:	f7ff f8f8 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 80032b0:	0003      	movs	r3, r0
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032b4:	e020      	b.n	80032f8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032bc:	e01c      	b.n	80032f8 <UART_SetConfig+0x360>
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	efff69f3 	.word	0xefff69f3
 80032c4:	ffffcfff 	.word	0xffffcfff
 80032c8:	40004800 	.word	0x40004800
 80032cc:	fffff4ff 	.word	0xfffff4ff
 80032d0:	40004400 	.word	0x40004400
 80032d4:	40021000 	.word	0x40021000
 80032d8:	003d0900 	.word	0x003d0900
 80032dc:	00f42400 	.word	0x00f42400
 80032e0:	08004130 	.word	0x08004130
      default:
        pclk = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80032e8:	231a      	movs	r3, #26
 80032ea:	2218      	movs	r2, #24
 80032ec:	4694      	mov	ip, r2
 80032ee:	44bc      	add	ip, r7
 80032f0:	4463      	add	r3, ip
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
        break;
 80032f6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d100      	bne.n	8003300 <UART_SetConfig+0x368>
 80032fe:	e095      	b.n	800342c <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003302:	005a      	lsls	r2, r3, #1
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	18d2      	adds	r2, r2, r3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	0019      	movs	r1, r3
 8003312:	0010      	movs	r0, r2
 8003314:	f7fc ff0a 	bl	800012c <__udivsi3>
 8003318:	0003      	movs	r3, r0
 800331a:	b29b      	uxth	r3, r3
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	2b0f      	cmp	r3, #15
 8003322:	d921      	bls.n	8003368 <UART_SetConfig+0x3d0>
 8003324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	025b      	lsls	r3, r3, #9
 800332a:	429a      	cmp	r2, r3
 800332c:	d21c      	bcs.n	8003368 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	b29a      	uxth	r2, r3
 8003332:	200e      	movs	r0, #14
 8003334:	2418      	movs	r4, #24
 8003336:	193b      	adds	r3, r7, r4
 8003338:	181b      	adds	r3, r3, r0
 800333a:	210f      	movs	r1, #15
 800333c:	438a      	bics	r2, r1
 800333e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	b29b      	uxth	r3, r3
 8003346:	2207      	movs	r2, #7
 8003348:	4013      	ands	r3, r2
 800334a:	b299      	uxth	r1, r3
 800334c:	193b      	adds	r3, r7, r4
 800334e:	181b      	adds	r3, r3, r0
 8003350:	193a      	adds	r2, r7, r4
 8003352:	1812      	adds	r2, r2, r0
 8003354:	8812      	ldrh	r2, [r2, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	193a      	adds	r2, r7, r4
 8003360:	1812      	adds	r2, r2, r0
 8003362:	8812      	ldrh	r2, [r2, #0]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	e061      	b.n	800342c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003368:	231a      	movs	r3, #26
 800336a:	2218      	movs	r2, #24
 800336c:	4694      	mov	ip, r2
 800336e:	44bc      	add	ip, r7
 8003370:	4463      	add	r3, ip
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	e059      	b.n	800342c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003378:	231b      	movs	r3, #27
 800337a:	2218      	movs	r2, #24
 800337c:	4694      	mov	ip, r2
 800337e:	44bc      	add	ip, r7
 8003380:	4463      	add	r3, ip
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d822      	bhi.n	80033ce <UART_SetConfig+0x436>
 8003388:	009a      	lsls	r2, r3, #2
 800338a:	4b30      	ldr	r3, [pc, #192]	; (800344c <UART_SetConfig+0x4b4>)
 800338c:	18d3      	adds	r3, r2, r3
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003392:	f7ff f935 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8003396:	0003      	movs	r3, r0
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800339a:	e022      	b.n	80033e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7ff f946 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 80033a0:	0003      	movs	r3, r0
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033a4:	e01d      	b.n	80033e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a6:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <UART_SetConfig+0x4b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2210      	movs	r2, #16
 80033ac:	4013      	ands	r3, r2
 80033ae:	d002      	beq.n	80033b6 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <UART_SetConfig+0x4bc>)
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80033b4:	e015      	b.n	80033e2 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 80033b6:	4b28      	ldr	r3, [pc, #160]	; (8003458 <UART_SetConfig+0x4c0>)
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033ba:	e012      	b.n	80033e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033bc:	f7ff f870 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 80033c0:	0003      	movs	r3, r0
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033c4:	e00d      	b.n	80033e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033cc:	e009      	b.n	80033e2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80033d2:	231a      	movs	r3, #26
 80033d4:	2218      	movs	r2, #24
 80033d6:	4694      	mov	ip, r2
 80033d8:	44bc      	add	ip, r7
 80033da:	4463      	add	r3, ip
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
        break;
 80033e0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d021      	beq.n	800342c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	085a      	lsrs	r2, r3, #1
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	18d2      	adds	r2, r2, r3
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	0019      	movs	r1, r3
 80033f8:	0010      	movs	r0, r2
 80033fa:	f7fc fe97 	bl	800012c <__udivsi3>
 80033fe:	0003      	movs	r3, r0
 8003400:	b29b      	uxth	r3, r3
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	2b0f      	cmp	r3, #15
 8003408:	d909      	bls.n	800341e <UART_SetConfig+0x486>
 800340a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	025b      	lsls	r3, r3, #9
 8003410:	429a      	cmp	r2, r3
 8003412:	d204      	bcs.n	800341e <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341a:	60da      	str	r2, [r3, #12]
 800341c:	e006      	b.n	800342c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800341e:	231a      	movs	r3, #26
 8003420:	2218      	movs	r2, #24
 8003422:	4694      	mov	ip, r2
 8003424:	44bc      	add	ip, r7
 8003426:	4463      	add	r3, ip
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2200      	movs	r2, #0
 8003430:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	2200      	movs	r2, #0
 8003436:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003438:	231a      	movs	r3, #26
 800343a:	2218      	movs	r2, #24
 800343c:	4694      	mov	ip, r2
 800343e:	44bc      	add	ip, r7
 8003440:	4463      	add	r3, ip
 8003442:	781b      	ldrb	r3, [r3, #0]
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b00e      	add	sp, #56	; 0x38
 800344a:	bdb0      	pop	{r4, r5, r7, pc}
 800344c:	08004154 	.word	0x08004154
 8003450:	40021000 	.word	0x40021000
 8003454:	003d0900 	.word	0x003d0900
 8003458:	00f42400 	.word	0x00f42400

0800345c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	2201      	movs	r2, #1
 800346a:	4013      	ands	r3, r2
 800346c:	d00b      	beq.n	8003486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a4a      	ldr	r2, [pc, #296]	; (80035a0 <UART_AdvFeatureConfig+0x144>)
 8003476:	4013      	ands	r3, r2
 8003478:	0019      	movs	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2202      	movs	r2, #2
 800348c:	4013      	ands	r3, r2
 800348e:	d00b      	beq.n	80034a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4a43      	ldr	r2, [pc, #268]	; (80035a4 <UART_AdvFeatureConfig+0x148>)
 8003498:	4013      	ands	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	2204      	movs	r2, #4
 80034ae:	4013      	ands	r3, r2
 80034b0:	d00b      	beq.n	80034ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4a3b      	ldr	r2, [pc, #236]	; (80035a8 <UART_AdvFeatureConfig+0x14c>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	0019      	movs	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2208      	movs	r2, #8
 80034d0:	4013      	ands	r3, r2
 80034d2:	d00b      	beq.n	80034ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a34      	ldr	r2, [pc, #208]	; (80035ac <UART_AdvFeatureConfig+0x150>)
 80034dc:	4013      	ands	r3, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2210      	movs	r2, #16
 80034f2:	4013      	ands	r3, r2
 80034f4:	d00b      	beq.n	800350e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a2c      	ldr	r2, [pc, #176]	; (80035b0 <UART_AdvFeatureConfig+0x154>)
 80034fe:	4013      	ands	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	2220      	movs	r2, #32
 8003514:	4013      	ands	r3, r2
 8003516:	d00b      	beq.n	8003530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	4a25      	ldr	r2, [pc, #148]	; (80035b4 <UART_AdvFeatureConfig+0x158>)
 8003520:	4013      	ands	r3, r2
 8003522:	0019      	movs	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	2240      	movs	r2, #64	; 0x40
 8003536:	4013      	ands	r3, r2
 8003538:	d01d      	beq.n	8003576 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <UART_AdvFeatureConfig+0x15c>)
 8003542:	4013      	ands	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	035b      	lsls	r3, r3, #13
 800355a:	429a      	cmp	r2, r3
 800355c:	d10b      	bne.n	8003576 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4a15      	ldr	r2, [pc, #84]	; (80035bc <UART_AdvFeatureConfig+0x160>)
 8003566:	4013      	ands	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	4013      	ands	r3, r2
 800357e:	d00b      	beq.n	8003598 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a0e      	ldr	r2, [pc, #56]	; (80035c0 <UART_AdvFeatureConfig+0x164>)
 8003588:	4013      	ands	r3, r2
 800358a:	0019      	movs	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]
  }
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b002      	add	sp, #8
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	fffdffff 	.word	0xfffdffff
 80035a4:	fffeffff 	.word	0xfffeffff
 80035a8:	fffbffff 	.word	0xfffbffff
 80035ac:	ffff7fff 	.word	0xffff7fff
 80035b0:	ffffefff 	.word	0xffffefff
 80035b4:	ffffdfff 	.word	0xffffdfff
 80035b8:	ffefffff 	.word	0xffefffff
 80035bc:	ff9fffff 	.word	0xff9fffff
 80035c0:	fff7ffff 	.word	0xfff7ffff

080035c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	2100      	movs	r1, #0
 80035d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035d4:	f7fd ffc0 	bl	8001558 <HAL_GetTick>
 80035d8:	0003      	movs	r3, r0
 80035da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2208      	movs	r2, #8
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d10c      	bne.n	8003604 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2280      	movs	r2, #128	; 0x80
 80035ee:	0391      	lsls	r1, r2, #14
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4a17      	ldr	r2, [pc, #92]	; (8003650 <UART_CheckIdleState+0x8c>)
 80035f4:	9200      	str	r2, [sp, #0]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f000 f82c 	bl	8003654 <UART_WaitOnFlagUntilTimeout>
 80035fc:	1e03      	subs	r3, r0, #0
 80035fe:	d001      	beq.n	8003604 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e021      	b.n	8003648 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2204      	movs	r2, #4
 800360c:	4013      	ands	r3, r2
 800360e:	2b04      	cmp	r3, #4
 8003610:	d10c      	bne.n	800362c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2280      	movs	r2, #128	; 0x80
 8003616:	03d1      	lsls	r1, r2, #15
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4a0d      	ldr	r2, [pc, #52]	; (8003650 <UART_CheckIdleState+0x8c>)
 800361c:	9200      	str	r2, [sp, #0]
 800361e:	2200      	movs	r2, #0
 8003620:	f000 f818 	bl	8003654 <UART_WaitOnFlagUntilTimeout>
 8003624:	1e03      	subs	r3, r0, #0
 8003626:	d001      	beq.n	800362c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e00d      	b.n	8003648 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2274      	movs	r2, #116	; 0x74
 8003642:	2100      	movs	r1, #0
 8003644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	b004      	add	sp, #16
 800364e:	bd80      	pop	{r7, pc}
 8003650:	01ffffff 	.word	0x01ffffff

08003654 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	1dfb      	adds	r3, r7, #7
 8003662:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003664:	e05e      	b.n	8003724 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	3301      	adds	r3, #1
 800366a:	d05b      	beq.n	8003724 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366c:	f7fd ff74 	bl	8001558 <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	429a      	cmp	r2, r3
 800367a:	d302      	bcc.n	8003682 <UART_WaitOnFlagUntilTimeout+0x2e>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11b      	bne.n	80036ba <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	492f      	ldr	r1, [pc, #188]	; (800374c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800368e:	400a      	ands	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2101      	movs	r1, #1
 800369e:	438a      	bics	r2, r1
 80036a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2274      	movs	r2, #116	; 0x74
 80036b2:	2100      	movs	r1, #0
 80036b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e044      	b.n	8003744 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2204      	movs	r2, #4
 80036c2:	4013      	ands	r3, r2
 80036c4:	d02e      	beq.n	8003724 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	401a      	ands	r2, r3
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d124      	bne.n	8003724 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2280      	movs	r2, #128	; 0x80
 80036e0:	0112      	lsls	r2, r2, #4
 80036e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4917      	ldr	r1, [pc, #92]	; (800374c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80036f0:	400a      	ands	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2101      	movs	r1, #1
 8003700:	438a      	bics	r2, r1
 8003702:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	2120      	movs	r1, #32
 8003716:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2274      	movs	r2, #116	; 0x74
 800371c:	2100      	movs	r1, #0
 800371e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e00f      	b.n	8003744 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	4013      	ands	r3, r2
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	425a      	negs	r2, r3
 8003734:	4153      	adcs	r3, r2
 8003736:	b2db      	uxtb	r3, r3
 8003738:	001a      	movs	r2, r3
 800373a:	1dfb      	adds	r3, r7, #7
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d091      	beq.n	8003666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b004      	add	sp, #16
 800374a:	bd80      	pop	{r7, pc}
 800374c:	fffffe5f 	.word	0xfffffe5f

08003750 <__errno>:
 8003750:	4b01      	ldr	r3, [pc, #4]	; (8003758 <__errno+0x8>)
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	4770      	bx	lr
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	2000000c 	.word	0x2000000c

0800375c <__libc_init_array>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	2600      	movs	r6, #0
 8003760:	4d0c      	ldr	r5, [pc, #48]	; (8003794 <__libc_init_array+0x38>)
 8003762:	4c0d      	ldr	r4, [pc, #52]	; (8003798 <__libc_init_array+0x3c>)
 8003764:	1b64      	subs	r4, r4, r5
 8003766:	10a4      	asrs	r4, r4, #2
 8003768:	42a6      	cmp	r6, r4
 800376a:	d109      	bne.n	8003780 <__libc_init_array+0x24>
 800376c:	2600      	movs	r6, #0
 800376e:	f000 fc49 	bl	8004004 <_init>
 8003772:	4d0a      	ldr	r5, [pc, #40]	; (800379c <__libc_init_array+0x40>)
 8003774:	4c0a      	ldr	r4, [pc, #40]	; (80037a0 <__libc_init_array+0x44>)
 8003776:	1b64      	subs	r4, r4, r5
 8003778:	10a4      	asrs	r4, r4, #2
 800377a:	42a6      	cmp	r6, r4
 800377c:	d105      	bne.n	800378a <__libc_init_array+0x2e>
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	00b3      	lsls	r3, r6, #2
 8003782:	58eb      	ldr	r3, [r5, r3]
 8003784:	4798      	blx	r3
 8003786:	3601      	adds	r6, #1
 8003788:	e7ee      	b.n	8003768 <__libc_init_array+0xc>
 800378a:	00b3      	lsls	r3, r6, #2
 800378c:	58eb      	ldr	r3, [r5, r3]
 800378e:	4798      	blx	r3
 8003790:	3601      	adds	r6, #1
 8003792:	e7f2      	b.n	800377a <__libc_init_array+0x1e>
 8003794:	080041b4 	.word	0x080041b4
 8003798:	080041b4 	.word	0x080041b4
 800379c:	080041b4 	.word	0x080041b4
 80037a0:	080041b8 	.word	0x080041b8

080037a4 <memset>:
 80037a4:	0003      	movs	r3, r0
 80037a6:	1882      	adds	r2, r0, r2
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d100      	bne.n	80037ae <memset+0xa>
 80037ac:	4770      	bx	lr
 80037ae:	7019      	strb	r1, [r3, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	e7f9      	b.n	80037a8 <memset+0x4>

080037b4 <_vsiprintf_r>:
 80037b4:	b500      	push	{lr}
 80037b6:	b09b      	sub	sp, #108	; 0x6c
 80037b8:	9100      	str	r1, [sp, #0]
 80037ba:	9104      	str	r1, [sp, #16]
 80037bc:	4906      	ldr	r1, [pc, #24]	; (80037d8 <_vsiprintf_r+0x24>)
 80037be:	9105      	str	r1, [sp, #20]
 80037c0:	9102      	str	r1, [sp, #8]
 80037c2:	4906      	ldr	r1, [pc, #24]	; (80037dc <_vsiprintf_r+0x28>)
 80037c4:	9103      	str	r1, [sp, #12]
 80037c6:	4669      	mov	r1, sp
 80037c8:	f000 f878 	bl	80038bc <_svfiprintf_r>
 80037cc:	2300      	movs	r3, #0
 80037ce:	9a00      	ldr	r2, [sp, #0]
 80037d0:	7013      	strb	r3, [r2, #0]
 80037d2:	b01b      	add	sp, #108	; 0x6c
 80037d4:	bd00      	pop	{pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	7fffffff 	.word	0x7fffffff
 80037dc:	ffff0208 	.word	0xffff0208

080037e0 <vsiprintf>:
 80037e0:	b510      	push	{r4, lr}
 80037e2:	0013      	movs	r3, r2
 80037e4:	000a      	movs	r2, r1
 80037e6:	0001      	movs	r1, r0
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <vsiprintf+0x14>)
 80037ea:	6800      	ldr	r0, [r0, #0]
 80037ec:	f7ff ffe2 	bl	80037b4 <_vsiprintf_r>
 80037f0:	bd10      	pop	{r4, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	2000000c 	.word	0x2000000c

080037f8 <__ssputs_r>:
 80037f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037fa:	688e      	ldr	r6, [r1, #8]
 80037fc:	b085      	sub	sp, #20
 80037fe:	0007      	movs	r7, r0
 8003800:	000c      	movs	r4, r1
 8003802:	9203      	str	r2, [sp, #12]
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	429e      	cmp	r6, r3
 8003808:	d83c      	bhi.n	8003884 <__ssputs_r+0x8c>
 800380a:	2390      	movs	r3, #144	; 0x90
 800380c:	898a      	ldrh	r2, [r1, #12]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	421a      	tst	r2, r3
 8003812:	d034      	beq.n	800387e <__ssputs_r+0x86>
 8003814:	2503      	movs	r5, #3
 8003816:	6909      	ldr	r1, [r1, #16]
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	1a5b      	subs	r3, r3, r1
 800381c:	9302      	str	r3, [sp, #8]
 800381e:	6963      	ldr	r3, [r4, #20]
 8003820:	9802      	ldr	r0, [sp, #8]
 8003822:	435d      	muls	r5, r3
 8003824:	0feb      	lsrs	r3, r5, #31
 8003826:	195d      	adds	r5, r3, r5
 8003828:	9b01      	ldr	r3, [sp, #4]
 800382a:	106d      	asrs	r5, r5, #1
 800382c:	3301      	adds	r3, #1
 800382e:	181b      	adds	r3, r3, r0
 8003830:	42ab      	cmp	r3, r5
 8003832:	d900      	bls.n	8003836 <__ssputs_r+0x3e>
 8003834:	001d      	movs	r5, r3
 8003836:	0553      	lsls	r3, r2, #21
 8003838:	d532      	bpl.n	80038a0 <__ssputs_r+0xa8>
 800383a:	0029      	movs	r1, r5
 800383c:	0038      	movs	r0, r7
 800383e:	f000 fb31 	bl	8003ea4 <_malloc_r>
 8003842:	1e06      	subs	r6, r0, #0
 8003844:	d109      	bne.n	800385a <__ssputs_r+0x62>
 8003846:	230c      	movs	r3, #12
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	2340      	movs	r3, #64	; 0x40
 800384c:	2001      	movs	r0, #1
 800384e:	89a2      	ldrh	r2, [r4, #12]
 8003850:	4240      	negs	r0, r0
 8003852:	4313      	orrs	r3, r2
 8003854:	81a3      	strh	r3, [r4, #12]
 8003856:	b005      	add	sp, #20
 8003858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800385a:	9a02      	ldr	r2, [sp, #8]
 800385c:	6921      	ldr	r1, [r4, #16]
 800385e:	f000 faba 	bl	8003dd6 <memcpy>
 8003862:	89a3      	ldrh	r3, [r4, #12]
 8003864:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <__ssputs_r+0xc0>)
 8003866:	401a      	ands	r2, r3
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	4313      	orrs	r3, r2
 800386c:	81a3      	strh	r3, [r4, #12]
 800386e:	9b02      	ldr	r3, [sp, #8]
 8003870:	6126      	str	r6, [r4, #16]
 8003872:	18f6      	adds	r6, r6, r3
 8003874:	6026      	str	r6, [r4, #0]
 8003876:	6165      	str	r5, [r4, #20]
 8003878:	9e01      	ldr	r6, [sp, #4]
 800387a:	1aed      	subs	r5, r5, r3
 800387c:	60a5      	str	r5, [r4, #8]
 800387e:	9b01      	ldr	r3, [sp, #4]
 8003880:	429e      	cmp	r6, r3
 8003882:	d900      	bls.n	8003886 <__ssputs_r+0x8e>
 8003884:	9e01      	ldr	r6, [sp, #4]
 8003886:	0032      	movs	r2, r6
 8003888:	9903      	ldr	r1, [sp, #12]
 800388a:	6820      	ldr	r0, [r4, #0]
 800388c:	f000 faac 	bl	8003de8 <memmove>
 8003890:	68a3      	ldr	r3, [r4, #8]
 8003892:	2000      	movs	r0, #0
 8003894:	1b9b      	subs	r3, r3, r6
 8003896:	60a3      	str	r3, [r4, #8]
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	199e      	adds	r6, r3, r6
 800389c:	6026      	str	r6, [r4, #0]
 800389e:	e7da      	b.n	8003856 <__ssputs_r+0x5e>
 80038a0:	002a      	movs	r2, r5
 80038a2:	0038      	movs	r0, r7
 80038a4:	f000 fb5c 	bl	8003f60 <_realloc_r>
 80038a8:	1e06      	subs	r6, r0, #0
 80038aa:	d1e0      	bne.n	800386e <__ssputs_r+0x76>
 80038ac:	0038      	movs	r0, r7
 80038ae:	6921      	ldr	r1, [r4, #16]
 80038b0:	f000 faae 	bl	8003e10 <_free_r>
 80038b4:	e7c7      	b.n	8003846 <__ssputs_r+0x4e>
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	fffffb7f 	.word	0xfffffb7f

080038bc <_svfiprintf_r>:
 80038bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038be:	b0a1      	sub	sp, #132	; 0x84
 80038c0:	9003      	str	r0, [sp, #12]
 80038c2:	001d      	movs	r5, r3
 80038c4:	898b      	ldrh	r3, [r1, #12]
 80038c6:	000f      	movs	r7, r1
 80038c8:	0016      	movs	r6, r2
 80038ca:	061b      	lsls	r3, r3, #24
 80038cc:	d511      	bpl.n	80038f2 <_svfiprintf_r+0x36>
 80038ce:	690b      	ldr	r3, [r1, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10e      	bne.n	80038f2 <_svfiprintf_r+0x36>
 80038d4:	2140      	movs	r1, #64	; 0x40
 80038d6:	f000 fae5 	bl	8003ea4 <_malloc_r>
 80038da:	6038      	str	r0, [r7, #0]
 80038dc:	6138      	str	r0, [r7, #16]
 80038de:	2800      	cmp	r0, #0
 80038e0:	d105      	bne.n	80038ee <_svfiprintf_r+0x32>
 80038e2:	230c      	movs	r3, #12
 80038e4:	9a03      	ldr	r2, [sp, #12]
 80038e6:	3801      	subs	r0, #1
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	b021      	add	sp, #132	; 0x84
 80038ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ee:	2340      	movs	r3, #64	; 0x40
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	2300      	movs	r3, #0
 80038f4:	ac08      	add	r4, sp, #32
 80038f6:	6163      	str	r3, [r4, #20]
 80038f8:	3320      	adds	r3, #32
 80038fa:	7663      	strb	r3, [r4, #25]
 80038fc:	3310      	adds	r3, #16
 80038fe:	76a3      	strb	r3, [r4, #26]
 8003900:	9507      	str	r5, [sp, #28]
 8003902:	0035      	movs	r5, r6
 8003904:	782b      	ldrb	r3, [r5, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <_svfiprintf_r+0x52>
 800390a:	2b25      	cmp	r3, #37	; 0x25
 800390c:	d147      	bne.n	800399e <_svfiprintf_r+0xe2>
 800390e:	1bab      	subs	r3, r5, r6
 8003910:	9305      	str	r3, [sp, #20]
 8003912:	42b5      	cmp	r5, r6
 8003914:	d00c      	beq.n	8003930 <_svfiprintf_r+0x74>
 8003916:	0032      	movs	r2, r6
 8003918:	0039      	movs	r1, r7
 800391a:	9803      	ldr	r0, [sp, #12]
 800391c:	f7ff ff6c 	bl	80037f8 <__ssputs_r>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d100      	bne.n	8003926 <_svfiprintf_r+0x6a>
 8003924:	e0ae      	b.n	8003a84 <_svfiprintf_r+0x1c8>
 8003926:	6962      	ldr	r2, [r4, #20]
 8003928:	9b05      	ldr	r3, [sp, #20]
 800392a:	4694      	mov	ip, r2
 800392c:	4463      	add	r3, ip
 800392e:	6163      	str	r3, [r4, #20]
 8003930:	782b      	ldrb	r3, [r5, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d100      	bne.n	8003938 <_svfiprintf_r+0x7c>
 8003936:	e0a5      	b.n	8003a84 <_svfiprintf_r+0x1c8>
 8003938:	2201      	movs	r2, #1
 800393a:	2300      	movs	r3, #0
 800393c:	4252      	negs	r2, r2
 800393e:	6062      	str	r2, [r4, #4]
 8003940:	a904      	add	r1, sp, #16
 8003942:	3254      	adds	r2, #84	; 0x54
 8003944:	1852      	adds	r2, r2, r1
 8003946:	1c6e      	adds	r6, r5, #1
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	60e3      	str	r3, [r4, #12]
 800394c:	60a3      	str	r3, [r4, #8]
 800394e:	7013      	strb	r3, [r2, #0]
 8003950:	65a3      	str	r3, [r4, #88]	; 0x58
 8003952:	2205      	movs	r2, #5
 8003954:	7831      	ldrb	r1, [r6, #0]
 8003956:	4854      	ldr	r0, [pc, #336]	; (8003aa8 <_svfiprintf_r+0x1ec>)
 8003958:	f000 fa32 	bl	8003dc0 <memchr>
 800395c:	1c75      	adds	r5, r6, #1
 800395e:	2800      	cmp	r0, #0
 8003960:	d11f      	bne.n	80039a2 <_svfiprintf_r+0xe6>
 8003962:	6822      	ldr	r2, [r4, #0]
 8003964:	06d3      	lsls	r3, r2, #27
 8003966:	d504      	bpl.n	8003972 <_svfiprintf_r+0xb6>
 8003968:	2353      	movs	r3, #83	; 0x53
 800396a:	a904      	add	r1, sp, #16
 800396c:	185b      	adds	r3, r3, r1
 800396e:	2120      	movs	r1, #32
 8003970:	7019      	strb	r1, [r3, #0]
 8003972:	0713      	lsls	r3, r2, #28
 8003974:	d504      	bpl.n	8003980 <_svfiprintf_r+0xc4>
 8003976:	2353      	movs	r3, #83	; 0x53
 8003978:	a904      	add	r1, sp, #16
 800397a:	185b      	adds	r3, r3, r1
 800397c:	212b      	movs	r1, #43	; 0x2b
 800397e:	7019      	strb	r1, [r3, #0]
 8003980:	7833      	ldrb	r3, [r6, #0]
 8003982:	2b2a      	cmp	r3, #42	; 0x2a
 8003984:	d016      	beq.n	80039b4 <_svfiprintf_r+0xf8>
 8003986:	0035      	movs	r5, r6
 8003988:	2100      	movs	r1, #0
 800398a:	200a      	movs	r0, #10
 800398c:	68e3      	ldr	r3, [r4, #12]
 800398e:	782a      	ldrb	r2, [r5, #0]
 8003990:	1c6e      	adds	r6, r5, #1
 8003992:	3a30      	subs	r2, #48	; 0x30
 8003994:	2a09      	cmp	r2, #9
 8003996:	d94e      	bls.n	8003a36 <_svfiprintf_r+0x17a>
 8003998:	2900      	cmp	r1, #0
 800399a:	d111      	bne.n	80039c0 <_svfiprintf_r+0x104>
 800399c:	e017      	b.n	80039ce <_svfiprintf_r+0x112>
 800399e:	3501      	adds	r5, #1
 80039a0:	e7b0      	b.n	8003904 <_svfiprintf_r+0x48>
 80039a2:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <_svfiprintf_r+0x1ec>)
 80039a4:	6822      	ldr	r2, [r4, #0]
 80039a6:	1ac0      	subs	r0, r0, r3
 80039a8:	2301      	movs	r3, #1
 80039aa:	4083      	lsls	r3, r0
 80039ac:	4313      	orrs	r3, r2
 80039ae:	002e      	movs	r6, r5
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	e7ce      	b.n	8003952 <_svfiprintf_r+0x96>
 80039b4:	9b07      	ldr	r3, [sp, #28]
 80039b6:	1d19      	adds	r1, r3, #4
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	9107      	str	r1, [sp, #28]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db01      	blt.n	80039c4 <_svfiprintf_r+0x108>
 80039c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80039c2:	e004      	b.n	80039ce <_svfiprintf_r+0x112>
 80039c4:	425b      	negs	r3, r3
 80039c6:	60e3      	str	r3, [r4, #12]
 80039c8:	2302      	movs	r3, #2
 80039ca:	4313      	orrs	r3, r2
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	782b      	ldrb	r3, [r5, #0]
 80039d0:	2b2e      	cmp	r3, #46	; 0x2e
 80039d2:	d10a      	bne.n	80039ea <_svfiprintf_r+0x12e>
 80039d4:	786b      	ldrb	r3, [r5, #1]
 80039d6:	2b2a      	cmp	r3, #42	; 0x2a
 80039d8:	d135      	bne.n	8003a46 <_svfiprintf_r+0x18a>
 80039da:	9b07      	ldr	r3, [sp, #28]
 80039dc:	3502      	adds	r5, #2
 80039de:	1d1a      	adds	r2, r3, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	9207      	str	r2, [sp, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	db2b      	blt.n	8003a40 <_svfiprintf_r+0x184>
 80039e8:	9309      	str	r3, [sp, #36]	; 0x24
 80039ea:	4e30      	ldr	r6, [pc, #192]	; (8003aac <_svfiprintf_r+0x1f0>)
 80039ec:	2203      	movs	r2, #3
 80039ee:	0030      	movs	r0, r6
 80039f0:	7829      	ldrb	r1, [r5, #0]
 80039f2:	f000 f9e5 	bl	8003dc0 <memchr>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d006      	beq.n	8003a08 <_svfiprintf_r+0x14c>
 80039fa:	2340      	movs	r3, #64	; 0x40
 80039fc:	1b80      	subs	r0, r0, r6
 80039fe:	4083      	lsls	r3, r0
 8003a00:	6822      	ldr	r2, [r4, #0]
 8003a02:	3501      	adds	r5, #1
 8003a04:	4313      	orrs	r3, r2
 8003a06:	6023      	str	r3, [r4, #0]
 8003a08:	7829      	ldrb	r1, [r5, #0]
 8003a0a:	2206      	movs	r2, #6
 8003a0c:	4828      	ldr	r0, [pc, #160]	; (8003ab0 <_svfiprintf_r+0x1f4>)
 8003a0e:	1c6e      	adds	r6, r5, #1
 8003a10:	7621      	strb	r1, [r4, #24]
 8003a12:	f000 f9d5 	bl	8003dc0 <memchr>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d03c      	beq.n	8003a94 <_svfiprintf_r+0x1d8>
 8003a1a:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <_svfiprintf_r+0x1f8>)
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d125      	bne.n	8003a6c <_svfiprintf_r+0x1b0>
 8003a20:	2207      	movs	r2, #7
 8003a22:	9b07      	ldr	r3, [sp, #28]
 8003a24:	3307      	adds	r3, #7
 8003a26:	4393      	bics	r3, r2
 8003a28:	3308      	adds	r3, #8
 8003a2a:	9307      	str	r3, [sp, #28]
 8003a2c:	6963      	ldr	r3, [r4, #20]
 8003a2e:	9a04      	ldr	r2, [sp, #16]
 8003a30:	189b      	adds	r3, r3, r2
 8003a32:	6163      	str	r3, [r4, #20]
 8003a34:	e765      	b.n	8003902 <_svfiprintf_r+0x46>
 8003a36:	4343      	muls	r3, r0
 8003a38:	0035      	movs	r5, r6
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	189b      	adds	r3, r3, r2
 8003a3e:	e7a6      	b.n	800398e <_svfiprintf_r+0xd2>
 8003a40:	2301      	movs	r3, #1
 8003a42:	425b      	negs	r3, r3
 8003a44:	e7d0      	b.n	80039e8 <_svfiprintf_r+0x12c>
 8003a46:	2300      	movs	r3, #0
 8003a48:	200a      	movs	r0, #10
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	3501      	adds	r5, #1
 8003a4e:	6063      	str	r3, [r4, #4]
 8003a50:	7829      	ldrb	r1, [r5, #0]
 8003a52:	1c6e      	adds	r6, r5, #1
 8003a54:	3930      	subs	r1, #48	; 0x30
 8003a56:	2909      	cmp	r1, #9
 8003a58:	d903      	bls.n	8003a62 <_svfiprintf_r+0x1a6>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0c5      	beq.n	80039ea <_svfiprintf_r+0x12e>
 8003a5e:	9209      	str	r2, [sp, #36]	; 0x24
 8003a60:	e7c3      	b.n	80039ea <_svfiprintf_r+0x12e>
 8003a62:	4342      	muls	r2, r0
 8003a64:	0035      	movs	r5, r6
 8003a66:	2301      	movs	r3, #1
 8003a68:	1852      	adds	r2, r2, r1
 8003a6a:	e7f1      	b.n	8003a50 <_svfiprintf_r+0x194>
 8003a6c:	ab07      	add	r3, sp, #28
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	003a      	movs	r2, r7
 8003a72:	0021      	movs	r1, r4
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <_svfiprintf_r+0x1fc>)
 8003a76:	9803      	ldr	r0, [sp, #12]
 8003a78:	e000      	b.n	8003a7c <_svfiprintf_r+0x1c0>
 8003a7a:	bf00      	nop
 8003a7c:	9004      	str	r0, [sp, #16]
 8003a7e:	9b04      	ldr	r3, [sp, #16]
 8003a80:	3301      	adds	r3, #1
 8003a82:	d1d3      	bne.n	8003a2c <_svfiprintf_r+0x170>
 8003a84:	89bb      	ldrh	r3, [r7, #12]
 8003a86:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a88:	065b      	lsls	r3, r3, #25
 8003a8a:	d400      	bmi.n	8003a8e <_svfiprintf_r+0x1d2>
 8003a8c:	e72d      	b.n	80038ea <_svfiprintf_r+0x2e>
 8003a8e:	2001      	movs	r0, #1
 8003a90:	4240      	negs	r0, r0
 8003a92:	e72a      	b.n	80038ea <_svfiprintf_r+0x2e>
 8003a94:	ab07      	add	r3, sp, #28
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	003a      	movs	r2, r7
 8003a9a:	0021      	movs	r1, r4
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <_svfiprintf_r+0x1fc>)
 8003a9e:	9803      	ldr	r0, [sp, #12]
 8003aa0:	f000 f87c 	bl	8003b9c <_printf_i>
 8003aa4:	e7ea      	b.n	8003a7c <_svfiprintf_r+0x1c0>
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	08004178 	.word	0x08004178
 8003aac:	0800417e 	.word	0x0800417e
 8003ab0:	08004182 	.word	0x08004182
 8003ab4:	00000000 	.word	0x00000000
 8003ab8:	080037f9 	.word	0x080037f9

08003abc <_printf_common>:
 8003abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003abe:	0015      	movs	r5, r2
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	688a      	ldr	r2, [r1, #8]
 8003ac4:	690b      	ldr	r3, [r1, #16]
 8003ac6:	000c      	movs	r4, r1
 8003ac8:	9000      	str	r0, [sp, #0]
 8003aca:	4293      	cmp	r3, r2
 8003acc:	da00      	bge.n	8003ad0 <_printf_common+0x14>
 8003ace:	0013      	movs	r3, r2
 8003ad0:	0022      	movs	r2, r4
 8003ad2:	602b      	str	r3, [r5, #0]
 8003ad4:	3243      	adds	r2, #67	; 0x43
 8003ad6:	7812      	ldrb	r2, [r2, #0]
 8003ad8:	2a00      	cmp	r2, #0
 8003ada:	d001      	beq.n	8003ae0 <_printf_common+0x24>
 8003adc:	3301      	adds	r3, #1
 8003ade:	602b      	str	r3, [r5, #0]
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	069b      	lsls	r3, r3, #26
 8003ae4:	d502      	bpl.n	8003aec <_printf_common+0x30>
 8003ae6:	682b      	ldr	r3, [r5, #0]
 8003ae8:	3302      	adds	r3, #2
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	6822      	ldr	r2, [r4, #0]
 8003aee:	2306      	movs	r3, #6
 8003af0:	0017      	movs	r7, r2
 8003af2:	401f      	ands	r7, r3
 8003af4:	421a      	tst	r2, r3
 8003af6:	d027      	beq.n	8003b48 <_printf_common+0x8c>
 8003af8:	0023      	movs	r3, r4
 8003afa:	3343      	adds	r3, #67	; 0x43
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	1e5a      	subs	r2, r3, #1
 8003b00:	4193      	sbcs	r3, r2
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	0692      	lsls	r2, r2, #26
 8003b06:	d430      	bmi.n	8003b6a <_printf_common+0xae>
 8003b08:	0022      	movs	r2, r4
 8003b0a:	9901      	ldr	r1, [sp, #4]
 8003b0c:	9800      	ldr	r0, [sp, #0]
 8003b0e:	9e08      	ldr	r6, [sp, #32]
 8003b10:	3243      	adds	r2, #67	; 0x43
 8003b12:	47b0      	blx	r6
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d025      	beq.n	8003b64 <_printf_common+0xa8>
 8003b18:	2306      	movs	r3, #6
 8003b1a:	6820      	ldr	r0, [r4, #0]
 8003b1c:	682a      	ldr	r2, [r5, #0]
 8003b1e:	68e1      	ldr	r1, [r4, #12]
 8003b20:	2500      	movs	r5, #0
 8003b22:	4003      	ands	r3, r0
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d103      	bne.n	8003b30 <_printf_common+0x74>
 8003b28:	1a8d      	subs	r5, r1, r2
 8003b2a:	43eb      	mvns	r3, r5
 8003b2c:	17db      	asrs	r3, r3, #31
 8003b2e:	401d      	ands	r5, r3
 8003b30:	68a3      	ldr	r3, [r4, #8]
 8003b32:	6922      	ldr	r2, [r4, #16]
 8003b34:	4293      	cmp	r3, r2
 8003b36:	dd01      	ble.n	8003b3c <_printf_common+0x80>
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	18ed      	adds	r5, r5, r3
 8003b3c:	2700      	movs	r7, #0
 8003b3e:	42bd      	cmp	r5, r7
 8003b40:	d120      	bne.n	8003b84 <_printf_common+0xc8>
 8003b42:	2000      	movs	r0, #0
 8003b44:	e010      	b.n	8003b68 <_printf_common+0xac>
 8003b46:	3701      	adds	r7, #1
 8003b48:	68e3      	ldr	r3, [r4, #12]
 8003b4a:	682a      	ldr	r2, [r5, #0]
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	42bb      	cmp	r3, r7
 8003b50:	ddd2      	ble.n	8003af8 <_printf_common+0x3c>
 8003b52:	0022      	movs	r2, r4
 8003b54:	2301      	movs	r3, #1
 8003b56:	9901      	ldr	r1, [sp, #4]
 8003b58:	9800      	ldr	r0, [sp, #0]
 8003b5a:	9e08      	ldr	r6, [sp, #32]
 8003b5c:	3219      	adds	r2, #25
 8003b5e:	47b0      	blx	r6
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d1f0      	bne.n	8003b46 <_printf_common+0x8a>
 8003b64:	2001      	movs	r0, #1
 8003b66:	4240      	negs	r0, r0
 8003b68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b6a:	2030      	movs	r0, #48	; 0x30
 8003b6c:	18e1      	adds	r1, r4, r3
 8003b6e:	3143      	adds	r1, #67	; 0x43
 8003b70:	7008      	strb	r0, [r1, #0]
 8003b72:	0021      	movs	r1, r4
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	3145      	adds	r1, #69	; 0x45
 8003b78:	7809      	ldrb	r1, [r1, #0]
 8003b7a:	18a2      	adds	r2, r4, r2
 8003b7c:	3243      	adds	r2, #67	; 0x43
 8003b7e:	3302      	adds	r3, #2
 8003b80:	7011      	strb	r1, [r2, #0]
 8003b82:	e7c1      	b.n	8003b08 <_printf_common+0x4c>
 8003b84:	0022      	movs	r2, r4
 8003b86:	2301      	movs	r3, #1
 8003b88:	9901      	ldr	r1, [sp, #4]
 8003b8a:	9800      	ldr	r0, [sp, #0]
 8003b8c:	9e08      	ldr	r6, [sp, #32]
 8003b8e:	321a      	adds	r2, #26
 8003b90:	47b0      	blx	r6
 8003b92:	1c43      	adds	r3, r0, #1
 8003b94:	d0e6      	beq.n	8003b64 <_printf_common+0xa8>
 8003b96:	3701      	adds	r7, #1
 8003b98:	e7d1      	b.n	8003b3e <_printf_common+0x82>
	...

08003b9c <_printf_i>:
 8003b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b9e:	b08b      	sub	sp, #44	; 0x2c
 8003ba0:	9206      	str	r2, [sp, #24]
 8003ba2:	000a      	movs	r2, r1
 8003ba4:	3243      	adds	r2, #67	; 0x43
 8003ba6:	9307      	str	r3, [sp, #28]
 8003ba8:	9005      	str	r0, [sp, #20]
 8003baa:	9204      	str	r2, [sp, #16]
 8003bac:	7e0a      	ldrb	r2, [r1, #24]
 8003bae:	000c      	movs	r4, r1
 8003bb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003bb2:	2a78      	cmp	r2, #120	; 0x78
 8003bb4:	d806      	bhi.n	8003bc4 <_printf_i+0x28>
 8003bb6:	2a62      	cmp	r2, #98	; 0x62
 8003bb8:	d808      	bhi.n	8003bcc <_printf_i+0x30>
 8003bba:	2a00      	cmp	r2, #0
 8003bbc:	d100      	bne.n	8003bc0 <_printf_i+0x24>
 8003bbe:	e0c0      	b.n	8003d42 <_printf_i+0x1a6>
 8003bc0:	2a58      	cmp	r2, #88	; 0x58
 8003bc2:	d052      	beq.n	8003c6a <_printf_i+0xce>
 8003bc4:	0026      	movs	r6, r4
 8003bc6:	3642      	adds	r6, #66	; 0x42
 8003bc8:	7032      	strb	r2, [r6, #0]
 8003bca:	e022      	b.n	8003c12 <_printf_i+0x76>
 8003bcc:	0010      	movs	r0, r2
 8003bce:	3863      	subs	r0, #99	; 0x63
 8003bd0:	2815      	cmp	r0, #21
 8003bd2:	d8f7      	bhi.n	8003bc4 <_printf_i+0x28>
 8003bd4:	f7fc faa0 	bl	8000118 <__gnu_thumb1_case_shi>
 8003bd8:	001f0016 	.word	0x001f0016
 8003bdc:	fff6fff6 	.word	0xfff6fff6
 8003be0:	fff6fff6 	.word	0xfff6fff6
 8003be4:	fff6001f 	.word	0xfff6001f
 8003be8:	fff6fff6 	.word	0xfff6fff6
 8003bec:	00a8fff6 	.word	0x00a8fff6
 8003bf0:	009a0036 	.word	0x009a0036
 8003bf4:	fff6fff6 	.word	0xfff6fff6
 8003bf8:	fff600b9 	.word	0xfff600b9
 8003bfc:	fff60036 	.word	0xfff60036
 8003c00:	009efff6 	.word	0x009efff6
 8003c04:	0026      	movs	r6, r4
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	3642      	adds	r6, #66	; 0x42
 8003c0a:	1d11      	adds	r1, r2, #4
 8003c0c:	6019      	str	r1, [r3, #0]
 8003c0e:	6813      	ldr	r3, [r2, #0]
 8003c10:	7033      	strb	r3, [r6, #0]
 8003c12:	2301      	movs	r3, #1
 8003c14:	e0a7      	b.n	8003d66 <_printf_i+0x1ca>
 8003c16:	6808      	ldr	r0, [r1, #0]
 8003c18:	6819      	ldr	r1, [r3, #0]
 8003c1a:	1d0a      	adds	r2, r1, #4
 8003c1c:	0605      	lsls	r5, r0, #24
 8003c1e:	d50b      	bpl.n	8003c38 <_printf_i+0x9c>
 8003c20:	680d      	ldr	r5, [r1, #0]
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	2d00      	cmp	r5, #0
 8003c26:	da03      	bge.n	8003c30 <_printf_i+0x94>
 8003c28:	232d      	movs	r3, #45	; 0x2d
 8003c2a:	9a04      	ldr	r2, [sp, #16]
 8003c2c:	426d      	negs	r5, r5
 8003c2e:	7013      	strb	r3, [r2, #0]
 8003c30:	4b61      	ldr	r3, [pc, #388]	; (8003db8 <_printf_i+0x21c>)
 8003c32:	270a      	movs	r7, #10
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	e032      	b.n	8003c9e <_printf_i+0x102>
 8003c38:	680d      	ldr	r5, [r1, #0]
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	0641      	lsls	r1, r0, #25
 8003c3e:	d5f1      	bpl.n	8003c24 <_printf_i+0x88>
 8003c40:	b22d      	sxth	r5, r5
 8003c42:	e7ef      	b.n	8003c24 <_printf_i+0x88>
 8003c44:	680d      	ldr	r5, [r1, #0]
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	1d08      	adds	r0, r1, #4
 8003c4a:	6018      	str	r0, [r3, #0]
 8003c4c:	062e      	lsls	r6, r5, #24
 8003c4e:	d501      	bpl.n	8003c54 <_printf_i+0xb8>
 8003c50:	680d      	ldr	r5, [r1, #0]
 8003c52:	e003      	b.n	8003c5c <_printf_i+0xc0>
 8003c54:	066d      	lsls	r5, r5, #25
 8003c56:	d5fb      	bpl.n	8003c50 <_printf_i+0xb4>
 8003c58:	680d      	ldr	r5, [r1, #0]
 8003c5a:	b2ad      	uxth	r5, r5
 8003c5c:	4b56      	ldr	r3, [pc, #344]	; (8003db8 <_printf_i+0x21c>)
 8003c5e:	270a      	movs	r7, #10
 8003c60:	9303      	str	r3, [sp, #12]
 8003c62:	2a6f      	cmp	r2, #111	; 0x6f
 8003c64:	d117      	bne.n	8003c96 <_printf_i+0xfa>
 8003c66:	2708      	movs	r7, #8
 8003c68:	e015      	b.n	8003c96 <_printf_i+0xfa>
 8003c6a:	3145      	adds	r1, #69	; 0x45
 8003c6c:	700a      	strb	r2, [r1, #0]
 8003c6e:	4a52      	ldr	r2, [pc, #328]	; (8003db8 <_printf_i+0x21c>)
 8003c70:	9203      	str	r2, [sp, #12]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	6821      	ldr	r1, [r4, #0]
 8003c76:	ca20      	ldmia	r2!, {r5}
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	0608      	lsls	r0, r1, #24
 8003c7c:	d550      	bpl.n	8003d20 <_printf_i+0x184>
 8003c7e:	07cb      	lsls	r3, r1, #31
 8003c80:	d502      	bpl.n	8003c88 <_printf_i+0xec>
 8003c82:	2320      	movs	r3, #32
 8003c84:	4319      	orrs	r1, r3
 8003c86:	6021      	str	r1, [r4, #0]
 8003c88:	2710      	movs	r7, #16
 8003c8a:	2d00      	cmp	r5, #0
 8003c8c:	d103      	bne.n	8003c96 <_printf_i+0xfa>
 8003c8e:	2320      	movs	r3, #32
 8003c90:	6822      	ldr	r2, [r4, #0]
 8003c92:	439a      	bics	r2, r3
 8003c94:	6022      	str	r2, [r4, #0]
 8003c96:	0023      	movs	r3, r4
 8003c98:	2200      	movs	r2, #0
 8003c9a:	3343      	adds	r3, #67	; 0x43
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	6863      	ldr	r3, [r4, #4]
 8003ca0:	60a3      	str	r3, [r4, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	db03      	blt.n	8003cae <_printf_i+0x112>
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	6821      	ldr	r1, [r4, #0]
 8003caa:	4391      	bics	r1, r2
 8003cac:	6021      	str	r1, [r4, #0]
 8003cae:	2d00      	cmp	r5, #0
 8003cb0:	d102      	bne.n	8003cb8 <_printf_i+0x11c>
 8003cb2:	9e04      	ldr	r6, [sp, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00c      	beq.n	8003cd2 <_printf_i+0x136>
 8003cb8:	9e04      	ldr	r6, [sp, #16]
 8003cba:	0028      	movs	r0, r5
 8003cbc:	0039      	movs	r1, r7
 8003cbe:	f7fc fabb 	bl	8000238 <__aeabi_uidivmod>
 8003cc2:	9b03      	ldr	r3, [sp, #12]
 8003cc4:	3e01      	subs	r6, #1
 8003cc6:	5c5b      	ldrb	r3, [r3, r1]
 8003cc8:	7033      	strb	r3, [r6, #0]
 8003cca:	002b      	movs	r3, r5
 8003ccc:	0005      	movs	r5, r0
 8003cce:	429f      	cmp	r7, r3
 8003cd0:	d9f3      	bls.n	8003cba <_printf_i+0x11e>
 8003cd2:	2f08      	cmp	r7, #8
 8003cd4:	d109      	bne.n	8003cea <_printf_i+0x14e>
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	07db      	lsls	r3, r3, #31
 8003cda:	d506      	bpl.n	8003cea <_printf_i+0x14e>
 8003cdc:	6863      	ldr	r3, [r4, #4]
 8003cde:	6922      	ldr	r2, [r4, #16]
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	dc02      	bgt.n	8003cea <_printf_i+0x14e>
 8003ce4:	2330      	movs	r3, #48	; 0x30
 8003ce6:	3e01      	subs	r6, #1
 8003ce8:	7033      	strb	r3, [r6, #0]
 8003cea:	9b04      	ldr	r3, [sp, #16]
 8003cec:	1b9b      	subs	r3, r3, r6
 8003cee:	6123      	str	r3, [r4, #16]
 8003cf0:	9b07      	ldr	r3, [sp, #28]
 8003cf2:	0021      	movs	r1, r4
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	9805      	ldr	r0, [sp, #20]
 8003cf8:	9b06      	ldr	r3, [sp, #24]
 8003cfa:	aa09      	add	r2, sp, #36	; 0x24
 8003cfc:	f7ff fede 	bl	8003abc <_printf_common>
 8003d00:	1c43      	adds	r3, r0, #1
 8003d02:	d135      	bne.n	8003d70 <_printf_i+0x1d4>
 8003d04:	2001      	movs	r0, #1
 8003d06:	4240      	negs	r0, r0
 8003d08:	b00b      	add	sp, #44	; 0x2c
 8003d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	6809      	ldr	r1, [r1, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	6022      	str	r2, [r4, #0]
 8003d14:	0022      	movs	r2, r4
 8003d16:	2178      	movs	r1, #120	; 0x78
 8003d18:	3245      	adds	r2, #69	; 0x45
 8003d1a:	7011      	strb	r1, [r2, #0]
 8003d1c:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <_printf_i+0x220>)
 8003d1e:	e7a7      	b.n	8003c70 <_printf_i+0xd4>
 8003d20:	0648      	lsls	r0, r1, #25
 8003d22:	d5ac      	bpl.n	8003c7e <_printf_i+0xe2>
 8003d24:	b2ad      	uxth	r5, r5
 8003d26:	e7aa      	b.n	8003c7e <_printf_i+0xe2>
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	680d      	ldr	r5, [r1, #0]
 8003d2c:	1d10      	adds	r0, r2, #4
 8003d2e:	6949      	ldr	r1, [r1, #20]
 8003d30:	6018      	str	r0, [r3, #0]
 8003d32:	6813      	ldr	r3, [r2, #0]
 8003d34:	062e      	lsls	r6, r5, #24
 8003d36:	d501      	bpl.n	8003d3c <_printf_i+0x1a0>
 8003d38:	6019      	str	r1, [r3, #0]
 8003d3a:	e002      	b.n	8003d42 <_printf_i+0x1a6>
 8003d3c:	066d      	lsls	r5, r5, #25
 8003d3e:	d5fb      	bpl.n	8003d38 <_printf_i+0x19c>
 8003d40:	8019      	strh	r1, [r3, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	9e04      	ldr	r6, [sp, #16]
 8003d46:	6123      	str	r3, [r4, #16]
 8003d48:	e7d2      	b.n	8003cf0 <_printf_i+0x154>
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	1d11      	adds	r1, r2, #4
 8003d4e:	6019      	str	r1, [r3, #0]
 8003d50:	6816      	ldr	r6, [r2, #0]
 8003d52:	2100      	movs	r1, #0
 8003d54:	0030      	movs	r0, r6
 8003d56:	6862      	ldr	r2, [r4, #4]
 8003d58:	f000 f832 	bl	8003dc0 <memchr>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d001      	beq.n	8003d64 <_printf_i+0x1c8>
 8003d60:	1b80      	subs	r0, r0, r6
 8003d62:	6060      	str	r0, [r4, #4]
 8003d64:	6863      	ldr	r3, [r4, #4]
 8003d66:	6123      	str	r3, [r4, #16]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	9a04      	ldr	r2, [sp, #16]
 8003d6c:	7013      	strb	r3, [r2, #0]
 8003d6e:	e7bf      	b.n	8003cf0 <_printf_i+0x154>
 8003d70:	6923      	ldr	r3, [r4, #16]
 8003d72:	0032      	movs	r2, r6
 8003d74:	9906      	ldr	r1, [sp, #24]
 8003d76:	9805      	ldr	r0, [sp, #20]
 8003d78:	9d07      	ldr	r5, [sp, #28]
 8003d7a:	47a8      	blx	r5
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d0c1      	beq.n	8003d04 <_printf_i+0x168>
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	079b      	lsls	r3, r3, #30
 8003d84:	d415      	bmi.n	8003db2 <_printf_i+0x216>
 8003d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d88:	68e0      	ldr	r0, [r4, #12]
 8003d8a:	4298      	cmp	r0, r3
 8003d8c:	dabc      	bge.n	8003d08 <_printf_i+0x16c>
 8003d8e:	0018      	movs	r0, r3
 8003d90:	e7ba      	b.n	8003d08 <_printf_i+0x16c>
 8003d92:	0022      	movs	r2, r4
 8003d94:	2301      	movs	r3, #1
 8003d96:	9906      	ldr	r1, [sp, #24]
 8003d98:	9805      	ldr	r0, [sp, #20]
 8003d9a:	9e07      	ldr	r6, [sp, #28]
 8003d9c:	3219      	adds	r2, #25
 8003d9e:	47b0      	blx	r6
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d0af      	beq.n	8003d04 <_printf_i+0x168>
 8003da4:	3501      	adds	r5, #1
 8003da6:	68e3      	ldr	r3, [r4, #12]
 8003da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	42ab      	cmp	r3, r5
 8003dae:	dcf0      	bgt.n	8003d92 <_printf_i+0x1f6>
 8003db0:	e7e9      	b.n	8003d86 <_printf_i+0x1ea>
 8003db2:	2500      	movs	r5, #0
 8003db4:	e7f7      	b.n	8003da6 <_printf_i+0x20a>
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	08004189 	.word	0x08004189
 8003dbc:	0800419a 	.word	0x0800419a

08003dc0 <memchr>:
 8003dc0:	b2c9      	uxtb	r1, r1
 8003dc2:	1882      	adds	r2, r0, r2
 8003dc4:	4290      	cmp	r0, r2
 8003dc6:	d101      	bne.n	8003dcc <memchr+0xc>
 8003dc8:	2000      	movs	r0, #0
 8003dca:	4770      	bx	lr
 8003dcc:	7803      	ldrb	r3, [r0, #0]
 8003dce:	428b      	cmp	r3, r1
 8003dd0:	d0fb      	beq.n	8003dca <memchr+0xa>
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	e7f6      	b.n	8003dc4 <memchr+0x4>

08003dd6 <memcpy>:
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d100      	bne.n	8003de0 <memcpy+0xa>
 8003dde:	bd10      	pop	{r4, pc}
 8003de0:	5ccc      	ldrb	r4, [r1, r3]
 8003de2:	54c4      	strb	r4, [r0, r3]
 8003de4:	3301      	adds	r3, #1
 8003de6:	e7f8      	b.n	8003dda <memcpy+0x4>

08003de8 <memmove>:
 8003de8:	b510      	push	{r4, lr}
 8003dea:	4288      	cmp	r0, r1
 8003dec:	d902      	bls.n	8003df4 <memmove+0xc>
 8003dee:	188b      	adds	r3, r1, r2
 8003df0:	4298      	cmp	r0, r3
 8003df2:	d303      	bcc.n	8003dfc <memmove+0x14>
 8003df4:	2300      	movs	r3, #0
 8003df6:	e007      	b.n	8003e08 <memmove+0x20>
 8003df8:	5c8b      	ldrb	r3, [r1, r2]
 8003dfa:	5483      	strb	r3, [r0, r2]
 8003dfc:	3a01      	subs	r2, #1
 8003dfe:	d2fb      	bcs.n	8003df8 <memmove+0x10>
 8003e00:	bd10      	pop	{r4, pc}
 8003e02:	5ccc      	ldrb	r4, [r1, r3]
 8003e04:	54c4      	strb	r4, [r0, r3]
 8003e06:	3301      	adds	r3, #1
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d1fa      	bne.n	8003e02 <memmove+0x1a>
 8003e0c:	e7f8      	b.n	8003e00 <memmove+0x18>
	...

08003e10 <_free_r>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	0005      	movs	r5, r0
 8003e14:	2900      	cmp	r1, #0
 8003e16:	d010      	beq.n	8003e3a <_free_r+0x2a>
 8003e18:	1f0c      	subs	r4, r1, #4
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	da00      	bge.n	8003e22 <_free_r+0x12>
 8003e20:	18e4      	adds	r4, r4, r3
 8003e22:	0028      	movs	r0, r5
 8003e24:	f000 f8d4 	bl	8003fd0 <__malloc_lock>
 8003e28:	4a1d      	ldr	r2, [pc, #116]	; (8003ea0 <_free_r+0x90>)
 8003e2a:	6813      	ldr	r3, [r2, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <_free_r+0x2c>
 8003e30:	6063      	str	r3, [r4, #4]
 8003e32:	6014      	str	r4, [r2, #0]
 8003e34:	0028      	movs	r0, r5
 8003e36:	f000 f8d3 	bl	8003fe0 <__malloc_unlock>
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	42a3      	cmp	r3, r4
 8003e3e:	d908      	bls.n	8003e52 <_free_r+0x42>
 8003e40:	6821      	ldr	r1, [r4, #0]
 8003e42:	1860      	adds	r0, r4, r1
 8003e44:	4283      	cmp	r3, r0
 8003e46:	d1f3      	bne.n	8003e30 <_free_r+0x20>
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	1841      	adds	r1, r0, r1
 8003e4e:	6021      	str	r1, [r4, #0]
 8003e50:	e7ee      	b.n	8003e30 <_free_r+0x20>
 8003e52:	001a      	movs	r2, r3
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <_free_r+0x4e>
 8003e5a:	42a3      	cmp	r3, r4
 8003e5c:	d9f9      	bls.n	8003e52 <_free_r+0x42>
 8003e5e:	6811      	ldr	r1, [r2, #0]
 8003e60:	1850      	adds	r0, r2, r1
 8003e62:	42a0      	cmp	r0, r4
 8003e64:	d10b      	bne.n	8003e7e <_free_r+0x6e>
 8003e66:	6820      	ldr	r0, [r4, #0]
 8003e68:	1809      	adds	r1, r1, r0
 8003e6a:	1850      	adds	r0, r2, r1
 8003e6c:	6011      	str	r1, [r2, #0]
 8003e6e:	4283      	cmp	r3, r0
 8003e70:	d1e0      	bne.n	8003e34 <_free_r+0x24>
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	1841      	adds	r1, r0, r1
 8003e78:	6011      	str	r1, [r2, #0]
 8003e7a:	6053      	str	r3, [r2, #4]
 8003e7c:	e7da      	b.n	8003e34 <_free_r+0x24>
 8003e7e:	42a0      	cmp	r0, r4
 8003e80:	d902      	bls.n	8003e88 <_free_r+0x78>
 8003e82:	230c      	movs	r3, #12
 8003e84:	602b      	str	r3, [r5, #0]
 8003e86:	e7d5      	b.n	8003e34 <_free_r+0x24>
 8003e88:	6821      	ldr	r1, [r4, #0]
 8003e8a:	1860      	adds	r0, r4, r1
 8003e8c:	4283      	cmp	r3, r0
 8003e8e:	d103      	bne.n	8003e98 <_free_r+0x88>
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	1841      	adds	r1, r0, r1
 8003e96:	6021      	str	r1, [r4, #0]
 8003e98:	6063      	str	r3, [r4, #4]
 8003e9a:	6054      	str	r4, [r2, #4]
 8003e9c:	e7ca      	b.n	8003e34 <_free_r+0x24>
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	200000a4 	.word	0x200000a4

08003ea4 <_malloc_r>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	1ccd      	adds	r5, r1, #3
 8003eaa:	439d      	bics	r5, r3
 8003eac:	3508      	adds	r5, #8
 8003eae:	0006      	movs	r6, r0
 8003eb0:	2d0c      	cmp	r5, #12
 8003eb2:	d21f      	bcs.n	8003ef4 <_malloc_r+0x50>
 8003eb4:	250c      	movs	r5, #12
 8003eb6:	42a9      	cmp	r1, r5
 8003eb8:	d81e      	bhi.n	8003ef8 <_malloc_r+0x54>
 8003eba:	0030      	movs	r0, r6
 8003ebc:	f000 f888 	bl	8003fd0 <__malloc_lock>
 8003ec0:	4925      	ldr	r1, [pc, #148]	; (8003f58 <_malloc_r+0xb4>)
 8003ec2:	680a      	ldr	r2, [r1, #0]
 8003ec4:	0014      	movs	r4, r2
 8003ec6:	2c00      	cmp	r4, #0
 8003ec8:	d11a      	bne.n	8003f00 <_malloc_r+0x5c>
 8003eca:	4f24      	ldr	r7, [pc, #144]	; (8003f5c <_malloc_r+0xb8>)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <_malloc_r+0x38>
 8003ed2:	0021      	movs	r1, r4
 8003ed4:	0030      	movs	r0, r6
 8003ed6:	f000 f869 	bl	8003fac <_sbrk_r>
 8003eda:	6038      	str	r0, [r7, #0]
 8003edc:	0029      	movs	r1, r5
 8003ede:	0030      	movs	r0, r6
 8003ee0:	f000 f864 	bl	8003fac <_sbrk_r>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d12b      	bne.n	8003f40 <_malloc_r+0x9c>
 8003ee8:	230c      	movs	r3, #12
 8003eea:	0030      	movs	r0, r6
 8003eec:	6033      	str	r3, [r6, #0]
 8003eee:	f000 f877 	bl	8003fe0 <__malloc_unlock>
 8003ef2:	e003      	b.n	8003efc <_malloc_r+0x58>
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	dade      	bge.n	8003eb6 <_malloc_r+0x12>
 8003ef8:	230c      	movs	r3, #12
 8003efa:	6033      	str	r3, [r6, #0]
 8003efc:	2000      	movs	r0, #0
 8003efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	1b5b      	subs	r3, r3, r5
 8003f04:	d419      	bmi.n	8003f3a <_malloc_r+0x96>
 8003f06:	2b0b      	cmp	r3, #11
 8003f08:	d903      	bls.n	8003f12 <_malloc_r+0x6e>
 8003f0a:	6023      	str	r3, [r4, #0]
 8003f0c:	18e4      	adds	r4, r4, r3
 8003f0e:	6025      	str	r5, [r4, #0]
 8003f10:	e003      	b.n	8003f1a <_malloc_r+0x76>
 8003f12:	6863      	ldr	r3, [r4, #4]
 8003f14:	42a2      	cmp	r2, r4
 8003f16:	d10e      	bne.n	8003f36 <_malloc_r+0x92>
 8003f18:	600b      	str	r3, [r1, #0]
 8003f1a:	0030      	movs	r0, r6
 8003f1c:	f000 f860 	bl	8003fe0 <__malloc_unlock>
 8003f20:	0020      	movs	r0, r4
 8003f22:	2207      	movs	r2, #7
 8003f24:	300b      	adds	r0, #11
 8003f26:	1d23      	adds	r3, r4, #4
 8003f28:	4390      	bics	r0, r2
 8003f2a:	1ac2      	subs	r2, r0, r3
 8003f2c:	4298      	cmp	r0, r3
 8003f2e:	d0e6      	beq.n	8003efe <_malloc_r+0x5a>
 8003f30:	1a1b      	subs	r3, r3, r0
 8003f32:	50a3      	str	r3, [r4, r2]
 8003f34:	e7e3      	b.n	8003efe <_malloc_r+0x5a>
 8003f36:	6053      	str	r3, [r2, #4]
 8003f38:	e7ef      	b.n	8003f1a <_malloc_r+0x76>
 8003f3a:	0022      	movs	r2, r4
 8003f3c:	6864      	ldr	r4, [r4, #4]
 8003f3e:	e7c2      	b.n	8003ec6 <_malloc_r+0x22>
 8003f40:	2303      	movs	r3, #3
 8003f42:	1cc4      	adds	r4, r0, #3
 8003f44:	439c      	bics	r4, r3
 8003f46:	42a0      	cmp	r0, r4
 8003f48:	d0e1      	beq.n	8003f0e <_malloc_r+0x6a>
 8003f4a:	1a21      	subs	r1, r4, r0
 8003f4c:	0030      	movs	r0, r6
 8003f4e:	f000 f82d 	bl	8003fac <_sbrk_r>
 8003f52:	1c43      	adds	r3, r0, #1
 8003f54:	d1db      	bne.n	8003f0e <_malloc_r+0x6a>
 8003f56:	e7c7      	b.n	8003ee8 <_malloc_r+0x44>
 8003f58:	200000a4 	.word	0x200000a4
 8003f5c:	200000a8 	.word	0x200000a8

08003f60 <_realloc_r>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	0007      	movs	r7, r0
 8003f64:	000d      	movs	r5, r1
 8003f66:	0016      	movs	r6, r2
 8003f68:	2900      	cmp	r1, #0
 8003f6a:	d105      	bne.n	8003f78 <_realloc_r+0x18>
 8003f6c:	0011      	movs	r1, r2
 8003f6e:	f7ff ff99 	bl	8003ea4 <_malloc_r>
 8003f72:	0004      	movs	r4, r0
 8003f74:	0020      	movs	r0, r4
 8003f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f78:	2a00      	cmp	r2, #0
 8003f7a:	d103      	bne.n	8003f84 <_realloc_r+0x24>
 8003f7c:	f7ff ff48 	bl	8003e10 <_free_r>
 8003f80:	0034      	movs	r4, r6
 8003f82:	e7f7      	b.n	8003f74 <_realloc_r+0x14>
 8003f84:	f000 f834 	bl	8003ff0 <_malloc_usable_size_r>
 8003f88:	002c      	movs	r4, r5
 8003f8a:	42b0      	cmp	r0, r6
 8003f8c:	d2f2      	bcs.n	8003f74 <_realloc_r+0x14>
 8003f8e:	0031      	movs	r1, r6
 8003f90:	0038      	movs	r0, r7
 8003f92:	f7ff ff87 	bl	8003ea4 <_malloc_r>
 8003f96:	1e04      	subs	r4, r0, #0
 8003f98:	d0ec      	beq.n	8003f74 <_realloc_r+0x14>
 8003f9a:	0029      	movs	r1, r5
 8003f9c:	0032      	movs	r2, r6
 8003f9e:	f7ff ff1a 	bl	8003dd6 <memcpy>
 8003fa2:	0029      	movs	r1, r5
 8003fa4:	0038      	movs	r0, r7
 8003fa6:	f7ff ff33 	bl	8003e10 <_free_r>
 8003faa:	e7e3      	b.n	8003f74 <_realloc_r+0x14>

08003fac <_sbrk_r>:
 8003fac:	2300      	movs	r3, #0
 8003fae:	b570      	push	{r4, r5, r6, lr}
 8003fb0:	4d06      	ldr	r5, [pc, #24]	; (8003fcc <_sbrk_r+0x20>)
 8003fb2:	0004      	movs	r4, r0
 8003fb4:	0008      	movs	r0, r1
 8003fb6:	602b      	str	r3, [r5, #0]
 8003fb8:	f7fd f9aa 	bl	8001310 <_sbrk>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d103      	bne.n	8003fc8 <_sbrk_r+0x1c>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d000      	beq.n	8003fc8 <_sbrk_r+0x1c>
 8003fc6:	6023      	str	r3, [r4, #0]
 8003fc8:	bd70      	pop	{r4, r5, r6, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	20000174 	.word	0x20000174

08003fd0 <__malloc_lock>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	4802      	ldr	r0, [pc, #8]	; (8003fdc <__malloc_lock+0xc>)
 8003fd4:	f000 f814 	bl	8004000 <__retarget_lock_acquire_recursive>
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	2000017c 	.word	0x2000017c

08003fe0 <__malloc_unlock>:
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	4802      	ldr	r0, [pc, #8]	; (8003fec <__malloc_unlock+0xc>)
 8003fe4:	f000 f80d 	bl	8004002 <__retarget_lock_release_recursive>
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	2000017c 	.word	0x2000017c

08003ff0 <_malloc_usable_size_r>:
 8003ff0:	1f0b      	subs	r3, r1, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	1f18      	subs	r0, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da01      	bge.n	8003ffe <_malloc_usable_size_r+0xe>
 8003ffa:	580b      	ldr	r3, [r1, r0]
 8003ffc:	18c0      	adds	r0, r0, r3
 8003ffe:	4770      	bx	lr

08004000 <__retarget_lock_acquire_recursive>:
 8004000:	4770      	bx	lr

08004002 <__retarget_lock_release_recursive>:
 8004002:	4770      	bx	lr

08004004 <_init>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400a:	bc08      	pop	{r3}
 800400c:	469e      	mov	lr, r3
 800400e:	4770      	bx	lr

08004010 <_fini>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004016:	bc08      	pop	{r3}
 8004018:	469e      	mov	lr, r3
 800401a:	4770      	bx	lr
